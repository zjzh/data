{"package_name": "java.text", "subclass_list": ["SimpleDateFormat", "SimpleDateFormat"], "class_description": "DateFormat is an abstract class for date/time formatting subclasses which\n formats and parses dates or time in a language-independent manner.\n The date/time formatting subclass, such as SimpleDateFormat, allows for\n formatting (i.e., date \u2192 text), parsing (text \u2192 date), and\n normalization.  The date is represented as a Date object or\n as the milliseconds since January 1, 1970, 00:00:00 GMT. DateFormat provides many class methods for obtaining default date/time\n formatters based on the default or a given locale and a number of formatting\n styles. The formatting styles include FULL, LONG, MEDIUM, and SHORT. More\n detail and examples of using these styles are provided in the method\n descriptions. DateFormat helps you to format and parse dates for any locale.\n Your code can be completely independent of the locale conventions for\n months, days of the week, or even the calendar format: lunar vs. solar. To format a date for the current Locale, use one of the\n static factory methods: If you are formatting multiple dates, it is\n more efficient to get the format and use it multiple times so that\n the system doesn't have to fetch the information about the local\n language and country conventions multiple times. To format a date for a different Locale, specify it in the\n call to getDateInstance(). You can use a DateFormat to parse also. Use getDateInstance to get the normal date format for that country.\n There are other static factory methods available.\n Use getTimeInstance to get the time format for that country.\n Use getDateTimeInstance to get a date and time format. You can pass in\n different options to these factory methods to control the length of the\n result; from SHORT to MEDIUM to LONG to FULL. The exact result depends\n on the locale, but generally: You can also set the time zone on the format if you wish.\n If you want even more control over the format or parsing,\n (or want to give your users more control),\n you can try casting the DateFormat you get from the factory methods\n to a SimpleDateFormat. This will work for the majority\n of countries; just remember to put it in a try block in case you\n encounter an unusual one. You can also use forms of the parse and format methods with\n ParsePosition and FieldPosition to\n allow you to Date formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Format"], "Methods": [], "class_name": "DateFormat", "Vars": null}