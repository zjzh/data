{"package_name": "java.text", "subclass_list": ["ChoiceFormat", "DecimalFormat", "ChoiceFormat", "DecimalFormat"], "class_description": "NumberFormat is the abstract base class for all number\n formats. This class provides the interface for formatting and parsing\n numbers. NumberFormat also provides methods for determining\n which locales have number formats, and what their names are. NumberFormat helps you to format and parse numbers for any locale.\n Your code can be completely independent of the locale conventions for\n decimal points, thousands-separators, or even the particular decimal\n digits used, or whether the number format is even decimal. To format a number for the current Locale, use one of the factory\n class methods: You can also control the display of numbers with such methods as\n setMinimumFractionDigits.\n If you want even more control over the format or parsing,\n or want to give your users more control,\n you can try casting the NumberFormat you get from the factory methods\n to a DecimalFormat. This will work for the vast majority\n of locales; just remember to put it in a try block in case you\n encounter an unusual one. NumberFormat and DecimalFormat are designed such that some controls\n work for formatting and others work for parsing.  The following is\n the detailed description for each these control methods, setParseIntegerOnly : only affects parsing, e.g.\n if true,  \"3456.78\" \u2192 3456 (and leaves the parse position just after index 6)\n if false, \"3456.78\" \u2192 3456.78 (and leaves the parse position just after index 8)\n This is independent of formatting.  If you want to not show a decimal point\n where there might be no digits after the decimal point, use\n setDecimalSeparatorAlwaysShown. setDecimalSeparatorAlwaysShown : only affects formatting, and only where\n there might be no digits after the decimal point, such as with a pattern\n like \"#,##0.##\", e.g.,\n if true,  3456.00 \u2192 \"3,456.\"\n if false, 3456.00 \u2192 \"3456\"\n This is independent of parsing.  If you want parsing to stop at the decimal\n point, use setParseIntegerOnly. You can also use forms of the parse and format\n methods with ParsePosition and FieldPosition to\n allow you to: Number formats are generally not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Format"], "Methods": [], "class_name": "NumberFormat", "Vars": null}