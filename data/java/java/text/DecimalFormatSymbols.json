{"package_name": "java.text", "subclass_list": [], "class_description": "This class represents the set of symbols (such as the decimal separator,\n the grouping separator, and so on) needed by DecimalFormat\n to format numbers. DecimalFormat creates for itself an instance of\n DecimalFormatSymbols from its locale data.  If you need to change any\n of these symbols, you can get the DecimalFormatSymbols object from\n your DecimalFormat and modify it. ", "class_type": "class", "typealias": [], "interface_list": ["Cloneable", "Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a DecimalFormatSymbols object for the default\n FORMAT locale.\n It is recommended that the getInstance method is used\n instead.\n \nThis is equivalent to calling\n DecimalFormatSymbols(Locale.getDefault(Locale.Category.FORMAT)).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["locale"], "param_type": "Locale", "param_description": " the desired locale"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a DecimalFormatSymbols object for the given locale.\n It is recommended that the getInstance method is used\n instead.\n If the specified locale contains the Locale.UNICODE_LOCALE_EXTENSION\n for the numbering system, the instance is initialized with the specified numbering\n system if the JRE implementation supports it. For example,\n \n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this instance."], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Standard override.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the reference object with which to compare."}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this object is the same as the obj\n          argument; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Override equals.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": true, "return_value": {"return_name": [], "return_description": ["an array of locales for which localized\n         DecimalFormatSymbols instances are available."], "return_type": ["Locale[]"]}, "method_name": "getAvailableLocales", "method_description": "Returns an array of all locales for which the\n getInstance methods of this class can return\n localized instances.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the currency used, or null"], "return_type": ["Currency"]}, "method_name": "getCurrency", "method_description": "Gets the currency of these DecimalFormatSymbols. May be null if the\n currency symbol attribute was previously set to a value that's not\n a valid ISO 4217 currency code.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the currency symbol"], "return_type": ["String"]}, "method_name": "getCurrencySymbol", "method_description": "Returns the currency symbol for the currency of these\n DecimalFormatSymbols in their locale.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character used for decimal sign"], "return_type": ["char"]}, "method_name": "getDecimalSeparator", "method_description": "Gets the character used for decimal sign. Different for French, etc.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character used for a digit in a pattern"], "return_type": ["char"]}, "method_name": "getDigit", "method_description": "Gets the character used for a digit in a pattern.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the exponent separator string"], "return_type": ["String"]}, "method_name": "getExponentSeparator", "method_description": "Returns the string used to separate the mantissa from the exponent.\n Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the grouping separator"], "return_type": ["char"]}, "method_name": "getGroupingSeparator", "method_description": "Gets the character used for thousands separator. Different for French, etc.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the string representing infinity"], "return_type": ["String"]}, "method_name": "getInfinity", "method_description": "Gets the string used to represent infinity. Almost always left\n unchanged.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": true, "return_value": {"return_name": [], "return_description": ["a DecimalFormatSymbols instance."], "return_type": ["DecimalFormatSymbols"]}, "method_name": "getInstance", "method_description": "Gets the DecimalFormatSymbols instance for the default\n locale.\n \nThis is equivalent to calling\n getInstance(Locale.getDefault(Locale.Category.FORMAT)).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["locale"], "param_type": "Locale", "param_description": " the desired locale."}], "class_name": "DecimalFormatSymbols", "is_static": true, "return_value": {"return_name": [], "return_description": ["a DecimalFormatSymbols instance."], "return_type": ["DecimalFormatSymbols"]}, "method_name": "getInstance", "method_description": "Gets the DecimalFormatSymbols instance for the specified\n locale.\n If the specified locale contains the Locale.UNICODE_LOCALE_EXTENSION\n for the numbering system, the instance is initialized with the specified numbering\n system if the JRE implementation supports it. For example,\n \n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the currency code"], "return_type": ["String"]}, "method_name": "getInternationalCurrencySymbol", "method_description": "Returns the ISO 4217 currency code of the currency of these\n DecimalFormatSymbols.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character representing minus sign"], "return_type": ["char"]}, "method_name": "getMinusSign", "method_description": "Gets the character used to represent minus sign. If no explicit\n negative format is specified, one is formed by prefixing\n minusSign to the positive format.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the monetary decimal separator"], "return_type": ["char"]}, "method_name": "getMonetaryDecimalSeparator", "method_description": "Returns the monetary decimal separator.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the string representing \"not a number\""], "return_type": ["String"]}, "method_name": "getNaN", "method_description": "Gets the string used to represent \"not a number\". Almost always left\n unchanged.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the pattern separator"], "return_type": ["char"]}, "method_name": "getPatternSeparator", "method_description": "Gets the character used to separate positive and negative subpatterns\n in a pattern.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character used for per mille sign"], "return_type": ["char"]}, "method_name": "getPerMill", "method_description": "Gets the character used for per mille sign. Different for Arabic, etc.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character used for percent sign"], "return_type": ["char"]}, "method_name": "getPercent", "method_description": "Gets the character used for percent sign. Different for Arabic, etc.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character used for zero"], "return_type": ["char"]}, "method_name": "getZeroDigit", "method_description": "Gets the character used for zero. Different for Arabic, etc.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Override hashCode.\n", "method_declar": ""}, {"params": [{"param_name": ["currency"], "param_type": "Currency", "param_description": " the new currency to be used"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setCurrency", "method_description": "Sets the currency of these DecimalFormatSymbols.\n This also sets the currency symbol attribute to the currency's symbol\n in the DecimalFormatSymbols' locale, and the international currency\n symbol attribute to the currency's ISO 4217 currency code.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["currency"], "param_type": "String", "param_description": " the currency symbol"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setCurrencySymbol", "method_description": "Sets the currency symbol for the currency of these\n DecimalFormatSymbols in their locale.\n", "method_declar": ""}, {"params": [{"param_name": ["decimalSeparator"], "param_type": "char", "param_description": " the character used for decimal sign"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDecimalSeparator", "method_description": "Sets the character used for decimal sign. Different for French, etc.\n", "method_declar": ""}, {"params": [{"param_name": ["digit"], "param_type": "char", "param_description": " the character used for a digit in a pattern"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDigit", "method_description": "Sets the character used for a digit in a pattern.\n", "method_declar": ""}, {"params": [{"param_name": ["exp"], "param_type": "String", "param_description": " the exponent separator string"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setExponentSeparator", "method_description": "Sets the string used to separate the mantissa from the exponent.\n Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["groupingSeparator"], "param_type": "char", "param_description": " the grouping separator"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setGroupingSeparator", "method_description": "Sets the character used for thousands separator. Different for French, etc.\n", "method_declar": ""}, {"params": [{"param_name": ["infinity"], "param_type": "String", "param_description": " the string representing infinity"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setInfinity", "method_description": "Sets the string used to represent infinity. Almost always left\n unchanged.\n", "method_declar": ""}, {"params": [{"param_name": ["currencyCode"], "param_type": "String", "param_description": " the currency code"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setInternationalCurrencySymbol", "method_description": "Sets the ISO 4217 currency code of the currency of these\n DecimalFormatSymbols.\n If the currency code is valid (as defined by\n Currency.getInstance),\n this also sets the currency attribute to the corresponding Currency\n instance and the currency symbol attribute to the currency's symbol\n in the DecimalFormatSymbols' locale. If the currency code is not valid,\n then the currency attribute is set to null and the currency symbol\n attribute is not modified.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["minusSign"], "param_type": "char", "param_description": " the character representing minus sign"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMinusSign", "method_description": "Sets the character used to represent minus sign. If no explicit\n negative format is specified, one is formed by prefixing\n minusSign to the positive format.\n", "method_declar": ""}, {"params": [{"param_name": ["sep"], "param_type": "char", "param_description": " the monetary decimal separator"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMonetaryDecimalSeparator", "method_description": "Sets the monetary decimal separator.\n", "method_declar": ""}, {"params": [{"param_name": ["NaN"], "param_type": "String", "param_description": " the string representing \"not a number\""}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setNaN", "method_description": "Sets the string used to represent \"not a number\". Almost always left\n unchanged.\n", "method_declar": ""}, {"params": [{"param_name": ["patternSeparator"], "param_type": "char", "param_description": " the pattern separator"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPatternSeparator", "method_description": "Sets the character used to separate positive and negative subpatterns\n in a pattern.\n", "method_declar": ""}, {"params": [{"param_name": ["perMill"], "param_type": "char", "param_description": " the character used for per mille sign"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPerMill", "method_description": "Sets the character used for per mille sign. Different for Arabic, etc.\n", "method_declar": ""}, {"params": [{"param_name": ["percent"], "param_type": "char", "param_description": " the character used for percent sign"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPercent", "method_description": "Sets the character used for percent sign. Different for Arabic, etc.\n", "method_declar": ""}, {"params": [{"param_name": ["zeroDigit"], "param_type": "char", "param_description": " the character used for zero"}], "class_name": "DecimalFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setZeroDigit", "method_description": "Sets the character used for zero. Different for Arabic, etc.\n", "method_declar": ""}], "class_name": "DecimalFormatSymbols", "Vars": null}