{"package_name": "java.text", "subclass_list": [], "class_description": "DateFormatSymbols is a public class for encapsulating\n localizable date-time formatting data, such as the names of the\n months, the names of the days of the week, and the time zone data.\n SimpleDateFormat uses\n DateFormatSymbols to encapsulate this information. Typically you shouldn't use DateFormatSymbols directly.\n Rather, you are encouraged to create a date-time formatter with the\n DateFormat class's factory methods: getTimeInstance,\n getDateInstance, or getDateTimeInstance.\n These methods automatically create a DateFormatSymbols for\n the formatter so that you don't have to. After the\n formatter is created, you may modify its format pattern using the\n setPattern method. For more information about\n creating formatters using DateFormat's factory methods,\n see DateFormat. If you decide to create a date-time formatter with a specific\n format pattern for a specific locale, you can do so with: DateFormatSymbols objects are cloneable. When you obtain\n a DateFormatSymbols object, feel free to modify the\n date-time formatting data. For instance, you can replace the localized\n date-time format pattern characters with the ones that you feel easy\n to remember. Or you can change the representative cities\n to your favorite ones. New DateFormatSymbols subclasses may be added to support\n SimpleDateFormat for date-time formatting for additional locales. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable", "Cloneable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a DateFormatSymbols object by loading format data from\n resources for the default FORMAT\n locale. It is recommended that the getInstance method is used\n instead.\n \nThis is equivalent to calling\n DateFormatSymbols(Locale.getDefault(Locale.Category.FORMAT)).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["locale"], "param_type": "Locale", "param_description": " the desired locale"}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a DateFormatSymbols object by loading format data from\n resources for the given locale. It is recommended that the\n getInstance method is used instead.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this instance."], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Overrides Cloneable\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the reference object with which to compare."}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this object is the same as the obj\n          argument; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Override equals\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the ampm strings."], "return_type": ["String[]"]}, "method_name": "getAmPmStrings", "method_description": "Gets ampm strings. For example: \"AM\" and \"PM\".\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": true, "return_value": {"return_name": [], "return_description": ["An array of locales for which localized\n         DateFormatSymbols instances are available."], "return_type": ["Locale[]"]}, "method_name": "getAvailableLocales", "method_description": "Returns an array of all locales for which the\n getInstance methods of this class can return\n localized instances.\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the era strings."], "return_type": ["String[]"]}, "method_name": "getEras", "method_description": "Gets era strings. For example: \"AD\" and \"BC\".\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": true, "return_value": {"return_name": [], "return_description": ["a DateFormatSymbols instance."], "return_type": ["DateFormatSymbols"]}, "method_name": "getInstance", "method_description": "Gets the DateFormatSymbols instance for the default\n locale.\n \nThis is equivalent to calling getInstance(Locale.getDefault(Locale.Category.FORMAT)).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["locale"], "param_type": "Locale", "param_description": " the given locale."}], "class_name": "DateFormatSymbols", "is_static": true, "return_value": {"return_name": [], "return_description": ["a DateFormatSymbols instance."], "return_type": ["DateFormatSymbols"]}, "method_name": "getInstance", "method_description": "Gets the DateFormatSymbols instance for the specified\n locale.\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the localized date-time pattern characters."], "return_type": ["String"]}, "method_name": "getLocalPatternChars", "method_description": "Gets localized date-time pattern characters. For example: 'u', 't', etc.\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the month strings."], "return_type": ["String[]"]}, "method_name": "getMonths", "method_description": "Gets month strings. For example: \"January\", \"February\", etc.\n\n \nIf the language requires different forms for formatting and\n stand-alone usages, this method returns month names in the\n formatting form. For example, the preferred month name for\n January in the Czech language is ledna in the\n formatting form, while it is leden in the stand-alone\n form. This method returns \"ledna\" in this case. Refer\n to the \n Calendar Elements in the Unicode Locale Data Markup Language\n (LDML) specification for more details.\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the short month strings."], "return_type": ["String[]"]}, "method_name": "getShortMonths", "method_description": "Gets short month strings. For example: \"Jan\", \"Feb\", etc.\n\n \nIf the language requires different forms for formatting and\n stand-alone usages, This method returns short month names in\n the formatting form. For example, the preferred abbreviation\n for January in the Catalan language is de gen. in the\n formatting form, while it is gen. in the stand-alone\n form. This method returns \"de gen.\" in this case. Refer\n to the \n Calendar Elements in the Unicode Locale Data Markup Language\n (LDML) specification for more details.\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the short weekday strings. Use Calendar.SUNDAY,\n Calendar.MONDAY, etc. to index the result array."], "return_type": ["String[]"]}, "method_name": "getShortWeekdays", "method_description": "Gets short weekday strings. For example: \"Sun\", \"Mon\", etc.\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the weekday strings. Use Calendar.SUNDAY,\n Calendar.MONDAY, etc. to index the result array."], "return_type": ["String[]"]}, "method_name": "getWeekdays", "method_description": "Gets weekday strings. For example: \"Sunday\", \"Monday\", etc.\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["the time zone strings."], "return_type": ["String[][]"]}, "method_name": "getZoneStrings", "method_description": "Gets time zone strings.  Use of this method is discouraged; use\n TimeZone.getDisplayName()\n instead.\n \n\n The value returned is a\n two-dimensional array of strings of size n by m,\n where m is at least 5.  Each of the n rows is an\n entry containing the localized names for a single TimeZone.\n Each such row contains (with i ranging from\n 0..n-1):\n \n\n If setZoneStrings has been called\n on this DateFormatSymbols instance, then the strings\n provided by that call are returned. Otherwise, the returned array\n contains names provided by the runtime.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Override hashCode.\n Generates a hash code for the DateFormatSymbols object.\n", "method_declar": ""}, {"params": [{"param_name": ["newAmpms"], "param_type": "String[]", "param_description": " the new ampm strings."}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setAmPmStrings", "method_description": "Sets ampm strings. For example: \"AM\" and \"PM\".\n", "method_declar": ""}, {"params": [{"param_name": ["newEras"], "param_type": "String[]", "param_description": " the new era strings."}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setEras", "method_description": "Sets era strings. For example: \"AD\" and \"BC\".\n", "method_declar": ""}, {"params": [{"param_name": ["newLocalPatternChars"], "param_type": "String", "param_description": " the new localized date-time\n pattern characters."}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setLocalPatternChars", "method_description": "Sets localized date-time pattern characters. For example: 'u', 't', etc.\n", "method_declar": ""}, {"params": [{"param_name": ["newMonths"], "param_type": "String[]", "param_description": " the new month strings."}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMonths", "method_description": "Sets month strings. For example: \"January\", \"February\", etc.\n", "method_declar": ""}, {"params": [{"param_name": ["newShortMonths"], "param_type": "String[]", "param_description": " the new short month strings."}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setShortMonths", "method_description": "Sets short month strings. For example: \"Jan\", \"Feb\", etc.\n", "method_declar": ""}, {"params": [{"param_name": ["newShortWeekdays"], "param_type": "String[]", "param_description": " the new short weekday strings. The array should\n be indexed by Calendar.SUNDAY,\n Calendar.MONDAY, etc."}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setShortWeekdays", "method_description": "Sets short weekday strings. For example: \"Sun\", \"Mon\", etc.\n", "method_declar": ""}, {"params": [{"param_name": ["newWeekdays"], "param_type": "String[]", "param_description": " the new weekday strings. The array should\n be indexed by Calendar.SUNDAY,\n Calendar.MONDAY, etc."}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setWeekdays", "method_description": "Sets weekday strings. For example: \"Sunday\", \"Monday\", etc.\n", "method_declar": ""}, {"params": [{"param_name": ["newZoneStrings"], "param_type": "String[][]", "param_description": " the new time zone strings."}], "class_name": "DateFormatSymbols", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setZoneStrings", "method_description": "Sets time zone strings.  The argument must be a\n two-dimensional array of strings of size n by m,\n where m is at least 5.  Each of the n rows is an\n entry containing the localized names for a single TimeZone.\n Each such row contains (with i ranging from\n 0..n-1):\n \nSee also:\n", "method_declar": ""}], "class_name": "DateFormatSymbols", "Vars": null}