{"package_name": "java.text", "subclass_list": [], "class_description": "MessageFormat provides a means to produce concatenated\n messages in a language-neutral way. Use this to construct messages\n displayed for end users. MessageFormat takes a set of objects, formats them, then\n inserts the formatted strings into the pattern at the appropriate places. Note:\nMessageFormat differs from the other Format\n classes in that you create a MessageFormat object with one\n of its constructors (not with a getInstance style factory\n method). The factory methods aren't necessary because MessageFormat\n itself doesn't implement locale specific behavior. Any locale specific\n behavior is defined by the pattern that you provide as well as the\n subformats used for inserted arguments. Within a String, a pair of single quotes can be used to\n quote any arbitrary characters except single quotes. For example,\n pattern string \"'{0}'\" represents string\n \"{0}\", not a FormatElement. A single quote itself\n must be represented by doubled single quotes '' throughout a\n String.  For example, pattern string \"'{''}'\" is\n interpreted as a sequence of '{ (start of quoting and a\n left curly brace), '' (a single quote), and\n }' (a right curly brace and end of quoting),\n not '{' and '}' (quoted left and\n right curly braces): representing string \"{'}\",\n not \"{}\". A SubformatPattern is interpreted by its corresponding\n subformat, and subformat-dependent pattern rules apply. For example,\n pattern string \"{1,number,$'#',##}\"\n (SubformatPattern with underline) will produce a number format\n with the pound-sign quoted, with a result such as: \"$#31,45\". Refer to each Format subclass documentation for\n details. Any unmatched quote is treated as closed at the end of the given\n pattern. For example, pattern string \"'{0}\" is treated as\n pattern \"'{0}'\". Any curly braces within an unquoted pattern must be balanced. For\n example, \"ab {0} de\" and \"ab '}' de\" are\n valid patterns, but \"ab {0'}' de\", \"ab } de\"\n and \"''{''\" are not. The ArgumentIndex value is a non-negative integer written\n using the digits '0' through '9', and represents an index into the\n arguments array passed to the format methods\n or the result array returned by the parse methods. The FormatType and FormatStyle values are used to create\n a Format instance for the format element. The following\n table shows how the values map to Format instances. Combinations not\n shown in the table are illegal. A SubformatPattern must\n be a valid pattern string for the Format subclass used. Here are some examples of usage.\n In real internationalized programs, the message format pattern and other\n static strings will, of course, be obtained from resource bundles.\n Other parameters will be dynamically determined at runtime. The first example uses the static method MessageFormat.format,\n which internally creates a MessageFormat for one-time use: The following example creates a MessageFormat instance that\n can be used repeatedly: For more sophisticated patterns, you can use a ChoiceFormat\n to produce correct forms for singular and plural: You can create the ChoiceFormat programmatically, as in the\n above example, or by using a pattern. See ChoiceFormat\n for more information. Note: As we see above, the string produced\n by a ChoiceFormat in MessageFormat is treated as special;\n occurrences of '{' are used to indicate subformats, and cause recursion.\n If you create both a MessageFormat and ChoiceFormat\n programmatically (instead of using the string patterns), then be careful not to\n produce a format that recurses on itself, which will cause an infinite loop. When a single argument is parsed more than once in the string, the last match\n will be the final result of the parsing.  For example, Likewise, parsing with a MessageFormat object using patterns containing\n multiple occurrences of the same argument would return the last match.  For\n example, Message formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Format"], "Methods": [], "class_name": "MessageFormat", "Vars": null}