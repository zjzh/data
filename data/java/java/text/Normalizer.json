{"package_name": "java.text", "subclass_list": [], "class_description": "This class provides the method normalize which transforms Unicode\n text into an equivalent composed or decomposed form, allowing for easier\n sorting and searching of text.\n The normalize method supports the standard normalization forms\n described in\n \n Unicode Standard Annex #15 \u2014 Unicode Normalization Forms. Characters with accents or other adornments can be encoded in\n several different ways in Unicode.  For example, take the character A-acute.\n In Unicode, this can be encoded as a single character (the \"composed\" form): Similarly, the string \"ffi\" can be encoded as three separate letters: The normalize method helps solve these problems by transforming\n text into the canonical composed and decomposed forms as shown in the first\n example above. In addition, you can have it perform compatibility\n decompositions so that you can treat compatibility characters the same as\n their equivalents.\n Finally, the normalize method rearranges accents into the\n proper canonical order, so that you do not have to worry about accent\n rearrangement on your own. The W3C generally recommends to exchange texts in NFC.\n Note also that most legacy character encodings use only precomposed forms and\n often do not encode any combining marks by themselves. For conversion to such\n character encodings the Unicode text needs to be normalized to NFC.\n For more usage examples, see the Unicode Standard Annex. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "Normalizer", "Vars": null}