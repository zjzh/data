{"package_name": "java.text", "subclass_list": [], "class_description": "DecimalFormat is a concrete subclass of\n NumberFormat that formats decimal numbers. It has a variety of\n features designed to make it possible to parse and format numbers in any\n locale, including support for Western, Arabic, and Indic digits.  It also\n supports different kinds of numbers, including integers (123), fixed-point\n numbers (123.4), scientific notation (1.23E4), percentages (12%), and\n currency amounts ($123).  All of these can be localized. To obtain a NumberFormat for a specific locale, including the\n default locale, call one of NumberFormat's factory methods, such\n as getInstance().  In general, do not call the\n DecimalFormat constructors directly, since the\n NumberFormat factory methods may return subclasses other than\n DecimalFormat. If you need to customize the format object, do\n something like this: A DecimalFormat comprises a pattern and a set of\n symbols.  The pattern may be set directly using\n applyPattern(), or indirectly using the API methods.  The\n symbols are stored in a DecimalFormatSymbols object.  When using\n the NumberFormat factory methods, the pattern and symbols are\n read from localized ResourceBundles. A DecimalFormat pattern contains a positive and negative\n subpattern, for example, \"#,##0.00;(#,##0.00)\".  Each\n subpattern has a prefix, numeric part, and suffix. The negative subpattern\n is optional; if absent, then the positive subpattern prefixed with the\n localized minus sign ('-' in most locales) is used as the\n negative subpattern. That is, \"0.00\" alone is equivalent to\n \"0.00;-0.00\".  If there is an explicit negative subpattern, it\n serves only to specify the negative prefix and suffix; the number of digits,\n minimal digits, and other characteristics are all the same as the positive\n pattern. That means that \"#,##0.0#;(#)\" produces precisely\n the same behavior as \"#,##0.0#;(#,##0.0#)\". The prefixes, suffixes, and various symbols used for infinity, digits,\n thousands separators, decimal separators, etc. may be set to arbitrary\n values, and they will appear properly during formatting.  However, care must\n be taken that the symbols and strings do not conflict, or parsing will be\n unreliable.  For example, either the positive and negative prefixes or the\n suffixes must be distinct for DecimalFormat.parse() to be able\n to distinguish positive from negative values.  (If they are identical, then\n DecimalFormat will behave as if no negative subpattern was\n specified.)  Another example is that the decimal separator and thousands\n separator should be distinct characters, or parsing will be impossible. The grouping separator is commonly used for thousands, but in some\n countries it separates ten-thousands. The grouping size is a constant number\n of digits between the grouping characters, such as 3 for 100,000,000 or 4 for\n 1,0000,0000.  If you supply a pattern with multiple grouping characters, the\n interval between the last one and the end of the integer is the one that is\n used. So \"#,##,###,####\" == \"######,####\" ==\n \"##,####,####\". Many characters in a pattern are taken literally; they are matched during\n parsing and output unchanged during formatting.  Special characters, on the\n other hand, stand for other characters, strings, or classes of characters.\n They must be quoted, unless noted otherwise, if they are to appear in the\n prefix or suffix as literals. The characters listed here are used in non-localized patterns.  Localized\n patterns use the corresponding characters taken from this formatter's\n DecimalFormatSymbols object instead, and these characters lose\n their special status.  Two exceptions are the currency sign and quote, which\n are not localized. Numbers in scientific notation are expressed as the product of a mantissa\n and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3.  The\n mantissa is often in the range 1.0 \u2264 x < 10.0, but it need not\n be.\n DecimalFormat can be instructed to format and parse scientific\n notation only via a pattern; there is currently no factory method\n that creates a scientific notation format.  In a pattern, the exponent\n character immediately followed by one or more digit characters indicates\n scientific notation.  Example: \"0.###E0\" formats the number\n 1234 as \"1.234E3\". NaN is formatted as a string, which typically has a single character\n \\uFFFD.  This string is determined by the\n DecimalFormatSymbols object.  This is the only value for which\n the prefixes and suffixes are not used. Infinity is formatted as a string, which typically has a single character\n \\u221E, with the positive or negative prefixes and suffixes\n applied.  The infinity string is determined by the\n DecimalFormatSymbols object. Negative zero (\"-0\") parses to Decimal formats are generally not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["NumberFormat"], "Methods": [{"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a DecimalFormat using the default pattern and symbols\n for the default FORMAT locale.\n This is a convenient way to obtain a\n DecimalFormat when internationalization is not the main concern.\n \n\n To obtain standard formats for a given locale, use the factory methods\n on NumberFormat such as getNumberInstance. These factories will\n return the most appropriate sub-class of NumberFormat for a given\n locale.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " a non-localized pattern string."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a DecimalFormat using the given pattern and the symbols\n for the default FORMAT locale.\n This is a convenient way to obtain a\n DecimalFormat when internationalization is not the main concern.\n \n\n To obtain standard formats for a given locale, use the factory methods\n on NumberFormat such as getNumberInstance. These factories will\n return the most appropriate sub-class of NumberFormat for a given\n locale.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " a non-localized pattern string"}, {"param_name": ["symbols"], "param_type": "DecimalFormatSymbols", "param_description": " the set of symbols to be used"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a DecimalFormat using the given pattern and symbols.\n Use this constructor when you need to completely customize the\n behavior of the format.\n \n\n To obtain standard formats for a given\n locale, use the factory methods on NumberFormat such as\n getInstance or getCurrencyInstance. If you need only minor adjustments\n to a standard format, you can modify the format returned by\n a NumberFormat factory method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " a new pattern"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "applyLocalizedPattern", "method_description": "Apply the given pattern to this Format object.  The pattern\n is assumed to be in a localized notation. A pattern is a\n short-hand specification for the various formatting properties.\n These properties can also be changed individually through the\n various setter methods.\n \n\n There is no limit to integer digits set\n by this routine, since that is the typical end-user desire;\n use setMaximumInteger if you want to set a real value.\n For negative numbers, use a second pattern, separated by a semicolon\n \nExample \"#,#00.0#\" \u2192 1,234.56\n \nThis means a minimum of 2 integer digits, 1 fraction digit, and\n a maximum of 2 fraction digits.\n \nExample: \"#,#00.0#;(#,#00.0#)\" for negatives in\n parentheses.\n \nIn negative patterns, the minimum and maximum counts are ignored;\n these are presumed to be set in the positive pattern.\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " a new pattern"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "applyPattern", "method_description": "Apply the given pattern to this Format object.  A pattern is a\n short-hand specification for the various formatting properties.\n These properties can also be changed individually through the\n various setter methods.\n \n\n There is no limit to integer digits set\n by this routine, since that is the typical end-user desire;\n use setMaximumInteger if you want to set a real value.\n For negative numbers, use a second pattern, separated by a semicolon\n \nExample \"#,#00.0#\" \u2192 1,234.56\n \nThis means a minimum of 2 integer digits, 1 fraction digit, and\n a maximum of 2 fraction digits.\n \nExample: \"#,#00.0#;(#,#00.0#)\" for negatives in\n parentheses.\n \nIn negative patterns, the minimum and maximum counts are ignored;\n these are presumed to be set in the positive pattern.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this instance."], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Standard override; no change in semantics.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the reference object with which to compare."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this object is the same as the obj\n          argument; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Overrides equals\n", "method_declar": ""}, {"params": [{"param_name": ["number"], "param_type": "Object", "param_description": " the number to format"}, {"param_name": ["toAppendTo"], "param_type": "StringBuffer", "param_description": " the StringBuffer to which the formatted\n                   text is to be appended"}, {"param_name": ["pos"], "param_type": "FieldPosition", "param_description": " On input: an alignment field, if desired.\n                   On output: the offsets of the alignment field."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value passed in as toAppendTo"], "return_type": ["StringBuffer"]}, "method_name": "format", "method_description": "Formats a number and appends the resulting text to the given string\n buffer.\n The number can be of any subclass of Number.\n \n\n This implementation uses the maximum precision permitted.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["number"], "param_type": "double", "param_description": " The double to format"}, {"param_name": ["result"], "param_type": "StringBuffer", "param_description": " where the text is to be appended"}, {"param_name": ["fieldPosition"], "param_type": "FieldPosition", "param_description": " On input: an alignment field, if desired.\n On output: the offsets of the alignment field."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["The formatted number string"], "return_type": ["StringBuffer"]}, "method_name": "format", "method_description": "Formats a double to produce a string.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["number"], "param_type": "long", "param_description": " The long to format"}, {"param_name": ["result"], "param_type": "StringBuffer", "param_description": " where the text is to be appended"}, {"param_name": ["fieldPosition"], "param_type": "FieldPosition", "param_description": " On input: an alignment field, if desired.\n On output: the offsets of the alignment field."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["The formatted number string"], "return_type": ["StringBuffer"]}, "method_name": "format", "method_description": "Format a long to produce a string.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " The object to format"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["AttributedCharacterIterator describing the formatted value."], "return_type": ["AttributedCharacterIterator"]}, "method_name": "formatToCharacterIterator", "method_description": "Formats an Object producing an AttributedCharacterIterator.\n You can use the returned AttributedCharacterIterator\n to build the resulting String, as well as to determine information\n about the resulting String.\n \n\n Each attribute key of the AttributedCharacterIterator will be of type\n NumberFormat.Field, with the attribute value being the\n same as the attribute key.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the currency used by this decimal format, or null"], "return_type": ["Currency"]}, "method_name": "getCurrency", "method_description": "Gets the currency used by this decimal format when formatting\n currency values.\n The currency is obtained by calling\n DecimalFormatSymbols#getCurrency\n on this number format's symbols.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a copy of the desired DecimalFormatSymbols"], "return_type": ["DecimalFormatSymbols"]}, "method_name": "getDecimalFormatSymbols", "method_description": "Returns a copy of the decimal format symbols, which is generally not\n changed by the programmer or user.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the grouping size"], "return_type": ["int"]}, "method_name": "getGroupingSize", "method_description": "Return the grouping size. Grouping size is the number of digits between\n grouping separators in the integer portion of a number.  For example,\n in the number \"123,456.78\", the grouping size is 3.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the maximum number of digits."], "return_type": ["int"]}, "method_name": "getMaximumFractionDigits", "method_description": "Gets the maximum number of digits allowed in the fraction portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of the return value and\n 340 is used.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the maximum number of digits"], "return_type": ["int"]}, "method_name": "getMaximumIntegerDigits", "method_description": "Gets the maximum number of digits allowed in the integer portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of the return value and\n 309 is used.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the minimum number of digits"], "return_type": ["int"]}, "method_name": "getMinimumFractionDigits", "method_description": "Gets the minimum number of digits allowed in the fraction portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of the return value and\n 340 is used.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the minimum number of digits"], "return_type": ["int"]}, "method_name": "getMinimumIntegerDigits", "method_description": "Gets the minimum number of digits allowed in the integer portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of the return value and\n 309 is used.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the multiplier"], "return_type": ["int"]}, "method_name": "getMultiplier", "method_description": "Gets the multiplier for use in percent, per mille, and similar\n formats.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the negative prefix"], "return_type": ["String"]}, "method_name": "getNegativePrefix", "method_description": "Get the negative prefix.\n \nExamples: -123, ($123) (with negative suffix), sFr-123\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the negative suffix"], "return_type": ["String"]}, "method_name": "getNegativeSuffix", "method_description": "Get the negative suffix.\n \nExamples: -123%, ($123) (with positive suffixes)\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the positive prefix"], "return_type": ["String"]}, "method_name": "getPositivePrefix", "method_description": "Get the positive prefix.\n \nExamples: +123, $123, sFr123\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the positive suffix"], "return_type": ["String"]}, "method_name": "getPositiveSuffix", "method_description": "Get the positive suffix.\n \nExample: 123%\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["The RoundingMode used for this DecimalFormat."], "return_type": ["RoundingMode"]}, "method_name": "getRoundingMode", "method_description": "Gets the RoundingMode used in this DecimalFormat.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Overrides hashCode\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the decimal separator is always shown;\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "isDecimalSeparatorAlwaysShown", "method_description": "Allows you to get the behavior of the decimal separator with integers.\n (The decimal separator will always appear with decimals.)\n \nExample: Decimal ON: 12345 \u2192 12345.; OFF: 12345 \u2192 12345\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if grouping is used;\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "isGroupingUsed", "method_description": "Returns true if grouping is used in this format. For example, in the\n English locale, with grouping on, the number 1234567 might be formatted\n as \"1,234,567\". The grouping separator as well as the size of each group\n is locale dependant and is determined by sub-classes of NumberFormat.\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the parse method returns BigDecimal;\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "isParseBigDecimal", "method_description": "Returns whether the parse(java.lang.String, java.text.ParsePosition)\n method returns BigDecimal. The default value is false.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if numbers should be parsed as integers only;\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "isParseIntegerOnly", "method_description": "Returns true if this format will parse numbers as integers only.\n For example in the English locale, with ParseIntegerOnly true, the\n string \"1234.\" would be parsed as the integer value 1234 and parsing\n would stop at the \".\" character.  Of course, the exact format accepted\n by the parse operation is locale dependant and determined by sub-classes\n of NumberFormat.\n", "method_declar": ""}, {"params": [{"param_name": ["text"], "param_type": "String", "param_description": " the string to be parsed"}, {"param_name": ["pos"], "param_type": "ParsePosition", "param_description": " A ParsePosition object with index and error\n             index information as described above."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the parsed value, or null if the parse fails"], "return_type": ["Number"]}, "method_name": "parse", "method_description": "Parses text from a string to produce a Number.\n \n\n The method attempts to parse text starting at the index given by\n pos.\n If parsing succeeds, then the index of pos is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n number is returned. The updated pos can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of pos is not\n changed, the error index of pos is set to the index of\n the character where the error occurred, and null is returned.\n \n\n The subclass returned depends on the value of isParseBigDecimal()\n as well as on the string being parsed.\n \n\n       Callers may use the Number methods\n       doubleValue, longValue, etc., to obtain\n       the type they want.\n   \n\nDecimalFormat parses all Unicode characters that represent\n decimal digits, as defined by Character.digit(). In\n addition, DecimalFormat also recognizes as digits the ten\n consecutive characters starting with the localized zero digit defined in\n the DecimalFormatSymbols object.\n", "method_declar": ""}, {"params": [{"param_name": ["currency"], "param_type": "Currency", "param_description": " the new currency to be used by this decimal format"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setCurrency", "method_description": "Sets the currency used by this number format when formatting\n currency values. This does not update the minimum or maximum\n number of fraction digits used by the number format.\n The currency is set by calling\n DecimalFormatSymbols#setCurrency\n on this number format's symbols.\n", "method_declar": ""}, {"params": [{"param_name": ["newSymbols"], "param_type": "DecimalFormatSymbols", "param_description": " desired DecimalFormatSymbols"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDecimalFormatSymbols", "method_description": "Sets the decimal format symbols, which is generally not changed\n by the programmer or user.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "boolean", "param_description": " true if the decimal separator is always shown;\n                 false otherwise"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDecimalSeparatorAlwaysShown", "method_description": "Allows you to set the behavior of the decimal separator with integers.\n (The decimal separator will always appear with decimals.)\n \nExample: Decimal ON: 12345 \u2192 12345.; OFF: 12345 \u2192 12345\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "int", "param_description": " the new grouping size"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setGroupingSize", "method_description": "Set the grouping size. Grouping size is the number of digits between\n grouping separators in the integer portion of a number.  For example,\n in the number \"123,456.78\", the grouping size is 3.\n \n The value passed in is converted to a byte, which may lose information.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "boolean", "param_description": " true if grouping is used;\n                 false otherwise"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setGroupingUsed", "method_description": "Set whether or not grouping will be used in this format.\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "int", "param_description": " the maximum number of fraction digits to be shown; if\n less than zero, then zero is used. The concrete subclass may enforce an\n upper limit to this value appropriate to the numeric type being formatted."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMaximumFractionDigits", "method_description": "Sets the maximum number of digits allowed in the fraction portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of newValue and\n 340 is used. Negative input values are replaced with 0.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "int", "param_description": " the maximum number of integer digits to be shown; if\n less than zero, then zero is used. The concrete subclass may enforce an\n upper limit to this value appropriate to the numeric type being formatted."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMaximumIntegerDigits", "method_description": "Sets the maximum number of digits allowed in the integer portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of newValue and\n 309 is used. Negative input values are replaced with 0.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "int", "param_description": " the minimum number of fraction digits to be shown; if\n less than zero, then zero is used. The concrete subclass may enforce an\n upper limit to this value appropriate to the numeric type being formatted."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMinimumFractionDigits", "method_description": "Sets the minimum number of digits allowed in the fraction portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of newValue and\n 340 is used. Negative input values are replaced with 0.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "int", "param_description": " the minimum number of integer digits to be shown; if\n less than zero, then zero is used. The concrete subclass may enforce an\n upper limit to this value appropriate to the numeric type being formatted."}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMinimumIntegerDigits", "method_description": "Sets the minimum number of digits allowed in the integer portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of newValue and\n 309 is used. Negative input values are replaced with 0.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "int", "param_description": " the new multiplier"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMultiplier", "method_description": "Sets the multiplier for use in percent, per mille, and similar\n formats.\n For a percent format, set the multiplier to 100 and the suffixes to\n have '%' (for Arabic, use the Arabic percent sign).\n For a per mille format, set the multiplier to 1000 and the suffixes to\n have '\\u2030'.\n\n \nExample: with multiplier 100, 1.23 is formatted as \"123\", and\n \"123\" is parsed into 1.23.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "String", "param_description": " the new negative prefix"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setNegativePrefix", "method_description": "Set the negative prefix.\n \nExamples: -123, ($123) (with negative suffix), sFr-123\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "String", "param_description": " the new negative suffix"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setNegativeSuffix", "method_description": "Set the negative suffix.\n \nExamples: 123%\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "boolean", "param_description": " true if the parse method returns BigDecimal;\n                 false otherwise"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setParseBigDecimal", "method_description": "Sets whether the parse(java.lang.String, java.text.ParsePosition)\n method returns BigDecimal.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "boolean", "param_description": " true if numbers should be parsed as integers only;\n              false otherwise"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setParseIntegerOnly", "method_description": "Sets whether or not numbers should be parsed as integers only.\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "String", "param_description": " the new positive prefix"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPositivePrefix", "method_description": "Set the positive prefix.\n \nExamples: +123, $123, sFr123\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "String", "param_description": " the new positive suffix"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPositiveSuffix", "method_description": "Set the positive suffix.\n \nExample: 123%\n", "method_declar": ""}, {"params": [{"param_name": ["roundingMode"], "param_type": "RoundingMode", "param_description": " The RoundingMode to be used"}], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setRoundingMode", "method_description": "Sets the RoundingMode used in this DecimalFormat.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a localized pattern string"], "return_type": ["String"]}, "method_name": "toLocalizedPattern", "method_description": "Synthesizes a localized pattern string that represents the current\n state of this Format object.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DecimalFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a pattern string"], "return_type": ["String"]}, "method_name": "toPattern", "method_description": "Synthesizes a pattern string that represents the current state\n of this Format object.\nSee also:\n", "method_declar": ""}], "class_name": "DecimalFormat", "Vars": null}