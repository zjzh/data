{"package_name": "java.text", "subclass_list": [], "class_description": "The BreakIterator class implements methods for finding\n the location of boundaries in text. Instances of BreakIterator\n maintain a current position and scan over text\n returning the index of characters where boundaries occur.\n Internally, BreakIterator scans text using a\n CharacterIterator, and is thus able to scan text held\n by any object implementing that protocol. A StringCharacterIterator\n is used to scan String objects passed to setText.\n The CharacterIterator object must not be modified after having been\n passed to setText. If the text in the CharacterIterator object\n is changed, the caller must reset BreakIterator by calling\n setText. You use the factory methods provided by this class to create\n instances of various types of break iterators. In particular,\n use getWordInstance, getLineInstance,\n getSentenceInstance, and getCharacterInstance\n to create BreakIterators that perform\n word, line, sentence, and character boundary analysis respectively.\n A single BreakIterator can work only on one unit\n (word, line, sentence, and so on). You must use a different iterator\n for each unit boundary analysis you wish to perform. Line boundary analysis determines where a text string can be\n broken when line-wrapping. The mechanism correctly handles\n punctuation and hyphenated words. Actual line breaking needs\n to also consider the available line width and is handled by\n higher-level software. Sentence boundary analysis allows selection with correct interpretation\n of periods within numbers and abbreviations, and trailing punctuation\n marks such as quotation marks and parentheses. Word boundary analysis is used by search and replace functions, as\n well as within text editing applications that allow the user to\n select words with a double click. Word selection provides correct\n interpretation of punctuation marks within and following\n words. Characters that are not part of a word, such as symbols\n or punctuation marks, have word-breaks on both sides. Character boundary analysis allows users to interact with characters\n as they expect to, for example, when moving the cursor through a text\n string. Character boundary analysis provides correct navigation\n through character strings, regardless of how the character is stored.\n The boundaries returned may be those of supplementary characters,\n combining character sequences, or ligature clusters.\n For example, an accented character might be stored as a base character\n and a diacritical mark. What users consider to be a character can\n differ between languages. The BreakIterator instances returned by the factory methods\n of this class are intended for use with natural languages only, not for\n programming language text. It is however possible to define subclasses\n that tokenize a programming language. Examples: Creating and using text boundaries: ", "class_type": "class", "typealias": [], "interface_list": ["Cloneable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "BreakIterator", "Vars": null}