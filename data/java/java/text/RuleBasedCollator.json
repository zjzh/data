{"package_name": "java.text", "subclass_list": [], "class_description": "The RuleBasedCollator class is a concrete subclass of\n Collator that provides a simple, data-driven, table\n collator.  With this class you can create a customized table-based\n Collator.  RuleBasedCollator maps\n characters to sort keys. RuleBasedCollator has the following restrictions\n for efficiency (other subclasses may be used for more complex languages) : The collation table is composed of a list of collation rules, where each\n rule is of one of three forms: This sounds more complicated than it is in practice. For example, the\n following are equivalent ways of expressing the same thing: Ignorable Characters For ignorable characters, the first rule must start with a relation (the\n examples we have used above are really fragments; \"a < b\" really should be\n \"< a < b\"). If, however, the first relation is not \"<\", then all the all\n text-arguments up to the first \"<\" are ignorable. For example, \", - < a < b\"\n makes \"-\" an ignorable character, as we saw earlier in the word\n \"black-birds\". In the samples for different languages, you see that most\n accents are ignorable. Normalization and Accents RuleBasedCollator automatically processes its rule table to\n include both pre-composed and combining-character versions of\n accented characters.  Even if the provided rule string contains only\n base characters and separate combining accent characters, the pre-composed\n accented characters matching all canonical combinations of characters from\n the rule string will be entered in the table. This allows you to use a RuleBasedCollator to compare accented strings\n even when the collator is set to NO_DECOMPOSITION.  There are two caveats,\n however.  First, if the strings to be collated contain combining\n sequences that may not be in canonical order, you should set the collator to\n CANONICAL_DECOMPOSITION or FULL_DECOMPOSITION to enable sorting of\n combining sequences.  Second, if the strings contain characters with\n compatibility decompositions (such as full-width and half-width forms),\n you must use FULL_DECOMPOSITION, since the rule tables only include\n canonical mappings. Errors The following are errors: Examples Simple:     \"< a < b < c < d\" Norwegian:  \"< a, A < b, B < c, C < d, D < e, E < f, F\n                 < g, G < h, H < i, I < j, J < k, K < l, L\n                 < m, M < n, N < o, O < p, P < q, Q < r, R\n                 < s, S < t, T < u, U < v, V < w, W < x, X\n                 < y, Y < z, Z\n                 < \\u00E6, \\u00C6\n                 < \\u00F8, \\u00D8\n                 < \\u00E5 = a\\u030A, \\u00C5 = A\\u030A;\n                      aa, AA\" To create a RuleBasedCollator object with specialized\n rules tailored to your needs, you construct the RuleBasedCollator\n with the rules contained in a String object. For example: A new collation rules string can be created by concatenating rules\n strings. For example, the rules returned by getRules() could\n be concatenated to combine multiple RuleBasedCollators. The following example demonstrates how to change the order of\n non-spacing accents, ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Collator"], "Methods": [{"params": [{"param_name": ["rules"], "param_type": "String", "param_description": " the collation rules to build the collation table from."}], "class_name": "RuleBasedCollator", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "RuleBasedCollator constructor.  This takes the table rules and builds\n a collation table out of them.  Please see RuleBasedCollator class\n description for more details on the collation rule syntax.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "RuleBasedCollator", "is_static": false, "return_value": {"return_name": [], "return_description": ["a shallow copy of this collator."], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Standard override; no change in semantics.\n", "method_declar": ""}, {"params": [{"param_name": ["source"], "param_type": "String", "param_description": " the source string."}, {"param_name": ["target"], "param_type": "String", "param_description": " the target string."}], "class_name": "RuleBasedCollator", "is_static": false, "return_value": {"return_name": [], "return_description": ["Returns an integer value. Value is less than zero if source is less than\n target, value is zero if source and target are equal, value is greater than zero\n if source is greater than target."], "return_type": ["int"]}, "method_name": "compare", "method_description": "Compares the character data stored in two different strings based on the\n collation rules.  Returns information about whether a string is less\n than, greater than or equal to another string in a language.\n This can be overriden in a subclass.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the table-based collation object to be compared with this."}], "class_name": "RuleBasedCollator", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the current table-based collation object is the same\n as the table-based collation object obj; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the equality of two collation objects.\n", "method_declar": ""}, {"params": [{"param_name": ["source"], "param_type": "String", "param_description": " the string to be collated"}], "class_name": "RuleBasedCollator", "is_static": false, "return_value": {"return_name": [], "return_description": ["a CollationElementIterator object"], "return_type": ["CollationElementIterator"]}, "method_name": "getCollationElementIterator", "method_description": "Returns a CollationElementIterator for the given String.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["source"], "param_type": "CharacterIterator", "param_description": " the character iterator to be collated"}], "class_name": "RuleBasedCollator", "is_static": false, "return_value": {"return_name": [], "return_description": ["a CollationElementIterator object"], "return_type": ["CollationElementIterator"]}, "method_name": "getCollationElementIterator", "method_description": "Returns a CollationElementIterator for the given CharacterIterator.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["source"], "param_type": "String", "param_description": " the string to be transformed into a collation key."}], "class_name": "RuleBasedCollator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the CollationKey for the given String based on this Collator's collation\n rules. If the source String is null, a null CollationKey is returned."], "return_type": ["CollationKey"]}, "method_name": "getCollationKey", "method_description": "Transforms the string into a series of characters that can be compared\n with CollationKey.compareTo. This overrides java.text.Collator.getCollationKey.\n It can be overriden in a subclass.\n", "method_declar": ""}, {"params": [], "class_name": "RuleBasedCollator", "is_static": false, "return_value": {"return_name": [], "return_description": ["returns the collation rules that the table collation object\n was created from."], "return_type": ["String"]}, "method_name": "getRules", "method_description": "Gets the table-based rules for the collation object.\n\n \nOn Android, the returned string will be empty unless this instance was\n constructed using RuleBasedCollator(java.lang.String).\n", "method_declar": ""}, {"params": [], "class_name": "RuleBasedCollator", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Generates the hash code for the table-based collation object\n", "method_declar": ""}], "class_name": "RuleBasedCollator", "Vars": null}