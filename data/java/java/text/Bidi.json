{"package_name": "java.text", "subclass_list": [], "class_description": "This class implements the Unicode Bidirectional Algorithm. A Bidi object provides information on the bidirectional reordering of the text\n used to create it.  This is required, for example, to properly display Arabic\n or Hebrew text.  These languages are inherently mixed directional, as they order\n numbers from left-to-right while ordering most other text from right-to-left. Once created, a Bidi object can be queried to see if the text it represents is\n all left-to-right or all right-to-left.  Such objects are very lightweight and\n this text is relatively easy to process. If there are multiple runs of text, information about the runs can be accessed\n by indexing to get the start, limit, and level of a run.  The level represents\n both the direction and the 'nesting level' of a directional run.  Odd levels\n are right-to-left, while even levels are left-to-right.  So for example level\n 0 represents left-to-right text, while level 1 represents right-to-left text, and\n level 2 represents left-to-right text embedded in a right-to-left run. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["paragraph"], "param_type": "String", "param_description": " a paragraph of text"}, {"param_name": ["flags"], "param_type": "int", "param_description": " a collection of flags that control the algorithm.  The\n algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,\n DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.\n Other values are reserved."}], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create Bidi from the given paragraph of text and base direction.\n", "method_declar": ""}, {"params": [{"param_name": ["paragraph"], "param_type": "AttributedCharacterIterator", "param_description": " a paragraph of text with optional character and paragraph attribute information"}], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create Bidi from the given paragraph of text.\n \n\n The RUN_DIRECTION attribute in the text, if present, determines the base\n direction (left-to-right or right-to-left).  If not present, the base\n direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right\n if there are no strong directional characters in the text.  This attribute, if\n present, must be applied to all the text in the paragraph.\n \n\n The BIDI_EMBEDDING attribute in the text, if present, represents embedding level\n information.  Negative values from -1 to -62 indicate overrides at the absolute value\n of the level.  Positive values from 1 to 62 indicate embeddings.  Where values are\n zero or not defined, the base embedding level as determined by the base direction\n is assumed.\n \n\n The NUMERIC_SHAPING attribute in the text, if present, converts European digits to\n other decimal digits before running the bidi algorithm.  This attribute, if present,\n must be applied to all the text in the paragraph.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["text"], "param_type": "char[]", "param_description": " an array containing the paragraph of text to process."}, {"param_name": ["textStart"], "param_type": "int", "param_description": " the index into the text array of the start of the paragraph."}, {"param_name": ["embeddings"], "param_type": "byte[]", "param_description": " an array containing embedding values for each character in the paragraph.\n This can be null, in which case it is assumed that there is no external embedding information."}, {"param_name": ["embStart"], "param_type": "int", "param_description": " the index into the embedding array of the start of the paragraph."}, {"param_name": ["paragraphLength"], "param_type": "int", "param_description": " the length of the paragraph in the text and embeddings arrays."}, {"param_name": ["flags"], "param_type": "int", "param_description": " a collection of flags that control the algorithm.  The\n algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,\n DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.\n Other values are reserved."}], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create Bidi from the given text, embedding, and direction information.\n The embeddings array may be null.  If present, the values represent embedding level\n information.  Negative values from -1 to -61 indicate overrides at the absolute value\n of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are\n zero, the base embedding level as determined by the base direction is assumed.\n", "method_declar": ""}, {"params": [], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the base direction is left-to-right"], "return_type": ["boolean"]}, "method_name": "baseIsLeftToRight", "method_description": "Return true if the base direction is left-to-right.\n", "method_declar": ""}, {"params": [{"param_name": ["lineStart"], "param_type": "int", "param_description": " the offset from the start of the paragraph to the start of the line."}, {"param_name": ["lineLimit"], "param_type": "int", "param_description": " the offset from the start of the paragraph to the limit of the line."}], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Bidi object"], "return_type": ["Bidi"]}, "method_name": "createLineBidi", "method_description": "Create a Bidi object representing the bidi information on a line of text within\n the paragraph represented by the current Bidi.  This call is not required if the\n entire paragraph fits on one line.\n", "method_declar": ""}, {"params": [], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["the base level"], "return_type": ["int"]}, "method_name": "getBaseLevel", "method_description": "Return the base level (0 if left-to-right, 1 if right-to-left).\n", "method_declar": ""}, {"params": [], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["the length of text in the line"], "return_type": ["int"]}, "method_name": "getLength", "method_description": "Return the length of text in the line.\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": " the index of the character for which to return the level"}], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["the resolved level of the character at offset"], "return_type": ["int"]}, "method_name": "getLevelAt", "method_description": "Return the resolved level of the character at offset.  If offset is\n < 0 or \u2265 the length of the line, return the base direction\n level.\n", "method_declar": ""}, {"params": [], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of level runs"], "return_type": ["int"]}, "method_name": "getRunCount", "method_description": "Return the number of level runs.\n", "method_declar": ""}, {"params": [{"param_name": ["run"], "param_type": "int", "param_description": " the index of the run, between 0 and getRunCount()"}], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["the level of the run"], "return_type": ["int"]}, "method_name": "getRunLevel", "method_description": "Return the level of the nth logical run in this line.\n", "method_declar": ""}, {"params": [{"param_name": ["run"], "param_type": "int", "param_description": " the index of the run, between 0 and getRunCount()"}], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["limit the limit of the run"], "return_type": ["int"]}, "method_name": "getRunLimit", "method_description": "Return the index of the character past the end of the nth logical run in this line, as\n an offset from the start of the line.  For example, this will return the length\n of the line for the last run on the line.\n", "method_declar": ""}, {"params": [{"param_name": ["run"], "param_type": "int", "param_description": " the index of the run, between 0 and getRunCount()"}], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["the start of the run"], "return_type": ["int"]}, "method_name": "getRunStart", "method_description": "Return the index of the character at the start of the nth logical run in this line, as\n an offset from the start of the line.\n", "method_declar": ""}, {"params": [], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the line is all left-to-right text and the base direction is left-to-right"], "return_type": ["boolean"]}, "method_name": "isLeftToRight", "method_description": "Return true if the line is all left-to-right text and the base direction is left-to-right.\n", "method_declar": ""}, {"params": [], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the line is not left-to-right or right-to-left."], "return_type": ["boolean"]}, "method_name": "isMixed", "method_description": "Return true if the line is not left-to-right or right-to-left.  This means it either has mixed runs of left-to-right\n and right-to-left text, or the base direction differs from the direction of the only run of text.\n", "method_declar": ""}, {"params": [], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the line is all right-to-left text, and the base direction is right-to-left"], "return_type": ["boolean"]}, "method_name": "isRightToLeft", "method_description": "Return true if the line is all right-to-left text, and the base direction is right-to-left.\n", "method_declar": ""}, {"params": [{"param_name": ["levels"], "param_type": "byte[]", "param_description": " an array representing the bidi level of each object"}, {"param_name": ["levelStart"], "param_type": "int", "param_description": " the start position in the levels array"}, {"param_name": ["objects"], "param_type": "Object[]", "param_description": " the array of objects to be reordered into visual order"}, {"param_name": ["objectStart"], "param_type": "int", "param_description": " the start position in the objects array"}, {"param_name": ["count"], "param_type": "int", "param_description": " the number of objects to reorder"}], "class_name": "Bidi", "is_static": true, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reorderVisually", "method_description": "Reorder the objects in the array into visual order based on their levels.\n This is a utility function to use when you have a collection of objects\n representing runs of text in logical order, each run containing text\n at a single level.  The elements at index from\n objectStart up to objectStart + count\n in the objects array will be reordered into visual order assuming\n each run of text has the level indicated by the corresponding element\n in the levels array (at index - objectStart + levelStart).\n", "method_declar": ""}, {"params": [{"param_name": ["text"], "param_type": "char[]", "param_description": " the text containing the characters to test"}, {"param_name": ["start"], "param_type": "int", "param_description": " the start of the range of characters to test"}, {"param_name": ["limit"], "param_type": "int", "param_description": " the limit of the range of characters to test"}], "class_name": "Bidi", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if the range of characters requires bidi analysis"], "return_type": ["boolean"]}, "method_name": "requiresBidi", "method_description": "Return true if the specified text requires bidi analysis.  If this returns false,\n the text will display left-to-right.  Clients can then avoid constructing a Bidi object.\n Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped\n and ordered for display, and so will not cause this function to return true.\n", "method_declar": ""}, {"params": [], "class_name": "Bidi", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Display the bidi internal state, used in debugging.\n", "method_declar": ""}], "class_name": "Bidi", "Vars": null}