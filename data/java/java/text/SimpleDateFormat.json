{"package_name": "java.text", "subclass_list": [], "class_description": "SimpleDateFormat is a concrete class for formatting and\n parsing dates in a locale-sensitive manner. It allows for formatting\n (date \u2192 text), parsing (text \u2192 date), and normalization. SimpleDateFormat allows you to start by choosing\n any user-defined patterns for date-time formatting. However, you\n are encouraged to create a date-time formatter with either\n getTimeInstance, getDateInstance, or\n getDateTimeInstance in DateFormat. Each\n of these class methods can return a date/time formatter initialized\n with a default format pattern. You may modify the format pattern\n using the applyPattern methods as desired.\n For more information on using these methods, see\n DateFormat. Date and time formats are specified by date and time pattern\n strings.\n Within date and time pattern strings, unquoted letters from\n 'A' to 'Z' and from 'a' to\n 'z' are interpreted as pattern letters representing the\n components of a date or time string.\n Text can be quoted using single quotes (') to avoid\n interpretation.\n \"''\" represents a single quote.\n All other characters are not interpreted; they're simply copied into the\n output string during formatting or matched against the input string\n during parsing. The following pattern letters are defined (all other characters from\n 'A' to 'Z' and from 'a' to\n 'z' are reserved): Date formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["DateFormat"], "Methods": [{"params": [], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a SimpleDateFormat using the default pattern and\n date format symbols for the default\n FORMAT locale.\n Note: This constructor may not support all locales.\n For full coverage, use the factory methods in the DateFormat\n class.\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " the pattern describing the date and time format"}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a SimpleDateFormat using the given pattern and\n the default date format symbols for the default\n FORMAT locale.\n Note: This constructor may not support all locales.\n For full coverage, use the factory methods in the DateFormat\n class.\n \nThis is equivalent to calling\n SimpleDateFormat(pattern, Locale.getDefault(Locale.Category.FORMAT)).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " the pattern describing the date and time format"}, {"param_name": ["locale"], "param_type": "Locale", "param_description": " the locale whose date format symbols should be used"}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a SimpleDateFormat using the given pattern and\n the default date format symbols for the given locale.\n Note: This constructor may not support all locales.\n For full coverage, use the factory methods in the DateFormat\n class.\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " the pattern describing the date and time format"}, {"param_name": ["formatSymbols"], "param_type": "DateFormatSymbols", "param_description": " the date format symbols to be used for formatting"}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a SimpleDateFormat using the given pattern and\n date format symbols.\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " a String to be mapped to the new date and time format\n        pattern for this format"}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "applyLocalizedPattern", "method_description": "Applies the given localized pattern string to this date format.\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " the new date and time pattern for this date format"}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "applyPattern", "method_description": "Applies the given pattern string to this date format.\n", "method_declar": ""}, {"params": [], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this SimpleDateFormat"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Creates a copy of this SimpleDateFormat. This also\n clones the format's date format symbols.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the reference object with which to compare."}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the given object is equal to this\n SimpleDateFormat"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the given object with this SimpleDateFormat for\n equality.\n", "method_declar": ""}, {"params": [{"param_name": ["date"], "param_type": "Date", "param_description": " the date-time value to be formatted into a date-time string."}, {"param_name": ["toAppendTo"], "param_type": "StringBuffer", "param_description": " where the new date-time text is to be appended."}, {"param_name": ["pos"], "param_type": "FieldPosition", "param_description": " the formatting position. On input: an alignment field,\n if desired. On output: the offsets of the alignment field."}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the formatted date-time string."], "return_type": ["StringBuffer"]}, "method_name": "format", "method_description": "Formats the given Date into a date/time string and appends\n the result to the given StringBuffer.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " The object to format"}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["AttributedCharacterIterator describing the formatted value."], "return_type": ["AttributedCharacterIterator"]}, "method_name": "formatToCharacterIterator", "method_description": "Formats an Object producing an AttributedCharacterIterator.\n You can use the returned AttributedCharacterIterator\n to build the resulting String, as well as to determine information\n about the resulting String.\n \n\n Each attribute key of the AttributedCharacterIterator will be of type\n DateFormat.Field, with the corresponding attribute value\n being the same as the attribute key.\n", "method_declar": ""}, {"params": [], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the start of the 100-year period into which two digit years are\n parsed"], "return_type": ["Date"]}, "method_name": "get2DigitYearStart", "method_description": "Returns the beginning date of the 100-year period 2-digit years are interpreted\n as being within.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the date and time format symbols of this date format"], "return_type": ["DateFormatSymbols"]}, "method_name": "getDateFormatSymbols", "method_description": "Gets a copy of the date and time format symbols of this date format.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the hash code value for this SimpleDateFormat object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns the hash code value for this SimpleDateFormat object.\n", "method_declar": ""}, {"params": [{"param_name": ["text"], "param_type": "String", "param_description": " A String, part of which should be parsed."}, {"param_name": ["pos"], "param_type": "ParsePosition", "param_description": " A ParsePosition object with index and error\n              index information as described above."}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["A Date parsed from the string. In case of\n         error, returns null."], "return_type": ["Date"]}, "method_name": "parse", "method_description": "Parses text from a string to produce a Date.\n \n\n The method attempts to parse text starting at the index given by\n pos.\n If parsing succeeds, then the index of pos is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n date is returned. The updated pos can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of pos is not\n changed, the error index of pos is set to the index of\n the character where the error occurred, and null is returned.\n\n \nThis parsing operation uses the DateFormat#calendar to produce a Date. All of the calendar's date-time fields are Calendar#clear() before parsing, and the calendar's default\n values of the date-time fields are used for any missing\n date-time information. For example, the year value of the\n parsed Date is 1970 with GregorianCalendar if\n no year value is given from the parsing operation.  The TimeZone value may be overwritten, depending on the given\n pattern and the time zone value in text. Any TimeZone value that has previously been set by a call to\n setTimeZone may need\n to be restored for further operations.\n", "method_declar": ""}, {"params": [{"param_name": ["startDate"], "param_type": "Date", "param_description": " During parsing, two digit years will be placed in the range\n startDate to startDate + 100 years."}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "set2DigitYearStart", "method_description": "Sets the 100-year period 2-digit years will be interpreted as being in\n to begin on the date the user specifies.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newFormatSymbols"], "param_type": "DateFormatSymbols", "param_description": " the new date and time format symbols"}], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDateFormatSymbols", "method_description": "Sets the date and time format symbols of this date format.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a localized pattern string describing this date format."], "return_type": ["String"]}, "method_name": "toLocalizedPattern", "method_description": "Returns a localized pattern string describing this date format.\n", "method_declar": ""}, {"params": [], "class_name": "SimpleDateFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a pattern string describing this date format."], "return_type": ["String"]}, "method_name": "toPattern", "method_description": "Returns a pattern string describing this date format.\n", "method_declar": ""}], "class_name": "SimpleDateFormat", "Vars": null}