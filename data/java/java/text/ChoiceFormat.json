{"package_name": "java.text", "subclass_list": [], "class_description": "A ChoiceFormat allows you to attach a format to a range of numbers.\n It is generally used in a MessageFormat for handling plurals.\n The choice is specified with an ascending list of doubles, where each item\n specifies a half-open interval up to the next item: Note:\nChoiceFormat differs from the other Format\n classes in that you create a ChoiceFormat object with a\n constructor (not with a getInstance style factory\n method). The factory methods aren't necessary because ChoiceFormat\n doesn't require any complex setup for a given locale. In fact,\n ChoiceFormat doesn't implement any locale specific behavior. When creating a ChoiceFormat, you must specify an array of formats\n and an array of limits. The length of these arrays must be the same.\n For example, Here is a simple example that shows formatting and parsing: Specifying a pattern for ChoiceFormat objects is fairly straightforward.\n For example: Choice formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["NumberFormat"], "Methods": [{"params": [{"param_name": ["newPattern"], "param_type": "String", "param_description": " the new pattern string"}], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs with limits and corresponding formats based on the pattern.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["limits"], "param_type": "double[]", "param_description": " limits in ascending order"}, {"param_name": ["formats"], "param_type": "String[]", "param_description": " corresponding format strings"}], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs with the limits and the corresponding formats.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newPattern"], "param_type": "String", "param_description": " See the class description."}], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "applyPattern", "method_description": "Sets the pattern.\n", "method_declar": ""}, {"params": [], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this instance."], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Overrides Cloneable\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the reference object with which to compare."}], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this object is the same as the obj\n          argument; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Equality comparision between two\n", "method_declar": ""}, {"params": [{"param_name": ["number"], "param_type": "double", "param_description": " number to be formatted and substituted."}, {"param_name": ["toAppendTo"], "param_type": "StringBuffer", "param_description": " where text is appended."}, {"param_name": ["status"], "param_type": "FieldPosition", "param_description": " ignore no useful status is returned."}], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the formatted StringBuffer"], "return_type": ["StringBuffer"]}, "method_name": "format", "method_description": "Returns pattern with formatted double.\n", "method_declar": ""}, {"params": [{"param_name": ["number"], "param_type": "long", "param_description": " the long number to format"}, {"param_name": ["toAppendTo"], "param_type": "StringBuffer", "param_description": " the StringBuffer to which the formatted text is to be\n                   appended"}, {"param_name": ["status"], "param_type": "FieldPosition", "param_description": " the field position"}], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the formatted StringBuffer"], "return_type": ["StringBuffer"]}, "method_name": "format", "method_description": "Specialization of format. This method really calls\n format(double, StringBuffer, FieldPosition)\n thus the range of longs that are supported is only equal to\n the range that can be stored by double. This will never be\n a practical limitation.\n", "method_declar": ""}, {"params": [], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a copy of the String[] array supplied to the constructor or the most recent\n call to setChoices(double[], java.lang.String[])."], "return_type": ["Object[]"]}, "method_name": "getFormats", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a copy of the double[] array supplied to the constructor or the most recent\n call to setChoices(double[], java.lang.String[])."], "return_type": ["double[]"]}, "method_name": "getLimits", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Generates a hash code for the message format object.\n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": " the reference value"}], "class_name": "ChoiceFormat", "is_static": true, "return_value": {"return_name": [], "return_description": ["the least double value greather than d"], "return_type": ["double"]}, "method_name": "nextDouble", "method_description": "Finds the least double greater than d.\n If NaN, returns same value.\n \nUsed to make half-open intervals.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": " the reference value"}, {"param_name": ["positive"], "param_type": "boolean", "param_description": " true if the least double is desired;\n                 false otherwise"}], "class_name": "ChoiceFormat", "is_static": true, "return_value": {"return_name": [], "return_description": ["the least or greater double value"], "return_type": ["double"]}, "method_name": "nextDouble", "method_description": "Finds the least double greater than d (if positive is\n true), or the greatest double less than d (if\n positive is false).\n If NaN, returns same value.\n\n Does not affect floating-point flags,\n provided these member functions do not:\n          Double.longBitsToDouble(long)\n          Double.doubleToLongBits(double)\n          Double.isNaN(double)\n", "method_declar": ""}, {"params": [{"param_name": ["text"], "param_type": "String", "param_description": " the source text."}, {"param_name": ["status"], "param_type": "ParsePosition", "param_description": " an input-output parameter.  On input, the\n status.index field indicates the first character of the\n source text that should be parsed.  On exit, if no error\n occurred, status.index is set to the first unparsed character\n in the source text.  On exit, if an error did occur,\n status.index is unchanged and status.errorIndex is set to the\n first index of the character that caused the parse to fail."}], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["A Number representing the value of the number parsed."], "return_type": ["Number"]}, "method_name": "parse", "method_description": "Parses a Number from the input text.\n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": " the reference value"}], "class_name": "ChoiceFormat", "is_static": true, "return_value": {"return_name": [], "return_description": ["the greatest double value less than d"], "return_type": ["double"]}, "method_name": "previousDouble", "method_description": "Finds the greatest double less than d.\n If NaN, returns same value.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["limits"], "param_type": "double[]", "param_description": " contains the top value that you want\n parsed with that format, and should be in ascending sorted order. When\n formatting X, the choice will be the i, where\n limit[i] \u2264 X < limit[i+1].\n If the limit array is not in ascending order, the results of formatting\n will be incorrect."}, {"param_name": ["formats"], "param_type": "String[]", "param_description": " are the formats you want to use for each limit.\n They can be either Format objects or Strings.\n When formatting with object Y,\n if the object is a NumberFormat, then ((NumberFormat) Y).format(X)\n is called. Otherwise Y.toString() is called."}], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setChoices", "method_description": "Set the choices to be used in formatting.\n", "method_declar": ""}, {"params": [], "class_name": "ChoiceFormat", "is_static": false, "return_value": {"return_name": [], "return_description": ["the pattern string"], "return_type": ["String"]}, "method_name": "toPattern", "method_description": "Gets the pattern.\n", "method_declar": ""}], "class_name": "ChoiceFormat", "Vars": null}