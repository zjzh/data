{"package_name": "java.text", "subclass_list": ["AttributedCharacterIterator", "StringCharacterIterator", "AttributedCharacterIterator", "StringCharacterIterator"], "class_description": "This interface defines a protocol for bidirectional iteration over text.\n The iterator iterates over a bounded sequence of characters.  Characters\n are indexed with values beginning with the value returned by getBeginIndex() and\n continuing through the value returned by getEndIndex()-1. Iterators maintain a current character index, whose valid range is from\n getBeginIndex() to getEndIndex(); the value getEndIndex() is included to allow\n handling of zero-length text ranges and for historical reasons.\n The current index can be retrieved by calling getIndex() and set directly\n by calling setIndex(), first(), and last(). The methods previous() and next() are used for iteration. They return DONE if\n they would move outside the range from getBeginIndex() to getEndIndex() -1,\n signaling that the iterator has reached the end of the sequence. DONE is\n also returned by other methods to indicate that the current index is\n outside this range. Examples: Traverse the text from start to finish ", "class_type": "interface", "typealias": [], "interface_list": ["Cloneable"], "class_inherit_list": [], "Methods": [], "class_name": "CharacterIterator", "Vars": null}