{"package_name": "java.text", "subclass_list": [], "class_description": "A CollationKey represents a String under the\n rules of a specific Collator object. Comparing two\n CollationKeys returns the relative order of the\n Strings they represent. Using CollationKeys\n to compare Strings is generally faster than using\n Collator.compare. Thus, when the Strings\n must be compared multiple times, for example when sorting a list\n of Strings. It's more efficient to use CollationKeys. You can not create CollationKeys directly. Rather,\n generate them by calling Collator.getCollationKey.\n You can only compare CollationKeys generated from\n the same Collator object. Generating a CollationKey for a String\n involves examining the entire String\n and converting it to series of bits that can be compared bitwise. This\n allows fast comparisons once the keys are generated. The cost of generating\n keys is recouped in faster comparisons when Strings need\n to be compared many times. On the other hand, the result of a comparison\n is often determined by the first couple of characters of each String.\n Collator.compare examines only as many characters as it needs which\n allows it to be faster when doing single comparisons. The following example shows how CollationKeys might be used\n to sort a list of Strings. ", "class_type": "class", "typealias": [], "interface_list": ["Comparable<CollationKey>"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "CollationKey", "Vars": null}