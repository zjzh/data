{"package_name": "java.text", "subclass_list": [], "class_description": "StringCharacterIterator implements the\n CharacterIterator protocol for a String.\n The StringCharacterIterator class iterates over the\n entire String. ", "class_type": "class", "typealias": [], "interface_list": ["CharacterIterator"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["text"], "param_type": "String", "param_description": " the String to be iterated over"}], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an iterator with an initial index of 0.\n", "method_declar": ""}, {"params": [{"param_name": ["text"], "param_type": "String", "param_description": " The String to be iterated over"}, {"param_name": ["pos"], "param_type": "int", "param_description": " Initial iterator position"}], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an iterator with the specified initial index.\n", "method_declar": ""}, {"params": [{"param_name": ["text"], "param_type": "String", "param_description": " The String to be iterated over"}, {"param_name": ["begin"], "param_type": "int", "param_description": " Index of the first character"}, {"param_name": ["end"], "param_type": "int", "param_description": " Index of the character following the last character"}, {"param_name": ["pos"], "param_type": "int", "param_description": " Initial iterator position"}], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an iterator over the given range of the given string, with the\n index set at the specified position.\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["A copy of this"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Creates a copy of this iterator.\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character at the current position or DONE if the current\n position is off the end of the text."], "return_type": ["char"]}, "method_name": "current", "method_description": "Implements CharacterIterator.current() for String.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the StringCharacterIterator object to be compared with."}], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the given obj is the same as this\n StringCharacterIterator object; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the equality of two StringCharacterIterator objects.\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first character in the text, or DONE if the text is empty"], "return_type": ["char"]}, "method_name": "first", "method_description": "Implements CharacterIterator.first() for String.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index at which the text begins."], "return_type": ["int"]}, "method_name": "getBeginIndex", "method_description": "Implements CharacterIterator.getBeginIndex() for String.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index after the last character in the text"], "return_type": ["int"]}, "method_name": "getEndIndex", "method_description": "Implements CharacterIterator.getEndIndex() for String.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current index."], "return_type": ["int"]}, "method_name": "getIndex", "method_description": "Implements CharacterIterator.getIndex() for String.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["A hash code"], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Computes a hashcode for this iterator.\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last character in the text, or DONE if the text is empty"], "return_type": ["char"]}, "method_name": "last", "method_description": "Implements CharacterIterator.last() for String.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character at the new position or DONE if the new\n position is off the end of the text range."], "return_type": ["char"]}, "method_name": "next", "method_description": "Implements CharacterIterator.next() for String.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character at the new position or DONE if the current\n position is equal to getBeginIndex()."], "return_type": ["char"]}, "method_name": "previous", "method_description": "Implements CharacterIterator.previous() for String.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["p"], "param_type": "int", "param_description": " the position within the text.  Valid values range from\n getBeginIndex() to getEndIndex().  An IllegalArgumentException is thrown\n if an invalid value is supplied."}], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the character at the specified position or DONE if the specified position is equal to getEndIndex()"], "return_type": ["char"]}, "method_name": "setIndex", "method_description": "Implements CharacterIterator.setIndex() for String.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["text"], "param_type": "String", "param_description": " The String to be iterated over"}], "class_name": "StringCharacterIterator", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setText", "method_description": "Reset this iterator to point to a new string.  This package-visible\n method is used by other java.text classes that want to avoid allocating\n new StringCharacterIterator objects every time their setText method\n is called.\n", "method_declar": ""}], "class_name": "StringCharacterIterator", "Vars": null}