{"package_name": "java.nio.channels", "subclass_list": [], "class_description": "A selectable channel for stream-oriented connecting sockets. A socket channel is created by invoking one of the open\n methods of this class.  It is not possible to create a channel for an arbitrary,\n pre-existing socket. A newly-created socket channel is open but not yet\n connected.  An attempt to invoke an I/O operation upon an unconnected\n channel will cause a NotYetConnectedException to be thrown.  A\n socket channel can be connected by invoking its connect\n method; once connected, a socket channel remains connected until it is\n closed.  Whether or not a socket channel is connected may be determined by\n invoking its isConnected method. Socket channels support non-blocking connection:\u00a0A socket\n channel may be created and the process of establishing the link to the\n remote socket may be initiated via the connect method for\n later completion by the finishConnect method.\n Whether or not a connection operation is in progress may be determined by\n invoking the isConnectionPending method. Socket channels support asynchronous shutdown, which is similar\n to the asynchronous close operation specified in the Channel class.\n If the input side of a socket is shut down by one thread while another\n thread is blocked in a read operation on the socket's channel, then the read\n operation in the blocked thread will complete without reading any bytes and\n will return -1.  If the output side of a socket is shut down by one\n thread while another thread is blocked in a write operation on the socket's\n channel, then the blocked thread will receive an AsynchronousCloseException. Socket options are configured using the setOption method. Socket channels support the following options: Socket channels are safe for use by multiple concurrent threads.  They\n support concurrent reading and writing, though at most one thread may be\n reading and at most one thread may be writing at any given time.  The connect and finishConnect methods are\n mutually synchronized against each other, and an attempt to initiate a read\n or write operation while an invocation of one of these methods is in\n progress will block until that invocation is complete. ", "class_type": "class", "typealias": [], "interface_list": ["ByteChannel", "ScatteringByteChannel", "GatheringByteChannel", "NetworkChannel"], "class_inherit_list": ["AbstractSelectableChannel"], "Methods": [], "class_name": "SocketChannel", "Vars": null}