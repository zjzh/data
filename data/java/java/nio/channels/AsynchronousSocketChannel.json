{"package_name": "java.nio.channels", "subclass_list": [], "class_description": "An asynchronous channel for stream-oriented connecting sockets. Asynchronous socket channels are created in one of two ways. A newly-created\n AsynchronousSocketChannel is created by invoking one of the open methods defined by this class. A newly-created channel is open but\n not yet connected. A connected AsynchronousSocketChannel is created\n when a connection is made to the socket of an AsynchronousServerSocketChannel.\n It is not possible to create an asynchronous socket channel for an arbitrary,\n pre-existing socket. A newly-created channel is connected by invoking its connect\n method; once connected, a channel remains connected until it is closed.  Whether\n or not a socket channel is connected may be determined by invoking its getRemoteAddress method. An attempt to invoke an I/O\n operation upon an unconnected channel will cause a NotYetConnectedException\n to be thrown. Channels of this type are safe for use by multiple concurrent threads.\n They support concurrent reading and writing, though at most one read operation\n and one write operation can be outstanding at any time.\n If a thread initiates a read operation before a previous read operation has\n completed then a ReadPendingException will be thrown. Similarly, an\n attempt to initiate a write operation before a previous write has completed\n will throw a WritePendingException. Socket options are configured using the setOption method. Asynchronous socket channels support the following options: ", "class_type": "class", "typealias": [], "interface_list": ["AsynchronousByteChannel", "NetworkChannel"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "AsynchronousSocketChannel", "Vars": null}