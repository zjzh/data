{"package_name": "java.nio.channels", "subclass_list": [], "class_description": "An asynchronous channel for reading, writing, and manipulating a file. An asynchronous file channel is created when a file is opened by invoking\n one of the open methods defined by this class. The file contains\n a variable-length sequence of bytes that can be read and written and whose\n current size can be queried. The size of the file increases\n when bytes are written beyond its  current size; the size of the file decreases\n when it is truncated. An asynchronous file channel does not have a current position\n within the file. Instead, the file position is specified to each read and\n write method that initiates asynchronous operations. A CompletionHandler\n is specified as a parameter and is invoked to consume the result of the I/O\n operation. This class also defines read and write methods that initiate\n asynchronous operations, returning a Future to represent the pending\n result of the operation. The Future may be used to check if the\n operation has completed, wait for its completion, and retrieve the result. In addition to read and write operations, this class defines the\n following operations: An AsynchronousFileChannel is associated with a thread pool to\n which tasks are submitted to handle I/O events and dispatch to completion\n handlers that consume the results of I/O operations on the channel. The\n completion handler for an I/O operation initiated on a channel is guaranteed\n to be invoked by one of the threads in the thread pool (This ensures that the\n completion handler is run by a thread with the expected identity).\n Where an I/O operation completes immediately, and the initiating thread is\n itself a thread in the thread pool, then the completion handler may be invoked\n directly by the initiating thread. When an AsynchronousFileChannel is\n created without specifying a thread pool then the channel is associated with\n a system-dependent default thread pool that may be shared with other\n channels. The default thread pool is configured by the system properties\n defined by the AsynchronousChannelGroup class. Channels of this type are safe for use by multiple concurrent threads. The\n Channel#close method may be invoked at any time, as specified\n by the Channel interface. This causes all outstanding asynchronous\n operations on the channel to complete with the exception AsynchronousCloseException. Multiple read and write operations may be\n outstanding at the same time. When multiple read and write operations are\n outstanding then the ordering of the I/O operations, and the order that the\n completion handlers are invoked, is not specified; they are not, in particular,\n guaranteed to execute in the order that the operations were initiated. The\n ByteBuffers used when reading or writing are not\n safe for use by multiple concurrent I/O operations. Furthermore, after an I/O\n operation is initiated then care should be taken to ensure that the buffer is\n not accessed until after the operation has completed. As with FileChannel, the view of a file provided by an instance of\n this class is guaranteed to be consistent with other views of the same file\n provided by other instances in the same program.  The view provided by an\n instance of this class may or may not, however, be consistent with the views\n seen by other concurrently-running programs due to caching performed by the\n underlying operating system and delays induced by network-filesystem protocols.\n This is true regardless of the language in which these other programs are\n written, and whether they are running on the same machine or on some other\n machine.  The exact nature of any such inconsistencies are system-dependent\n and are therefore unspecified. ", "class_type": "class", "typealias": [], "interface_list": ["AsynchronousChannel"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "AsynchronousFileChannel", "Vars": null}