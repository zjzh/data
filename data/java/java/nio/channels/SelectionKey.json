{"package_name": "java.nio.channels", "subclass_list": ["AbstractSelectionKey", "AbstractSelectionKey"], "class_description": "A token representing the registration of a SelectableChannel with a\n Selector. A selection key is created each time a channel is registered with a\n selector.  A key remains valid until it is cancelled by invoking its\n cancel method, by closing its channel, or by closing its\n selector.  Cancelling a key does not immediately remove it from its\n selector; it is instead added to the selector's cancelled-key set for removal during the\n next selection operation.  The validity of a key may be tested by invoking\n its isValid method. A selection key contains two operation sets represented as\n integer values.  Each bit of an operation set denotes a category of\n selectable operations that are supported by the key's channel. That a selection key's ready set indicates that its channel is ready for\n some operation category is a hint, but not a guarantee, that an operation in\n such a category may be performed by a thread without causing the thread to\n block.  A ready set is most likely to be accurate immediately after the\n completion of a selection operation.  It is likely to be made inaccurate by\n external events and by I/O operations that are invoked upon the\n corresponding channel. This class defines all known operation-set bits, but precisely which\n bits are supported by a given channel depends upon the type of the channel.\n Each subclass of SelectableChannel defines an SelectableChannel#validOps() method which returns a set\n identifying just those operations that are supported by the channel.  An\n attempt to set or test an operation-set bit that is not supported by a key's\n channel will result in an appropriate run-time exception. It is often necessary to associate some application-specific data with a\n selection key, for example an object that represents the state of a\n higher-level protocol and handles readiness notifications in order to\n implement that protocol.  Selection keys therefore support the\n attachment of a single arbitrary object to a key.  An object can be\n attached via the attach method and then later retrieved via\n the attachment method. Selection keys are safe for use by multiple concurrent threads.  The\n operations of reading and writing the interest set will, in general, be\n synchronized with certain operations of the selector.  Exactly how this\n synchronization is performed is implementation-dependent: In a naive\n implementation, reading or writing the interest set may block indefinitely\n if a selection operation is already in progress; in a high-performance\n implementation, reading or writing the interest set may block briefly, if at\n all.  In any case, a selection operation will always use the interest-set\n value that was current at the moment that the operation began. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "SelectionKey", "Vars": null}