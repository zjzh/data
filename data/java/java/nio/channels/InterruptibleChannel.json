{"package_name": "java.nio.channels", "subclass_list": ["AbstractInterruptibleChannel", "AbstractSelectableChannel", "DatagramChannel", "FileChannel", "Pipe.SinkChannel", "Pipe.SourceChannel", "SelectableChannel", "ServerSocketChannel", "SocketChannel", "AbstractInterruptibleChannel", "AbstractSelectableChannel", "DatagramChannel", "FileChannel", "Pipe.SinkChannel", "Pipe", "Pipe.SourceChannel", "Pipe", "SelectableChannel", "Selector", "ServerSocketChannel", "SocketChannel"], "class_description": "A channel that can be asynchronously closed and interrupted. A channel that implements this interface is asynchronously\n closeable: If a thread is blocked in an I/O operation on an\n interruptible channel then another thread may invoke the channel's close method.  This will cause the blocked thread to receive an\n AsynchronousCloseException. A channel that implements this interface is also interruptible:\n If a thread is blocked in an I/O operation on an interruptible channel then\n another thread may invoke the blocked thread's Thread#interrupt() method.  This will cause the channel to be closed, the blocked\n thread to receive a ClosedByInterruptException, and the blocked\n thread's interrupt status to be set. If a thread's interrupt status is already set and it invokes a blocking\n I/O operation upon a channel then the channel will be closed and the thread\n will immediately receive a ClosedByInterruptException; its interrupt\n status will remain set. A channel supports asynchronous closing and interruption if, and only\n if, it implements this interface.  This can be tested at runtime, if\n necessary, via the instanceof operator. ", "class_type": "interface", "typealias": [], "interface_list": ["Channel"], "class_inherit_list": [], "Methods": [], "class_name": "InterruptibleChannel", "Vars": null}