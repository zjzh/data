{"package_name": "java.nio.channels", "subclass_list": ["AsynchronousByteChannel", "AsynchronousFileChannel", "AsynchronousServerSocketChannel", "AsynchronousSocketChannel", "AsynchronousByteChannel", "AsynchronousFileChannel", "AsynchronousServerSocketChannel", "AsynchronousSocketChannel"], "class_description": "A channel that supports asynchronous I/O operations. Asynchronous I/O\n operations will usually take one of two forms: In the first form, the methods defined by the Future\n interface may be used to check if the operation has completed, wait for its\n completion, and to retrieve the result. In the second form, a CompletionHandler is invoked to consume the result of the I/O operation when\n it completes or fails. A channel that implements this interface is asynchronously\n closeable: If an I/O operation is outstanding on the channel and the\n channel's close method is invoked, then the I/O operation\n fails with the exception AsynchronousCloseException. Asynchronous channels are safe for use by multiple concurrent threads.\n Some channel implementations may support concurrent reading and writing, but\n may not allow more than one read and one write operation to be outstanding at\n any given time. ", "class_type": "interface", "typealias": [], "interface_list": ["Channel"], "class_inherit_list": [], "Methods": [], "class_name": "AsynchronousChannel", "Vars": null}