{"package_name": "java.nio.channels", "subclass_list": [], "class_description": "A token representing a lock on a region of a file. A file-lock object is created each time a lock is acquired on a file via\n one of the FileChannel#lock(long,long,boolean) or FileChannel#tryLock(long,long,boolean) methods of the\n FileChannel class, or the AsynchronousFileChannel#lock(long,long,boolean,Object,CompletionHandler)\n or AsynchronousFileChannel#tryLock(long,long,boolean)\n methods of the AsynchronousFileChannel class. A file-lock object is initially valid.  It remains valid until the lock\n is released by invoking the release method, by closing the\n channel that was used to acquire it, or by the termination of the Java\n virtual machine, whichever comes first.  The validity of a lock may be\n tested by invoking its isValid method. A file lock is either exclusive or shared.  A shared lock\n prevents other concurrently-running programs from acquiring an overlapping\n exclusive lock, but does allow them to acquire overlapping shared locks.  An\n exclusive lock prevents other programs from acquiring an overlapping lock of\n either type.  Once it is released, a lock has no further effect on the locks\n that may be acquired by other programs. Whether a lock is exclusive or shared may be determined by invoking its\n isShared method.  Some platforms do not support shared\n locks, in which case a request for a shared lock is automatically converted\n into a request for an exclusive lock. The locks held on a particular file by a single Java virtual machine do\n not overlap.  The overlaps method may be used to test\n whether a candidate lock range overlaps an existing lock. A file-lock object records the file channel upon whose file the lock is\n held, the type and validity of the lock, and the position and size of the\n locked region.  Only the validity of a lock is subject to change over time;\n all other aspects of a lock's state are immutable. File locks are held on behalf of the entire Java virtual machine.\n They are not suitable for controlling access to a file by multiple\n threads within the same virtual machine. File-lock objects are safe for use by multiple concurrent threads. ", "class_type": "class", "typealias": [], "interface_list": ["AutoCloseable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "FileLock", "Vars": null}