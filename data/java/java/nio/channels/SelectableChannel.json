{"package_name": "java.nio.channels", "subclass_list": ["AbstractSelectableChannel", "AbstractSelectableChannel"], "class_description": "A channel that can be multiplexed via a Selector. In order to be used with a selector, an instance of this class must\n first be registered via the register method.  This method returns a new SelectionKey object\n that represents the channel's registration with the selector. Once registered with a selector, a channel remains registered until it\n is deregistered.  This involves deallocating whatever resources were\n allocated to the channel by the selector. A channel cannot be deregistered directly; instead, the key representing\n its registration must be cancelled.  Cancelling a key requests that\n the channel be deregistered during the selector's next selection operation.\n A key may be cancelled explicitly by invoking its SelectionKey#cancel() method.  All of a channel's keys are cancelled\n implicitly when the channel is closed, whether by invoking its Channel#close method or by interrupting a thread blocked in an I/O\n operation upon the channel. If the selector itself is closed then the channel will be deregistered,\n and the key representing its registration will be invalidated, without\n further delay. A channel may be registered at most once with any particular selector. Whether or not a channel is registered with one or more selectors may be\n determined by invoking the isRegistered method. Selectable channels are safe for use by multiple concurrent\n threads. ", "class_type": "class", "typealias": [], "interface_list": ["Channel"], "class_inherit_list": ["AbstractInterruptibleChannel"], "Methods": [], "class_name": "SelectableChannel", "Vars": null}