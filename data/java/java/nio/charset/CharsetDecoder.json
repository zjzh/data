{"package_name": "java.nio.charset", "subclass_list": [], "class_description": "An engine that can transform a sequence of bytes in a specific charset into a sequence of\n sixteen-bit Unicode characters. The input byte sequence is provided in a byte buffer or a series\n of such buffers.  The output character sequence is written to a character buffer\n or a series of such buffers.  A decoder should always be used by making\n the following sequence of method invocations, hereinafter referred to as a\n decoding operation: There are two general types of decoding errors.  If the input byte\n sequence is not legal for this charset then the input is considered malformed.  If\n the input byte sequence is legal but cannot be mapped to a valid\n Unicode character then an unmappable character has been encountered. How a decoding error is handled depends upon the action requested for\n that type of error, which is described by an instance of the CodingErrorAction class.  The possible error actions are to CodingErrorAction#IGNORE the erroneous input, CodingErrorAction#REPORT the error to the invoker via\n the returned CoderResult object, or CodingErrorAction#REPLACE the erroneous input with the current value of the\n replacement string.  The replacement\n\n \n \n \n \n \n has the initial value \"\\uFFFD\";\n \n\n its value may be changed via the replaceWith method. The default action for malformed-input and unmappable-character errors\n is to CodingErrorAction#REPORT them.  The\n malformed-input error action may be changed via the onMalformedInput method; the\n unmappable-character action may be changed via the onUnmappableCharacter method. This class is designed to handle many of the details of the decoding\n process, including the implementation of error actions.  A decoder for a\n specific charset, which is a concrete subclass of this class, need only\n implement the abstract decodeLoop method, which\n encapsulates the basic decoding loop.  A subclass that maintains internal\n state should, additionally, override the implFlush and\n implReset methods. Instances of this class are not safe for use by multiple concurrent\n threads. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "CharsetDecoder", "Vars": null}