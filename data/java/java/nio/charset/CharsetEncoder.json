{"package_name": "java.nio.charset", "subclass_list": [], "class_description": "An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of\n bytes in a specific charset. The input character sequence is provided in a character buffer or a series\n of such buffers.  The output byte sequence is written to a byte buffer\n or a series of such buffers.  An encoder should always be used by making\n the following sequence of method invocations, hereinafter referred to as an\n encoding operation: There are two general types of encoding errors.  If the input character\n sequence is not a legal sixteen-bit Unicode sequence then the input is considered malformed.  If\n the input character sequence is legal but cannot be mapped to a valid\n byte sequence in the given charset then an unmappable character has been encountered. How an encoding error is handled depends upon the action requested for\n that type of error, which is described by an instance of the CodingErrorAction class.  The possible error actions are to CodingErrorAction#IGNORE the erroneous input, CodingErrorAction#REPORT the error to the invoker via\n the returned CoderResult object, or CodingErrorAction#REPLACE the erroneous input with the current value of the\n replacement byte array.  The replacement\n\n \n is initially set to the encoder's default replacement, which often\n (but not always) has the initial value\u00a0{\u00a0(byte)'?'\u00a0};\n \n \n \n \n\n its value may be changed via the replaceWith method. The default action for malformed-input and unmappable-character errors\n is to CodingErrorAction#REPORT them.  The\n malformed-input error action may be changed via the onMalformedInput method; the\n unmappable-character action may be changed via the onUnmappableCharacter method. This class is designed to handle many of the details of the encoding\n process, including the implementation of error actions.  An encoder for a\n specific charset, which is a concrete subclass of this class, need only\n implement the abstract encodeLoop method, which\n encapsulates the basic encoding loop.  A subclass that maintains internal\n state should, additionally, override the implFlush and\n implReset methods. Instances of this class are not safe for use by multiple concurrent\n threads. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "CharsetEncoder", "Vars": null}