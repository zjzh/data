{"package_name": "java.nio.file", "subclass_list": [], "class_description": "A watch service that watches registered objects for changes and\n events. For example a file manager may use a watch service to monitor a\n directory for changes so that it can update its display of the list of files\n when files are created or deleted. A Watchable object is registered with a watch service by invoking\n its Watchable#register method, returning a WatchKey\n to represent the registration. When an event for an object is detected the\n key is signalled, and if not currently signalled, it is queued to\n the watch service so that it can be retrieved by consumers that invoke the\n poll or take methods to retrieve keys\n and process events. Once the events have been processed the consumer\n invokes the key's WatchKey#reset method to reset the key which\n allows the key to be signalled and re-queued with further events. Registration with a watch service is cancelled by invoking the key's\n WatchKey#cancel method. A key that is queued at the time that\n it is cancelled remains in the queue until it is retrieved. Depending on the\n object, a key may be cancelled automatically. For example, suppose a\n directory is watched and the watch service detects that it has been deleted\n or its file system is no longer accessible. When a key is cancelled in this\n manner it is signalled and queued, if not currently signalled. To ensure\n that the consumer is notified the return value from the reset\n method indicates if the key is valid. A watch service is safe for use by multiple concurrent consumers. To\n ensure that only one consumer processes the events for a particular object at\n any time then care should be taken to ensure that the key's reset\n method is only invoked after its events have been processed. The close method may be invoked at any time to close the service causing\n any threads waiting to retrieve keys, to throw ClosedWatchServiceException. File systems may report events faster than they can be retrieved or\n processed and an implementation may impose an unspecified limit on the number\n of events that it may accumulate. Where an implementation knowingly\n discards events then it arranges for the key's WatchKey#pollEvents method to return an element with an event type of StandardWatchEventKinds#OVERFLOW. This event can be used by the\n consumer as a trigger to re-examine the state of the object. When an event is reported to indicate that a file in a watched directory\n has been modified then there is no guarantee that the program (or programs)\n that have modified the file have completed. Care should be taken to coordinate\n access with other programs that may be updating the file.\n The FileChannel class defines methods\n to lock regions of a file against access by other programs. ", "class_type": "interface", "typealias": [], "interface_list": ["Closeable"], "class_inherit_list": [], "Methods": [], "class_name": "WatchService", "Vars": null}