{"package_name": "java.nio.file", "subclass_list": [], "class_description": "A token representing the registration of a Watchable object\n with a WatchService. A watch key is created when a watchable object is registered with a watch\n service. The key remains valid until: A watch key has a state. When initially created the key is said to be\n ready. When an event is detected then the key is signalled\n and queued so that it can be retrieved by invoking the watch service's WatchService#poll() or WatchService#take() methods. Once\n signalled, a key remains in this state until its reset method\n is invoked to return the key to the ready state. Events detected while the\n key is in the signalled state are queued but do not cause the key to be\n re-queued for retrieval from the watch service. Events are retrieved by\n invoking the key's pollEvents method. This method\n retrieves and removes all events accumulated for the object. When initially\n created, a watch key has no pending events. Typically events are retrieved\n when the key is in the signalled state leading to the following idiom: Watch keys are safe for use by multiple concurrent threads. Where there\n are several threads retrieving signalled keys from a watch service then care\n should be taken to ensure that the reset method is only invoked after\n the events for the object have been processed. This ensures that one thread\n is processing the events for an object at any time. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "WatchKey", "Vars": null}