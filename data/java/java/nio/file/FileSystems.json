{"package_name": "java.nio.file", "subclass_list": [], "class_description": "Factory methods for file systems. This class defines the getDefault method to get the default file system and factory methods to\n construct other types of file systems. The first invocation of any of the methods defined by this class causes\n the default FileSystemProvider to be loaded. The default\n provider, identified by the URI scheme \"file\", creates the FileSystem\n that provides access to the file systems accessible to the Java virtual\n machine. If the process of loading or initializing the default provider fails\n then an unspecified error is thrown. The first invocation of the FileSystemProvider#installedProviders method, by way of invoking any of the newFileSystem methods defined by this class, locates and loads all\n installed file system providers. Installed providers are loaded using the\n service-provider loading facility defined by the ServiceLoader class.\n Installed providers are loaded using the system class loader. If the\n system class loader cannot be found then the extension class loader is used;\n if there is no extension class loader then the bootstrap class loader is used.\n Providers are typically installed by placing them in a JAR file on the\n application class path or in the extension directory, the JAR file contains a\n provider-configuration file named java.nio.file.spi.FileSystemProvider\n in the resource directory META-INF/services, and the file lists one or\n more fully-qualified names of concrete subclass of FileSystemProvider\n that have a zero argument constructor.\n The ordering that installed providers are located is implementation specific.\n If a provider is instantiated and its FileSystemProvider#getScheme() returns the same URI scheme of a provider that was previously\n instantiated then the most recently instantiated duplicate is discarded. URI\n schemes are compared without regard to case. During construction a provider\n may safely access files associated with the default provider but care needs\n to be taken to avoid circular loading of other installed providers. If\n circular loading of installed providers is detected then an unspecified error\n is thrown. This class also defines factory methods that allow a ClassLoader\n to be specified when locating a provider. As with installed providers, the\n provider classes are identified by placing the provider configuration file\n in the resource directory META-INF/services. If a thread initiates the loading of the installed file system providers\n and another thread invokes a method that also attempts to load the providers\n then the method will block until the loading completes. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "FileSystems", "Vars": null}