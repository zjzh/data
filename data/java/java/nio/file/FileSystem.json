{"package_name": "java.nio.file", "subclass_list": [], "class_description": "Provides an interface to a file system and is the factory for objects to\n access files and other objects in the file system. The default file system, obtained by invoking the FileSystems#getDefault method, provides access to the file system that is\n accessible to the Java virtual machine. The FileSystems class defines\n methods to create file systems that provide access to other types of (custom)\n file systems. A file system is the factory for several types of objects: File systems vary greatly. In some cases the file system is a single\n hierarchy of files with one top-level root directory. In other cases it may\n have several distinct file hierarchies, each with its own top-level root\n directory. The getRootDirectories method may be\n used to iterate over the root directories in the file system. A file system\n is typically composed of one or more underlying FileStore\n that provide the storage for the files. Theses file stores can also vary in\n the features they support, and the file attributes or meta-data that\n they associate with files. A file system is open upon creation and can be closed by invoking its\n close method. Once closed, any further attempt to access\n objects in the file system cause ClosedFileSystemException to be\n thrown. File systems created by the default FileSystemProvider\n cannot be closed. A FileSystem can provide read-only or read-write access to the\n file system. Whether or not a file system provides read-only access is\n established when the FileSystem is created and can be tested by invoking\n its isReadOnly method. Attempts to write to file stores\n by means of an object associated with a read-only file system throws ReadOnlyFileSystemException. File systems are safe for use by multiple concurrent threads. The close method may be invoked at any time to close a file system but\n whether a file system is asynchronously closeable is provider specific\n and therefore unspecified. In other words, if a thread is accessing an\n object in a file system, and another thread invokes the close method\n then it may require to block until the first operation is complete. Closing\n a file system causes all open channels, watch services, and other Closeable objects associated with the file system to be closed. ", "class_type": "class", "typealias": [], "interface_list": ["Closeable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "FileSystem", "Vars": null}