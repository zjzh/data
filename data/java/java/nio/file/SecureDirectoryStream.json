{"package_name": "java.nio.file", "subclass_list": [], "class_description": "A DirectoryStream that defines operations on files that are located\n relative to an open directory. A SecureDirectoryStream is intended\n for use by sophisticated or security sensitive applications requiring to\n traverse file trees or otherwise operate on directories in a race-free manner.\n Race conditions can arise when a sequence of file operations cannot be\n carried out in isolation. Each of the file operations defined by this\n interface specify a relative path. All access to the file is relative\n to the open directory irrespective of if the directory is moved or replaced\n by an attacker while the directory is open. A SecureDirectoryStream\n may also be used as a virtual working directory. A SecureDirectoryStream requires corresponding support from the\n underlying operating system. Where an implementation supports this features\n then the DirectoryStream returned by the Files#newDirectoryStream method will be a SecureDirectoryStream and must\n be cast to that type in order to invoke the methods defined by this interface. In the case of the default provider, and a security manager is set, then the permission checks are\n performed using the path obtained by resolving the given relative path\n against the original path of the directory (irrespective of if the\n directory is moved since it was opened). ", "class_type": "interface", "typealias": [], "interface_list": ["DirectoryStream"], "class_inherit_list": [], "Methods": [], "class_name": "SecureDirectoryStream", "Vars": null}