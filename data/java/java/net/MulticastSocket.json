{"package_name": "java.net", "subclass_list": [], "class_description": "The multicast datagram socket class is useful for sending\n and receiving IP multicast packets.  A MulticastSocket is\n a (UDP) DatagramSocket, with additional capabilities for\n joining \"groups\" of other multicast hosts on the internet. A multicast group is specified by a class D IP address\n and by a standard UDP port number. Class D IP addresses\n are in the range 224.0.0.0 to 239.255.255.255,\n inclusive. The address 224.0.0.0 is reserved and should not be used. One would join a multicast group by first creating a MulticastSocket\n with the desired port, then invoking the\n joinGroup(InetAddress groupAddr)\n method: When a socket subscribes to a multicast group/port, it receives\n datagrams sent by other hosts to the group/port, as do all other\n members of the group and port.  A socket relinquishes membership\n in a group by the leaveGroup(InetAddress addr) method.  \n Multiple MulticastSocket's may subscribe to a multicast group\n and port concurrently, and they will all receive group datagrams. Currently applets are not allowed to use multicast sockets. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["DatagramSocket"], "Methods": [{"params": [], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a multicast socket.\n\n \nIf there is a security manager,\n its checkListen method is first called\n with 0 as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n \n\n When the socket is created the\n DatagramSocket#setReuseAddress(boolean) method is\n called to enable the SO_REUSEADDR socket option.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["port"], "param_type": "int", "param_description": " port to use"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a multicast socket and bind it to a specific port.\n\n \nIf there is a security manager,\n its checkListen method is first called\n with the port argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n \n\n When the socket is created the\n DatagramSocket#setReuseAddress(boolean) method is\n called to enable the SO_REUSEADDR socket option.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["bindaddr"], "param_type": "SocketAddress", "param_description": " Socket address to bind to, or null for\n                 an unbound socket."}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a MulticastSocket bound to the specified socket address.\n \n\n Or, if the address is null, create an unbound socket.\n\n \nIf there is a security manager,\n its checkListen method is first called\n with the SocketAddress port as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n \n\n When the socket is created the\n DatagramSocket#setReuseAddress(boolean) method is\n called to enable the SO_REUSEADDR socket option.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["An InetAddress representing\n  the address of the network interface used for\n  multicast packets."], "return_type": ["InetAddress"]}, "method_name": "getInterface", "method_description": "Retrieve the address of the network interface used for\n multicast packets.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the LoopbackMode has been disabled"], "return_type": ["boolean"]}, "method_name": "getLoopbackMode", "method_description": "Get the setting for local loopback of multicast datagrams.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the multicast NetworkInterface currently set"], "return_type": ["NetworkInterface"]}, "method_name": "getNetworkInterface", "method_description": "Get the multicast network interface set.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the default time-to-live value"], "return_type": ["byte"]}, "method_name": "getTTL", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    use the getTimeToLive method instead, which returns\n an int instead of a byte.\n  \nGet the default time-to-live for multicast packets sent out on\n the socket.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the default time-to-live value"], "return_type": ["int"]}, "method_name": "getTimeToLive", "method_description": "Get the default time-to-live for multicast packets sent out on\n the socket.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["mcastaddr"], "param_type": "SocketAddress", "param_description": " is the multicast address to join"}, {"param_name": ["netIf"], "param_type": "NetworkInterface", "param_description": " specifies the local interface to receive multicast\n        datagram packets, or null to defer to the interface set by\n       MulticastSocket#setInterface(InetAddress) or\n       MulticastSocket#setNetworkInterface(NetworkInterface)"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "joinGroup", "method_description": "Joins the specified multicast group at the specified interface.\n\n \nIf there is a security manager, this method first\n calls its checkMulticast method\n with the mcastaddr argument\n as its argument.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["mcastaddr"], "param_type": "InetAddress", "param_description": " is the multicast address to join"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "joinGroup", "method_description": "Joins a multicast group. Its behavior may be affected by\n setInterface or setNetworkInterface.\n\n \nIf there is a security manager, this method first\n calls its checkMulticast method\n with the mcastaddr argument\n as its argument.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["mcastaddr"], "param_type": "SocketAddress", "param_description": " is the multicast address to leave"}, {"param_name": ["netIf"], "param_type": "NetworkInterface", "param_description": " specifies the local interface or null to defer\n             to the interface set by\n             MulticastSocket#setInterface(InetAddress) or\n             MulticastSocket#setNetworkInterface(NetworkInterface)"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "leaveGroup", "method_description": "Leave a multicast group on a specified local interface.\n\n \nIf there is a security manager, this method first\n calls its checkMulticast method\n with the mcastaddr argument\n as its argument.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["mcastaddr"], "param_type": "InetAddress", "param_description": " is the multicast address to leave"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "leaveGroup", "method_description": "Leave a multicast group. Its behavior may be affected by\n setInterface or setNetworkInterface.\n\n \nIf there is a security manager, this method first\n calls its checkMulticast method\n with the mcastaddr argument\n as its argument.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["p"], "param_type": "DatagramPacket", "param_description": " is the packet to be sent. The packet should contain\n the destination multicast ip address and the data to be sent.\n One does not need to be the member of the group to send\n packets to a destination multicast address."}, {"param_name": ["ttl"], "param_type": "byte", "param_description": " optional time to live for multicast packet.\n default ttl is 1."}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "send", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    Use the following code or its equivalent instead:\n  ......\n  int ttl = mcastSocket.getTimeToLive();\n  mcastSocket.setTimeToLive(newttl);\n  mcastSocket.send(p);\n  mcastSocket.setTimeToLive(ttl);\n  ......\n  \nSends a datagram packet to the destination, with a TTL (time-\n to-live) other than the default for the socket.  This method\n need only be used in instances where a particular TTL is desired;\n otherwise it is preferable to set a TTL once on the socket, and\n use that default TTL for all packets.  This method does not\n  alter the default TTL for the socket. Its behavior may be\n affected by setInterface.\n\n \nIf there is a security manager, this method first performs some\n security checks. First, if p.getAddress().isMulticastAddress()\n is true, this method calls the\n security manager's checkMulticast method\n with p.getAddress() and ttl as its arguments.\n If the evaluation of that expression is false,\n this method instead calls the security manager's\n checkConnect method with arguments\n p.getAddress().getHostAddress() and\n p.getPort(). Each call to a security manager method\n could result in a SecurityException if the operation is not allowed.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["inf"], "param_type": "InetAddress", "param_description": " the InetAddress"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setInterface", "method_description": "Set the multicast network interface used by methods\n whose behavior would be affected by the value of the\n network interface. Useful for multihomed hosts.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["disable"], "param_type": "boolean", "param_description": " true to disable the LoopbackMode"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setLoopbackMode", "method_description": "Disable/Enable local loopback of multicast datagrams\n The option is used by the platform's networking code as a hint\n for setting whether multicast data will be looped back to\n the local socket.\n\n \nBecause this option is a hint, applications that want to\n verify what loopback mode is set to should call\n getLoopbackMode()\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["netIf"], "param_type": "NetworkInterface", "param_description": " the interface"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setNetworkInterface", "method_description": "Specify the network interface for outgoing multicast datagrams\n sent on this socket.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["ttl"], "param_type": "byte", "param_description": " the time-to-live"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTTL", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    use the setTimeToLive method instead, which uses\n int instead of byte as the type for ttl.\n  \nSet the default time-to-live for multicast packets sent out\n on this MulticastSocket in order to control the\n scope of the multicasts.\n\n \nThe ttl is an unsigned 8-bit quantity, and so must be\n in the range 0 <= ttl <= 0xFF .\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["ttl"], "param_type": "int", "param_description": " the time-to-live"}], "class_name": "MulticastSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTimeToLive", "method_description": "Set the default time-to-live for multicast packets sent out\n on this MulticastSocket in order to control the\n scope of the multicasts.\n\n \n The ttl must be in the range 0 <= ttl <=\n 255 or an IllegalArgumentException will be thrown.\n Multicast packets sent with a TTL of 0 are not transmitted\n on the network but may be delivered locally.\nSee also:\n", "method_declar": ""}], "class_name": "MulticastSocket", "Vars": null}