{"package_name": "java.net", "subclass_list": ["SSLServerSocket", "SSLServerSocket"], "class_description": "This class implements server sockets. A server socket waits for\n requests to come in over the network. It performs some operation\n based on that request, and then possibly returns a result to the requester. The actual work of the server socket is performed by an instance\n of the SocketImpl class. An application can\n change the socket factory that creates the socket\n implementation to configure itself to create sockets\n appropriate to the local firewall. ", "class_type": "class", "typealias": [], "interface_list": ["Closeable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an unbound server socket.\n", "method_declar": ""}, {"params": [{"param_name": ["port"], "param_type": "int", "param_description": " the port number, or 0 to use a port\n                   number that is automatically allocated."}], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a server socket, bound to the specified port. A port number\n of 0 means that the port number is automatically\n allocated, typically from an ephemeral port range. This port\n number can then be retrieved by calling getLocalPort.\n \n\n The maximum queue length for incoming connection indications (a\n request to connect) is set to 50. If a connection\n indication arrives when the queue is full, the connection is refused.\n \n\n If the application has specified a server socket factory, that\n factory's createSocketImpl method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n \n\n If there is a security manager,\n its checkListen method is called\n with the port argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["port"], "param_type": "int", "param_description": " the port number, or 0 to use a port\n                      number that is automatically allocated."}, {"param_name": ["backlog"], "param_type": "int", "param_description": " requested maximum length of the queue of incoming\n                      connections."}], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a server socket and binds it to the specified local port\n number, with the specified backlog.\n A port number of 0 means that the port number is\n automatically allocated, typically from an ephemeral port range.\n This port number can then be retrieved by calling\n getLocalPort.\n \n\n The maximum queue length for incoming connection indications (a\n request to connect) is set to the backlog parameter. If\n a connection indication arrives when the queue is full, the\n connection is refused.\n \n\n If the application has specified a server socket factory, that\n factory's createSocketImpl method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n \n\n If there is a security manager,\n its checkListen method is called\n with the port argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n\n The backlog argument is the requested maximum number of\n pending connections on the socket. Its exact semantics are implementation\n specific. In particular, an implementation may impose a maximum length\n or may choose to ignore the parameter altogther. The value provided\n should be greater than 0. If it is less than or equal to\n 0, then an implementation specific default will be used.\n \n\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["port"], "param_type": "int", "param_description": " the port number, or 0 to use a port\n              number that is automatically allocated."}, {"param_name": ["backlog"], "param_type": "int", "param_description": " requested maximum length of the queue of incoming\n                connections."}, {"param_name": ["bindAddr"], "param_type": "InetAddress", "param_description": " the local InetAddress the server will bind to"}], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a server with the specified port, listen backlog, and\n local IP address to bind to.  The bindAddr argument\n can be used on a multi-homed host for a ServerSocket that\n will only accept connect requests to one of its addresses.\n If bindAddr is null, it will default accepting\n connections on any/all local addresses.\n The port must be between 0 and 65535, inclusive.\n A port number of 0 means that the port number is\n automatically allocated, typically from an ephemeral port range.\n This port number can then be retrieved by calling\n getLocalPort.\n\n \nIf there is a security manager, this method\n calls its checkListen method\n with the port argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\n\n The backlog argument is the requested maximum number of\n pending connections on the socket. Its exact semantics are implementation\n specific. In particular, an implementation may impose a maximum length\n or may choose to ignore the parameter altogther. The value provided\n should be greater than 0. If it is less than or equal to\n 0, then an implementation specific default will be used.\n \n\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new Socket"], "return_type": ["Socket"]}, "method_name": "accept", "method_description": "Listens for a connection to be made to this socket and accepts\n it. The method blocks until a connection is made.\n\n \nA new Socket s is created and, if there\n is a security manager,\n the security manager's checkAccept method is called\n with s.getInetAddress().getHostAddress() and\n s.getPort()\n as its arguments to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["endpoint"], "param_type": "SocketAddress", "param_description": " The IP address and port number to bind to."}, {"param_name": ["backlog"], "param_type": "int", "param_description": " requested maximum length of the queue of\n                          incoming connections."}], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "bind", "method_description": "Binds the ServerSocket to a specific address\n (IP address and port number).\n \n\n If the address is null, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n \n\n The backlog argument is the requested maximum number of\n pending connections on the socket. Its exact semantics are implementation\n specific. In particular, an implementation may impose a maximum length\n or may choose to ignore the parameter altogther. The value provided\n should be greater than 0. If it is less than or equal to\n 0, then an implementation specific default will be used.\n", "method_declar": ""}, {"params": [{"param_name": ["endpoint"], "param_type": "SocketAddress", "param_description": " The IP address and port number to bind to."}], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "bind", "method_description": "Binds the ServerSocket to a specific address\n (IP address and port number).\n \n\n If the address is null, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n \n\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this socket.\n\n Any thread currently blocked in accept() will throw\n a SocketException.\n\n \n If this socket has an associated channel then the channel is closed\n as well.\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the server-socket channel associated with this socket,\n          or null if this socket was not created\n          for a channel"], "return_type": ["ServerSocketChannel"]}, "method_name": "getChannel", "method_description": "Returns the unique ServerSocketChannel object\n associated with this socket, if any.\n\n \n A server socket will have a channel if, and only if, the channel\n itself was created via the ServerSocketChannel.open\n method.\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the address to which this socket is bound,\n          or the loopback address if denied by the security manager,\n          or null if the socket is unbound."], "return_type": ["InetAddress"]}, "method_name": "getInetAddress", "method_description": "Returns the local address of this server socket.\n \n\n If the socket was bound prior to being closed,\n then this method will continue to return the local address\n after the socket is closed.\n \n\n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n the InetAddress#getLoopbackAddress address is returned.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the port number to which this socket is listening or\n          -1 if the socket is not bound yet."], "return_type": ["int"]}, "method_name": "getLocalPort", "method_description": "Returns the port number on which this socket is listening.\n \n\n If the socket was bound prior to being closed,\n then this method will continue to return the port number\n after the socket is closed.\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a SocketAddress representing the local endpoint of\n         this socket, or a SocketAddress representing the\n         loopback address if denied by the security manager,\n         or null if the socket is not bound yet."], "return_type": ["SocketAddress"]}, "method_name": "getLocalSocketAddress", "method_description": "Returns the address of the endpoint this socket is bound to.\n \n\n If the socket was bound prior to being closed,\n then this method will continue to return the address of the endpoint\n after the socket is closed.\n \n\n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a SocketAddress representing the\n InetAddress#getLoopbackAddress address and the local\n port to which the socket is bound is returned.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value of the SocketOptions#SO_RCVBUF\n         option for this Socket."], "return_type": ["int"]}, "method_name": "getReceiveBufferSize", "method_description": "Gets the value of the SocketOptions#SO_RCVBUF option\n for this ServerSocket, that is the proposed buffer size that\n will be used for Sockets accepted from this ServerSocket.\n\n \nNote, the value actually set in the accepted socket is determined by\n calling Socket#getReceiveBufferSize().\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a boolean indicating whether or not\n         SocketOptions#SO_REUSEADDR is enabled."], "return_type": ["boolean"]}, "method_name": "getReuseAddress", "method_description": "Tests if SocketOptions#SO_REUSEADDR is enabled.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the SocketOptions#SO_TIMEOUT value"], "return_type": ["int"]}, "method_name": "getSoTimeout", "method_description": "Retrieve setting for SocketOptions#SO_TIMEOUT.\n 0 returns implies that the option is disabled (i.e., timeout of infinity).\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the ServerSocket successfully bound to an address"], "return_type": ["boolean"]}, "method_name": "isBound", "method_description": "Returns the binding state of the ServerSocket.\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the socket has been closed"], "return_type": ["boolean"]}, "method_name": "isClosed", "method_description": "Returns the closed state of the ServerSocket.\n", "method_declar": ""}, {"params": [{"param_name": ["connectionTime"], "param_type": "int", "param_description": " An int expressing the relative importance of a short\n         connection time"}, {"param_name": ["latency"], "param_type": "int", "param_description": " An int expressing the relative importance of low\n         latency"}, {"param_name": ["bandwidth"], "param_type": "int", "param_description": " An int expressing the relative importance of high\n         bandwidth"}], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPerformancePreferences", "method_description": "Sets performance preferences for this ServerSocket.\n\n \n Sockets use the TCP/IP protocol by default.  Some implementations\n may offer alternative protocols which have different performance\n characteristics than TCP/IP.  This method allows the application to\n express its own preferences as to how these tradeoffs should be made\n when the implementation chooses from the available protocols.\n\n \n Performance preferences are described by three integers\n whose values indicate the relative importance of short connection time,\n low latency, and high bandwidth.  The absolute values of the integers\n are irrelevant; in order to choose a protocol the values are simply\n compared, with larger values indicating stronger preferences.  If the\n application prefers short connection time over both low latency and high\n bandwidth, for example, then it could invoke this method with the values\n (1, 0, 0).  If the application prefers high bandwidth above low\n latency, and low latency above short connection time, then it could\n invoke this method with the values (0, 1, 2).\n\n \n Invoking this method after this socket has been bound\n will have no effect. This implies that in order to use this capability\n requires the socket to be created with the no-argument constructor.\n", "method_declar": ""}, {"params": [{"param_name": ["size"], "param_type": "int", "param_description": " the size to which to set the receive buffer\n size. This value must be greater than 0."}], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setReceiveBufferSize", "method_description": "Sets a default proposed value for the\n SocketOptions#SO_RCVBUF option for sockets\n accepted from this ServerSocket. The value actually set\n in the accepted socket must be determined by calling\n Socket#getReceiveBufferSize() after the socket\n is returned by accept().\n \n\n The value of SocketOptions#SO_RCVBUF is used both to\n set the size of the internal socket receive buffer, and to set the size\n of the TCP receive window that is advertized to the remote peer.\n \n\n It is possible to change the value subsequently, by calling\n Socket#setReceiveBufferSize(int). However, if the application\n wishes to allow a receive window larger than 64K bytes, as defined by RFC1323\n then the proposed value must be set in the ServerSocket before\n it is bound to a local address. This implies, that the ServerSocket must be\n created with the no-argument constructor, then setReceiveBufferSize() must\n be called and lastly the ServerSocket is bound to an address by calling bind().\n \n\n Failure to do this will not cause an error, and the buffer size may be set to the\n requested value but the TCP receive window in sockets accepted from\n this ServerSocket will be no larger than 64K bytes.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["on"], "param_type": "boolean", "param_description": " whether to enable or disable the socket option"}], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setReuseAddress", "method_description": "Enable/disable the SocketOptions#SO_REUSEADDR\n socket option.\n \n\n When a TCP connection is closed the connection may remain\n in a timeout state for a period of time after the connection\n is closed (typically known as the TIME_WAIT state\n or 2MSL wait state).\n For applications using a well known socket address or port\n it may not be possible to bind a socket to the required\n SocketAddress if there is a connection in the\n timeout state involving the socket address or port.\n \n\n Enabling SocketOptions#SO_REUSEADDR prior to\n binding the socket using bind(java.net.SocketAddress) allows the socket\n to be bound even though a previous connection is in a timeout state.\n \n\n When a ServerSocket is created the initial setting\n of SocketOptions#SO_REUSEADDR is not defined.\n Applications can use getReuseAddress() to determine the initial\n setting of SocketOptions#SO_REUSEADDR.\n \n\n The behaviour when SocketOptions#SO_REUSEADDR is\n enabled or disabled after a socket is bound (See isBound())\n is not defined.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "int", "param_description": " the specified timeout, in milliseconds"}], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSoTimeout", "method_description": "Enable/disable SocketOptions#SO_TIMEOUT with the\n specified timeout, in milliseconds.  With this option set to a non-zero\n timeout, a call to accept() for this ServerSocket\n will block for only this amount of time.  If the timeout expires,\n a java.net.SocketTimeoutException is raised, though the\n ServerSocket is still valid.  The option must be enabled\n prior to entering the blocking operation to have effect.  The\n timeout must be > 0.\n A timeout of zero is interpreted as an infinite timeout.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["fac"], "param_type": "SocketImplFactory", "param_description": " the desired factory."}], "class_name": "ServerSocket", "is_static": true, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSocketFactory", "method_description": "Sets the server socket implementation factory for the\n application. The factory can be specified only once.\n \n\n When an application creates a new server socket, the socket\n implementation factory's createSocketImpl method is\n called to create the actual socket implementation.\n \n\n Passing null to the method is a no-op unless the factory\n was already set.\n \n\n If there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ServerSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this socket."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns the implementation address and implementation port of\n this socket as a String.\n \n\n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n an InetAddress representing the\n InetAddress#getLoopbackAddress address is returned as\n the implementation address.\n", "method_declar": ""}], "class_name": "ServerSocket", "Vars": null}