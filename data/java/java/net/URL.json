{"package_name": "java.net", "subclass_list": [], "class_description": "Class URL represents a Uniform Resource\n Locator, a pointer to a \"resource\" on the World\n Wide Web. A resource can be something as simple as a file or a\n directory, or it can be a reference to a more complicated object,\n such as a query to a database or to a search engine. More\n information on the types of URLs and their formats can be found at:\n \nTypes of URL In general, a URL can be broken into several parts. Consider the\n following example: The URL above indicates that the protocol to use is\n http (HyperText Transfer Protocol) and that the\n information resides on a host machine named\n www.example.com. The information on that host\n machine is named /docs/resource1.html. The exact\n meaning of this name on the host machine is both protocol\n dependent and host dependent. The information normally resides in\n a file, but it could be generated on the fly. This component of\n the URL is called the path component. A URL can optionally specify a \"port\", which is the\n port number to which the TCP connection is made on the remote host\n machine. If the port is not specified, the default port for\n the protocol is used instead. For example, the default port for\n http is 80. An alternative port could be\n specified as: The syntax of URL is defined by  RFC\u00a02396: Uniform\n Resource Identifiers (URI): Generic Syntax, amended by RFC\u00a02732: Format for\n Literal IPv6 Addresses in URLs. The Literal IPv6 address format\n also supports scope_ids. The syntax and usage of scope_ids is described\n here. A URL may have appended to it a \"fragment\", also known\n as a \"ref\" or a \"reference\". The fragment is indicated by the sharp\n sign character \"#\" followed by more characters. For example, This fragment is not technically part of the URL. Rather, it\n indicates that after the specified resource is retrieved, the\n application is specifically interested in that part of the\n document that has the tag chapter1 attached to it. The\n meaning of a tag is resource specific. An application can also specify a \"relative URL\",\n which contains only enough information to reach the resource\n relative to another URL. Relative URLs are frequently used within\n HTML pages. For example, if the contents of the URL: The relative URL need not specify all the components of a URL. If\n the protocol, host name, or port number is missing, the value is\n inherited from the fully specified URL. The file component must be\n specified. The optional fragment is not inherited. The URL class does not itself encode or decode any URL components\n according to the escaping mechanism defined in RFC2396. It is the\n responsibility of the caller to encode any fields, which need to be\n escaped prior to calling URL, and also to decode any escaped fields,\n that are returned from URL. Furthermore, because URL has no knowledge\n of URL escaping, it does not recognise equivalence between the encoded\n or decoded form of the same URL. For example, the two URLs: Note, the URI class does perform escaping of its\n component fields in certain circumstances. The recommended way\n to manage the encoding and decoding of URLs is to use URI,\n and to convert between these two classes using toURI() and\n URI#toURL(). The URLEncoder and URLDecoder classes can also be\n used, but only for HTML form encoding, which is not the same\n as the encoding scheme defined in RFC2396. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["protocol"], "param_type": "String", "param_description": " the name of the protocol to use."}, {"param_name": ["host"], "param_type": "String", "param_description": " the name of the host."}, {"param_name": ["port"], "param_type": "int", "param_description": " the port number on the host."}, {"param_name": ["file"], "param_type": "String", "param_description": " the file on the host"}], "class_name": "URL", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a URL object from the specified\n protocol, host, port\n number, and file.\n\nhost can be expressed as a host name or a literal\n IP address. If IPv6 literal address is used, it should be\n enclosed in square brackets ('[' and ']'), as\n specified by RFC\u00a02732;\n However, the literal IPv6 address format defined in RFC\u00a02373: IP\n Version 6 Addressing Architecture is also accepted.\n\n\n Specifying a port number of -1\n indicates that the URL should use the default port for the\n protocol.\n\n\n If this is the first URL object being created with the specified\n protocol, a stream protocol handler object, an instance of\n class URLStreamHandler, is created for that protocol:\n \nProtocol handlers for the following protocols are guaranteed\n to exist on the search path :-\n \nNo validation of the inputs is performed by this constructor.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["protocol"], "param_type": "String", "param_description": " the name of the protocol to use."}, {"param_name": ["host"], "param_type": "String", "param_description": " the name of the host."}, {"param_name": ["file"], "param_type": "String", "param_description": " the file on the host."}], "class_name": "URL", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a URL from the specified protocol\n name, host name, and file name. The\n default port for the specified protocol is used.\n \n\n This method is equivalent to calling the four-argument\n constructor with the arguments being protocol,\n host, -1, and file.\n\n No validation of the inputs is performed by this constructor.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["protocol"], "param_type": "String", "param_description": " the name of the protocol to use."}, {"param_name": ["host"], "param_type": "String", "param_description": " the name of the host."}, {"param_name": ["port"], "param_type": "int", "param_description": " the port number on the host."}, {"param_name": ["file"], "param_type": "String", "param_description": " the file on the host"}, {"param_name": ["handler"], "param_type": "URLStreamHandler", "param_description": " the stream handler for the URL."}], "class_name": "URL", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a URL object from the specified\n protocol, host, port\n number, file, and handler. Specifying\n a port number of -1 indicates that\n the URL should use the default port for the protocol. Specifying\n a handler of null indicates that the URL\n should use a default stream handler for the protocol, as outlined\n for:\n     java.net.URL#URL(java.lang.String, java.lang.String, int,\n                      java.lang.String)\n\n \nIf the handler is not null and there is a security manager,\n the security manager's checkPermission\n method is called with a\n NetPermission(\"specifyStreamHandler\") permission.\n This may result in a SecurityException.\n\n No validation of the inputs is performed by this constructor.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["spec"], "param_type": "String", "param_description": " the String to parse as a URL."}], "class_name": "URL", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a URL object from the String\n representation.\n \n\n This constructor is equivalent to a call to the two-argument\n constructor with a null first argument.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["context"], "param_type": "URL", "param_description": " the context in which to parse the specification."}, {"param_name": ["spec"], "param_type": "String", "param_description": " the String to parse as a URL."}], "class_name": "URL", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a URL by parsing the given spec within a specified context.\n\n The new URL is created from the given context URL and the spec\n argument as described in\n RFC2396 \"Uniform Resource Identifiers : Generic * Syntax\" :\n \n\n If the scheme component is defined in the given spec and does not match\n the scheme of the context, then the new URL is created as an absolute\n URL based on the spec alone. Otherwise the scheme component is inherited\n from the context URL.\n \n\n If the authority component is present in the spec then the spec is\n treated as absolute and the spec authority and path will replace the\n context authority and path. If the authority component is absent in the\n spec then the authority of the new URL will be inherited from the\n context.\n \n\n If the spec's path component begins with a slash character\n \"/\" then the\n path is treated as absolute and the spec path replaces the context path.\n \n\n Otherwise, the path is treated as a relative path and is appended to the\n context path, as described in RFC2396. Also, in this case,\n the path is canonicalized through the removal of directory\n changes made by occurrences of \"..\" and \".\".\n \n\n For a more detailed description of URL parsing, refer to RFC2396.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["context"], "param_type": "URL", "param_description": " the context in which to parse the specification."}, {"param_name": ["spec"], "param_type": "String", "param_description": " the String to parse as a URL."}, {"param_name": ["handler"], "param_type": "URLStreamHandler", "param_description": " the stream handler for the URL."}], "class_name": "URL", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a URL by parsing the given spec with the specified handler\n within a specified context. If the handler is null, the parsing\n occurs as with the two argument constructor.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the URL to compare against."}], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are the same;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares this URL for equality with another object.\n\n\n If the given object is not a URL then this method immediately returns\n false.\n\n\n Two URL objects are equal if they have the same protocol, reference\n equivalent hosts, have the same port number on the host, and the same\n file and fragment of the file.\n\n\n Returns true if this URL equals o. URLs are equal if they have\n the same protocol, host, port, file, and reference.\n\n \nSome implementations of URL.equals() resolve host names over the\n network. This is problematic:\n \nThis problem is fixed in Android 4.0 (Ice Cream Sandwich). In that\n release, URLs are only equal if their host names are equal (ignoring\n case).\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the authority part of this URL"], "return_type": ["String"]}, "method_name": "getAuthority", "method_description": "Gets the authority part of this URL.\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the contents of this URL."], "return_type": ["Object"]}, "method_name": "getContent", "method_description": "Gets the contents of this URL. This method is a shorthand for:\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["classes"], "param_type": "Class[]", "param_description": " an array of Java types"}], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the content object of this URL that is the first match of\n               the types specified in the classes array.\n               null if none of the requested types are supported."], "return_type": ["Object"]}, "method_name": "getContent", "method_description": "Gets the contents of this URL. This method is a shorthand for:\n \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the port number"], "return_type": ["int"]}, "method_name": "getDefaultPort", "method_description": "Gets the default port number of the protocol associated\n with this URL. If the URL scheme or the URLStreamHandler\n for the URL do not define a default port number,\n then -1 is returned.\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the file name of this URL,\n or an empty string if one does not exist"], "return_type": ["String"]}, "method_name": "getFile", "method_description": "Gets the file name of this URL.\n The returned file portion will be\n the same as getPath(), plus the concatenation of\n the value of getQuery(), if any. If there is\n no query portion, this method and getPath() will\n return identical results.\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the host name of this URL."], "return_type": ["String"]}, "method_name": "getHost", "method_description": "Gets the host name of this URL, if applicable.\n The format of the host conforms to RFC 2732, i.e. for a\n literal IPv6 address, this method will return the IPv6 address\n enclosed in square brackets ('[' and ']').\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the path part of this URL, or an\n empty string if one does not exist"], "return_type": ["String"]}, "method_name": "getPath", "method_description": "Gets the path part of this URL.\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the port number, or -1 if the port is not set"], "return_type": ["int"]}, "method_name": "getPort", "method_description": "Gets the port number of this URL.\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the protocol of this URL."], "return_type": ["String"]}, "method_name": "getProtocol", "method_description": "Gets the protocol name of this URL.\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the query part of this URL,\n or null if one does not exist"], "return_type": ["String"]}, "method_name": "getQuery", "method_description": "Gets the query part of this URL.\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the anchor (also known as the \"reference\") of this\n          URL, or null if one does not exist"], "return_type": ["String"]}, "method_name": "getRef", "method_description": "Gets the anchor (also known as the \"reference\") of this\n URL.\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["the userInfo part of this URL, or\n null if one does not exist"], "return_type": ["String"]}, "method_name": "getUserInfo", "method_description": "Gets the userInfo part of this URL.\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code for this URL."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Creates an integer suitable for hash table indexing.\n\n\n The hash code is based upon all the URL components relevant for URL\n comparison. As such, this operation is a blocking operation.\n\n", "method_declar": ""}, {"params": [{"param_name": ["proxy"], "param_type": "Proxy", "param_description": " the Proxy through which this connection\n             will be made. If direct connection is desired,\n             Proxy.NO_PROXY should be specified."}], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["a URLConnection to the URL."], "return_type": ["URLConnection"]}, "method_name": "openConnection", "method_description": "Same as openConnection(), except that the connection will be\n made through the specified proxy; Protocol handlers that do not\n support proxing will ignore the proxy parameter and make a\n normal connection.\n\n Invoking this method preempts the system's default ProxySelector\n settings.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["a URLConnection linking\n             to the URL."], "return_type": ["URLConnection"]}, "method_name": "openConnection", "method_description": "Returns a URLConnection instance that\n represents a connection to the remote object referred to by the\n URL.\n\n \nA new instance of URLConnection is\n created every time when invoking the\n URLStreamHandler.openConnection(URL) method of the protocol handler for\n this URL.\nIt should be noted that a URLConnection instance does not establish\n the actual network connection on creation. This will happen only when\n calling URLConnection.connect().\nIf for the URL's protocol (such as HTTP or JAR), there\n exists a public, specialized URLConnection subclass belonging\n to one of the following packages or one of their subpackages:\n java.lang, java.io, java.util, java.net, the connection\n returned will be of that subclass. For example, for HTTP an\n HttpURLConnection will be returned, and for JAR a\n JarURLConnection will be returned.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["an input stream for reading from the URL connection."], "return_type": ["InputStream"]}, "method_name": "openStream", "method_description": "Opens a connection to this URL and returns an\n InputStream for reading from that connection. This\n method is a shorthand for:\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["other"], "param_type": "URL", "param_description": " the URL to compare against."}], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if they reference the same remote object;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "sameFile", "method_description": "Compares two URLs, excluding the fragment component.\n\n\n Returns true if this URL and the\n other argument are equal without taking the\n fragment component into consideration.\n", "method_declar": ""}, {"params": [{"param_name": ["fac"], "param_type": "URLStreamHandlerFactory", "param_description": " the desired factory."}], "class_name": "URL", "is_static": true, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setURLStreamHandlerFactory", "method_description": "Sets an application's URLStreamHandlerFactory.\n This method can be called at most once in a given Java Virtual\n Machine.\n\n\n The URLStreamHandlerFactory instance is used to\nconstruct a stream protocol handler from a protocol name.\n\n \n If there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this object."], "return_type": ["String"]}, "method_name": "toExternalForm", "method_description": "Constructs a string representation of this URL. The\n string is created by calling the toExternalForm\n method of the stream protocol handler for this object.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Constructs a string representation of this URL. The\n string is created by calling the toExternalForm\n method of the stream protocol handler for this object.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "URL", "is_static": false, "return_value": {"return_name": [], "return_description": ["a URI instance equivalent to this URL."], "return_type": ["URI"]}, "method_name": "toURI", "method_description": "Returns a URI equivalent to this URL.\n This method functions in the same way as new URI (this.toString()).\n \nNote, any URL instance that complies with RFC 2396 can be converted\n to a URI. However, some URLs that are not strictly in compliance\n can not be converted to a URI.\n", "method_declar": ""}], "class_name": "URL", "Vars": null}