{"package_name": "java.net", "subclass_list": ["SSLSocket", "SSLSocket"], "class_description": "This class implements client sockets (also called just\n \"sockets\"). A socket is an endpoint for communication\n between two machines. The actual work of the socket is performed by an instance of the\n SocketImpl class. An application, by changing\n the socket factory that creates the socket implementation,\n can configure itself to create sockets appropriate to the local\n firewall. ", "class_type": "class", "typealias": [], "interface_list": ["Closeable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an unconnected socket, with the\n system-default type of SocketImpl.\n", "method_declar": ""}, {"params": [{"param_name": ["proxy"], "param_type": "Proxy", "param_description": " a Proxy object specifying what kind\n              of proxying should be used."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an unconnected socket, specifying the type of proxy, if any,\n that should be used regardless of any other settings.\n \n\n If there is a security manager, its checkConnect method\n is called with the proxy host address and port number\n as its arguments. This could result in a SecurityException.\n \n\n Examples:\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["host"], "param_type": "String", "param_description": " the host name, or null for the loopback address."}, {"param_name": ["port"], "param_type": "int", "param_description": " the port number."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a stream socket and connects it to the specified port\n number on the named host.\n \n\n If the specified host is null it is the equivalent of\n specifying the address as\n InetAddress.getByName(null).\n In other words, it is equivalent to specifying an address of the\n loopback interface. \n\n If the application has specified a server socket factory, that\n factory's createSocketImpl method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n \n\n If there is a security manager, its\n checkConnect method is called\n with the host address and port\n as its arguments. This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["address"], "param_type": "InetAddress", "param_description": " the IP address."}, {"param_name": ["port"], "param_type": "int", "param_description": " the port number."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a stream socket and connects it to the specified port\n number at the specified IP address.\n \n\n If the application has specified a socket factory, that factory's\n createSocketImpl method is called to create the\n actual socket implementation. Otherwise a \"plain\" socket is created.\n \n\n If there is a security manager, its\n checkConnect method is called\n with the host address and port\n as its arguments. This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["host"], "param_type": "String", "param_description": " the name of the remote host, or null for the loopback address."}, {"param_name": ["port"], "param_type": "int", "param_description": " the remote port"}, {"param_name": ["localAddr"], "param_type": "InetAddress", "param_description": " the local address the socket is bound to, or\n        null for the anyLocal address."}, {"param_name": ["localPort"], "param_type": "int", "param_description": " the local port the socket is bound to, or\n        zero for a system selected free port."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a socket and connects it to the specified remote host on\n the specified remote port. The Socket will also bind() to the local\n address and port supplied.\n \n\n If the specified host is null it is the equivalent of\n specifying the address as\n InetAddress.getByName(null).\n In other words, it is equivalent to specifying an address of the\n loopback interface. \n\n A local port number of zero will let the system pick up a\n free port in the bind operation.\n\n If there is a security manager, its\n checkConnect method is called\n with the host address and port\n as its arguments. This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["address"], "param_type": "InetAddress", "param_description": " the remote address"}, {"param_name": ["port"], "param_type": "int", "param_description": " the remote port"}, {"param_name": ["localAddr"], "param_type": "InetAddress", "param_description": " the local address the socket is bound to, or\n        null for the anyLocal address."}, {"param_name": ["localPort"], "param_type": "int", "param_description": " the local port the socket is bound to or\n        zero for a system selected free port."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a socket and connects it to the specified remote address on\n the specified remote port. The Socket will also bind() to the local\n address and port supplied.\n \n\n If the specified local address is null it is the equivalent of\n specifying the address as the AnyLocal address\n (see InetAddress.isAnyLocalAddress()).\n \n\n A local port number of zero will let the system pick up a\n free port in the bind operation.\n\n If there is a security manager, its\n checkConnect method is called\n with the host address and port\n as its arguments. This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["host"], "param_type": "String", "param_description": " the host name, or null for the loopback address."}, {"param_name": ["port"], "param_type": "int", "param_description": " the port number."}, {"param_name": ["stream"], "param_type": "boolean", "param_description": " a boolean indicating whether this is\n                      a stream socket or a datagram socket."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n\n\n      This constructor is deprecated.\n    Use DatagramSocket instead for UDP transport.\n  \nCreates a stream socket and connects it to the specified port\n number on the named host.\n \n\n If the specified host is null it is the equivalent of\n specifying the address as\n InetAddress.getByName(null).\n In other words, it is equivalent to specifying an address of the\n loopback interface. \n\n If the stream argument is true, this creates a\n stream socket. If the stream argument is false, it\n creates a datagram socket.\n \n\n If the application has specified a server socket factory, that\n factory's createSocketImpl method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n \n\n If there is a security manager, its\n checkConnect method is called\n with the host address and port\n as its arguments. This could result in a SecurityException.\n \n\n If a UDP socket is used, TCP/IP related socket options will not apply.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["host"], "param_type": "InetAddress", "param_description": " the IP address."}, {"param_name": ["port"], "param_type": "int", "param_description": " the port number."}, {"param_name": ["stream"], "param_type": "boolean", "param_description": " if true, create a stream socket;\n                       otherwise, create a datagram socket."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n\n\n      This constructor is deprecated.\n    Use DatagramSocket instead for UDP transport.\n  \nCreates a socket and connects it to the specified port number at\n the specified IP address.\n \n\n If the stream argument is true, this creates a\n stream socket. If the stream argument is false, it\n creates a datagram socket.\n \n\n If the application has specified a server socket factory, that\n factory's createSocketImpl method is called to create\n the actual socket implementation. Otherwise a \"plain\" socket is created.\n\n \nIf there is a security manager, its\n checkConnect method is called\n with host.getHostAddress() and port\n as its arguments. This could result in a SecurityException.\n \n\n If UDP socket is used, TCP/IP related socket options will not apply.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["bindpoint"], "param_type": "SocketAddress", "param_description": " the SocketAddress to bind to"}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "bind", "method_description": "Binds the socket to a local address.\n \n\n If the address is null, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this socket.\n \n\n Any thread currently blocked in an I/O operation upon this socket\n will throw a SocketException.\n \n\n Once a socket has been closed, it is not available for further networking\n use (i.e. can't be reconnected or rebound). A new socket needs to be\n created.\n\n \n Closing this socket will also close the socket's\n InputStream and\n OutputStream.\n\n \n If this socket has an associated channel then the channel is closed\n as well.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["endpoint"], "param_type": "SocketAddress", "param_description": " the SocketAddress"}, {"param_name": ["timeout"], "param_type": "int", "param_description": " the timeout value to be used in milliseconds."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "connect", "method_description": "Connects this socket to the server with a specified timeout value.\n A timeout of zero is interpreted as an infinite timeout. The connection\n will then block until established or an error occurs.\n", "method_declar": ""}, {"params": [{"param_name": ["endpoint"], "param_type": "SocketAddress", "param_description": " the SocketAddress"}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "connect", "method_description": "Connects this socket to the server.\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the socket channel associated with this socket,\n          or null if this socket was not created\n          for a channel"], "return_type": ["SocketChannel"]}, "method_name": "getChannel", "method_description": "Returns the unique SocketChannel\n object associated with this socket, if any.\n\n \n A socket will have a channel if, and only if, the channel itself was\n created via the SocketChannel.open or ServerSocketChannel.accept\n methods.\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the remote IP address to which this socket is connected,\n          or null if the socket is not connected."], "return_type": ["InetAddress"]}, "method_name": "getInetAddress", "method_description": "Returns the address to which the socket is connected.\n \n\n If the socket was connected prior to being closed,\n then this method will continue to return the connected address\n after the socket is closed.\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["an input stream for reading bytes from this socket."], "return_type": ["InputStream"]}, "method_name": "getInputStream", "method_description": "Returns an input stream for this socket.\n\n \n If this socket has an associated channel then the resulting input\n stream delegates all of its operations to the channel.  If the channel\n is in non-blocking mode then the input stream's read operations\n will throw an IllegalBlockingModeException.\n\n \nUnder abnormal conditions the underlying connection may be\n broken by the remote host or the network software (for example\n a connection reset in the case of TCP connections). When a\n broken connection is detected by the network software the\n following applies to the returned input stream :-\n\n \nThe network software may discard bytes that are buffered\n   by the socket. Bytes that aren't discarded by the network\n   software can be read using read.\n\n   \nIf there are no bytes buffered on the socket, or all\n   buffered bytes have been consumed by\n   read, then all subsequent\n   calls to read will throw an\n   IOException.\n\n   \nIf there are no bytes buffered on the socket, and the\n   socket has not been closed using close, then\n   available will\n   return 0.\n\n \n Closing the returned InputStream\n will close the associated socket.\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a boolean indicating whether or not\n         SocketOptions#SO_KEEPALIVE is enabled."], "return_type": ["boolean"]}, "method_name": "getKeepAlive", "method_description": "Tests if SocketOptions#SO_KEEPALIVE is enabled.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the local address to which the socket is bound,\n         the loopback address if denied by the security manager, or\n         the wildcard address if the socket is closed or not bound yet."], "return_type": ["InetAddress"]}, "method_name": "getLocalAddress", "method_description": "Gets the local address to which the socket is bound.\n \n\n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n the InetAddress#getLoopbackAddress address is returned.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the local port number to which this socket is bound or -1\n          if the socket is not bound yet."], "return_type": ["int"]}, "method_name": "getLocalPort", "method_description": "Returns the local port number to which this socket is bound.\n \n\n If the socket was bound prior to being closed,\n then this method will continue to return the local port number\n after the socket is closed.\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a SocketAddress representing the local endpoint of\n         this socket, or a SocketAddress representing the\n         loopback address if denied by the security manager, or\n         null if the socket is not bound yet."], "return_type": ["SocketAddress"]}, "method_name": "getLocalSocketAddress", "method_description": "Returns the address of the endpoint this socket is bound to.\n \n\n If a socket bound to an endpoint represented by an\n InetSocketAddress  is closed,\n then this method will continue to return an InetSocketAddress\n after the socket is closed. In that case the returned\n InetSocketAddress's address is the\n InetAddress#isAnyLocalAddress address\n and its port is the local port that it was bound to.\n \n\n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a SocketAddress representing the\n InetAddress#getLoopbackAddress address and the local\n port to which this socket is bound is returned.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a boolean indicating whether or not\n         SocketOptions#SO_OOBINLINEis enabled."], "return_type": ["boolean"]}, "method_name": "getOOBInline", "method_description": "Tests if SocketOptions#SO_OOBINLINE is enabled.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["an output stream for writing bytes to this socket."], "return_type": ["OutputStream"]}, "method_name": "getOutputStream", "method_description": "Returns an output stream for this socket.\n\n \n If this socket has an associated channel then the resulting output\n stream delegates all of its operations to the channel.  If the channel\n is in non-blocking mode then the output stream's write\n operations will throw an IllegalBlockingModeException.\n\n \n Closing the returned OutputStream\n will close the associated socket.\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the remote port number to which this socket is connected, or\n          0 if the socket is not connected yet."], "return_type": ["int"]}, "method_name": "getPort", "method_description": "Returns the remote port number to which this socket is connected.\n \n\n If the socket was connected prior to being closed,\n then this method will continue to return the connected port number\n after the socket is closed.\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value of the SocketOptions#SO_RCVBUF\n         option for this Socket."], "return_type": ["int"]}, "method_name": "getReceiveBufferSize", "method_description": "Gets the value of the SocketOptions#SO_RCVBUF option\n for this Socket, that is the buffer size used by the platform\n for input on this Socket.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a SocketAddress representing the remote endpoint of this\n         socket, or null if it is not connected yet."], "return_type": ["SocketAddress"]}, "method_name": "getRemoteSocketAddress", "method_description": "Returns the address of the endpoint this socket is connected to, or\n null if it is unconnected.\n \n\n If the socket was connected prior to being closed,\n then this method will continue to return the connected address\n after the socket is closed.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a boolean indicating whether or not\n         SocketOptions#SO_REUSEADDR is enabled."], "return_type": ["boolean"]}, "method_name": "getReuseAddress", "method_description": "Tests if SocketOptions#SO_REUSEADDR is enabled.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value of the SocketOptions#SO_SNDBUF\n         option for this Socket."], "return_type": ["int"]}, "method_name": "getSendBufferSize", "method_description": "Get value of the SocketOptions#SO_SNDBUF option\n for this Socket, that is the buffer size used by the platform\n for output on this Socket.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the setting for SocketOptions#SO_LINGER."], "return_type": ["int"]}, "method_name": "getSoLinger", "method_description": "Returns setting for SocketOptions#SO_LINGER.\n -1 returns implies that the\n option is disabled.\n\n The setting only affects socket close.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the setting for SocketOptions#SO_TIMEOUT"], "return_type": ["int"]}, "method_name": "getSoTimeout", "method_description": "Returns setting for SocketOptions#SO_TIMEOUT.\n 0 returns implies that the option is disabled (i.e., timeout of infinity).\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a boolean indicating whether or not\n         SocketOptions#TCP_NODELAY is enabled."], "return_type": ["boolean"]}, "method_name": "getTcpNoDelay", "method_description": "Tests if SocketOptions#TCP_NODELAY is enabled.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the traffic class or type-of-service already set"], "return_type": ["int"]}, "method_name": "getTrafficClass", "method_description": "Gets traffic class or type-of-service in the IP header\n for packets sent from this Socket\n \n\n As the underlying network implementation may ignore the\n traffic class or type-of-service set using setTrafficClass(int)\n this method may return a different value than was previously\n set using the setTrafficClass(int) method on this Socket.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the socket was successfuly bound to an address"], "return_type": ["boolean"]}, "method_name": "isBound", "method_description": "Returns the binding state of the socket.\n \n\n Note: Closing a socket doesn't clear its binding state, which means\n this method will return true for a closed socket\n (see isClosed()) if it was successfuly bound prior\n to being closed.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the socket has been closed"], "return_type": ["boolean"]}, "method_name": "isClosed", "method_description": "Returns the closed state of the socket.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the socket was successfuly connected to a server"], "return_type": ["boolean"]}, "method_name": "isConnected", "method_description": "Returns the connection state of the socket.\n \n\n Note: Closing a socket doesn't clear its connection state, which means\n this method will return true for a closed socket\n (see isClosed()) if it was successfuly connected prior\n to being closed.\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the input of the socket has been shutdown"], "return_type": ["boolean"]}, "method_name": "isInputShutdown", "method_description": "Returns whether the read-half of the socket connection is closed.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the output of the socket has been shutdown"], "return_type": ["boolean"]}, "method_name": "isOutputShutdown", "method_description": "Returns whether the write-half of the socket connection is closed.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["data"], "param_type": "int", "param_description": " The byte of data to send"}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "sendUrgentData", "method_description": "Send one byte of urgent data on the socket. The byte to be sent is the lowest eight\n bits of the data parameter. The urgent byte is\n sent after any preceding writes to the socket OutputStream\n and before any future writes to the OutputStream.\n", "method_declar": ""}, {"params": [{"param_name": ["on"], "param_type": "boolean", "param_description": " whether or not to have socket keep alive turned on."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setKeepAlive", "method_description": "Enable/disable SocketOptions#SO_KEEPALIVE.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["on"], "param_type": "boolean", "param_description": " true to enable\n           SocketOptions#SO_OOBINLINE,\n           false to disable."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setOOBInline", "method_description": "Enable/disable SocketOptions#SO_OOBINLINE\n (receipt of TCP urgent data)\n\n By default, this option is disabled and TCP urgent data received on a\n socket is silently discarded. If the user wishes to receive urgent data, then\n this option must be enabled. When enabled, urgent data is received\n inline with normal data.\n \n\n Note, only limited support is provided for handling incoming urgent\n data. In particular, no notification of incoming urgent data is provided\n and there is no capability to distinguish between normal data and urgent\n data unless provided by a higher level protocol.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["connectionTime"], "param_type": "int", "param_description": " An int expressing the relative importance of a short\n         connection time"}, {"param_name": ["latency"], "param_type": "int", "param_description": " An int expressing the relative importance of low\n         latency"}, {"param_name": ["bandwidth"], "param_type": "int", "param_description": " An int expressing the relative importance of high\n         bandwidth"}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPerformancePreferences", "method_description": "Sets performance preferences for this socket.\n\n \n Sockets use the TCP/IP protocol by default.  Some implementations\n may offer alternative protocols which have different performance\n characteristics than TCP/IP.  This method allows the application to\n express its own preferences as to how these tradeoffs should be made\n when the implementation chooses from the available protocols.\n\n \n Performance preferences are described by three integers\n whose values indicate the relative importance of short connection time,\n low latency, and high bandwidth.  The absolute values of the integers\n are irrelevant; in order to choose a protocol the values are simply\n compared, with larger values indicating stronger preferences. Negative\n values represent a lower priority than positive values. If the\n application prefers short connection time over both low latency and high\n bandwidth, for example, then it could invoke this method with the values\n (1, 0, 0).  If the application prefers high bandwidth above low\n latency, and low latency above short connection time, then it could\n invoke this method with the values (0, 1, 2).\n\n \n Invoking this method after this socket has been connected\n will have no effect.\n", "method_declar": ""}, {"params": [{"param_name": ["size"], "param_type": "int", "param_description": " the size to which to set the receive buffer\n size. This value must be greater than 0."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setReceiveBufferSize", "method_description": "Sets the SocketOptions#SO_RCVBUF option to the\n specified value for this Socket. The\n SocketOptions#SO_RCVBUF option is\n used by the platform's networking code as a hint for the size to set\n the underlying network I/O buffers.\n\n \nIncreasing the receive buffer size can increase the performance of\n network I/O for high-volume connection, while decreasing it can\n help reduce the backlog of incoming data.\n\n \nBecause SocketOptions#SO_RCVBUF is a hint,\n applications that want to verify what size the buffers were set to\n should call getReceiveBufferSize().\n\n \nThe value of SocketOptions#SO_RCVBUF is also used\n to set the TCP receive window that is advertized to the remote peer.\n Generally, the window size can be modified at any time when a socket is\n connected. However, if a receive window larger than 64K is required then\n this must be requested before the socket is connected to the\n remote peer. There are two cases to be aware of:\n \n\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["on"], "param_type": "boolean", "param_description": " whether to enable or disable the socket option"}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setReuseAddress", "method_description": "Enable/disable the SocketOptions#SO_REUSEADDR\n socket option.\n \n\n When a TCP connection is closed the connection may remain\n in a timeout state for a period of time after the connection\n is closed (typically known as the TIME_WAIT state\n or 2MSL wait state).\n For applications using a well known socket address or port\n it may not be possible to bind a socket to the required\n SocketAddress if there is a connection in the\n timeout state involving the socket address or port.\n \n\n Enabling SocketOptions#SO_REUSEADDR\n prior to binding the socket using bind(java.net.SocketAddress) allows\n the socket to be bound even though a previous connection is in a timeout\n state.\n \n\n When a Socket is created the initial setting\n of SocketOptions#SO_REUSEADDR is disabled.\n \n\n The behaviour when SocketOptions#SO_REUSEADDR is\n enabled or disabled after a socket is bound (See isBound())\n is not defined.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["size"], "param_type": "int", "param_description": " the size to which to set the send buffer\n size. This value must be greater than 0."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSendBufferSize", "method_description": "Sets the SocketOptions#SO_SNDBUF option to the\n specified value for this Socket.\n The SocketOptions#SO_SNDBUF option is used by the\n platform's networking code as a hint for the size to set the underlying\n network I/O buffers.\n\n \nBecause SocketOptions#SO_SNDBUF is a hint,\n applications that want to verify what size the buffers were set to\n should call getSendBufferSize().\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["on"], "param_type": "boolean", "param_description": " whether or not to linger on."}, {"param_name": ["linger"], "param_type": "int", "param_description": " how long to linger for, if on is true."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSoLinger", "method_description": "Enable/disable SocketOptions#SO_LINGER with the\n specified linger time in seconds. The maximum timeout value is platform\n specific.\n\n The setting only affects socket close.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "int", "param_description": " the specified timeout, in milliseconds."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSoTimeout", "method_description": "Enable/disable SocketOptions#SO_TIMEOUT\n  with the specified timeout, in milliseconds. With this option set\n  to a non-zero timeout, a read() call on the InputStream associated with\n  this Socket will block for only this amount of time.  If the timeout\n  expires, a java.net.SocketTimeoutException is raised, though the\n  Socket is still valid. The option must be enabled\n  prior to entering the blocking operation to have effect. The\n  timeout must be > 0.\n  A timeout of zero is interpreted as an infinite timeout.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["fac"], "param_type": "SocketImplFactory", "param_description": " the desired factory."}], "class_name": "Socket", "is_static": true, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSocketImplFactory", "method_description": "Sets the client socket implementation factory for the\n application. The factory can be specified only once.\n \n\n When an application creates a new client socket, the socket\n implementation factory's createSocketImpl method is\n called to create the actual socket implementation.\n \n\n Passing null to the method is a no-op unless the factory\n was already set.\n \nIf there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["on"], "param_type": "boolean", "param_description": " true to enable TCP_NODELAY,\n false to disable."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTcpNoDelay", "method_description": "Enable/disable SocketOptions#TCP_NODELAY\n (disable/enable Nagle's algorithm).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["tc"], "param_type": "int", "param_description": " an int value for the bitset."}], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTrafficClass", "method_description": "Sets traffic class or type-of-service octet in the IP\n header for packets sent from this Socket.\n As the underlying network implementation may ignore this\n value applications should consider it a hint.\n\n \n The tc must be in the range 0 <= tc <=\n 255 or an IllegalArgumentException will be thrown.\n \nNotes:\n \nFor Internet Protocol v4 the value consists of an\n integer, the least significant 8 bits of which\n represent the value of the TOS octet in IP packets sent by\n the socket.\n RFC 1349 defines the TOS values as follows:\n\n \n\n Setting bits in the precedence field may result in a\n SocketException indicating that the operation is not\n permitted.\n \n\n As RFC 1122 section 4.2.4.2 indicates, a compliant TCP\n implementation should, but is not required to, let application\n change the TOS field during the lifetime of a connection.\n So whether the type-of-service field can be changed after the\n TCP connection has been established depends on the implementation\n in the underlying platform. Applications should not assume that\n they can change the TOS field after the connection.\n \n\n For Internet Protocol v6 tc is the value that\n would be placed into the sin6_flowinfo field of the IP header.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "shutdownInput", "method_description": "Places the input stream for this socket at \"end of stream\".\n Any data sent to the input stream side of the socket is acknowledged\n and then silently discarded.\n \n\n If you read from a socket input stream after invoking this method on the\n socket, the stream's available method will return 0, and its\n read methods will return -1 (end of stream).\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "shutdownOutput", "method_description": "Disables the output stream for this socket.\n For a TCP socket, any previously written data will be sent\n followed by TCP's normal connection termination sequence.\n\n If you write to a socket output stream after invoking\n shutdownOutput() on the socket, the stream will throw\n an IOException.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Socket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this socket."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Converts this socket to a String.\n", "method_declar": ""}], "class_name": "Socket", "Vars": null}