{"package_name": "java.net", "subclass_list": ["MulticastSocket", "MulticastSocket"], "class_description": "This class represents a socket for sending and receiving datagram packets. A datagram socket is the sending or receiving point for a packet\n delivery service. Each packet sent or received on a datagram socket\n is individually addressed and routed. Multiple packets sent from\n one machine to another may be routed differently, and may arrive in\n any order. Where possible, a newly constructed DatagramSocket has the\n SocketOptions#SO_BROADCAST socket option enabled so as\n to allow the transmission of broadcast datagrams. In order to receive\n broadcast packets a DatagramSocket should be bound to the wildcard address.\n In some implementations, broadcast packets may also be received when\n a DatagramSocket is bound to a more specific address. Example:\n DatagramSocket s = new DatagramSocket(null);\n              s.bind(new InetSocketAddress(8888));\n \n Which is equivalent to:\n DatagramSocket s = new DatagramSocket(8888);\n \n Both cases will create a DatagramSocket able to receive broadcasts on\n UDP port 8888. ", "class_type": "class", "typealias": [], "interface_list": ["Closeable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a datagram socket and binds it to any available port\n on the local host machine.  The socket will be bound to the\n InetAddress#isAnyLocalAddress address,\n an IP address chosen by the kernel.\n\n \nIf there is a security manager,\n its checkListen method is first called\n with 0 as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["bindaddr"], "param_type": "SocketAddress", "param_description": " local socket address to bind, or null\n                 for an unbound socket."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a datagram socket, bound to the specified local\n socket address.\n \n\n If, if the address is null, creates an unbound socket.\n\n \nIf there is a security manager,\n its checkListen method is first called\n with the port from the socket address\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["port"], "param_type": "int", "param_description": " port to use."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a datagram socket and binds it to the specified port\n on the local host machine.  The socket will be bound to the\n InetAddress#isAnyLocalAddress address,\n an IP address chosen by the kernel.\n\n \nIf there is a security manager,\n its checkListen method is first called\n with the port argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["port"], "param_type": "int", "param_description": " local port to use"}, {"param_name": ["laddr"], "param_type": "InetAddress", "param_description": " local address to bind"}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a datagram socket, bound to the specified local\n address.  The local port must be between 0 and 65535 inclusive.\n If the IP address is 0.0.0.0, the socket will be bound to the\n InetAddress#isAnyLocalAddress address,\n an IP address chosen by the kernel.\n\n \nIf there is a security manager,\n its checkListen method is first called\n with the port argument\n as its argument to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["addr"], "param_type": "SocketAddress", "param_description": " The address and port to bind to."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "bind", "method_description": "Binds this DatagramSocket to a specific address and port.\n \n\n If the address is null, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n\n\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this datagram socket.\n \n\n Any thread currently blocked in receive(DatagramPacket) upon this socket\n will throw a SocketException.\n\n \n If this socket has an associated channel then the channel is closed\n as well.\n", "method_declar": ""}, {"params": [{"param_name": ["address"], "param_type": "InetAddress", "param_description": " the remote address for the socket"}, {"param_name": ["port"], "param_type": "int", "param_description": " the remote port for the socket."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "connect", "method_description": "Connects the socket to a remote address for this socket. When a\n socket is connected to a remote address, packets may only be\n sent to or received from that address. By default a datagram\n socket is not connected.\n\n \nIf the remote destination to which the socket is connected does not\n exist, or is otherwise unreachable, and if an ICMP destination unreachable\n packet has been received for that address, then a subsequent call to\n send or receive may throw a PortUnreachableException. Note, there is no\n guarantee that the exception will be thrown.\n\n \n If a security manager has been installed then it is invoked to check\n access to the remote address. Specifically, if the given address\n is a InetAddress#isMulticastAddress,\n the security manager's checkMulticast method is invoked with the given address.\n Otherwise, the security manager's checkConnect\n and checkAccept methods\n are invoked, with the given address and port, to\n verify that datagrams are permitted to be sent and received\n respectively.\n\n \n When a socket is connected, receive and\n send will not perform any security checks\n on incoming and outgoing packets, other than matching the packet's\n and the socket's address and port. On a send operation, if the\n packet's address is set and the packet's address and the socket's\n address do not match, an IllegalArgumentException will be\n thrown. A socket connected to a multicast address may only be used\n to send packets.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["addr"], "param_type": "SocketAddress", "param_description": " The remote address."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "connect", "method_description": "Connects this socket to a remote socket address (IP address + port number).\n\n \n If given an InetSocketAddress, this method\n behaves as if invoking connect(InetAddress,int)\n with the the given socket addresses IP address and port number.\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "disconnect", "method_description": "Disconnects the socket. If the socket is closed or not connected,\n then this method has no effect.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a boolean indicating whether or not SO_BROADCAST is enabled."], "return_type": ["boolean"]}, "method_name": "getBroadcast", "method_description": "Tests if SO_BROADCAST is enabled.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the datagram channel associated with this datagram socket,\n          or null if this socket was not created for a channel"], "return_type": ["DatagramChannel"]}, "method_name": "getChannel", "method_description": "Returns the unique DatagramChannel object\n associated with this datagram socket, if any.\n\n \n A datagram socket will have a channel if, and only if, the channel\n itself was created via the DatagramChannel.open method.\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the address to which this socket is connected."], "return_type": ["InetAddress"]}, "method_name": "getInetAddress", "method_description": "Returns the address to which this socket is connected. Returns\n null if the socket is not connected.\n \n\n If the socket was connected prior to being closed,\n then this method will continue to return the connected address\n after the socket is closed.\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the local address to which the socket is bound,\n          null if the socket is closed, or\n          an InetAddress representing\n          InetAddress#isAnyLocalAddress\n          address if either the socket is not bound, or\n          the security manager checkConnect\n          method does not allow the operation"], "return_type": ["InetAddress"]}, "method_name": "getLocalAddress", "method_description": "Gets the local address to which the socket is bound.\n\n \nIf there is a security manager, its\n checkConnect method is first called\n with the host address and -1\n as its arguments to see if the operation is allowed.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the port number on the local host to which this socket is bound,\n           -1 if the socket is closed, or\n           0 if it is not bound yet."], "return_type": ["int"]}, "method_name": "getLocalPort", "method_description": "Returns the port number on the local host to which this socket\n is bound.\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a SocketAddress representing the local endpoint of this\n         socket, or null if it is closed or not bound yet."], "return_type": ["SocketAddress"]}, "method_name": "getLocalSocketAddress", "method_description": "Returns the address of the endpoint this socket is bound to.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the port number to which this socket is connected."], "return_type": ["int"]}, "method_name": "getPort", "method_description": "Returns the port number to which this socket is connected.\n Returns -1 if the socket is not connected.\n \n\n If the socket was connected prior to being closed,\n then this method will continue to return the connected port number\n after the socket is closed.\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value of the SO_RCVBUF option for this DatagramSocket"], "return_type": ["int"]}, "method_name": "getReceiveBufferSize", "method_description": "Get value of the SO_RCVBUF option for this DatagramSocket, that is the\n buffer size used by the platform for input on this DatagramSocket.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a SocketAddress representing the remote\n         endpoint of this socket, or null if it is\n         not connected yet."], "return_type": ["SocketAddress"]}, "method_name": "getRemoteSocketAddress", "method_description": "Returns the address of the endpoint this socket is connected to, or\n null if it is unconnected.\n \n\n If the socket was connected prior to being closed,\n then this method will continue to return the connected address\n after the socket is closed.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["a boolean indicating whether or not SO_REUSEADDR is enabled."], "return_type": ["boolean"]}, "method_name": "getReuseAddress", "method_description": "Tests if SO_REUSEADDR is enabled.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value of the SO_SNDBUF option for this DatagramSocket"], "return_type": ["int"]}, "method_name": "getSendBufferSize", "method_description": "Get value of the SO_SNDBUF option for this DatagramSocket, that is the\n buffer size used by the platform for output on this DatagramSocket.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the setting for SO_TIMEOUT"], "return_type": ["int"]}, "method_name": "getSoTimeout", "method_description": "Retrieve setting for SO_TIMEOUT.  0 returns implies that the\n option is disabled (i.e., timeout of infinity).\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the traffic class or type-of-service already set"], "return_type": ["int"]}, "method_name": "getTrafficClass", "method_description": "Gets traffic class or type-of-service in the IP datagram\n header for packets sent from this DatagramSocket.\n \n\n As the underlying network implementation may ignore the\n traffic class or type-of-service set using setTrafficClass(int)\n this method may return a different value than was previously\n set using the setTrafficClass(int) method on this\n DatagramSocket.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the socket successfully bound to an address"], "return_type": ["boolean"]}, "method_name": "isBound", "method_description": "Returns the binding state of the socket.\n \n\n If the socket was bound prior to being closed,\n then this method will continue to return true\n after the socket is closed.\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the socket has been closed"], "return_type": ["boolean"]}, "method_name": "isClosed", "method_description": "Returns whether the socket is closed or not.\n", "method_declar": ""}, {"params": [], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the socket successfully connected to a server"], "return_type": ["boolean"]}, "method_name": "isConnected", "method_description": "Returns the connection state of the socket.\n \n\n If the socket was connected prior to being closed,\n then this method will continue to return true\n after the socket is closed.\n", "method_declar": ""}, {"params": [{"param_name": ["p"], "param_type": "DatagramPacket", "param_description": " the DatagramPacket into which to place\n                 the incoming data."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "receive", "method_description": "Receives a datagram packet from this socket. When this method\n returns, the DatagramPacket's buffer is filled with\n the data received. The datagram packet also contains the sender's\n IP address, and the port number on the sender's machine.\n \n\n This method blocks until a datagram is received. The\n length field of the datagram packet object contains\n the length of the received message. If the message is longer than\n the packet's length, the message is truncated.\n \n\n If there is a security manager, a packet cannot be received if the\n security manager's checkAccept method\n does not allow it.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["p"], "param_type": "DatagramPacket", "param_description": " the DatagramPacket to be sent."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "send", "method_description": "Sends a datagram packet from this socket. The\n DatagramPacket includes information indicating the\n data to be sent, its length, the IP address of the remote host,\n and the port number on the remote host.\n\n \nIf there is a security manager, and the socket is not currently\n connected to a remote address, this method first performs some\n security checks. First, if p.getAddress().isMulticastAddress()\n is true, this method calls the\n security manager's checkMulticast method\n with p.getAddress() as its argument.\n If the evaluation of that expression is false,\n this method instead calls the security manager's\n checkConnect method with arguments\n p.getAddress().getHostAddress() and\n p.getPort(). Each call to a security manager method\n could result in a SecurityException if the operation is not allowed.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["on"], "param_type": "boolean", "param_description": " whether or not to have broadcast turned on."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setBroadcast", "method_description": "Enable/disable SO_BROADCAST.\n\n \n Some operating systems may require that the Java virtual machine be\n started with implementation specific privileges to enable this option or\n send broadcast datagrams.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["fac"], "param_type": "DatagramSocketImplFactory", "param_description": " the desired factory."}], "class_name": "DatagramSocket", "is_static": true, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDatagramSocketImplFactory", "method_description": "Sets the datagram socket implementation factory for the\n application. The factory can be specified only once.\n \n\n When an application creates a new datagram socket, the socket\n implementation factory's createDatagramSocketImpl method is\n called to create the actual datagram socket implementation.\n \n\n Passing null to the method is a no-op unless the factory\n was already set.\n\n \nIf there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["size"], "param_type": "int", "param_description": " the size to which to set the receive buffer\n size. This value must be greater than 0."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setReceiveBufferSize", "method_description": "Sets the SO_RCVBUF option to the specified value for this\n DatagramSocket. The SO_RCVBUF option is used by the\n the network implementation as a hint to size the underlying\n network I/O buffers. The SO_RCVBUF setting may also be used\n by the network implementation to determine the maximum size\n of the packet that can be received on this socket.\n \n\n Because SO_RCVBUF is a hint, applications that want to\n verify what size the buffers were set to should call\n getReceiveBufferSize().\n \n\n Increasing SO_RCVBUF may allow the network implementation\n to buffer multiple packets when packets arrive faster than\n are being received using receive(java.net.DatagramPacket).\n \n\n Note: It is implementation specific if a packet larger\n than SO_RCVBUF can be received.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["on"], "param_type": "boolean", "param_description": " whether to enable or disable the"}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setReuseAddress", "method_description": "Enable/disable the SO_REUSEADDR socket option.\n \n\n For UDP sockets it may be necessary to bind more than one\n socket to the same socket address. This is typically for the\n purpose of receiving multicast packets\n (See MulticastSocket). The\n SO_REUSEADDR socket option allows multiple\n sockets to be bound to the same socket address if the\n SO_REUSEADDR socket option is enabled prior\n to binding the socket using bind(java.net.SocketAddress).\n \n\n Note: This functionality is not supported by all existing platforms,\n so it is implementation specific whether this option will be ignored\n or not. However, if it is not supported then\n getReuseAddress() will always return false.\n \n\n When a DatagramSocket is created the initial setting\n of SO_REUSEADDR is disabled.\n \n\n The behaviour when SO_REUSEADDR is enabled or\n disabled after a socket is bound (See isBound())\n is not defined.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["size"], "param_type": "int", "param_description": " the size to which to set the send buffer\n size. This value must be greater than 0."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSendBufferSize", "method_description": "Sets the SO_SNDBUF option to the specified value for this\n DatagramSocket. The SO_SNDBUF option is used by the\n network implementation as a hint to size the underlying\n network I/O buffers. The SO_SNDBUF setting may also be used\n by the network implementation to determine the maximum size\n of the packet that can be sent on this socket.\n \n\n As SO_SNDBUF is a hint, applications that want to verify\n what size the buffer is should call getSendBufferSize().\n \n\n Increasing the buffer size may allow multiple outgoing packets\n to be queued by the network implementation when the send rate\n is high.\n \n\n Note: If send(java.net.DatagramPacket) is used to send a\n DatagramPacket that is larger than the setting\n of SO_SNDBUF then it is implementation specific if the\n packet is sent or discarded.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "int", "param_description": " the specified timeout in milliseconds."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSoTimeout", "method_description": "Enable/disable SO_TIMEOUT with the specified timeout, in\n  milliseconds. With this option set to a non-zero timeout,\n  a call to receive() for this DatagramSocket\n  will block for only this amount of time.  If the timeout expires,\n  a java.net.SocketTimeoutException is raised, though the\n  DatagramSocket is still valid.  The option must be enabled\n  prior to entering the blocking operation to have effect.  The\n  timeout must be > 0.\n  A timeout of zero is interpreted as an infinite timeout.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["tc"], "param_type": "int", "param_description": " an int value for the bitset."}], "class_name": "DatagramSocket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTrafficClass", "method_description": "Sets traffic class or type-of-service octet in the IP\n datagram header for datagrams sent from this DatagramSocket.\n As the underlying network implementation may ignore this\n value applications should consider it a hint.\n\n \n The tc must be in the range 0 <= tc <=\n 255 or an IllegalArgumentException will be thrown.\n \nNotes:\n \nFor Internet Protocol v4 the value consists of an\n integer, the least significant 8 bits of which\n represent the value of the TOS octet in IP packets sent by\n the socket.\n RFC 1349 defines the TOS values as follows:\n\n \n\n Setting bits in the precedence field may result in a\n SocketException indicating that the operation is not\n permitted.\n \n\n for Internet Protocol v6 tc is the value that\n would be placed into the sin6_flowinfo field of the IP header.\nSee also:\n", "method_declar": ""}], "class_name": "DatagramSocket", "Vars": null}