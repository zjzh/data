{"package_name": "java.net", "subclass_list": [], "class_description": "This class represents a datagram packet. Datagram packets are used to implement a connectionless packet\n delivery service. Each message is routed from one machine to\n another based solely on information contained within that packet.\n Multiple packets sent from one machine to another might be routed\n differently, and might arrive in any order. Packet delivery is\n not guaranteed. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " buffer for holding the incoming datagram."}, {"param_name": ["offset"], "param_type": "int", "param_description": " the offset for the buffer"}, {"param_name": ["length"], "param_type": "int", "param_description": " the number of bytes to read."}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a DatagramPacket for receiving packets of\n length length, specifying an offset into the buffer.\n \n\n The length argument must be less than or equal to\n buf.length.\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " buffer for holding the incoming datagram."}, {"param_name": ["length"], "param_type": "int", "param_description": " the number of bytes to read."}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a DatagramPacket for receiving packets of\n length length.\n \n\n The length argument must be less than or equal to\n buf.length.\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " the packet data."}, {"param_name": ["offset"], "param_type": "int", "param_description": " the packet data offset."}, {"param_name": ["length"], "param_type": "int", "param_description": " the packet data length."}, {"param_name": ["address"], "param_type": "InetAddress", "param_description": " the destination address."}, {"param_name": ["port"], "param_type": "int", "param_description": " the destination port number."}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a datagram packet for sending packets of length\n length with offset ioffsetto the\n specified port number on the specified host. The\n length argument must be less than or equal to\n buf.length.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " the packet data."}, {"param_name": ["offset"], "param_type": "int", "param_description": " the packet data offset."}, {"param_name": ["length"], "param_type": "int", "param_description": " the packet data length."}, {"param_name": ["address"], "param_type": "SocketAddress", "param_description": " the destination socket address."}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a datagram packet for sending packets of length\n length with offset ioffsetto the\n specified port number on the specified host. The\n length argument must be less than or equal to\n buf.length.\n\n \n\nAndroid note: Up to and including API 25 this method declared that a SocketException\n can be thrown, although the exception is never thrown. Code compiled against a newer SDK does\n not need to catch the exception and will be binary compatible with older versions of Android.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " the packet data."}, {"param_name": ["length"], "param_type": "int", "param_description": " the packet length."}, {"param_name": ["address"], "param_type": "InetAddress", "param_description": " the destination address."}, {"param_name": ["port"], "param_type": "int", "param_description": " the destination port number."}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a datagram packet for sending packets of length\n length to the specified port number on the specified\n host. The length argument must be less than or equal\n to buf.length.\n\n \n\nAndroid note: Up to and including API 25 this method declared that a SocketException\n can be thrown, although the exception is never thrown. Code compiled against a newer SDK does\n not need to catch the exception and will be binary compatible with older versions of Android.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " the packet data."}, {"param_name": ["length"], "param_type": "int", "param_description": " the packet length."}, {"param_name": ["address"], "param_type": "SocketAddress", "param_description": " the destination address."}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a datagram packet for sending packets of length\n length to the specified port number on the specified\n host. The length argument must be less than or equal\n to buf.length.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the IP address of the machine to which this datagram is being\n          sent or from which the datagram was received."], "return_type": ["InetAddress"]}, "method_name": "getAddress", "method_description": "Returns the IP address of the machine to which this datagram is being\n sent or from which the datagram was received.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the buffer used to receive or  send data"], "return_type": ["byte[]"]}, "method_name": "getData", "method_description": "Returns the data buffer. The data received or the data to be sent\n starts from the offset in the buffer,\n and runs for length long.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the length of the data to be sent or the length of the\n          data received."], "return_type": ["int"]}, "method_name": "getLength", "method_description": "Returns the length of the data to be sent or the length of the\n data received.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the offset of the data to be sent or the offset of the\n          data received."], "return_type": ["int"]}, "method_name": "getOffset", "method_description": "Returns the offset of the data to be sent or the offset of the\n data received.\n", "method_declar": ""}, {"params": [], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the port number on the remote host to which this datagram is\n          being sent or from which the datagram was received."], "return_type": ["int"]}, "method_name": "getPort", "method_description": "Returns the port number on the remote host to which this datagram is\n being sent or from which the datagram was received.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": ["the SocketAddress"], "return_type": ["SocketAddress"]}, "method_name": "getSocketAddress", "method_description": "Gets the SocketAddress (usually IP address + port number) of the remote\n host that this packet is being sent to or is coming from.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["iaddr"], "param_type": "InetAddress", "param_description": " the InetAddress"}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setAddress", "method_description": "Sets the IP address of the machine to which this datagram\n is being sent.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " the buffer to set for this packet"}, {"param_name": ["offset"], "param_type": "int", "param_description": " the offset into the data"}, {"param_name": ["length"], "param_type": "int", "param_description": " the length of the data\n       and/or the length of the buffer used to receive data"}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setData", "method_description": "Set the data buffer for this packet. This sets the\n data, length and offset of the packet.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " the buffer to set for this packet."}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setData", "method_description": "Set the data buffer for this packet. With the offset of\n this DatagramPacket set to 0, and the length set to\n the length of buf.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["length"], "param_type": "int", "param_description": " the length to set for this packet."}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setLength", "method_description": "Set the length for this packet. The length of the packet is\n the number of bytes from the packet's data buffer that will be\n sent, or the number of bytes of the packet's data buffer that\n will be used for receiving data. The length must be lesser or\n equal to the offset plus the length of the packet's buffer.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["iport"], "param_type": "int", "param_description": " the port number"}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPort", "method_description": "Sets the port number on the remote host to which this datagram\n is being sent.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["address"], "param_type": "SocketAddress", "param_description": " the SocketAddress"}], "class_name": "DatagramPacket", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSocketAddress", "method_description": "Sets the SocketAddress (usually IP address + port number) of the remote\n host to which this datagram is being sent.\nSee also:\n", "method_declar": ""}], "class_name": "DatagramPacket", "Vars": null}