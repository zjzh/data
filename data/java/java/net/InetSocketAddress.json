{"package_name": "java.net", "subclass_list": [], "class_description": "This class implements an IP Socket Address (IP address + port number)\n It can also be a pair (hostname + port number), in which case an attempt\n will be made to resolve the hostname. If resolution fails then the address\n is said to be unresolved but can still be used on some circumstances\n like connecting through a proxy. It provides an immutable object used by sockets for binding, connecting, or\n as returned values. The wildcard is a special local IP address. It usually means \"any\"\n and can only be used for bind operations. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["SocketAddress"], "Methods": [{"params": [{"param_name": ["port"], "param_type": "int", "param_description": " The port number"}], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a socket address where the IP address is the wildcard address\n and the port number a specified value.\n \n\n A valid port value is between 0 and 65535.\n A port number of zero will let the system pick up an\n ephemeral port in a bind operation.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["addr"], "param_type": "InetAddress", "param_description": " The IP address"}, {"param_name": ["port"], "param_type": "int", "param_description": " The port number"}], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a socket address from an IP address and a port number.\n \n\n A valid port value is between 0 and 65535.\n A port number of zero will let the system pick up an\n ephemeral port in a bind operation.\n \n\n A null address will assign the wildcard address.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["hostname"], "param_type": "String", "param_description": " the Host name"}, {"param_name": ["port"], "param_type": "int", "param_description": " The port number"}], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a socket address from a hostname and a port number.\n \n\n An attempt will be made to resolve the hostname into an InetAddress.\n If that attempt fails, the address will be flagged as unresolved.\n \n\n If there is a security manager, its checkConnect method\n is called with the host name as its argument to check the permission\n to resolve it. This could result in a SecurityException.\n \n\n A valid port value is between 0 and 65535.\n A port number of zero will let the system pick up an\n ephemeral port in a bind operation.\n \n\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["host"], "param_type": "String", "param_description": " the Host name"}, {"param_name": ["port"], "param_type": "int", "param_description": " The port number"}], "class_name": "InetSocketAddress", "is_static": true, "return_value": {"return_name": [], "return_description": ["a InetSocketAddress representing the unresolved\n          socket address"], "return_type": ["InetSocketAddress"]}, "method_name": "createUnresolved", "method_description": "Creates an unresolved socket address from a hostname and a port number.\n \n\n No attempt will be made to resolve the hostname into an InetAddress.\n The address will be flagged as unresolved.\n \n\n A valid port value is between 0 and 65535.\n A port number of zero will let the system pick up an\n ephemeral port in a bind operation.\n \n\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to compare against."}], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are the same;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares this object against the specified object.\n The result is true if and only if the argument is\n not null and it represents the same address as\n this object.\n \n\n Two instances of InetSocketAddress represent the same\n address if both the InetAddresses (or hostnames if it is unresolved) and port\n numbers are equal.\n If both addresses are unresolved, then the hostname and the port number\n are compared.\n\n Note: Hostnames are case insensitive. e.g. \"FooBar\" and \"foobar\" are\n considered equal.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": [], "return_description": ["the InetAdress or null if it is unresolved."], "return_type": ["InetAddress"]}, "method_name": "getAddress", "method_description": "Gets the InetAddress.\n", "method_declar": ""}, {"params": [], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": [], "return_description": ["the hostname part of the address."], "return_type": ["String"]}, "method_name": "getHostName", "method_description": "Gets the hostname.\n Note: This method may trigger a name service reverse lookup if the\n address was created with a literal IP address.\n", "method_declar": ""}, {"params": [], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": [], "return_description": ["the hostname, or String representation of the address."], "return_type": ["String"]}, "method_name": "getHostString", "method_description": "Returns the hostname, or the String form of the address if it\n doesn't have a hostname (it was created using a literal).\n This has the benefit of not attempting a reverse lookup.\n", "method_declar": ""}, {"params": [], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": [], "return_description": ["the port number."], "return_type": ["int"]}, "method_name": "getPort", "method_description": "Gets the port number.\n", "method_declar": ""}, {"params": [], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this socket address."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hashcode for this socket address.\n", "method_declar": ""}, {"params": [], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the hostname couldn't be resolved into\n          an InetAddress."], "return_type": ["boolean"]}, "method_name": "isUnresolved", "method_description": "Checks whether the address has been resolved or not.\n", "method_declar": ""}, {"params": [], "class_name": "InetSocketAddress", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Constructs a string representation of this InetSocketAddress.\n This String is constructed by calling toString() on the InetAddress\n and concatenating the port number (with a colon). If the address\n is unresolved then the part before the colon will only contain the hostname.\n", "method_declar": ""}], "class_name": "InetSocketAddress", "Vars": null}