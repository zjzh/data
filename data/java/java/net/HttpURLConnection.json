{"package_name": "java.net", "subclass_list": ["HttpsURLConnection", "HttpsURLConnection"], "class_description": "A URLConnection with support for HTTP-specific features. See\n  the spec  for\n details.  Uses of this class follow a pattern: For example, to retrieve the webpage at http://www.android.com/: If the HTTP response indicates that an error occurred, URLConnection.getInputStream() will throw an IOException. Use getErrorStream() to read the error response. The headers can be read in\n the normal way using URLConnection.getHeaderFields(), For best performance, you should call either setFixedLengthStreamingMode(int) when the body length is known in advance,\n or setChunkedStreamingMode(int) when it is not. Otherwise HttpURLConnection will be forced to buffer the complete request body in\n memory before it is transmitted, wasting (and possibly exhausting) heap and\n increasing latency. For example, to perform an upload: When transferring large amounts of data to or from a server, use streams\n to limit how much data is in memory at once. Unless you need the entire\n body to be in memory at once, process it as a stream (rather than storing\n the complete body as a single byte array or string). To reduce latency, this class may reuse the same underlying Socket\n for multiple request/response pairs. As a result, HTTP connections may be\n held open longer than necessary. Calls to disconnect() may return\n the socket to a pool of connected sockets. By default, this implementation of HttpURLConnection requests that\n servers use gzip compression and it automatically decompresses the data for\n callers of URLConnection.getInputStream(). The Content-Encoding and Content-Length\n response headers are cleared in this case. Gzip compression can be disabled by\n setting the acceptable encodings in the request header: Setting the Accept-Encoding request header explicitly disables automatic\n decompression and leaves the response headers intact; callers must handle\n decompression as needed, according to the Content-Encoding header of the\n response. URLConnection.getContentLength() returns the number of bytes transmitted and\n cannot be used to predict how many bytes can be read from\n URLConnection.getInputStream() for compressed streams. Instead, read that stream\n until it is exhausted, i.e. when InputStream#read returns -1. The default CookieManager keeps all accepted cookies in memory. It\n will forget these cookies when the VM exits. Implement CookieStore to\n define a custom cookie store. In addition to the cookies set by HTTP responses, you may set cookies\n programmatically. To be included in HTTP request headers, cookies must have\n the domain and path properties set. By default, new instances of HttpCookie work only with servers\n that support RFC 2965\n cookies. Many web servers support only the older specification, RFC 2109. For compatibility\n with the most web servers, set the cookie version to 0. For example, to receive www.twitter.com in French: HttpURLConnection uses the GET method by default. It will\n use POST if setDoOutput(true) has been called.\n Other HTTP methods (OPTIONS, HEAD, PUT, DELETE and TRACE) can be used with setRequestMethod(String). This class includes transparent support for IPv6. For hosts with both IPv4\n and IPv6 addresses, it will attempt to connect to each of a host's addresses\n until a connection is established. Each instance of HttpURLConnection may be used for one\n request/response pair. Instances of this class are not thread safe. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["URLConnection"], "Methods": [], "class_name": "HttpURLConnection", "Vars": null}