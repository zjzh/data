{"package_name": "java.net", "subclass_list": ["Inet4Address", "Inet6Address", "Inet4Address", "Inet6Address"], "class_description": "This class represents an Internet Protocol (IP) address. An IP address is either a 32-bit or 128-bit unsigned number\n used by IP, a lower-level protocol on which protocols like UDP and\n TCP are built. The IP address architecture is defined by RFC\u00a0790:\n Assigned Numbers,  RFC\u00a01918:\n Address Allocation for Private Internets, RFC\u00a02365:\n Administratively Scoped IP Multicast, and RFC\u00a02373: IP\n Version 6 Addressing Architecture. An instance of an\n InetAddress consists of an IP address and possibly its\n corresponding host name (depending on whether it is constructed\n with a host name or whether it has already done reverse host name\n resolution). Link-local addresses are designed to be used for addressing\n on a single link for purposes such as auto-address configuration,\n neighbor discovery, or when no routers are present. Site-local addresses are designed to be used for addressing\n inside of a site without the need for a global prefix. Global addresses are unique across the internet. For IPv4 address format, please refer to Inet4Address#format; For IPv6\n address format, please refer to Inet6Address#format. There is a couple of\n System Properties affecting how IPv4 and IPv6 addresses are used. Reverse name resolution means that for any IP address,\n the host associated with the IP address is returned. The InetAddress class provides methods to resolve host names to\n their IP addresses and vice versa. By default, when a security manager is installed, in order to\n protect against DNS spoofing attacks,\n the result of positive host name resolutions are\n cached forever. When a security manager is not installed, the default\n behavior is to cache entries for a finite (implementation dependent)\n period of time. The result of unsuccessful host\n name resolution is cached for a very short period of time (10\n seconds) to improve performance. If the default behavior is not desired, then a Java security property\n can be set to a different Time-to-live (TTL) value for positive\n caching. Likewise, a system admin can configure a different\n negative caching TTL value when needed. Two Java security properties control the TTL values used for\n  positive and negative host name resolution caching: ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "InetAddress", "Vars": null}