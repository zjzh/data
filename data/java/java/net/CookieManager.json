{"package_name": "java.net", "subclass_list": [], "class_description": "CookieManager provides a concrete implementation of CookieHandler,\n which separates the storage of cookies from the policy surrounding accepting\n and rejecting cookies. A CookieManager is initialized with a CookieStore\n which manages storage, and a CookiePolicy object, which makes\n policy decisions on cookie acceptance/rejection. The HTTP cookie management in java.net package looks like: There're various ways user can hook up his own HTTP cookie management behavior, e.g. The implementation conforms to RFC 2965, section 3.3. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["CookieHandler"], "Methods": [{"params": [], "class_name": "CookieManager", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a new cookie manager.\n\n \nThis constructor will create new cookie manager with default\n cookie store and accept policy. The effect is same as\n CookieManager(null, null).\n", "method_declar": ""}, {"params": [{"param_name": ["store"], "param_type": "CookieStore", "param_description": " a CookieStore to be used by cookie manager.\n                  if null, cookie manager will use a default one,\n                  which is an in-memory CookieStore implementation."}, {"param_name": ["cookiePolicy"], "param_type": "CookiePolicy", "param_description": " a CookiePolicy instance\n                          to be used by cookie manager as policy callback.\n                          if null, ACCEPT_ORIGINAL_SERVER will\n                          be used."}], "class_name": "CookieManager", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a new cookie manager with specified cookie store and cookie policy.\n", "method_declar": ""}, {"params": [{"param_name": ["uri"], "param_type": "URI", "param_description": " a URI representing the intended use for the\n            cookies"}, {"param_name": ["requestHeaders"], "param_type": "Map", "param_description": " - a Map from request header\n            field names to lists of field values representing\n            the current request headers"}], "class_name": "CookieManager", "is_static": false, "return_value": {"return_name": [], "return_description": ["an immutable map from state management headers, with\n            field names \"Cookie\" or \"Cookie2\" to a list of\n            cookies containing state information"], "return_type": ["Map<String,\u00a0List<String>>"]}, "method_name": "get", "method_description": "Gets all the applicable cookies from a cookie cache for the\n specified uri in the request header.\n\n \nThe URI passed as an argument specifies the intended use for\n the cookies. In particular the scheme should reflect whether the cookies\n will be sent over http, https or used in another context like javascript.\n The host part should reflect either the destination of the cookies or\n their origin in the case of javascript.\nIt is up to the implementation to take into account the URI and\n the cookies attributes and security settings to determine which ones\n should be returned.\nHTTP protocol implementers should make sure that this method is\n called after all request headers related to choosing cookies\n are added, and before the request is sent.\n", "method_declar": ""}, {"params": [], "class_name": "CookieManager", "is_static": false, "return_value": {"return_name": [], "return_description": ["the cookie store currently used by cookie manager."], "return_type": ["CookieStore"]}, "method_name": "getCookieStore", "method_description": "To retrieve current cookie store.\n", "method_declar": ""}, {"params": [{"param_name": ["uri"], "param_type": "URI", "param_description": " a URI where the cookies come from"}, {"param_name": ["responseHeaders"], "param_type": "Map", "param_description": " an immutable map from field names to\n            lists of field values representing the response\n            header fields returned"}], "class_name": "CookieManager", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "put", "method_description": "Sets all the applicable cookies, examples are response header\n fields that are named Set-Cookie2, present in the response\n headers into a cookie cache.\n", "method_declar": ""}, {"params": [{"param_name": ["cookiePolicy"], "param_type": "CookiePolicy", "param_description": " the cookie policy. Can be null, which\n                          has no effects on current cookie policy."}], "class_name": "CookieManager", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setCookiePolicy", "method_description": "To set the cookie policy of this cookie manager.\n\n \n A instance of CookieManager will have\n cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always\n can call this method to set another cookie policy.\n", "method_declar": ""}], "class_name": "CookieManager", "Vars": null}