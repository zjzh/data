{"package_name": "java.security", "subclass_list": [], "class_description": "This class defines the Service Provider Interface (SPI)\n for the KeyFactory class.\n All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a key factory for a particular algorithm. Key factories are used to convert keys (opaque\n cryptographic keys of type Key) into key specifications\n (transparent representations of the underlying key material), and vice\n versa. Key factories are bi-directional. That is, they allow you to build an\n opaque key object from a given key specification (key material), or to\n retrieve the underlying key material of a key object in a suitable format. Multiple compatible key specifications may exist for the same key.\n For example, a DSA public key may be specified using\n DSAPublicKeySpec or\n X509EncodedKeySpec. A key factory can be used to translate\n between compatible key specifications. A provider should document all the key specifications supported by its\n key factory. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "KeyFactorySpi", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}], "class_name": "KeyFactorySpi", "Vars": null}