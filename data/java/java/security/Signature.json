{"package_name": "java.security", "subclass_list": [], "class_description": "The Signature class is used to provide applications the functionality\n of a digital signature algorithm. Digital signatures are used for\n authentication and integrity assurance of digital data. The signature algorithm can be, among others, the NIST standard\n DSA, using DSA and SHA-1. The DSA algorithm using the\n SHA-1 message digest algorithm can be specified as SHA1withDSA.\n In the case of RSA, there are multiple choices for the message digest\n algorithm, so the signing algorithm could be specified as, for example,\n MD2withRSA, MD5withRSA, or SHA1withRSA.\n The algorithm name must be specified, as there is no default. A Signature object can be used to generate and verify digital\n signatures. There are three phases to the use of a Signature object for\n either signing data or verifying a signature: Note that this class is abstract and extends from\n SignatureSpi for historical reasons.\n Application developers should only take notice of the methods defined in\n this Signature class; all the methods in\n the superclass are intended for cryptographic service providers who wish to\n supply their own implementations of digital signature algorithms. Android provides the following Signature algorithms: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["SignatureSpi"], "Methods": [], "class_name": "Signature", "Vars": null}