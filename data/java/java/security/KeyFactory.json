{"package_name": "java.security", "subclass_list": [], "class_description": "Key factories are used to convert keys (opaque\n cryptographic keys of type Key) into key specifications\n (transparent representations of the underlying key material), and vice\n versa. Key factories are bi-directional. That is, they allow you to build an\n opaque key object from a given key specification (key material), or to\n retrieve the underlying key material of a key object in a suitable format. Multiple compatible key specifications may exist for the same key.\n For example, a DSA public key may be specified using\n DSAPublicKeySpec or\n X509EncodedKeySpec. A key factory can be used to translate\n between compatible key specifications. The following is an example of how to use a key factory in order to\n instantiate a DSA public key from its encoding.\n Assume Alice has received a digital signature from Bob.\n Bob also sent her his public key (in encoded format) to verify\n his signature. Alice then performs the following actions: Android provides the following KeyFactory algorithms: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "KeyFactory", "Vars": null}