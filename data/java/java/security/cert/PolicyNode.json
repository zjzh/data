{"package_name": "java.security.cert", "subclass_list": [], "class_description": "An immutable valid policy tree node as defined by the PKIX certification\n path validation algorithm. One of the outputs of the PKIX certification path validation\n algorithm is a valid policy tree, which includes the policies that\n were determined to be valid, how this determination was reached,\n and any policy qualifiers encountered. This tree is of depth\n n, where n is the length of the certification\n path that has been validated. Most applications will not need to examine the valid policy tree.\n They can achieve their policy processing goals by setting the\n policy-related parameters in PKIXParameters. However,\n the valid policy tree is available for more sophisticated applications,\n especially those that process policy qualifiers. PKIXCertPathValidatorResult#getPolicyTree() returns the root node of the\n valid policy tree. The tree can be traversed using the\n getChildren and getParent methods.\n Data about a particular node can be retrieved using other methods of\n PolicyNode. Concurrent Access All PolicyNode objects must be immutable and\n thread-safe. Multiple threads may concurrently invoke the methods defined\n in this class on a single PolicyNode object (or more than one)\n with no ill effects. This stipulation applies to all public fields and\n methods of this class and any added or overridden by subclasses. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "PolicyNode", "Vars": null}