{"package_name": "java.security.cert", "subclass_list": [], "class_description": "A trust anchor or most-trusted Certification Authority (CA). This class represents a \"most-trusted CA\", which is used as a trust anchor\n for validating X.509 certification paths. A most-trusted CA includes the\n public key of the CA, the CA's name, and any constraints upon the set of\n paths which may be validated using this key. These parameters can be\n specified in the form of a trusted X509Certificate or as\n individual parameters. Concurrent Access All TrustAnchor objects must be immutable and\n thread-safe. That is, multiple threads may concurrently invoke the\n methods defined in this class on a single TrustAnchor\n object (or more than one) with no ill effects. Requiring\n TrustAnchor objects to be immutable and thread-safe\n allows them to be passed around to various pieces of code without\n worrying about coordinating access. This stipulation applies to all\n public fields and methods of this class and any added or overridden\n by subclasses. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["trustedCert"], "param_type": "X509Certificate", "param_description": " a trusted X509Certificate"}, {"param_name": ["nameConstraints"], "param_type": "byte[]", "param_description": " a byte array containing the ASN.1 DER encoding of\n a NameConstraints extension to be used for checking name constraints.\n Only the value of the extension is included, not the OID or criticality\n flag. Specify null to omit the parameter."}], "class_name": "TrustAnchor", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an instance of TrustAnchor with the specified\n X509Certificate and optional name constraints, which\n are intended to be used as additional constraints when validating\n an X.509 certification path.\n \n\n The name constraints are specified as a byte array. This byte array\n should contain the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in\n RFC 3280\n and X.509. The ASN.1 definition of this structure appears below.\n\n \n\n Note that the name constraints byte array supplied is cloned to protect\n against subsequent modifications.\n", "method_declar": ""}, {"params": [{"param_name": ["caPrincipal"], "param_type": "X500Principal", "param_description": " the name of the most-trusted CA as X500Principal"}, {"param_name": ["pubKey"], "param_type": "PublicKey", "param_description": " the public key of the most-trusted CA"}, {"param_name": ["nameConstraints"], "param_type": "byte[]", "param_description": " a byte array containing the ASN.1 DER encoding of\n a NameConstraints extension to be used for checking name constraints.\n Only the value of the extension is included, not the OID or criticality\n flag. Specify null to omit the parameter."}], "class_name": "TrustAnchor", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an instance of TrustAnchor where the\n most-trusted CA is specified as an X500Principal and public key.\n Name constraints are an optional parameter, and are intended to be used\n as additional constraints when validating an X.509 certification path.\n \n\n The name constraints are specified as a byte array. This byte array\n contains the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in RFC 3280\n and X.509. The ASN.1 notation for this structure is supplied in the\n documentation for\n TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) .\n \n\n Note that the name constraints byte array supplied here is cloned to\n protect against subsequent modifications.\n", "method_declar": ""}, {"params": [{"param_name": ["caName"], "param_type": "String", "param_description": " the X.500 distinguished name of the most-trusted CA in\n RFC 2253\nString format"}, {"param_name": ["pubKey"], "param_type": "PublicKey", "param_description": " the public key of the most-trusted CA"}, {"param_name": ["nameConstraints"], "param_type": "byte[]", "param_description": " a byte array containing the ASN.1 DER encoding of\n a NameConstraints extension to be used for checking name constraints.\n Only the value of the extension is included, not the OID or criticality\n flag. Specify null to omit the parameter."}], "class_name": "TrustAnchor", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an instance of TrustAnchor where the\n most-trusted CA is specified as a distinguished name and public key.\n Name constraints are an optional parameter, and are intended to be used\n as additional constraints when validating an X.509 certification path.\n \n\n The name constraints are specified as a byte array. This byte array\n contains the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in RFC 3280\n and X.509. The ASN.1 notation for this structure is supplied in the\n documentation for\n TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) .\n \n\n Note that the name constraints byte array supplied here is cloned to\n protect against subsequent modifications.\n", "method_declar": ""}, {"params": [], "class_name": "TrustAnchor", "is_static": false, "return_value": {"return_name": [], "return_description": ["the X.500 distinguished name of the most-trusted CA, or\n null if the trust anchor was not specified as a trusted\n public key and name or X500Principal pair"], "return_type": ["X500Principal"]}, "method_name": "getCA", "method_description": "Returns the name of the most-trusted CA as an X500Principal.\n", "method_declar": ""}, {"params": [], "class_name": "TrustAnchor", "is_static": false, "return_value": {"return_name": [], "return_description": ["the X.500 distinguished name of the most-trusted CA, or\n null if the trust anchor was not specified as a trusted\n public key and name or X500Principal pair"], "return_type": ["String"]}, "method_name": "getCAName", "method_description": "Returns the name of the most-trusted CA in RFC 2253 String\n format.\n", "method_declar": ""}, {"params": [], "class_name": "TrustAnchor", "is_static": false, "return_value": {"return_name": [], "return_description": ["the public key of the most-trusted CA, or null\n if the trust anchor was not specified as a trusted public key and name\n or X500Principal pair"], "return_type": ["PublicKey"]}, "method_name": "getCAPublicKey", "method_description": "Returns the public key of the most-trusted CA.\n", "method_declar": ""}, {"params": [], "class_name": "TrustAnchor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a byte array containing the ASN.1 DER encoding of\n         a NameConstraints extension used for checking name constraints,\n         or null if not set."], "return_type": ["byte[]"]}, "method_name": "getNameConstraints", "method_description": "Returns the name constraints parameter. The specified name constraints\n are associated with this trust anchor and are intended to be used\n as additional constraints when validating an X.509 certification path.\n \n\n The name constraints are returned as a byte array. This byte array\n contains the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in RFC 3280\n and X.509. The ASN.1 notation for this structure is supplied in the\n documentation for\n TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) .\n \n\n Note that the byte array returned is cloned to protect against\n subsequent modifications.\n", "method_declar": ""}, {"params": [], "class_name": "TrustAnchor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a trusted X509Certificate or null\n if the trust anchor was not specified as a trusted certificate"], "return_type": ["X509Certificate"]}, "method_name": "getTrustedCert", "method_description": "Returns the most-trusted CA certificate.\n", "method_declar": ""}, {"params": [], "class_name": "TrustAnchor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a formatted string describing the TrustAnchor"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a formatted string describing the TrustAnchor.\n", "method_declar": ""}], "class_name": "TrustAnchor", "Vars": null}