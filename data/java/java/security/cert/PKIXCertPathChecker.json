{"package_name": "java.security.cert", "subclass_list": ["PKIXRevocationChecker", "PKIXRevocationChecker"], "class_description": "An abstract class that performs one or more checks on an\n X509Certificate. A concrete implementation of the PKIXCertPathChecker class\n can be created to extend the PKIX certification path validation algorithm.\n For example, an implementation may check for and process a critical private\n extension of each certificate in a certification path. Instances of PKIXCertPathChecker are passed as parameters\n using the PKIXParameters#setCertPathCheckers\n or PKIXParameters#addCertPathChecker methods\n of the PKIXParameters and PKIXBuilderParameters\n class. Each of the PKIXCertPathCheckers check\n methods will be called, in turn, for each certificate processed by a PKIX\n CertPathValidator or CertPathBuilder\n implementation. A PKIXCertPathChecker may be called multiple times on\n successive certificates in a certification path. Concrete subclasses\n are expected to maintain any internal state that may be necessary to\n check successive certificates. The init method is used\n to initialize the internal state of the checker so that the certificates\n of a new certification path may be checked. A stateful implementation\n must override the clone method if necessary in\n order to allow a PKIX CertPathBuilder to efficiently\n backtrack and try other paths. In these situations, the\n CertPathBuilder is able to restore prior path validation\n states by restoring the cloned PKIXCertPathCheckers. The order in which the certificates are presented to the\n PKIXCertPathChecker may be either in the forward direction\n (from target to most-trusted CA) or in the reverse direction (from\n most-trusted CA to target). A PKIXCertPathChecker implementation\n must support reverse checking (the ability to perform its checks when\n it is presented with certificates in the reverse direction) and may\n support forward checking (the ability to perform its checks when it is\n presented with certificates in the forward direction). The\n isForwardCheckingSupported method\n indicates whether forward checking is supported. Additional input parameters required for executing the check may be\n specified through constructors of concrete implementations of this class. Concurrent Access Unless otherwise specified, the methods defined in this class are not\n thread-safe. Multiple threads that need to access a single\n object concurrently should synchronize amongst themselves and\n provide the necessary locking. Multiple threads each manipulating\n separate objects need not synchronize. ", "class_type": "class", "typealias": [], "interface_list": ["CertPathChecker", "Cloneable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "PKIXCertPathChecker", "Vars": null}