{"package_name": "java.security.cert", "subclass_list": [], "class_description": "A CRLSelector that selects X509CRLs that\n match all specified criteria. This class is particularly useful when\n selecting CRLs from a CertStore to check revocation status\n of a particular certificate. When first constructed, an X509CRLSelector has no criteria\n enabled and each of the get methods return a default\n value (null). Therefore, the match method\n would return true for any X509CRL. Typically,\n several criteria are enabled (by calling setIssuers\n or setDateAndTime, for instance) and then the\n X509CRLSelector is passed to\n CertStore#getCRLs or some similar\n method. Please refer to RFC 3280:\n Internet X.509 Public Key Infrastructure Certificate and CRL Profile\n for definitions of the X.509 CRL fields and extensions mentioned below. Concurrent Access Unless otherwise specified, the methods defined in this class are not\n thread-safe. Multiple threads that need to access a single\n object concurrently should synchronize amongst themselves and\n provide the necessary locking. Multiple threads each manipulating\n separate objects need not synchronize. ", "class_type": "class", "typealias": [], "interface_list": ["CRLSelector"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an X509CRLSelector. Initially, no criteria are set\n so any X509CRL will match.\n", "method_declar": ""}, {"params": [{"param_name": ["issuer"], "param_type": "X500Principal", "param_description": " the issuer as X500Principal"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addIssuer", "method_description": "Adds a name to the issuerNames criterion. The issuer distinguished\n name in the X509CRL must match at least one of the specified\n distinguished names.\n \n\n This method allows the caller to add a name to the set of issuer names\n which X509CRLs may contain. The specified name is added to\n any previous value for the issuerNames criterion.\n If the specified name is a duplicate, it may be ignored.\n", "method_declar": ""}, {"params": [{"param_name": ["name"], "param_type": "byte[]", "param_description": " a byte array containing the name in ASN.1 DER encoded form"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addIssuerName", "method_description": "Adds a name to the issuerNames criterion. The issuer distinguished\n name in the X509CRL must match at least one of the specified\n distinguished names.\n \n\n This method allows the caller to add a name to the set of issuer names\n which X509CRLs may contain. The specified name is added to\n any previous value for the issuerNames criterion. If the specified name\n is a duplicate, it may be ignored.\n If a name is specified as a byte array, it should contain a single DER\n encoded distinguished name, as defined in X.501. The ASN.1 notation for\n this structure is as follows.\n \n\n The name is provided as a byte array. This byte array should contain\n a single DER encoded distinguished name, as defined in X.501. The ASN.1\n notation for this structure appears in the documentation for\n setIssuerNames(java.util.Collection).\n \n\n Note that the byte array supplied here is cloned to protect against\n subsequent modifications.\n", "method_declar": ""}, {"params": [{"param_name": ["name"], "param_type": "String", "param_description": " the name in RFC 2253 form"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addIssuerName", "method_description": "Denigrated, use\n addIssuer(javax.security.auth.x500.X500Principal) or\n addIssuerName(byte[]) instead. This method should not be\n relied on as it can fail to match some CRLs because of a loss of\n encoding information in the RFC 2253 String form of some distinguished\n names.\n \n\n Adds a name to the issuerNames criterion. The issuer distinguished\n name in the X509CRL must match at least one of the specified\n distinguished names.\n \n\n This method allows the caller to add a name to the set of issuer names\n which X509CRLs may contain. The specified name is added to\n any previous value for the issuerNames criterion.\n If the specified name is a duplicate, it may be ignored.\n", "method_declar": ""}, {"params": [], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the copy"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Returns a copy of this object.\n", "method_declar": ""}, {"params": [], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the certificate being checked (or null)"], "return_type": ["X509Certificate"]}, "method_name": "getCertificateChecking", "method_description": "Returns the certificate being checked. This is not a criterion. Rather,\n it is optional information that may help a CertStore\n find CRLs that would be relevant when checking revocation for the\n specified certificate. If the value returned is null, then\n no such optional information is provided.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Date to match against (or null)"], "return_type": ["Date"]}, "method_name": "getDateAndTime", "method_description": "Returns the dateAndTime criterion. The specified date must be\n equal to or later than the value of the thisUpdate component\n of the X509CRL and earlier than the value of the\n nextUpdate component. There is no match if the\n X509CRL does not contain a nextUpdate component.\n If null, no dateAndTime check will be done.\n \n\n Note that the Date returned is cloned to protect against\n subsequent modifications.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Collection of names (or null)"], "return_type": ["Collection<Object>"]}, "method_name": "getIssuerNames", "method_description": "Returns a copy of the issuerNames criterion. The issuer distinguished\n name in the X509CRL must match at least one of the specified\n distinguished names. If the value returned is null, any\n issuer distinguished name will do.\n \n\n If the value returned is not null, it is a\n Collection of names. Each name is a String\n or a byte array representing a distinguished name (in RFC 2253 or\n ASN.1 DER encoded form, respectively).  Note that the\n Collection returned may contain duplicate names.\n \n\n If a name is specified as a byte array, it should contain a single DER\n encoded distinguished name, as defined in X.501. The ASN.1 notation for\n this structure is given in the documentation for\n setIssuerNames(java.util.Collection).\n \n\n Note that a deep copy is performed on the Collection to\n protect against subsequent modifications.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": ["an unmodifiable Collection of names\n   (or null)"], "return_type": ["Collection<X500Principal>"]}, "method_name": "getIssuers", "method_description": "Returns the issuerNames criterion. The issuer distinguished\n name in the X509CRL must match at least one of the specified\n distinguished names. If the value returned is null, any\n issuer distinguished name will do.\n \n\n If the value returned is not null, it is a\n unmodifiable Collection of X500Principals.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the maximum CRL number accepted (or null)"], "return_type": ["BigInteger"]}, "method_name": "getMaxCRL", "method_description": "Returns the maxCRLNumber criterion. The X509CRL must have a\n CRL number extension whose value is less than or equal to the\n specified value. If null, no maxCRLNumber check will be\n done.\n", "method_declar": ""}, {"params": [], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the minimum CRL number accepted (or null)"], "return_type": ["BigInteger"]}, "method_name": "getMinCRL", "method_description": "Returns the minCRLNumber criterion. The X509CRL must have a\n CRL number extension whose value is greater than or equal to the\n specified value. If null, no minCRLNumber check will be done.\n", "method_declar": ""}, {"params": [{"param_name": ["crl"], "param_type": "CRL", "param_description": " the CRL to be checked"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the CRL should be selected,\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "match", "method_description": "Decides whether a CRL should be selected.\n", "method_declar": ""}, {"params": [{"param_name": ["cert"], "param_type": "X509Certificate", "param_description": " the X509Certificate being checked\n             (or null)"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setCertificateChecking", "method_description": "Sets the certificate being checked. This is not a criterion. Rather,\n it is optional information that may help a CertStore\n find CRLs that would be relevant when checking revocation for the\n specified certificate. If null is specified, then no\n such optional information is provided.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["dateAndTime"], "param_type": "Date", "param_description": " the Date to match against\n                    (or null)"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDateAndTime", "method_description": "Sets the dateAndTime criterion. The specified date must be\n equal to or later than the value of the thisUpdate component\n of the X509CRL and earlier than the value of the\n nextUpdate component. There is no match if the X509CRL\n does not contain a nextUpdate component.\n If null, no dateAndTime check will be done.\n \n\n Note that the Date supplied here is cloned to protect\n against subsequent modifications.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["names"], "param_type": "Collection", "param_description": " a Collection of names (or null)"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setIssuerNames", "method_description": "Note: use setIssuers(java.util.Collection) instead\n or only specify the byte array form of distinguished names when using\n this method. See addIssuerName(java.lang.String) for more information.\n \n\n Sets the issuerNames criterion. The issuer distinguished name in the\n X509CRL must match at least one of the specified\n distinguished names. If null, any issuer distinguished name\n will do.\n \n\n This method allows the caller to specify, with a single method call,\n the complete set of issuer names which X509CRLs may contain.\n The specified value replaces the previous value for the issuerNames\n criterion.\n \n\n The names parameter (if not null) is a\n Collection of names. Each name is a String\n or a byte array representing a distinguished name (in\n RFC 2253 or\n ASN.1 DER encoded form, respectively). If null is supplied\n as the value for this argument, no issuerNames check will be performed.\n \n\n Note that the names parameter can contain duplicate\n distinguished names, but they may be removed from the\n Collection of names returned by the\n getIssuerNames method.\n \n\n If a name is specified as a byte array, it should contain a single DER\n encoded distinguished name, as defined in X.501. The ASN.1 notation for\n this structure is as follows.\n \n\n Note that a deep copy is performed on the Collection to\n protect against subsequent modifications.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["issuers"], "param_type": "Collection", "param_description": " a Collection of X500Principals\n   (or null)"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setIssuers", "method_description": "Sets the issuerNames criterion. The issuer distinguished name in the\n X509CRL must match at least one of the specified\n distinguished names. If null, any issuer distinguished name\n will do.\n \n\n This method allows the caller to specify, with a single method call,\n the complete set of issuer names which X509CRLs may contain.\n The specified value replaces the previous value for the issuerNames\n criterion.\n \n\n The names parameter (if not null) is a\n Collection of X500Principals.\n \n\n Note that the names parameter can contain duplicate\n distinguished names, but they may be removed from the\n Collection of names returned by the\n getIssuers method.\n \n\n Note that a copy is performed on the Collection to\n protect against subsequent modifications.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["maxCRL"], "param_type": "BigInteger", "param_description": " the maximum CRL number accepted (or null)"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMaxCRLNumber", "method_description": "Sets the maxCRLNumber criterion. The X509CRL must have a\n CRL number extension whose value is less than or equal to the\n specified value. If null, no maxCRLNumber check will be\n done.\n", "method_declar": ""}, {"params": [{"param_name": ["minCRL"], "param_type": "BigInteger", "param_description": " the minimum CRL number accepted (or null)"}], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMinCRLNumber", "method_description": "Sets the minCRLNumber criterion. The X509CRL must have a\n CRL number extension whose value is greater than or equal to the\n specified value. If null, no minCRLNumber check will be\n done.\n", "method_declar": ""}, {"params": [], "class_name": "X509CRLSelector", "is_static": false, "return_value": {"return_name": [], "return_description": ["a String describing the contents of the\n         X509CRLSelector."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a printable representation of the X509CRLSelector.\n", "method_declar": ""}], "class_name": "X509CRLSelector", "Vars": null}