{"package_name": "java.security.cert", "subclass_list": [], "class_description": "A class for validating certification paths (also known as certificate\n chains). This class uses a provider-based architecture.\n To create a CertPathValidator,\n call one of the static getInstance methods, passing in the\n algorithm name of the CertPathValidator desired and\n optionally the name of the provider desired. Once a CertPathValidator object has been created, it can\n be used to validate certification paths by calling the validate method and passing it the CertPath to be validated\n and an algorithm-specific set of parameters. If successful, the result is\n returned in an object that implements the\n CertPathValidatorResult interface. The getRevocationChecker() method allows an application to specify\n additional algorithm-specific parameters and options used by the\n CertPathValidator when checking the revocation status of\n certificates. Here is an example demonstrating how it is used with the PKIX\n algorithm: Android provides the following CertPathValidator algorithms: Concurrent Access The static methods of this class are guaranteed to be thread-safe.\n Multiple threads may concurrently invoke the static methods defined in\n this class with no ill effects. However, this is not true for the non-static methods defined by this class.\n Unless otherwise documented by a specific provider, threads that need to\n access a single CertPathValidator instance concurrently should\n synchronize amongst themselves and provide the necessary locking. Multiple\n threads each manipulating a different CertPathValidator\n instance need not synchronize. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "CertPathValidator", "Vars": null}