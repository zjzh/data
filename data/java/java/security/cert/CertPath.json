{"package_name": "java.security.cert", "subclass_list": [], "class_description": "An immutable sequence of certificates (a certification path). This is an abstract class that defines the methods common to all\n CertPaths. Subclasses can handle different kinds of\n certificates (X.509, PGP, etc.). All CertPath objects have a type, a list of\n Certificates, and one or more supported encodings. Because the\n CertPath class is immutable, a CertPath cannot\n change in any externally visible way after being constructed. This\n stipulation applies to all public fields and methods of this class and any\n added or overridden by subclasses. The type is a String that identifies the type of\n Certificates in the certification path. For each\n certificate cert in a certification path certPath,\n cert.getType().equals(certPath.getType()) must be\n true. The list of Certificates is an ordered List of\n zero or more Certificates. This List and all\n of the Certificates contained in it must be immutable. Each CertPath object must support one or more encodings\n so that the object can be translated into a byte array for storage or\n transmission to other parties. Preferably, these encodings should be\n well-documented standards (such as PKCS#7). One of the encodings supported\n by a CertPath is considered the default encoding. This\n encoding is used if no encoding is explicitly requested (for the\n getEncoded() method, for instance). All CertPath objects are also Serializable.\n CertPath objects are resolved into an alternate\n CertPathRep object during serialization. This allows\n a CertPath object to be serialized into an equivalent\n representation regardless of its underlying implementation. CertPath objects can be created with a\n CertificateFactory or they can be returned by other classes,\n such as a CertPathBuilder. By convention, X.509 CertPaths (consisting of\n X509Certificates), are ordered starting with the target\n certificate and ending with a certificate issued by the trust anchor. That\n is, the issuer of one certificate is the subject of the following one. The\n certificate representing the TrustAnchor should not be\n included in the certification path. Unvalidated X.509 CertPaths\n may not follow these conventions. PKIX CertPathValidators will\n detect any departure from these conventions that cause the certification\n path to be invalid and throw a CertPathValidatorException. Every implementation of the Java platform is required to support the\n following standard CertPath encodings: Concurrent Access All CertPath objects must be thread-safe. That is, multiple\n threads may concurrently invoke the methods defined in this class on a\n single CertPath object (or more than one) with no\n ill effects. This is also true for the List returned by\n CertPath.getCertificates. Requiring CertPath objects to be immutable and thread-safe\n allows them to be passed around to various pieces of code without worrying\n about coordinating access.  Providing this thread-safety is\n generally not difficult, since the CertPath and\n List objects in question are immutable. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "CertPath", "Vars": null}