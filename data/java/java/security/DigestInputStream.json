{"package_name": "java.security", "subclass_list": [], "class_description": "A transparent stream that updates the associated message digest using\n the bits going through the stream. To complete the message digest computation, call one of the\n digest methods on the associated message\n digest after your calls to one of this digest input stream's\n read methods. It is possible to turn this stream on or off (see\n on). When it is on, a call to one of the\n read methods\n results in an update on the message digest.  But when it is off,\n the message digest is not updated. The default is for the stream\n to be on. Note that digest objects can compute only one digest (see\n MessageDigest),\n so that in order to compute intermediate digests, a caller should\n retain a handle onto the digest object, and clone it for each\n digest to be computed, leaving the orginal digest untouched. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["FilterInputStream"], "Methods": [{"params": [{"param_name": ["stream"], "param_type": "InputStream", "param_description": " the input stream."}, {"param_name": ["digest"], "param_type": "MessageDigest", "param_description": " the message digest to associate with this stream."}], "class_name": "DigestInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a digest input stream, using the specified input stream\n and message digest.\n", "method_declar": ""}, {"params": [], "class_name": "DigestInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the message digest associated with this stream."], "return_type": ["MessageDigest"]}, "method_name": "getMessageDigest", "method_description": "Returns the message digest associated with this stream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["on"], "param_type": "boolean", "param_description": " true to turn the digest function on, false to turn\n it off."}], "class_name": "DigestInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "on", "method_description": "Turns the digest function on or off. The default is on.  When\n it is on, a call to one of the read methods results in an\n update on the message digest.  But when it is off, the message\n digest is not updated.\n", "method_declar": ""}, {"params": [], "class_name": "DigestInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the byte read."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads a byte, and updates the message digest (if the digest\n function is on).  That is, this method reads a byte from the\n input stream, blocking until the byte is actually read. If the\n digest function is on (see on), this method\n will then call update on the message digest associated\n with this stream, passing it the byte read.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the array into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the starting offset into b of where the\n data should be placed."}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes to be read from the input\n stream into b, starting at offset off."}], "class_name": "DigestInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes read. This is less than\n len if the end of the stream is reached prior to\n reading len bytes. -1 is returned if no bytes were\n read because the end of the stream had already been reached when\n the call was made."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads into a byte array, and updates the message digest (if the\n digest function is on).  That is, this method reads up to\n len bytes from the input stream into the array\n b, starting at offset off. This method\n blocks until the data is actually\n read. If the digest function is on (see\n on), this method will then call update\n on the message digest associated with this stream, passing it\n the data.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["digest"], "param_type": "MessageDigest", "param_description": " the message digest to be associated with this stream."}], "class_name": "DigestInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMessageDigest", "method_description": "Associates the specified message digest with this stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DigestInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Prints a string representation of this digest input stream and\n its associated message digest object.\n", "method_declar": ""}], "class_name": "DigestInputStream", "Vars": null}