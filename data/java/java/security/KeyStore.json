{"package_name": "java.security", "subclass_list": [], "class_description": "This class represents a storage facility for cryptographic\n keys and certificates. A KeyStore manages different types of entries.\n Each type of entry implements the KeyStore.Entry interface.\n Three basic KeyStore.Entry implementations are provided: Each entry in a keystore is identified by an \"alias\" string. In the\n case of private keys and their associated certificate chains, these strings\n distinguish among the different ways in which the entity may authenticate\n itself. For example, the entity may authenticate itself using different\n certificate authorities, or using different public key algorithms. Whether aliases are case sensitive is implementation dependent. In order\n to avoid problems, it is recommended not to use aliases in a KeyStore that\n only differ in case. Whether keystores are persistent, and the mechanisms used by the\n keystore if it is persistent, are not specified here. This allows\n use of a variety of techniques for protecting sensitive (e.g., private or\n secret) keys. Smart cards or other integrated cryptographic engines\n (SafeKeyper) are one option, and simpler mechanisms such as files may also\n be used (in a variety of formats). Typical ways to request a KeyStore object include\n relying on the default type and providing a specific keystore type. Before a keystore can be accessed, it must be\n loaded. Once the keystore has been loaded, it is possible\n to read existing entries from the keystore, or to write new entries\n into the keystore: Android provides the following KeyStore types: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "KeyStore", "Vars": null}