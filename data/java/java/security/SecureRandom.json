{"package_name": "java.security", "subclass_list": [], "class_description": "This class provides a cryptographically strong random number\n generator (RNG). A cryptographically strong random number\n minimally complies with the statistical random number generator tests\n specified in \nFIPS 140-2, Security Requirements for Cryptographic Modules,\n section 4.9.1.\n Additionally, SecureRandom must produce non-deterministic output.\n Therefore any seed material passed to a SecureRandom object must be\n unpredictable, and all SecureRandom output sequences must be\n cryptographically strong, as described in\n \nRFC 1750: Randomness Recommendations for Security. A caller obtains a SecureRandom instance via the\n no-argument constructor or one of the getInstance methods: Many SecureRandom implementations are in the form of a pseudo-random\n number generator (PRNG), which means they use a deterministic algorithm\n to produce a pseudo-random sequence from a true random seed.\n Other implementations may produce true random numbers,\n and yet others may use a combination of both techniques. Typical callers of SecureRandom invoke the following methods\n to retrieve random bytes: Callers may also invoke the generateSeed method\n to generate a given number of seed bytes (to seed other random number\n generators, for example): ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Random"], "Methods": [{"params": [], "class_name": "SecureRandom", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a secure random number generator (RNG) implementing the\n default random number algorithm.\n\n \n This constructor traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports a SecureRandom (RNG) algorithm is returned.\n If none of the Providers support a RNG algorithm,\n then an implementation-specific default is returned.\n\n \n Note that the list of registered providers may be retrieved via\n the Security#getProviders() method.\n\n \n See the SecureRandom section in the \n Java Cryptography Architecture Standard Algorithm Name Documentation\n for information about standard RNG algorithm names.\n\n \n The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the setSeed method.\n If setSeed is not called, the first call to\n nextBytes will force the SecureRandom object to seed itself.\n This self-seeding will not occur if setSeed was\n previously called.\n", "method_declar": ""}, {"params": [{"param_name": ["seed"], "param_type": "byte[]", "param_description": " the seed."}], "class_name": "SecureRandom", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a secure random number generator (RNG) implementing the\n default random number algorithm.\n The SecureRandom instance is seeded with the specified seed bytes.\n\n \n This constructor traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports a SecureRandom (RNG) algorithm is returned.\n If none of the Providers support a RNG algorithm,\n then an implementation-specific default is returned.\n\n \n Note that the list of registered providers may be retrieved via\n the Security#getProviders() method.\n\n \n See the SecureRandom section in the \n Java Cryptography Architecture Standard Algorithm Name Documentation\n for information about standard RNG algorithm names.\n", "method_declar": ""}, {"params": [{"param_name": ["numBytes"], "param_type": "int", "param_description": " the number of seed bytes to generate."}], "class_name": "SecureRandom", "is_static": false, "return_value": {"return_name": [], "return_description": ["the seed bytes."], "return_type": ["byte[]"]}, "method_name": "generateSeed", "method_description": "Returns the given number of seed bytes, computed using the seed\n generation algorithm that this class uses to seed itself.  This\n call may be used to seed other random number generators.\n", "method_declar": ""}, {"params": [], "class_name": "SecureRandom", "is_static": false, "return_value": {"return_name": [], "return_description": ["the name of the algorithm or unknown\n          if the algorithm name cannot be determined."], "return_type": ["String"]}, "method_name": "getAlgorithm", "method_description": "Returns the name of the algorithm implemented by this SecureRandom\n object.\n", "method_declar": ""}, {"params": [{"param_name": ["algorithm"], "param_type": "String", "param_description": " the name of the RNG algorithm.\n See the SecureRandom section in the \n Java Cryptography Architecture Standard Algorithm Name Documentation\n for information about standard RNG algorithm names."}], "class_name": "SecureRandom", "is_static": true, "return_value": {"return_name": [], "return_description": ["the new SecureRandom object."], "return_type": ["SecureRandom"]}, "method_name": "getInstance", "method_description": "Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm.\n\n \n This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n \n Note that the list of registered providers may be retrieved via\n the Security#getProviders() method.\n\n \n The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the setSeed method.\n If setSeed is not called, the first call to\n nextBytes will force the SecureRandom object to seed itself.\n This self-seeding will not occur if setSeed was\n previously called.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["algorithm"], "param_type": "String", "param_description": " the name of the RNG algorithm.\n See the SecureRandom section in the \n Java Cryptography Architecture Standard Algorithm Name Documentation\n for information about standard RNG algorithm names."}, {"param_name": ["provider"], "param_type": "String", "param_description": " the name of the provider."}], "class_name": "SecureRandom", "is_static": true, "return_value": {"return_name": [], "return_description": ["the new SecureRandom object."], "return_type": ["SecureRandom"]}, "method_name": "getInstance", "method_description": "Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm.\n\n \n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n \n Note that the list of registered providers may be retrieved via\n the Security#getProviders() method.\n\n \n The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the setSeed method.\n If setSeed is not called, the first call to\n nextBytes will force the SecureRandom object to seed itself.\n This self-seeding will not occur if setSeed was\n previously called.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["algorithm"], "param_type": "String", "param_description": " the name of the RNG algorithm.\n See the SecureRandom section in the \n Java Cryptography Architecture Standard Algorithm Name Documentation\n for information about standard RNG algorithm names."}, {"param_name": ["provider"], "param_type": "Provider", "param_description": " the provider."}], "class_name": "SecureRandom", "is_static": true, "return_value": {"return_name": [], "return_description": ["the new SecureRandom object."], "return_type": ["SecureRandom"]}, "method_name": "getInstance", "method_description": "Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm.\n\n \n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n \n The returned SecureRandom object has not been seeded.  To seed the\n returned object, call the setSeed method.\n If setSeed is not called, the first call to\n nextBytes will force the SecureRandom object to seed itself.\n This self-seeding will not occur if setSeed was\n previously called.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SecureRandom", "is_static": true, "return_value": {"return_name": [], "return_description": ["a strong SecureRandom implementation"], "return_type": ["SecureRandom"]}, "method_name": "getInstanceStrong", "method_description": "Returns a SecureRandom object.\n\n In Android this is equivalent to get a SHA1PRNG from AndroidOpenSSL.\n\n Some situations require strong random values, such as when\n creating high-value/long-lived secrets like RSA public/private\n keys.  To help guide applications in selecting a suitable strong\n SecureRandom implementation, Java distributions\n include a list of known strong SecureRandom\n implementations in the securerandom.strongAlgorithms\n Security property.\n \n\n Every implementation of the Java platform is required to\n support at least one strong SecureRandom implementation.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SecureRandom", "is_static": false, "return_value": {"return_name": [], "return_description": ["the provider of this SecureRandom object."], "return_type": ["Provider"]}, "method_name": "getProvider", "method_description": "Returns the provider of this SecureRandom object.\n", "method_declar": ""}, {"params": [{"param_name": ["numBytes"], "param_type": "int", "param_description": " the number of seed bytes to generate."}], "class_name": "SecureRandom", "is_static": true, "return_value": {"return_name": [], "return_description": ["the seed bytes."], "return_type": ["byte[]"]}, "method_name": "getSeed", "method_description": "Returns the given number of seed bytes, computed using the seed\n generation algorithm that this class uses to seed itself.  This\n call may be used to seed other random number generators.\n\n \nThis method is only included for backwards compatibility.\n The caller is encouraged to use one of the alternative\n getInstance methods to obtain a SecureRandom object, and\n then call the generateSeed method to obtain seed bytes\n from that object.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["bytes"], "param_type": "byte[]", "param_description": " the array to be filled in with random bytes."}], "class_name": "SecureRandom", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "nextBytes", "method_description": "Generates a user-specified number of random bytes.\n\n \n If a call to setSeed had not occurred previously,\n the first call to this method forces this SecureRandom object\n to seed itself.  This self-seeding will not occur if\n setSeed was previously called.\n", "method_declar": ""}, {"params": [{"param_name": ["seed"], "param_type": "long", "param_description": " the seed."}], "class_name": "SecureRandom", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSeed", "method_description": "Reseeds this random object, using the eight bytes contained\n in the given long seed. The given seed supplements,\n rather than replaces, the existing seed. Thus, repeated calls\n are guaranteed never to reduce randomness.\n\n \nThis method is defined for compatibility with\n java.util.Random.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["seed"], "param_type": "byte[]", "param_description": " the seed."}], "class_name": "SecureRandom", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSeed", "method_description": "Reseeds this random object. The given seed supplements, rather than\n replaces, the existing seed. Thus, repeated calls are guaranteed\n never to reduce randomness.\nSee also:\n", "method_declar": ""}], "class_name": "SecureRandom", "Vars": null}