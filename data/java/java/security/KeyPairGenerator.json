{"package_name": "java.security", "subclass_list": [], "class_description": "The KeyPairGenerator class is used to generate pairs of\n public and private keys. Key pair generators are constructed using the\n getInstance factory methods (static methods that\n return instances of a given class). A Key pair generator for a particular algorithm creates a public/private\n key pair that can be used with this algorithm. It also associates\n algorithm-specific parameters with each of the generated keys. There are two ways to generate a key pair: in an algorithm-independent\n manner, and in an algorithm-specific manner.\n The only difference between the two is the initialization of the object: In case the client does not explicitly initialize the KeyPairGenerator\n (via a call to an initialize method), each provider must\n supply (and document) a default initialization.\n For example, the Sun provider uses a default modulus size (keysize)\n of 1024 bits. Note that this class is abstract and extends from\n KeyPairGeneratorSpi for historical reasons.\n Application developers should only take notice of the methods defined in\n this KeyPairGenerator class; all the methods in\n the superclass are intended for cryptographic service providers who wish to\n supply their own implementations of key pair generators. Android provides the following KeyPairGenerator algorithms: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["KeyPairGeneratorSpi"], "Methods": [], "class_name": "KeyPairGenerator", "Vars": null}