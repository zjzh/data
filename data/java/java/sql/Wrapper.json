{"package_name": "java.sql", "subclass_list": ["CallableStatement", "Connection", "DataSource", "DatabaseMetaData", "ParameterMetaData", "PreparedStatement", "ResultSet", "ResultSetMetaData", "RowSet", "RowSetMetaData", "Statement", "CallableStatement", "Connection", "DataSource", "DatabaseMetaData", "ParameterMetaData", "PreparedStatement", "ResultSet", "ResultSetMetaData", "RowSet", "RowSetMetaData", "Statement"], "class_description": "Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance\n in question is in fact a proxy class. The wrapper pattern is employed by many JDBC driver implementations to provide extensions beyond\n the traditional JDBC API that are specific to a data source. Developers may wish to gain access to\n these resources that are wrapped (the delegates) as  proxy class instances representing the\n the actual resources. This interface describes a standard mechanism to access\n these wrapped resources\n represented by their proxy, to permit direct access to the resource delegates. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "Wrapper", "Vars": null}