{"package_name": "java.sql", "subclass_list": [], "class_description": " The basic service for managing a set of JDBC drivers.\nNOTE: The DataSource interface, new in the\n JDBC 2.0 API, provides another way to connect to a data source.\n The use of a DataSource object is the preferred means of\n connecting to a data source. As part of its initialization, the DriverManager class will\n attempt to load the driver classes referenced in the \"jdbc.drivers\"\n system property. This allows a user to customize the JDBC Drivers\n used by their applications. For example in your\n ~/.hotjava/properties file you might specify: The DriverManager methods getConnection and\n getDrivers have been enhanced to support the Java Standard Edition\n Service Provider mechanism. JDBC 4.0 Drivers must\n include the file META-INF/services/java.sql.Driver. This file contains the name of the JDBC drivers\n implementation of java.sql.Driver.  For example, to load the my.sql.Driver class,\n the META-INF/services/java.sql.Driver file would contain the entry: Applications no longer need to explictly load JDBC drivers using Class.forName(). Existing programs\n which currently load JDBC drivers using Class.forName() will continue to work without\n modification. When the method getConnection is called,\n the DriverManager will attempt to\n locate a suitable driver from amongst those loaded at\n initialization and those loaded explicitly using the same classloader\n as the current applet or application. Starting with the Java 2 SDK, Standard Edition, version 1.3, a\n logging stream can be set only if the proper\n permission has been granted.  Normally this will be done with\n the tool PolicyTool, which can be used to grant permission\n java.sql.SQLPermission \"setLog\". ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "DriverManager", "Vars": null}