{"package_name": "java.sql", "subclass_list": [], "class_description": " A connection (session) with a specific\n database. SQL statements are executed and results are returned\n within the context of a connection. A Connection object's database is able to provide information\n describing its tables, its supported SQL grammar, its stored\n procedures, the capabilities of this connection, and so on. This\n information is obtained with the getMetaData method. Note: When configuring a Connection, JDBC applications\n  should use the appropriate Connection method such as\n  setAutoCommit or setTransactionIsolation.\n  Applications should not invoke SQL commands directly to change the connection's\n   configuration when there is a JDBC method available.  By default a Connection object is in\n auto-commit mode, which means that it automatically commits changes\n after executing each statement. If auto-commit mode has been\n disabled, the method commit must be called explicitly in\n order to commit changes; otherwise, database changes will not be saved. A new Connection object created using the JDBC 2.1 core API\n has an initially empty type map associated with it. A user may enter a\n custom mapping for a UDT in this type map.\n When a UDT is retrieved from a data source with the\n method ResultSet.getObject, the getObject method\n will check the connection's type map to see if there is an entry for that\n UDT.  If so, the getObject method will map the UDT to the\n class indicated.  If there is no entry, the UDT will be mapped using the\n standard mapping. A user may create a new type map, which is a java.util.Map\n object, make an entry in it, and pass it to the java.sql\n methods that can perform custom mapping.  In this case, the method\n will use the given type map instead of the one associated with\n the connection. For example, the following code fragment specifies that the SQL\n type ATHLETES will be mapped to the class\n Athletes in the Java programming language.\n The code fragment retrieves the type map for the Connection\n  object con, inserts the entry into it, and then sets\n the type map with the new entry as the connection's type map. ", "class_type": "interface", "typealias": [], "interface_list": ["Wrapper", "AutoCloseable"], "class_inherit_list": [], "Methods": [], "class_name": "Connection", "Vars": null}