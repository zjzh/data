{"package_name": "java.sql", "subclass_list": [], "class_description": "The interface used for the custom mapping of an SQL user-defined type (UDT) to\n a class in the Java programming language. The class object for a class\n implementing the SQLData interface will be entered in the\n appropriate Connection object's type map along with the SQL\n name of the UDT for which it is a custom mapping. Typically, a SQLData implementation\n will define a field for each attribute of an SQL structured type or a\n single field for an SQL DISTINCT type. When the UDT is\n retrieved from a data source with the ResultSet.getObject\n method, it will be mapped as an instance of this class.  A programmer\n can operate on this class instance just as on any other object in the\n Java programming language and then store any changes made to it by\n calling the PreparedStatement.setObject method,\n which will map it back to the SQL type. It is expected that the implementation of the class for a custom\n mapping will be done by a tool.  In a typical implementation, the\n programmer would simply supply the name of the SQL UDT, the name of\n the class to which it is being mapped, and the names of the fields to\n which each of the attributes of the UDT is to be mapped.  The tool will use\n this information to implement the SQLData.readSQL and\n SQLData.writeSQL methods.  The readSQL method\n calls the appropriate SQLInput methods to read\n each attribute from an SQLInput object, and the\n writeSQL method calls SQLOutput methods\n to write each attribute back to the data source via an\n SQLOutput object. An application programmer will not normally call SQLData methods\n directly, and the SQLInput and SQLOutput methods\n are called internally by SQLData methods, not by application code. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "SQLData", "Vars": null}