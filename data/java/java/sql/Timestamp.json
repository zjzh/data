{"package_name": "java.sql", "subclass_list": [], "class_description": " A thin wrapper around java.util.Date that allows\n the JDBC API to identify this as an SQL TIMESTAMP value.\n It adds the ability\n to hold the SQL TIMESTAMP fractional seconds value, by allowing\n the specification of fractional seconds to a precision of nanoseconds.\n A Timestamp also provides formatting and\n parsing operations to support the JDBC escape syntax for timestamp values. The precision of a Timestamp object is calculated to be either: Note: This type is a composite of a java.util.Date and a\n separate nanoseconds value. Only integral seconds are stored in the\n java.util.Date component. The fractional seconds - the nanos - are\n separate.  The Timestamp.equals(Object) method never returns\n true when passed an object\n that isn't an instance of java.sql.Timestamp,\n because the nanos component of a date is unknown.\n As a result, the Timestamp.equals(Object)\n method is not symmetric with respect to the\n java.util.Date.equals(Object)\n method.  Also, the hashCode method uses the underlying\n java.util.Date\n implementation and therefore does not include nanos in its computation. Due to the differences between the Timestamp class\n and the java.util.Date\n class mentioned above, it is recommended that code not view\n Timestamp values generically as an instance of\n java.util.Date.  The\n inheritance relationship between Timestamp\n and java.util.Date really\n denotes implementation inheritance, and not type inheritance. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Date"], "Methods": [{"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the year minus 1900"}, {"param_name": ["month"], "param_type": "int", "param_description": " 0 to 11"}, {"param_name": ["date"], "param_type": "int", "param_description": " 1 to 31"}, {"param_name": ["hour"], "param_type": "int", "param_description": " 0 to 23"}, {"param_name": ["minute"], "param_type": "int", "param_description": " 0 to 59"}, {"param_name": ["second"], "param_type": "int", "param_description": " 0 to 59"}, {"param_name": ["nano"], "param_type": "int", "param_description": " 0 to 999,999,999"}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n\n\n      This constructor is deprecated.\n    instead use the constructor Timestamp(long millis)\n\nConstructs a Timestamp object initialized\n with the given values.\n", "method_declar": ""}, {"params": [{"param_name": ["time"], "param_type": "long", "param_description": " milliseconds since January 1, 1970, 00:00:00 GMT.\n        A negative number is the number of milliseconds before\n         January 1, 1970, 00:00:00 GMT."}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a Timestamp object\n using a milliseconds time value. The\n integral seconds are stored in the underlying date value; the\n fractional seconds are stored in the nanos field of\n the Timestamp object.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["ts"], "param_type": "Timestamp", "param_description": " the Timestamp value to compare with"}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this Timestamp object is later;\n        false otherwise"], "return_type": ["boolean"]}, "method_name": "after", "method_description": "Indicates whether this Timestamp object is\n later than the given Timestamp object.\n", "method_declar": ""}, {"params": [{"param_name": ["ts"], "param_type": "Timestamp", "param_description": " the Timestamp value to compare with"}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this Timestamp object is earlier;\n        false otherwise"], "return_type": ["boolean"]}, "method_name": "before", "method_description": "Indicates whether this Timestamp object is\n earlier than the given Timestamp object.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Date", "param_description": " the Date to be compared to\n          this Timestamp object"}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value 0 if this Timestamp object\n          and the given object are equal; a value less than 0\n          if this  Timestamp object is before the given argument;\n          and a value greater than 0 if this\n          Timestamp object is after the given argument."], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares this Timestamp object to the given\n Date object.\n", "method_declar": ""}, {"params": [{"param_name": ["ts"], "param_type": "Timestamp", "param_description": " the Timestamp object to be compared to\n                this Timestamp object"}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value 0 if the two Timestamp\n          objects are equal; a value less than 0 if this\n          Timestamp object is before the given argument;\n          and a value greater than 0 if this\n          Timestamp object is after the given argument."], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares this Timestamp object to the given\n Timestamp object.\n", "method_declar": ""}, {"params": [{"param_name": ["ts"], "param_type": "Timestamp", "param_description": " the Timestamp value to compare with"}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the given Timestamp\n         object is equal to this Timestamp object;\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Tests to see if this Timestamp object is\n equal to the given Timestamp object.\n", "method_declar": ""}, {"params": [{"param_name": ["ts"], "param_type": "Object", "param_description": " the Object value to compare with"}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the given Object is an instance\n         of a Timestamp that\n         is equal to this Timestamp object;\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Tests to see if this Timestamp object is\n equal to the given object.\n\n This version of the method equals has been added\n to fix the incorrect\n signature of Timestamp.equals(Timestamp) and to preserve backward\n compatibility with existing class files.\n\n Note: This method is not symmetric with respect to the\n equals(Object) method in the base class.\n", "method_declar": ""}, {"params": [], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["this Timestamp object's fractional seconds component"], "return_type": ["int"]}, "method_name": "getNanos", "method_description": "Gets this Timestamp object's nanos value.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of milliseconds since January 1, 1970, 00:00:00 GMT\n          represented by this date."], "return_type": ["long"]}, "method_name": "getTime", "method_description": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT\n represented by this Timestamp object.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code value for this object. The result is the\n exclusive OR of the two halves of the primitive long\n value returned by the Date#getTime\n method. That is, the hash code is the value of the expression:\n \n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": " the new fractional seconds component"}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setNanos", "method_description": "Sets this Timestamp object's nanos field\n to the given value.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["time"], "param_type": "long", "param_description": " the number of milliseconds."}], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTime", "method_description": "Sets this Timestamp object to represent a point in time that is\n time milliseconds after January 1, 1970 00:00:00 GMT.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Timestamp", "is_static": false, "return_value": {"return_name": [], "return_description": ["a String object in\n           yyyy-mm-dd hh:mm:ss.fffffffff format"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Formats a timestamp in JDBC timestamp escape format.\n         yyyy-mm-dd hh:mm:ss.fffffffff,\n where ffffffffff indicates nanoseconds.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " timestamp in format yyyy-[m]m-[d]d hh:mm:ss[.f...].  The\n fractional seconds may be omitted. The leading zero for mm\n and dd may also be omitted."}], "class_name": "Timestamp", "is_static": true, "return_value": {"return_name": [], "return_description": ["corresponding Timestamp value"], "return_type": ["Timestamp"]}, "method_name": "valueOf", "method_description": "Converts a String object in JDBC timestamp escape format to a\n Timestamp value.\n", "method_declar": ""}], "class_name": "Timestamp", "Vars": null}