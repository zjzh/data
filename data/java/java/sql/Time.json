{"package_name": "java.sql", "subclass_list": [], "class_description": " A thin wrapper around the java.util.Date class that allows the JDBC\n API to identify this as an SQL TIME value. The Time\n class adds formatting and\n parsing operations to support the JDBC escape syntax for time\n values. The date components should be set to the \"zero epoch\"\n value of January 1, 1970 and should not be accessed. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Date"], "Methods": [{"params": [{"param_name": ["hour"], "param_type": "int", "param_description": " 0 to 23"}, {"param_name": ["minute"], "param_type": "int", "param_description": " 0 to 59"}, {"param_name": ["second"], "param_type": "int", "param_description": " 0 to 59"}], "class_name": "Time", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n\n\n      This constructor is deprecated.\n    Use the constructor that takes a milliseconds value\n             in place of this constructor\n  \nConstructs a Time object initialized with the\n given values for the hour, minute, and second.\n The driver sets the date components to January 1, 1970.\n Any method that attempts to access the date components of a\n Time object will throw a\n java.lang.IllegalArgumentException.\n \n\n The result is undefined if a given argument is out of bounds.\n", "method_declar": ""}, {"params": [{"param_name": ["time"], "param_type": "long", "param_description": " milliseconds since January 1, 1970, 00:00:00 GMT;\n             a negative number is milliseconds before\n               January 1, 1970, 00:00:00 GMT"}], "class_name": "Time", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a Time object using a milliseconds time value.\n", "method_declar": ""}, {"params": [], "class_name": "Time", "is_static": false, "return_value": {"return_name": [], "return_description": ["the day of the month represented by this date."], "return_type": ["int"]}, "method_name": "getDate", "method_description": "\n\n\n      This method is deprecated.\n    This method is deprecated and should not be used because SQL TIME\n values do not have a date component.\n  \nReturns the day of the month represented by this Date object.\n The value returned is between 1 and 31\n representing the day of the month that contains or begins with the\n instant in time represented by this Date object, as\n interpreted in the local time zone.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Time", "is_static": false, "return_value": {"return_name": [], "return_description": ["the day of the week represented by this date."], "return_type": ["int"]}, "method_name": "getDay", "method_description": "\n\n\n      This method is deprecated.\n    This method is deprecated and should not be used because SQL TIME\n values do not have a day component.\n  \nReturns the day of the week represented by this date. The\n returned value (0 = Sunday, 1 = Monday,\n 2 = Tuesday, 3 = Wednesday, 4 =\n Thursday, 5 = Friday, 6 = Saturday)\n represents the day of the week that contains or begins with\n the instant in time represented by this Date object,\n as interpreted in the local time zone.\n", "method_declar": ""}, {"params": [], "class_name": "Time", "is_static": false, "return_value": {"return_name": [], "return_description": ["the month represented by this date."], "return_type": ["int"]}, "method_name": "getMonth", "method_description": "\n\n\n      This method is deprecated.\n    This method is deprecated and should not be used because SQL TIME\n values do not have a month component.\n  \nReturns a number representing the month that contains or begins\n with the instant in time represented by this Date object.\n The value returned is between 0 and 11,\n with the value 0 representing January.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Time", "is_static": false, "return_value": {"return_name": [], "return_description": ["the year represented by this date, minus 1900."], "return_type": ["int"]}, "method_name": "getYear", "method_description": "\n\n\n      This method is deprecated.\n    This method is deprecated and should not be used because SQL TIME\n values do not have a year component.\n  \nReturns a value that is the result of subtracting 1900 from the\n year that contains or begins with the instant in time represented\n by this Date object, as interpreted in the local\n time zone.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the day of the month value between 1-31."}], "class_name": "Time", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDate", "method_description": "\n\n\n      This method is deprecated.\n    This method is deprecated and should not be used because SQL TIME\n values do not have a date component.\n  \nSets the day of the month of this Date object to the\n specified value. This Date object is modified so that\n it represents a point in time within the specified day of the\n month, with the year, month, hour, minute, and second the same\n as before, as interpreted in the local time zone. If the date\n was April 30, for example, and the date is set to 31, then it\n will be treated as if it were on May 1, because April has only\n 30 days.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the month value between 0-11."}], "class_name": "Time", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMonth", "method_description": "\n\n\n      This method is deprecated.\n    This method is deprecated and should not be used because SQL TIME\n values do not have a month component.\n  \nSets the month of this date to the specified value. This\n Date object is modified so that it represents a point\n in time within the specified month, with the year, date, hour,\n minute, and second the same as before, as interpreted in the\n local time zone. If the date was October 31, for example, and\n the month is set to June, then the new date will be treated as\n if it were on July 1, because June has only 30 days.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["time"], "param_type": "long", "param_description": " milliseconds since January 1, 1970, 00:00:00 GMT;\n             a negative number is milliseconds before\n               January 1, 1970, 00:00:00 GMT"}], "class_name": "Time", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTime", "method_description": "Sets a Time object using a milliseconds time value.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the year value."}], "class_name": "Time", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setYear", "method_description": "\n\n\n      This method is deprecated.\n    This method is deprecated and should not be used because SQL TIME\n values do not have a year component.\n  \nSets the year of this Date object to be the specified\n value plus 1900. This Date object is modified so\n that it represents a point in time within the specified year,\n with the month, date, hour, minute, and second the same as\n before, as interpreted in the local time zone. (Of course, if\n the date was February 29, for example, and the year is set to a\n non-leap year, then the new date will be treated as if it were\n on March 1.)\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Time", "is_static": false, "return_value": {"return_name": [], "return_description": ["a String in hh:mm:ss format"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Formats a time in JDBC time escape format.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " time in format \"hh:mm:ss\""}], "class_name": "Time", "is_static": true, "return_value": {"return_name": [], "return_description": ["a corresponding Time object"], "return_type": ["Time"]}, "method_name": "valueOf", "method_description": "Converts a string in JDBC time escape format to a Time value.\n", "method_declar": ""}], "class_name": "Time", "Vars": null}