{"package_name": "java.sql", "subclass_list": [], "class_description": "The subclass of SQLException thrown when an error\n occurs during a batch update operation.  In addition to the\n information provided by SQLException, a\n BatchUpdateException provides the update\n counts for all commands that were executed successfully during the\n batch update, that is, all commands that were executed before the error\n occurred.  The order of elements in an array of update counts\n corresponds to the order in which commands were added to the batch. After a command in a batch update fails to execute properly\n and a BatchUpdateException is thrown, the driver\n may or may not continue to process the remaining commands in\n the batch.  If the driver continues processing after a failure,\n the array returned by the method\n BatchUpdateException.getUpdateCounts will have\n an element for every command in the batch rather than only\n elements for the commands that executed successfully before\n the error.  In the case where the driver continues processing\n commands, the array element for any command\n that failed is Statement.EXECUTE_FAILED.  ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["SQLException"], "Methods": [{"params": [{"param_name": ["reason"], "param_type": "String", "param_description": " a description of the error"}, {"param_name": ["SQLState"], "param_type": "String", "param_description": " an XOPEN or SQL:2003 code identifying the exception"}, {"param_name": ["vendorCode"], "param_type": "int", "param_description": " an exception code used by a particular\n database vendor"}, {"param_name": ["updateCounts"], "param_type": "int[]", "param_description": " an array of int, with each element\n indicating the update count, Statement.SUCCESS_NO_INFO or\n Statement.EXECUTE_FAILED for each SQL command in\n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n Statement.SUCCESS_NO_INFO for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure"}], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object initialized with a given\n reason, SQLState, vendorCode and\n updateCounts.\n The cause is not initialized, and may subsequently be\n initialized by a call to the\n Throwable#initCause(java.lang.Throwable) method.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["reason"], "param_type": "String", "param_description": " a description of the exception"}, {"param_name": ["SQLState"], "param_type": "String", "param_description": " an XOPEN or SQL:2003 code identifying the exception"}, {"param_name": ["updateCounts"], "param_type": "int[]", "param_description": " an array of int, with each element\n indicating the update count, Statement.SUCCESS_NO_INFO or\n Statement.EXECUTE_FAILED for each SQL command in\n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n Statement.SUCCESS_NO_INFO for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure"}], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object initialized with a given\n reason, SQLState and\n updateCounts.\n The cause is not initialized, and may subsequently be\n initialized by a call to the\n Throwable#initCause(java.lang.Throwable) method. The vendor code\n is initialized to 0.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["reason"], "param_type": "String", "param_description": " a description of the exception"}, {"param_name": ["updateCounts"], "param_type": "int[]", "param_description": " an array of int, with each element\n indicating the update count, Statement.SUCCESS_NO_INFO or\n Statement.EXECUTE_FAILED for each SQL command in\n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n Statement.SUCCESS_NO_INFO for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure"}], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object initialized with a given\n reason and updateCounts.\n The cause is not initialized, and may subsequently be\n initialized by a call to the\n Throwable#initCause(java.lang.Throwable) method.  The\n SQLState is initialized to null\n and the vender code is initialized to 0.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["updateCounts"], "param_type": "int[]", "param_description": " an array of int, with each element\n indicating the update count, Statement.SUCCESS_NO_INFO or\n Statement.EXECUTE_FAILED for each SQL command in\n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n Statement.SUCCESS_NO_INFO for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure"}], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object initialized with a given\n updateCounts.\n initialized by a call to the\n Throwable#initCause(java.lang.Throwable) method. The  reason\n and SQLState are initialized to null and the vendor code\n is initialized to 0.\n \n\n", "method_declar": ""}, {"params": [], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object.\n The reason, SQLState and updateCounts\n  are initialized to null and the vendor code is initialized to 0.\n The cause is not initialized, and may subsequently be\n initialized by a call to the\n Throwable#initCause(java.lang.Throwable) method.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["cause"], "param_type": "Throwable", "param_description": " the underlying reason for this SQLException\n (which is saved for later retrieval by the getCause() method);\n may be null indicating the cause is non-existent or unknown."}], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object initialized with\n  a given cause.\n The SQLState and updateCounts\n are initialized\n to null and the vendor code is initialized to 0.\n The reason  is initialized to null if\n cause==null or to cause.toString() if\n  cause!=null.\n", "method_declar": ""}, {"params": [{"param_name": ["updateCounts"], "param_type": "int[]", "param_description": " an array of int, with each element\n indicating the update count, Statement.SUCCESS_NO_INFO or\n Statement.EXECUTE_FAILED for each SQL command in\n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n Statement.SUCCESS_NO_INFO for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure"}, {"param_name": ["cause"], "param_type": "Throwable", "param_description": " the underlying reason for this SQLException\n (which is saved for later retrieval by the getCause() method); may be null indicating\n the cause is non-existent or unknown."}], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object initialized with a\n given cause and updateCounts.\n The SQLState is initialized\n to null and the vendor code is initialized to 0.\n The reason  is initialized to null if\n cause==null or to cause.toString() if\n cause!=null.\n", "method_declar": ""}, {"params": [{"param_name": ["reason"], "param_type": "String", "param_description": " a description of the exception"}, {"param_name": ["updateCounts"], "param_type": "int[]", "param_description": " an array of int, with each element\nindicating the update count, Statement.SUCCESS_NO_INFO or\n Statement.EXECUTE_FAILED for each SQL command in\n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n Statement.SUCCESS_NO_INFO for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure"}, {"param_name": ["cause"], "param_type": "Throwable", "param_description": " the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method);\n may be null indicating\n the cause is non-existent or unknown."}], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object initialized with\n a given reason, cause\n and updateCounts. The SQLState is initialized\n to null and the vendor code is initialized to 0.\n", "method_declar": ""}, {"params": [{"param_name": ["reason"], "param_type": "String", "param_description": " a description of the exception"}, {"param_name": ["SQLState"], "param_type": "String", "param_description": " an XOPEN or SQL:2003 code identifying the exception"}, {"param_name": ["updateCounts"], "param_type": "int[]", "param_description": " an array of int, with each element\n indicating the update count, Statement.SUCCESS_NO_INFO or\n Statement.EXECUTE_FAILED for each SQL command in\n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n Statement.SUCCESS_NO_INFO for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure"}, {"param_name": ["cause"], "param_type": "Throwable", "param_description": " the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method);\n may be null indicating\n the cause is non-existent or unknown."}], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object initialized with\n a given reason, SQLState,cause, and\n updateCounts. The vendor code is initialized to 0.\n", "method_declar": ""}, {"params": [{"param_name": ["reason"], "param_type": "String", "param_description": " a description of the error"}, {"param_name": ["SQLState"], "param_type": "String", "param_description": " an XOPEN or SQL:2003 code identifying the exception"}, {"param_name": ["vendorCode"], "param_type": "int", "param_description": " an exception code used by a particular\n database vendor"}, {"param_name": ["updateCounts"], "param_type": "int[]", "param_description": " an array of int, with each element\nindicating the update count, Statement.SUCCESS_NO_INFO or\n Statement.EXECUTE_FAILED for each SQL command in\n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n Statement.SUCCESS_NO_INFO for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure"}, {"param_name": ["cause"], "param_type": "Throwable", "param_description": " the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method);\n may be null indicating\n the cause is non-existent or unknown."}], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a BatchUpdateException object initialized with\n a given reason, SQLState, vendorCode\ncause and updateCounts.\n", "method_declar": ""}, {"params": [], "class_name": "BatchUpdateException", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array of int containing the update counts\n for the updates that were executed successfully before this error\n occurred.  Or, if the driver continues to process commands after an\n error, one of the following for every command in the batch:\n \nan update count\n  Statement.SUCCESS_NO_INFO to indicate that the command\n     executed successfully but the number of rows affected is unknown\n  Statement.EXECUTE_FAILED to indicate that the command\n     failed to execute successfully"], "return_type": ["int[]"]}, "method_name": "getUpdateCounts", "method_description": "Retrieves the update count for each update statement in the batch\n update that executed successfully before this exception occurred.\n A driver that implements batch updates may or may not continue to\n process the remaining commands in a batch when one of the commands\n fails to execute properly. If the driver continues processing commands,\n the array returned by this method will have as many elements as\n there are commands in the batch; otherwise, it will contain an\n update count for each command that executed successfully before\n the BatchUpdateException was thrown.\n\n\n The possible return values for this method were modified for\n the Java 2 SDK, Standard Edition, version 1.3.  This was done to\n accommodate the new option of continuing to process commands\n in a batch update after a BatchUpdateException object\n has been thrown.\n", "method_declar": ""}], "class_name": "BatchUpdateException", "Vars": null}