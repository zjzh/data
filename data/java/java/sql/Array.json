{"package_name": "java.sql", "subclass_list": [], "class_description": "The mapping in the Java programming language for the SQL type\n ARRAY.\n By default, an Array value is a transaction-duration\n reference to an SQL ARRAY value.  By default, an Array\n object is implemented using an SQL LOCATOR(array) internally, which\n means that an Array object contains a logical pointer\n to the data in the SQL ARRAY value rather\n than containing the ARRAY value's data. The Array interface provides methods for bringing an SQL\n ARRAY value's data to the client as either an array or a\n ResultSet object.\n If the elements of the SQL ARRAY\n are a UDT, they may be custom mapped.  To create a custom mapping,\n a programmer must do two things: When a type map with an entry for\n the base type is supplied to the methods getArray\n and getResultSet, the mapping\n it contains will be used to map the elements of the ARRAY value.\n If no type map is supplied, which would typically be the case,\n the connection's type map is used by default.\n If the connection's type map or a type map supplied to a method has no entry\n for the base type, the elements are mapped according to the standard mapping. All methods on the Array interface must be fully implemented if the\n JDBC driver supports the data type. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "Array", "Vars": null}