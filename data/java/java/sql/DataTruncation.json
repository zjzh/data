{"package_name": "java.sql", "subclass_list": [], "class_description": "An exception  thrown as a DataTruncation exception\n (on writes) or reported as a\n DataTruncation warning (on reads)\n  when a data values is unexpectedly truncated for reasons other than its having\n  execeeded MaxFieldSize. The SQLstate for a DataTruncation during read is 01004. The SQLstate for a DataTruncation during write is 22001. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["SQLWarning"], "Methods": [{"params": [{"param_name": ["index"], "param_type": "int", "param_description": " The index of the parameter or column value"}, {"param_name": ["parameter"], "param_type": "boolean", "param_description": " true if a parameter value was truncated"}, {"param_name": ["read"], "param_type": "boolean", "param_description": " true if a read was truncated"}, {"param_name": ["dataSize"], "param_type": "int", "param_description": " the original size of the data"}, {"param_name": ["transferSize"], "param_type": "int", "param_description": " the size after truncation"}], "class_name": "DataTruncation", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a DataTruncation object\n with the SQLState initialized\n to 01004 when read is set to true and 22001\n when read is set to false,\n the reason set to \"Data truncation\", the\n vendor code set to 0, and\n the other fields set to the given values.\n The cause is not initialized, and may subsequently be\n initialized by a call to the\n Throwable#initCause(java.lang.Throwable) method.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " The index of the parameter or column value"}, {"param_name": ["parameter"], "param_type": "boolean", "param_description": " true if a parameter value was truncated"}, {"param_name": ["read"], "param_type": "boolean", "param_description": " true if a read was truncated"}, {"param_name": ["dataSize"], "param_type": "int", "param_description": " the original size of the data"}, {"param_name": ["transferSize"], "param_type": "int", "param_description": " the size after truncation"}, {"param_name": ["cause"], "param_type": "Throwable", "param_description": " the underlying reason for this DataTruncation\n (which is saved for later retrieval by the getCause() method);\n may be null indicating the cause is non-existent or unknown."}], "class_name": "DataTruncation", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a DataTruncation object\n with the SQLState initialized\n to 01004 when read is set to true and 22001\n when read is set to false,\n the reason set to \"Data truncation\", the\n vendor code set to 0, and\n the other fields set to the given values.\n \n\n", "method_declar": ""}, {"params": [], "class_name": "DataTruncation", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of bytes of data that should have been transferred"], "return_type": ["int"]}, "method_name": "getDataSize", "method_description": "Gets the number of bytes of data that should have been transferred.\n This number may be approximate if data conversions were being\n performed.  The value may be -1 if the size is unknown.\n", "method_declar": ""}, {"params": [], "class_name": "DataTruncation", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the truncated paramter or column value"], "return_type": ["int"]}, "method_name": "getIndex", "method_description": "Retrieves the index of the column or parameter that was truncated.\n\n \nThis may be -1 if the column or parameter index is unknown, in\n which case the parameter and read fields should be ignored.\n", "method_declar": ""}, {"params": [], "class_name": "DataTruncation", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value truncated was a parameter;\n         false if it was a column value"], "return_type": ["boolean"]}, "method_name": "getParameter", "method_description": "Indicates whether the value truncated was a parameter value or\n a column value.\n", "method_declar": ""}, {"params": [], "class_name": "DataTruncation", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value was truncated when read from\n         the database; false if the data was truncated on a write"], "return_type": ["boolean"]}, "method_name": "getRead", "method_description": "Indicates whether or not the value was truncated on a read.\n", "method_declar": ""}, {"params": [], "class_name": "DataTruncation", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of bytes of data actually transferred"], "return_type": ["int"]}, "method_name": "getTransferSize", "method_description": "Gets the number of bytes of data actually transferred.\n The value may be -1 if the size is unknown.\n", "method_declar": ""}], "class_name": "DataTruncation", "Vars": null}