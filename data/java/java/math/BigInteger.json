{"package_name": "java.math", "subclass_list": [], "class_description": "An immutable arbitrary-precision signed integer. ", "class_type": "class", "typealias": [], "interface_list": ["Comparable<BigInteger>", "Serializable"], "class_inherit_list": ["Number"], "Methods": [{"params": [{"param_name": ["numBits"], "param_type": "int", "param_description": " maximum length of the new BigInteger in bits."}, {"param_name": ["random"], "param_type": "Random", "param_description": " is the random number generator to be used."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a random non-negative BigInteger instance in the range\n [0, pow(2, numBits)-1].\n", "method_declar": ""}, {"params": [{"param_name": ["bitLength"], "param_type": "int", "param_description": " length of the new BigInteger in bits."}, {"param_name": ["certainty"], "param_type": "int", "param_description": " tolerated primality uncertainty."}, {"param_name": ["random"], "param_type": "Random", "param_description": "\nRandom "}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a random BigInteger instance in the range [0,\n pow(2, bitLength)-1] which is probably prime. The probability that the\n returned BigInteger is prime is greater than\n 1 - 1/2<sup>certainty</sup>).\n\n \nNote: the Random argument is ignored if\n bitLength >= 16, where this implementation will use OpenSSL's\n BN_generate_prime_ex as a source of cryptographically strong pseudo-random numbers.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "String", "param_description": " string representation of the new BigInteger."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigInteger by parsing value. The string\n representation consists of an optional plus or minus sign followed by a\n non-empty sequence of decimal digits. Digits are interpreted as if by\n Character.digit(char,10).\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "String", "param_description": " string representation of the new BigInteger."}, {"param_name": ["radix"], "param_type": "int", "param_description": " the base to be used for the conversion."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigInteger instance by parsing value.\n The string representation consists of an optional plus or minus sign\n followed by a non-empty sequence of digits in the specified radix. Digits\n are interpreted as if by Character.digit(char, radix).\n", "method_declar": ""}, {"params": [{"param_name": ["signum"], "param_type": "int", "param_description": " sign of the new BigInteger (-1 for negative, 0 for\n     zero, 1 for positive)."}, {"param_name": ["magnitude"], "param_type": "byte[]", "param_description": " magnitude of the new BigInteger with the most\n     significant byte first."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigInteger instance with the given sign and\n magnitude.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "byte[]", "param_description": " two's complement representation of the new BigInteger."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigInteger from the given two's complement\n representation. The most significant byte is the entry at index 0. The\n most significant bit of this entry determines the sign of the new BigInteger instance. The array must be nonempty.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "abs", "method_description": "Returns a BigInteger whose value is the absolute value of this.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": "\nBigInteger "}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "add", "method_description": "Returns a BigInteger whose value is this + value.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": " value to be and'ed with this."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "and", "method_description": "Returns a BigInteger whose value is this & value.\n\n \nImplementation Note: Usage of this method is not recommended\n as the current implementation is not efficient.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": " value to be not'ed and then and'ed with this."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "andNot", "method_description": "Returns a BigInteger whose value is this & ~value.\n Evaluating x.andNot(value) returns the same result as x.and(value.not()).\n\n \nImplementation Note: Usage of this method is not recommended\n as the current implementation is not efficient.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "bitCount", "method_description": "Returns the number of bits in the two's complement representation of\n this which differ from the sign bit. If this is negative,\n the result is equivalent to the number of bits set in the two's\n complement representation of -this - 1.\n\n \nUse bitLength(0) to find the length of the binary value in\n bits.\n\n \nImplementation Note: Usage of this method is not recommended as\n the current implementation is not efficient.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["the length of the minimal two's complement representation for\n     this without the sign bit."], "return_type": ["int"]}, "method_name": "bitLength", "method_description": "Returns the length of the value's two's complement representation without\n leading zeros for positive numbers / without leading ones for negative\n values.\n\n \nThe two's complement representation of this will be at least\n bitLength() + 1 bits long.\n\n \nThe value will fit into an int if bitLength() < 32 or\n into a long if bitLength() < 64.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": " position where the bit in this has to be cleared."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "clearBit", "method_description": "Returns a BigInteger which has the same binary representation\n as this but with the bit at position n cleared. The result is\n equivalent to this & ~pow(2, n).\n\n \nImplementation Note: Usage of this method is not recommended as\n the current implementation is not efficient.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": " value to be compared with this."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares this BigInteger with value. Returns -1\n if this < value, 0 if this == value and 1\n if this > value, .\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigInteger", "param_description": " value by which this is divided."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["this / divisor."], "return_type": ["BigInteger"]}, "method_name": "divide", "method_description": "Returns a BigInteger whose value is this / divisor.\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigInteger", "param_description": " value by which this is divided."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger[]"]}, "method_name": "divideAndRemainder", "method_description": "Returns a two element BigInteger array containing\n this / divisor at index 0 and this % divisor at index 1.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type double."], "return_type": ["double"]}, "method_name": "doubleValue", "method_description": "Returns this BigInteger as a double. If this is too big\n to be represented as a double, then Double.POSITIVE_INFINITY or\n Double.NEGATIVE_INFINITY is returned. Note that not all integers\n in the range [-Double.MAX_VALUE, Double.MAX_VALUE] can be exactly\n represented as a double.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "Object", "param_description": " the reference object with which to compare."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this object is the same as the obj\n          argument; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Indicates whether some other object is \"equal to\" this one.\n \n\n The equals method implements an equivalence relation\n on non-null object references:\n \n\n The equals method for class Object implements\n the most discriminating possible equivalence relation on objects;\n that is, for any non-null reference values x and\n y, this method returns true if and only\n if x and y refer to the same object\n (x == y has the value true).\n \n\n Note that it is generally necessary to override the hashCode\n method whenever this method is overridden, so as to maintain the\n general contract for the hashCode method, which states\n that equal objects must have equal hash codes.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": " position where the bit in this has to be flipped."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "flipBit", "method_description": "Returns a BigInteger which has the same binary representation\n as this but with the bit at position n flipped. The result is\n equivalent to this ^ pow(2, n).\n\n \nImplementation Note: Usage of this method is not recommended as\n the current implementation is not efficient.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type float."], "return_type": ["float"]}, "method_name": "floatValue", "method_description": "Returns this BigInteger as a float. If this is too big to\n be represented as a float, then Float.POSITIVE_INFINITY or\n Float.NEGATIVE_INFINITY is returned. Note that not all integers\n in the range [-Float.MAX_VALUE, Float.MAX_VALUE] can be exactly\n represented as a float.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": " value with which the greatest common divisor is computed."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "gcd", "method_description": "Returns a BigInteger whose value is greatest common divisor\n of this and value. If this == 0 and value == 0 then zero is returned, otherwise the result is positive.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "getLowestSetBit", "method_description": "Returns the position of the lowest set bit in the two's complement\n representation of this BigInteger. If all bits are zero (this==0)\n then -1 is returned as result.\n\n \nImplementation Note: Usage of this method is not recommended as\n the current implementation is not efficient.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code value for the object. This method is\n supported for the benefit of hash tables such as those provided by\n HashMap.\n \n\n The general contract of hashCode is:\n \n\n As much as is reasonably practical, the hashCode method defined by\n class Object does return distinct integers for distinct\n objects. (This is typically implemented by converting the internal\n address of the object into an integer, but this implementation\n technique is not required by the\n Java\u2122 programming language.)\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type int."], "return_type": ["int"]}, "method_name": "intValue", "method_description": "Returns this BigInteger as an int value. If this is too\n big to be represented as an int, then this % (1 << 32) is\n returned.\n", "method_declar": ""}, {"params": [{"param_name": ["certainty"], "param_type": "int", "param_description": " tolerated primality uncertainty."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["true, if this is probably prime, false\n     otherwise."], "return_type": ["boolean"]}, "method_name": "isProbablePrime", "method_description": "Tests whether this BigInteger is probably prime. If true\n is returned, then this is prime with a probability greater than\n 1 - 1/2<sup>certainty</sup>). If false is returned, then this\n is definitely composite. If the argument certainty <= 0, then\n this method returns true.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type long."], "return_type": ["long"]}, "method_name": "longValue", "method_description": "Returns this BigInteger as a long value. If this is too\n big to be represented as a long, then this % pow(2, 64) is\n returned.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": " value to be used to compute the maximum with this"}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "max", "method_description": "Returns the maximum of this BigInteger and value.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": " value to be used to compute the minimum with this."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "min", "method_description": "Returns the minimum of this BigInteger and value.\n", "method_declar": ""}, {"params": [{"param_name": ["m"], "param_type": "BigInteger", "param_description": " the modulus."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["this mod m."], "return_type": ["BigInteger"]}, "method_name": "mod", "method_description": "Returns a BigInteger whose value is this mod m. The\n modulus m must be positive. The result is guaranteed to be in the\n interval [0, m) (0 inclusive, m exclusive). The behavior of this\n function is not equivalent to the behavior of the % operator defined for\n the built-in int's.\n", "method_declar": ""}, {"params": [{"param_name": ["m"], "param_type": "BigInteger", "param_description": " the modulus."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "modInverse", "method_description": "Returns a BigInteger whose value is 1/this mod m. The\n modulus m must be positive. The result is guaranteed to be in the\n interval [0, m) (0 inclusive, m exclusive). If this is\n not relatively prime to m, then an exception is thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["exponent"], "param_type": "BigInteger", "param_description": "\nBigInteger "}, {"param_name": ["modulus"], "param_type": "BigInteger", "param_description": "\nBigInteger "}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "modPow", "method_description": "Returns a BigInteger whose value is pow(this, exponent) mod modulus. The modulus must be positive. The\n result is guaranteed to be in the interval [0, modulus).\n If the exponent is negative, then\n pow(this.modInverse(modulus), -exponent) mod modulus is computed.\n The inverse of this only exists if this is relatively prime to the modulus,\n otherwise an exception is thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": "\nBigInteger "}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "multiply", "method_description": "Returns a BigInteger whose value is this * value.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "negate", "method_description": "Returns a BigInteger whose value is the -this.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["smallest integer > this which is probably prime."], "return_type": ["BigInteger"]}, "method_name": "nextProbablePrime", "method_description": "Returns the smallest integer x > this which is probably prime as\n a BigInteger instance. The probability that the returned BigInteger is prime is greater than 1 - 1/2<sup>100</sup>.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "not", "method_description": "Returns a BigInteger whose value is ~this. The result\n of this operation is -this-1.\n\n \nImplementation Note: Usage of this method is not recommended as\n the current implementation is not efficient.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": " value to be or'ed with this."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "or", "method_description": "Returns a BigInteger whose value is this | value.\n\n \nImplementation Note: Usage of this method is not recommended as\n the current implementation is not efficient.\n", "method_declar": ""}, {"params": [{"param_name": ["exp"], "param_type": "int", "param_description": "\nint "}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "pow", "method_description": "Returns a BigInteger whose value is pow(this, exp).\n", "method_declar": ""}, {"params": [{"param_name": ["bitLength"], "param_type": "int", "param_description": " length of the new BigInteger in bits."}, {"param_name": ["random"], "param_type": "Random", "param_description": "\nRandom "}], "class_name": "BigInteger", "is_static": true, "return_value": {"return_name": [], "return_description": ["probably prime random BigInteger instance."], "return_type": ["BigInteger"]}, "method_name": "probablePrime", "method_description": "Returns a random positive BigInteger instance in the range [0, pow(2, bitLength)-1] which is probably prime. The probability that\n the returned BigInteger is prime is greater than 1 - 1/2<sup>100</sup>).\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigInteger", "param_description": " value by which this is divided."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "remainder", "method_description": "Returns a BigInteger whose value is this % divisor.\n Regarding signs this methods has the same behavior as the % operator on\n ints: the sign of the remainder is the same as the sign of this.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": " position where the bit in this has to be set."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "setBit", "method_description": "Returns a BigInteger which has the same binary representation\n as this but with the bit at position n set. The result is\n equivalent to this | pow(2, n).\n\n \nImplementation Note: Usage of this method is not recommended as\n the current implementation is not efficient.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": " shift distance."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["this << n if n >= 0; this >> (-n).\n     otherwise"], "return_type": ["BigInteger"]}, "method_name": "shiftLeft", "method_description": "Returns a BigInteger whose value is this << n. The\n result is equivalent to this * pow(2, n) if n >= 0. The shift\n distance may be negative which means that this is shifted right.\n The result then corresponds to floor(this / pow(2, -n)).\n\n \nImplementation Note: Usage of this method on negative values is\n not recommended as the current implementation is not efficient.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": " shift distance"}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["this >> n if n >= 0; this << (-n)\n     otherwise"], "return_type": ["BigInteger"]}, "method_name": "shiftRight", "method_description": "Returns a BigInteger whose value is this >> n. For\n negative arguments, the result is also negative. The shift distance may\n be negative which means that this is shifted left.\n\n \nImplementation Note: Usage of this method on negative values is\n not recommended as the current implementation is not efficient.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["-1 if this < 0, 0 if this == 0,\n     1 if this > 0."], "return_type": ["int"]}, "method_name": "signum", "method_description": "Returns the sign of this BigInteger.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": "\nBigInteger "}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "subtract", "method_description": "Returns a BigInteger whose value is this - value.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": " position where the bit in this has to be inspected."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["boolean"]}, "method_name": "testBit", "method_description": "Tests whether the bit at position n in this is set. The result is\n equivalent to this & pow(2, n) != 0.\n\n \nImplementation Note: Usage of this method is not recommended as\n the current implementation is not efficient.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["byte[]"]}, "method_name": "toByteArray", "method_description": "Returns the two's complement representation of this BigInteger in\n a byte array.\n", "method_declar": ""}, {"params": [], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this BigInteger in decimal\n form.\n", "method_declar": ""}, {"params": [{"param_name": ["radix"], "param_type": "int", "param_description": " base to be used for the string representation."}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string containing a string representation of this BigInteger with base radix. If radix < Character.MIN_RADIX or\n radix > Character.MAX_RADIX then a decimal representation is\n returned. The characters of the string representation are generated with\n method Character.forDigit.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "long", "param_description": "\nlong "}], "class_name": "BigInteger", "is_static": true, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "valueOf", "method_description": "Returns a BigInteger whose value is equal to value.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "BigInteger", "param_description": " value to be xor'ed with this"}], "class_name": "BigInteger", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "xor", "method_description": "Returns a BigInteger whose value is this ^ value.\n\n \nImplementation Note: Usage of this method is not recommended as\n the current implementation is not efficient.\n", "method_declar": ""}], "class_name": "BigInteger", "Vars": null}