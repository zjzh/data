{"package_name": "java.math", "subclass_list": [], "class_description": "An immutable arbitrary-precision signed decimal. A value is represented by an arbitrary-precision \"unscaled value\" and a signed 32-bit \"scale\",\n combined thus: unscaled * 10<sup>-scale</sup>. See unscaledValue() and scale(). Most operations allow you to supply a MathContext to specify a desired rounding mode. ", "class_type": "class", "typealias": [], "interface_list": ["Comparable<BigDecimal>", "Serializable"], "class_inherit_list": ["Number"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "char[]", "param_description": " array of characters containing the string representation of\n            this BigDecimal."}, {"param_name": ["offset"], "param_type": "int", "param_description": " first index to be copied."}, {"param_name": ["len"], "param_type": "int", "param_description": " number of characters to be used."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from a string representation\n given as a character array.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "char[]", "param_description": " array of characters containing the string representation of\n            this BigDecimal."}, {"param_name": ["offset"], "param_type": "int", "param_description": " first index to be copied."}, {"param_name": ["len"], "param_type": "int", "param_description": " number of characters to be used."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from a string representation\n given as a character array.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "char[]", "param_description": " array of characters containing the string representation of\n            this BigDecimal."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from a string representation\n given as a character array.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "char[]", "param_description": " array of characters containing the string representation of\n            this BigDecimal."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from a string representation\n given as a character array. The result is rounded according to the\n specified math context.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "String", "param_description": "\nString "}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from a string\n representation.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "String", "param_description": "\nString "}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from a string\n representation. The result is rounded according to the specified math\n context.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "double", "param_description": " double value to be converted to a BigDecimal instance."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from the 64bit double\n val. The constructed big decimal is equivalent to the given\n double. For example, new BigDecimal(0.1) is equal to 0.1000000000000000055511151231257827021181583404541015625. This happens\n as 0.1 cannot be represented exactly in binary.\n \n\n To generate a big decimal instance which is equivalent to 0.1 use\n the BigDecimal(String) constructor.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "double", "param_description": " double value to be converted to a BigDecimal instance."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from the 64bit double\n val. The constructed big decimal is equivalent to the given\n double. For example, new BigDecimal(0.1) is equal to 0.1000000000000000055511151231257827021181583404541015625. This happens\n as 0.1 cannot be represented exactly in binary.\n \n\n To generate a big decimal instance which is equivalent to 0.1 use\n the BigDecimal(String) constructor.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "BigInteger", "param_description": "\nBigInteger "}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from the given big integer\n val. The scale of the result is 0.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "BigInteger", "param_description": "\nBigInteger "}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from the given big integer\n val. The scale of the result is 0.\n", "method_declar": ""}, {"params": [{"param_name": ["unscaledVal"], "param_type": "BigInteger", "param_description": "\nBigInteger "}, {"param_name": ["scale"], "param_type": "int", "param_description": "\nint "}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from a given unscaled value\n unscaledVal and a given scale. The value of this instance is\n unscaledVal * 10<sup>-scale</sup>).\n", "method_declar": ""}, {"params": [{"param_name": ["unscaledVal"], "param_type": "BigInteger", "param_description": "\nBigInteger "}, {"param_name": ["scale"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from a given unscaled value\n unscaledVal and a given scale. The value of this instance is\n {@code unscaledVal * 10-scale). The result is rounded according\n to the specified math context.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "int", "param_description": " int value to be converted to a BigDecimal instance."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from the given int\n val. The scale of the result is 0.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "int", "param_description": " int value to be converted to a BigDecimal instance."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from the given int val. The scale of the result is 0. The result is rounded\n according to the specified math context.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "long", "param_description": " long value to be converted to a BigDecimal instance."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from the given long val. The scale of the result is 0.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "long", "param_description": " long value to be converted to a BigDecimal instance."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new BigDecimal instance from the given long val. The scale of the result is 0. The result is rounded\n according to the specified math context.\n", "method_declar": ""}, {"params": [{"param_name": ["mc"], "param_type": "MathContext", "param_description": "\nMathContext "}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigDecimal"]}, "method_name": "abs", "method_description": "Returns a BigDecimal whose value is the absolute value of\n this. The result is rounded according to the passed context\n mc.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigDecimal"]}, "method_name": "abs", "method_description": "Returns a BigDecimal whose value is the absolute value of\n this. The scale of the result is the same as the scale of this.\n", "method_declar": ""}, {"params": [{"param_name": ["augend"], "param_type": "BigDecimal", "param_description": " value to be added to this."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this + augend."], "return_type": ["BigDecimal"]}, "method_name": "add", "method_description": "Returns a new BigDecimal whose value is this + augend.\n The scale of the result is the maximum of the scales of the two\n arguments.\n", "method_declar": ""}, {"params": [{"param_name": ["augend"], "param_type": "BigDecimal", "param_description": " value to be added to this."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this + augend."], "return_type": ["BigDecimal"]}, "method_name": "add", "method_description": "Returns a new BigDecimal whose value is this + augend.\n The result is rounded according to the passed context mc.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["byte"]}, "method_name": "byteValueExact", "method_description": "Returns this BigDecimal as a byte value if it has no fractional\n part and if its value fits to the byte range ([-128..127]). If these\n conditions are not met, an ArithmeticException is thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "BigDecimal", "param_description": " value to be compared with this."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["1 if this > val, -1 if this < val,\n         0 if this == val."], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares this BigDecimal with val. Returns one of the\n three values 1, 0, or -1. The method behaves as\n if this.subtract(val) is computed. If this difference is > 0 then\n 1 is returned, if the difference is < 0 then -1 is returned, and if the\n difference is 0 then 0 is returned. This means, that if two decimal\n instances are compared which are equal in value but differ in scale, then\n these two instances are considered as equal.\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}, {"param_name": ["scale"], "param_type": "int", "param_description": " the scale of the result returned."}, {"param_name": ["roundingMode"], "param_type": "int", "param_description": " rounding mode to be used to round the result."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this / divisor rounded according to the given rounding\n         mode."], "return_type": ["BigDecimal"]}, "method_name": "divide", "method_description": "Returns a new BigDecimal whose value is this / divisor.\n As scale of the result the parameter scale is used. If rounding\n is required to meet the specified scale, then the specified rounding mode\n roundingMode is applied.\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}, {"param_name": ["scale"], "param_type": "int", "param_description": " the scale of the result returned."}, {"param_name": ["roundingMode"], "param_type": "RoundingMode", "param_description": " rounding mode to be used to round the result."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this / divisor rounded according to the given rounding\n         mode."], "return_type": ["BigDecimal"]}, "method_name": "divide", "method_description": "Returns a new BigDecimal whose value is this / divisor.\n As scale of the result the parameter scale is used. If rounding\n is required to meet the specified scale, then the specified rounding mode\n roundingMode is applied.\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}, {"param_name": ["roundingMode"], "param_type": "int", "param_description": " rounding mode to be used to round the result."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this / divisor rounded according to the given rounding\n         mode."], "return_type": ["BigDecimal"]}, "method_name": "divide", "method_description": "Returns a new BigDecimal whose value is this / divisor.\n The scale of the result is the scale of this. If rounding is\n required to meet the specified scale, then the specified rounding mode\n roundingMode is applied.\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this / divisor."], "return_type": ["BigDecimal"]}, "method_name": "divide", "method_description": "Returns a new BigDecimal whose value is this / divisor.\n The result is rounded according to the passed context mc. If the\n passed math context specifies precision 0, then this call is\n equivalent to this.divide(divisor).\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}, {"param_name": ["roundingMode"], "param_type": "RoundingMode", "param_description": " rounding mode to be used to round the result."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this / divisor rounded according to the given rounding\n         mode."], "return_type": ["BigDecimal"]}, "method_name": "divide", "method_description": "Returns a new BigDecimal whose value is this / divisor.\n The scale of the result is the scale of this. If rounding is\n required to meet the specified scale, then the specified rounding mode\n roundingMode is applied.\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this / divisor."], "return_type": ["BigDecimal"]}, "method_name": "divide", "method_description": "Returns a new BigDecimal whose value is this / divisor.\n The scale of the result is the difference of the scales of this\n and divisor. If the exact result requires more digits, then the\n scale is adjusted accordingly. For example, 1/128 = 0.0078125\n which has a scale of 7 and precision 5.\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " math context which determines the maximal precision of the\n            result."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["[this.divideToIntegralValue(divisor),\n         this.remainder(divisor)]."], "return_type": ["BigDecimal[]"]}, "method_name": "divideAndRemainder", "method_description": "Returns a BigDecimal array which contains the integral part of\n this / divisor at index 0 and the remainder this %\n divisor at index 1. The quotient is rounded down towards zero to the\n next integer. The rounding mode passed with the parameter mc is\n not considered. But if the precision of mc > 0 and the integral\n part requires more digits, then an ArithmeticException is thrown.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["[this.divideToIntegralValue(divisor),\n         this.remainder(divisor)]."], "return_type": ["BigDecimal[]"]}, "method_name": "divideAndRemainder", "method_description": "Returns a BigDecimal array which contains the integral part of\n this / divisor at index 0 and the remainder this %\n divisor at index 1. The quotient is rounded down towards zero to the\n next integer.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " math context which determines the maximal precision of the\n            result."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["integral part of this / divisor."], "return_type": ["BigDecimal"]}, "method_name": "divideToIntegralValue", "method_description": "Returns a new BigDecimal whose value is the integral part of\n this / divisor. The quotient is rounded down towards zero to the\n next integer. The rounding mode passed with the parameter mc is\n not considered. But if the precision of mc > 0 and the integral\n part requires more digits, then an ArithmeticException is thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["integral part of this / divisor."], "return_type": ["BigDecimal"]}, "method_name": "divideToIntegralValue", "method_description": "Returns a new BigDecimal whose value is the integral part of\n this / divisor. The quotient is rounded down towards zero to the\n next integer. For example, 0.5/0.2 = 2.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this BigDecimal as a double value."], "return_type": ["double"]}, "method_name": "doubleValue", "method_description": "Returns this BigDecimal as a double value. If this is too\n big to be represented as an float, then Double.POSITIVE_INFINITY\n or Double.NEGATIVE_INFINITY is returned.\n \n\n Note, that if the unscaled value has more than 53 significant digits,\n then this decimal cannot be represented exactly in a double variable. In\n this case the result is rounded.\n \n\n For example, if the instance x1 = new BigDecimal(\"0.1\") cannot be\n represented exactly as a double, and thus x1.equals(new\n BigDecimal(x1.doubleValue()) returns false for this case.\n \n\n Similarly, if the instance new BigDecimal(9007199254740993L) is\n converted to a double, the result is 9.007199254740992E15.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "Object", "param_description": " the reference object with which to compare."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this object is the same as the obj\n          argument; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Returns true if x is a BigDecimal instance and if\n this instance is equal to this big decimal. Two big decimals are equal if\n their unscaled value and their scale is equal. For example, 1.0\n (10*10-1) is not equal to 1.00 (100*10-2). Similarly, zero\n instances are not equal if their scale differs.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this BigDecimal as a float value."], "return_type": ["float"]}, "method_name": "floatValue", "method_description": "Returns this BigDecimal as a float value. If this is too\n big to be represented as an float, then Float.POSITIVE_INFINITY\n or Float.NEGATIVE_INFINITY is returned.\n \n\n Note, that if the unscaled value has more than 24 significant digits,\n then this decimal cannot be represented exactly in a float variable. In\n this case the result is rounded.\n \n\n For example, if the instance x1 = new BigDecimal(\"0.1\") cannot be\n represented exactly as a float, and thus x1.equals(new\n BigDecimal(x1.floatValue()) returns false for this case.\n \n\n Similarly, if the instance new BigDecimal(16777217) is converted\n to a float, the result is 1.6777216E7.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["hash code for this."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for this BigDecimal.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type int."], "return_type": ["int"]}, "method_name": "intValue", "method_description": "Returns this BigDecimal as an int value. Any fractional part is\n discarded. If the integral part of this is too big to be\n represented as an int, then this % 2<sup>32</sup> is returned.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "intValueExact", "method_description": "Returns this BigDecimal as a int value if it has no fractional\n part and if its value fits to the int range ([-231..231-1]). If\n these conditions are not met, an ArithmeticException is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type long."], "return_type": ["long"]}, "method_name": "longValue", "method_description": "Returns this BigDecimal as an long value. Any fractional part is\n discarded. If the integral part of this is too big to be\n represented as an long, then this % 2<sup>64</sup> is returned.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["long"]}, "method_name": "longValueExact", "method_description": "Returns this BigDecimal as a long value if it has no fractional\n part and if its value fits to the int range ([-263..263-1]). If\n these conditions are not met, an ArithmeticException is thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "BigDecimal", "param_description": " value to be used to compute the maximum with this."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["max(this, val."], "return_type": ["BigDecimal"]}, "method_name": "max", "method_description": "Returns the maximum of this BigDecimal and val.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "BigDecimal", "param_description": " value to be used to compute the minimum with this."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["min(this, val."], "return_type": ["BigDecimal"]}, "method_name": "min", "method_description": "Returns the minimum of this BigDecimal and val.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": "\nint "}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigDecimal"]}, "method_name": "movePointLeft", "method_description": "Returns a new BigDecimal instance where the decimal point has\n been moved n places to the left. If n < 0 then the\n decimal point is moved -n places to the right.\n\n \nThe result is obtained by changing its scale. If the scale of the result\n becomes negative, then its precision is increased such that the scale is\n zero.\n\n \nNote, that movePointLeft(0) returns a result which is\n mathematically equivalent, but which has scale >= 0.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": "\nint "}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigDecimal"]}, "method_name": "movePointRight", "method_description": "Returns a new BigDecimal instance where the decimal point has\n been moved n places to the right. If n < 0 then the\n decimal point is moved -n places to the left.\n\n \nThe result is obtained by changing its scale. If the scale of the result\n becomes negative, then its precision is increased such that the scale is\n zero.\n\n \nNote, that movePointRight(0) returns a result which is\n mathematically equivalent, but which has scale >= 0.\n", "method_declar": ""}, {"params": [{"param_name": ["multiplicand"], "param_type": "BigDecimal", "param_description": " value to be multiplied with this."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this * multiplicand."], "return_type": ["BigDecimal"]}, "method_name": "multiply", "method_description": "Returns a new BigDecimal whose value is this *\n multiplicand. The result is rounded according to the passed context\n mc.\n", "method_declar": ""}, {"params": [{"param_name": ["multiplicand"], "param_type": "BigDecimal", "param_description": " value to be multiplied with this."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this * multiplicand."], "return_type": ["BigDecimal"]}, "method_name": "multiply", "method_description": "Returns a new BigDecimal whose value is this *\n multiplicand. The scale of the result is the sum of the scales of the\n two arguments.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["-this"], "return_type": ["BigDecimal"]}, "method_name": "negate", "method_description": "Returns a new BigDecimal whose value is the -this. The\n scale of the result is the same as the scale of this.\n", "method_declar": ""}, {"params": [{"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["-this"], "return_type": ["BigDecimal"]}, "method_name": "negate", "method_description": "Returns a new BigDecimal whose value is the -this. The\n result is rounded according to the passed context mc.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this"], "return_type": ["BigDecimal"]}, "method_name": "plus", "method_description": "Returns a new BigDecimal whose value is +this. The scale\n of the result is the same as the scale of this.\n", "method_declar": ""}, {"params": [{"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this, rounded"], "return_type": ["BigDecimal"]}, "method_name": "plus", "method_description": "Returns a new BigDecimal whose value is +this. The result\n is rounded according to the passed context mc.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigDecimal"]}, "method_name": "pow", "method_description": "Returns a new BigDecimal whose value is this<sup>n</sup>. The\n result is rounded according to the passed context mc.\n\n \nImplementation Note: The implementation is based on the ANSI standard\n X3.274-1996 algorithm.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": "\nint "}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigDecimal"]}, "method_name": "pow", "method_description": "Returns a new BigDecimal whose value is this<sup>n</sup>. The\n scale of the result is n * this.scale().\n\n \nx.pow(0) returns 1, even if x == 0.\n\n \nImplementation Note: The implementation is based on the ANSI standard\n X3.274-1996 algorithm.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["the precision of this BigDecimal."], "return_type": ["int"]}, "method_name": "precision", "method_description": "Returns the precision of this BigDecimal. The precision is the\n number of decimal digits used to represent this decimal. It is equivalent\n to the number of digits of the unscaled value. The precision of 0\n is 1 (independent of the scale).\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this % divisor."], "return_type": ["BigDecimal"]}, "method_name": "remainder", "method_description": "Returns a new BigDecimal whose value is this % divisor.\n \n\n The remainder is defined as this -\n this.divideToIntegralValue(divisor) * divisor.\n", "method_declar": ""}, {"params": [{"param_name": ["divisor"], "param_type": "BigDecimal", "param_description": " value by which this is divided."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision to be used."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this % divisor."], "return_type": ["BigDecimal"]}, "method_name": "remainder", "method_description": "Returns a new BigDecimal whose value is this % divisor.\n \n\n The remainder is defined as this -\n this.divideToIntegralValue(divisor) * divisor.\n \n\n The specified rounding mode mc is used for the division only.\n", "method_declar": ""}, {"params": [{"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this rounded according to the passed context."], "return_type": ["BigDecimal"]}, "method_name": "round", "method_description": "Returns a new BigDecimal whose value is this, rounded\n according to the passed context mc.\n \n\n If mc.precision = 0, then no rounding is performed.\n \n\n If mc.precision > 0 and mc.roundingMode == UNNECESSARY,\n then an ArithmeticException is thrown if the result cannot be\n represented exactly within the given precision.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["the scale of this BigDecimal."], "return_type": ["int"]}, "method_name": "scale", "method_description": "Returns the scale of this BigDecimal. The scale is the number of\n digits behind the decimal point. The value of this BigDecimal is\n the unsignedValue * 10<sup>-scale</sup>. If the scale is negative,\n then this BigDecimal represents a big integer.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": "\nint "}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigDecimal"]}, "method_name": "scaleByPowerOfTen", "method_description": "Returns a new BigDecimal whose value is this * 10<sup>n</sup>.\n The scale of the result is this.scale() - n.\n The precision of the result is the precision of this.\n\n \nThis method has the same effect as movePointRight(int), except that\n the precision is not changed.\n", "method_declar": ""}, {"params": [{"param_name": ["newScale"], "param_type": "int", "param_description": " scale of the result returned."}, {"param_name": ["roundingMode"], "param_type": "int", "param_description": " rounding mode to be used to round the result."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a new BigDecimal instance with the specified scale."], "return_type": ["BigDecimal"]}, "method_name": "setScale", "method_description": "Returns a new BigDecimal instance with the specified scale.\n \n\n If the new scale is greater than the old scale, then additional zeros are\n added to the unscaled value. In this case no rounding is necessary.\n \n\n If the new scale is smaller than the old scale, then trailing digits are\n removed. If these trailing digits are not zero, then the remaining\n unscaled value has to be rounded. For this rounding operation the\n specified rounding mode is used.\n", "method_declar": ""}, {"params": [{"param_name": ["newScale"], "param_type": "int", "param_description": " scale of the result returned."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a new BigDecimal instance with the specified scale."], "return_type": ["BigDecimal"]}, "method_name": "setScale", "method_description": "Returns a new BigDecimal instance with the specified scale. If\n the new scale is greater than the old scale, then additional zeros are\n added to the unscaled value. If the new scale is smaller than the old\n scale, then trailing zeros are removed. If the trailing digits are not\n zeros then an ArithmeticException is thrown.\n \n\n If no exception is thrown, then the following equation holds: x.setScale(s).compareTo(x) == 0.\n", "method_declar": ""}, {"params": [{"param_name": ["newScale"], "param_type": "int", "param_description": " scale of the result returned."}, {"param_name": ["roundingMode"], "param_type": "RoundingMode", "param_description": " rounding mode to be used to round the result."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a new BigDecimal instance with the specified scale."], "return_type": ["BigDecimal"]}, "method_name": "setScale", "method_description": "Returns a new BigDecimal instance with the specified scale.\n \n\n If the new scale is greater than the old scale, then additional zeros are\n added to the unscaled value. In this case no rounding is necessary.\n \n\n If the new scale is smaller than the old scale, then trailing digits are\n removed. If these trailing digits are not zero, then the remaining\n unscaled value has to be rounded. For this rounding operation the\n specified rounding mode is used.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["short"]}, "method_name": "shortValueExact", "method_description": "Returns this BigDecimal as a short value if it has no fractional\n part and if its value fits to the short range ([-215..215-1]). If\n these conditions are not met, an ArithmeticException is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["-1 if this < 0,\n         0 if this == 0,\n         1 if this > 0."], "return_type": ["int"]}, "method_name": "signum", "method_description": "Returns the sign of this BigDecimal.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a new BigDecimal instance equivalent to this where the\n         trailing zeros of the unscaled value have been removed."], "return_type": ["BigDecimal"]}, "method_name": "stripTrailingZeros", "method_description": "Returns a new BigDecimal instance with the same value as this but with a unscaled value where the trailing zeros have been\n removed. If the unscaled value of this has n trailing zeros, then\n the scale and the precision of the result has been reduced by n.\n", "method_declar": ""}, {"params": [{"param_name": ["subtrahend"], "param_type": "BigDecimal", "param_description": " value to be subtracted from this."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this - subtrahend."], "return_type": ["BigDecimal"]}, "method_name": "subtract", "method_description": "Returns a new BigDecimal whose value is this - subtrahend.\n The scale of the result is the maximum of the scales of the two arguments.\n", "method_declar": ""}, {"params": [{"param_name": ["subtrahend"], "param_type": "BigDecimal", "param_description": " value to be subtracted from this."}, {"param_name": ["mc"], "param_type": "MathContext", "param_description": " rounding mode and precision for the result of this operation."}], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this - subtrahend."], "return_type": ["BigDecimal"]}, "method_name": "subtract", "method_description": "Returns a new BigDecimal whose value is this - subtrahend.\n The result is rounded according to the passed context mc.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this BigDecimal as a big integer instance."], "return_type": ["BigInteger"]}, "method_name": "toBigInteger", "method_description": "Returns this BigDecimal as a big integer instance. A fractional\n part is discarded.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["this BigDecimal as a big integer value."], "return_type": ["BigInteger"]}, "method_name": "toBigIntegerExact", "method_description": "Returns this BigDecimal as a big integer instance if it has no\n fractional part. If this BigDecimal has a fractional part, i.e.\n if rounding would be necessary, an ArithmeticException is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this in engineering notation\n         if necessary."], "return_type": ["String"]}, "method_name": "toEngineeringString", "method_description": "Returns a string representation of this BigDecimal. This\n representation always prints all significant digits of this value.\n \n\n If the scale is negative or if scale - precision >= 6 then\n engineering notation is used. Engineering notation is similar to the\n scientific notation except that the exponent is made to be a multiple of\n 3 such that the integer part is >= 1 and < 1000.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this without exponent part."], "return_type": ["String"]}, "method_name": "toPlainString", "method_description": "Returns a string representation of this BigDecimal. No scientific\n notation is used. This methods adds zeros where necessary.\n \n\n If this string representation is used to create a new instance, this\n instance is generally not identical to this as the precision\n changes.\n \n\nx.equals(new BigDecimal(x.toPlainString()) usually returns\n false.\n \n\nx.compareTo(new BigDecimal(x.toPlainString()) returns 0.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this in scientific notation if\n         necessary."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a canonical string representation of this BigDecimal. If\n necessary, scientific notation is used. This representation always prints\n all significant digits of this value.\n \n\n If the scale is negative or if scale - precision >= 6 then\n scientific notation is used.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": ["unit in the last place (ULP) of this BigDecimal instance."], "return_type": ["BigDecimal"]}, "method_name": "ulp", "method_description": "Returns the unit in the last place (ULP) of this BigDecimal\n instance. An ULP is the distance to the nearest big decimal with the same\n precision.\n\n \nThe amount of a rounding error in the evaluation of a floating-point\n operation is often expressed in ULPs. An error of 1 ULP is often seen as\n a tolerable error.\n\n \nFor class BigDecimal, the ULP of a number is simply 10-scale.\n For example, new BigDecimal(0.1).ulp() returns 1E-55.\n", "method_declar": ""}, {"params": [], "class_name": "BigDecimal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigInteger"]}, "method_name": "unscaledValue", "method_description": "Returns the unscaled value (mantissa) of this BigDecimal instance\n as a BigInteger. The unscaled value can be computed as\n this * 10<sup>scale</sup>.\n", "method_declar": ""}, {"params": [{"param_name": ["val"], "param_type": "double", "param_description": " double value to be converted to a BigDecimal."}], "class_name": "BigDecimal", "is_static": true, "return_value": {"return_name": [], "return_description": ["BigDecimal instance with the value val."], "return_type": ["BigDecimal"]}, "method_name": "valueOf", "method_description": "Returns a new BigDecimal instance whose value is equal to val. The new decimal is constructed as if the BigDecimal(String)\n constructor is called with an argument which is equal to Double.toString(val). For example, valueOf(\"0.1\") is converted to\n (unscaled=1, scale=1), although the double 0.1 cannot be\n represented exactly as a double value. In contrast to that, a new BigDecimal(0.1) instance has the value 0.1000000000000000055511151231257827021181583404541015625 with an\n unscaled value 1000000000000000055511151231257827021181583404541015625\n and the scale 55.\n", "method_declar": ""}, {"params": [{"param_name": ["unscaledVal"], "param_type": "long", "param_description": " value to be converted to a BigDecimal."}], "class_name": "BigDecimal", "is_static": true, "return_value": {"return_name": [], "return_description": ["BigDecimal instance with the value unscaledVal."], "return_type": ["BigDecimal"]}, "method_name": "valueOf", "method_description": "Returns a new BigDecimal instance whose value is equal to unscaledVal. The scale of the result is 0, and its unscaled\n value is unscaledVal.\n", "method_declar": ""}, {"params": [{"param_name": ["unscaledVal"], "param_type": "long", "param_description": "\nlong "}, {"param_name": ["scale"], "param_type": "int", "param_description": "\nint "}], "class_name": "BigDecimal", "is_static": true, "return_value": {"return_name": [], "return_description": [""], "return_type": ["BigDecimal"]}, "method_name": "valueOf", "method_description": "Returns a new BigDecimal instance whose value is equal to unscaledVal * 10<sup>-scale</sup>). The scale of the result is scale, and its unscaled value is unscaledVal.\n", "method_declar": ""}], "class_name": "BigDecimal", "Vars": null}