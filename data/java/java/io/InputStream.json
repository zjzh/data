{"package_name": "java.io", "subclass_list": ["AssetManager.AssetInputStream", "BackupDataInputStream", "ByteArrayInputStream", "FileInputStream", "FilterInputStream", "ObjectInputStream", "PipedInputStream", "SequenceInputStream", "StringBufferInputStream", "AssetManager.AssetInputStream", "BackupDataInputStream", "InputStream", "ByteArrayInputStream", "FileInputStream", "FilterInputStream", "ObjectInputStream", "PipedInputStream", "SequenceInputStream", "StringBufferInputStream"], "class_description": "This abstract class is the superclass of all classes representing\n an input stream of bytes. Applications that need to define a subclass of InputStream\n must always provide a method that returns the next byte of input. ", "class_type": "class", "typealias": [], "interface_list": ["Closeable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "InputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "InputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["an estimate of the number of bytes that can be read (or skipped\n             over) from this input stream without blocking or 0 when\n             it reaches the end of the input stream."], "return_type": ["int"]}, "method_name": "available", "method_description": "Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. The next invocation\n might be the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n\n \n Note that while some implementations of InputStream will return\n the total number of bytes in the stream, many will not.  It is\n never correct to use the return value of this method to allocate\n a buffer intended to hold all data in this stream.\n\n \n A subclass' implementation of this method may choose to throw an\n IOException if this input stream has been closed by\n invoking the close() method.\n\n \n The available method for class InputStream always\n returns 0.\n\n \n This method should be overridden by subclasses.\n", "method_declar": ""}, {"params": [], "class_name": "InputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this input stream and releases any system resources associated\n with the stream.\n\n \n The close method of InputStream does\n nothing.\n", "method_declar": ""}, {"params": [{"param_name": ["readlimit"], "param_type": "int", "param_description": " the maximum limit of bytes that can be read before\n                      the mark position becomes invalid."}], "class_name": "InputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "Marks the current position in this input stream. A subsequent call to\n the reset method repositions this stream at the last marked\n position so that subsequent reads re-read the same bytes.\n\n \n The readlimit arguments tells this input stream to\n allow that many bytes to be read before the mark position gets\n invalidated.\n\n \n The general contract of mark is that, if the method\n markSupported returns true, the stream somehow\n remembers all the bytes read after the call to mark and\n stands ready to supply those same bytes again if and whenever the method\n reset is called.  However, the stream is not required to\n remember any data at all if more than readlimit bytes are\n read from the stream before reset is called.\n\n \n Marking a closed stream should not have any effect on the stream.\n\n \n The mark method of InputStream does\n nothing.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "InputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this stream instance supports the mark\n          and reset methods; false otherwise."], "return_type": ["boolean"]}, "method_name": "markSupported", "method_description": "Tests if this input stream supports the mark and\n reset methods. Whether or not mark and\n reset are supported is an invariant property of a\n particular input stream instance. The markSupported method\n of InputStream returns false.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in array b\n                   at which the data is written."}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes to read."}], "class_name": "InputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to len bytes of data from the input stream into\n an array of bytes.  An attempt is made to read as many as\n len bytes, but a smaller number may be read.\n The number of bytes actually read is returned as an integer.\n\n \n This method blocks until input data is available, end of file is\n detected, or an exception is thrown.\n\n \n If len is zero, then no bytes are read and\n 0 is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at end of\n file, the value -1 is returned; otherwise, at least one\n byte is read and stored into b.\n\n \n The first byte read is stored into element b[off], the\n next one into b[off+1], and so on. The number of bytes read\n is, at most, equal to len. Let k be the number of\n bytes actually read; these bytes will be stored in elements\n b[off] through b[off+k-1],\n leaving elements b[off+k] through\n b[off+len-1] unaffected.\n\n \n In every case, elements b[0] through\n b[off] and elements b[off+len] through\n b[b.length-1] are unaffected.\n\n \n The read(b, off, len) method\n for class InputStream simply calls the method\n read() repeatedly. If the first such call results in an\n IOException, that exception is returned from the call to\n the read(b, off, len) method.  If\n any subsequent call to read() results in a\n IOException, the exception is caught and treated as if it\n were end of file; the bytes read up to that point are stored into\n b and the number of bytes read before the exception\n occurred is returned. The default implementation of this method blocks\n until the requested amount of input data len has been read,\n end of file is detected, or an exception is thrown. Subclasses are encouraged\n to provide a more efficient implementation of this method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}], "class_name": "InputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads some number of bytes from the input stream and stores them into\n the buffer array b. The number of bytes actually read is\n returned as an integer.  This method blocks until input data is\n available, end of file is detected, or an exception is thrown.\n\n \n If the length of b is zero, then no bytes are read and\n 0 is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at the\n end of the file, the value -1 is returned; otherwise, at\n least one byte is read and stored into b.\n\n \n The first byte read is stored into element b[0], the\n next one into b[1], and so on. The number of bytes read is,\n at most, equal to the length of b. Let k be the\n number of bytes actually read; these bytes will be stored in elements\n b[0] through b[k-1],\n leaving elements b[k] through\n b[b.length-1] unaffected.\n\n \n The read(b) method for class InputStream\n has the same effect as: \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "InputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Repositions this stream to the position at the time the\n mark method was last called on this input stream.\n\n \n The general contract of reset is:\n\n \nThe method reset for class InputStream\n does nothing except throw an IOException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " the number of bytes to be skipped."}], "class_name": "InputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes skipped."], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skips over and discards n bytes of data from this input\n stream. The skip method may, for a variety of reasons, end\n up skipping over some smaller number of bytes, possibly 0.\n This may result from any of a number of conditions; reaching end of file\n before n bytes have been skipped is only one possibility.\n The actual number of bytes skipped is returned. If n is\n negative, the skip method for class InputStream always\n returns 0, and no bytes are skipped. Subclasses may handle the negative\n value differently.\n\n \n The skip method of this class creates a\n byte array and then repeatedly reads into it until n bytes\n have been read or the end of the stream has been reached. Subclasses are\n encouraged to provide a more efficient implementation of this method.\n For instance, the implementation may depend on the ability to seek.\n", "method_declar": ""}], "class_name": "InputStream", "Vars": null}