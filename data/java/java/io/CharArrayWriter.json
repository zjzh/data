{"package_name": "java.io", "subclass_list": [], "class_description": "This class implements a character buffer that can be used as an Writer.\n The buffer automatically grows when data is written to the stream.  The data\n can be retrieved using toCharArray() and toString(). Note: Invoking close() on this class has no effect, and methods\n of this class can be called after the stream has closed\n without generating an IOException. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Writer"], "Methods": [{"params": [], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new CharArrayWriter.\n", "method_declar": ""}, {"params": [{"param_name": ["initialSize"], "param_type": "int", "param_description": " an int specifying the initial buffer size."}], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new CharArrayWriter with the specified initial size.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "char", "param_description": " The 16-bit character to append"}], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["CharArrayWriter"]}, "method_name": "append", "method_description": "Appends the specified character to this writer.\n\n \n An invocation of this method of the form out.append(c)\n behaves in exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["csq"], "param_type": "CharSequence", "param_description": " The character sequence from which a subsequence will be\n         appended.  If csq is null, then characters\n         will be appended as if csq contained the four\n         characters \"null\"."}, {"param_name": ["start"], "param_type": "int", "param_description": " The index of the first character in the subsequence"}, {"param_name": ["end"], "param_type": "int", "param_description": " The index of the character following the last character in the\n         subsequence"}], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["CharArrayWriter"]}, "method_name": "append", "method_description": "Appends a subsequence of the specified character sequence to this writer.\n\n \n An invocation of this method of the form out.append(csq, start,\n end) when csq is not null, behaves in\n exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["csq"], "param_type": "CharSequence", "param_description": " The character sequence to append.  If csq is\n         null, then the four characters \"null\" are\n         appended to this writer."}], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["CharArrayWriter"]}, "method_name": "append", "method_description": "Appends the specified character sequence to this writer.\n\n \n An invocation of this method of the form out.append(csq)\n behaves in exactly the same way as the invocation\n\n \n Depending on the specification of toString for the\n character sequence csq, the entire sequence may not be\n appended. For instance, invoking the toString method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Close the stream.  This method does not release the buffer, since its\n contents might still be required. Note: Invoking this method in this class\n will have no effect.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "flush", "method_description": "Flush the stream.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets the buffer so that you can use it again without\n throwing away the already allocated buffer.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["an int representing the current size of the buffer."], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the current size of the buffer.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array of chars copied from the input data."], "return_type": ["char[]"]}, "method_name": "toCharArray", "method_description": "Returns a copy of the input data.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["the string."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Converts input data to a string.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "int", "param_description": " int specifying a character to be written"}], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes a character to the buffer.\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": " String to be written from"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset from which to start reading characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Number of characters to be written"}], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Write a portion of a string to the buffer.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "char[]", "param_description": " the data to be written"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the data"}, {"param_name": ["len"], "param_type": "int", "param_description": " the number of chars that are written"}], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes characters to the buffer.\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "Writer", "param_description": " the output stream to write to"}], "class_name": "CharArrayWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeTo", "method_description": "Writes the contents of the buffer to another character stream.\n", "method_declar": ""}], "class_name": "CharArrayWriter", "Vars": null}