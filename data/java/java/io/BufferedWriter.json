{"package_name": "java.io", "subclass_list": [], "class_description": "Writes text to a character-output stream, buffering characters so as to\n provide for the efficient writing of single characters, arrays, and strings. The buffer size may be specified, or the default size may be accepted.\n The default is large enough for most purposes. A newLine() method is provided, which uses the platform's own notion of\n line separator as defined by the system property line.separator.\n Not all platforms use the newline character ('\\n') to terminate lines.\n Calling this method to terminate each output line is therefore preferred to\n writing a newline character directly. In general, a Writer sends its output immediately to the underlying\n character or byte stream.  Unless prompt output is required, it is advisable\n to wrap a BufferedWriter around any Writer whose write() operations may be\n costly, such as FileWriters and OutputStreamWriters.  For example, ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Writer"], "Methods": [{"params": [{"param_name": ["out"], "param_type": "Writer", "param_description": " A Writer"}], "class_name": "BufferedWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a buffered character-output stream that uses a default-sized\n output buffer.\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "Writer", "param_description": " A Writer"}, {"param_name": ["sz"], "param_type": "int", "param_description": " Output-buffer size, a positive integer"}], "class_name": "BufferedWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new buffered character-output stream that uses an output\n buffer of the given size.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes the stream, flushing it first. Once the stream has been closed,\n further write() or flush() invocations will cause an IOException to be\n thrown. Closing a previously closed stream has no effect.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "flush", "method_description": "Flushes the stream.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "newLine", "method_description": "Writes a line separator.  The line separator string is defined by the\n system property line.separator, and is not necessarily a single\n newline ('\\n') character.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "int", "param_description": " int specifying a character to be written"}], "class_name": "BufferedWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes a single character.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " String to be written"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset from which to start reading characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Number of characters to be written"}], "class_name": "BufferedWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes a portion of a String.\n\n \n If the value of the len parameter is negative then no\n characters are written.  This is contrary to the specification of this\n method in the superclass, which requires that an IndexOutOfBoundsException be\n thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["cbuf"], "param_type": "char[]", "param_description": " A character array"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset from which to start reading characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Number of characters to write"}], "class_name": "BufferedWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes a portion of an array of characters.\n\n \n Ordinarily this method stores characters from the given array into\n this stream's buffer, flushing the buffer to the underlying stream as\n needed.  If the requested length is at least as large as the buffer,\n however, then this method will flush the buffer and write the characters\n directly to the underlying stream.  Thus redundant\n BufferedWriters will not copy data unnecessarily.\n", "method_declar": ""}], "class_name": "BufferedWriter", "Vars": null}