{"package_name": "java.io", "subclass_list": [], "class_description": "Instances of this class support both reading and writing to a\n random access file. A random access file behaves like a large\n array of bytes stored in the file system. There is a kind of cursor,\n or index into the implied array, called the file pointer;\n input operations read bytes starting at the file pointer and advance\n the file pointer past the bytes read. If the random access file is\n created in read/write mode, then output operations are also available;\n output operations write bytes starting at the file pointer and advance\n the file pointer past the bytes written. Output operations that write\n past the current end of the implied array cause the array to be\n extended. The file pointer can be read by the\n getFilePointer method and set by the seek\n method. It is generally true of all the reading routines in this class that\n if end-of-file is reached before the desired number of bytes has been\n read, an EOFException (which is a kind of\n IOException) is thrown. If any byte cannot be read for\n any reason other than end-of-file, an IOException other\n than EOFException is thrown. In particular, an\n IOException may be thrown if the stream has been closed. ", "class_type": "class", "typealias": [], "interface_list": ["DataOutput", "DataInput", "Closeable"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["name"], "param_type": "String", "param_description": " the system-dependent filename"}, {"param_name": ["mode"], "param_type": "String", "param_description": " the access mode"}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a random access file stream to read from, and optionally\n to write to, a file with the specified name. A new\n FileDescriptor object is created to represent the\n connection to the file.\n\n \n The mode argument specifies the access mode with which the\n file is to be opened.  The permitted values and their meanings are as\n specified for the RandomAccessFile(File,String) constructor.\n\n \n\n If there is a security manager, its checkRead method\n is called with the name argument\n as its argument to see if read access to the file is allowed.\n If the mode allows writing, the security manager's\n checkWrite method\n is also called with the name argument\n as its argument to see if write access to the file is allowed.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["file"], "param_type": "File", "param_description": " the file object"}, {"param_name": ["mode"], "param_type": "String", "param_description": " the access mode, as described\n                    above"}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a random access file stream to read from, and optionally to\n write to, the file specified by the File argument.  A new FileDescriptor object is created to represent this file connection.\n\n \nThe mode argument specifies the access mode\n in which the file is to be opened.  The permitted values and their\n meanings are:\n\n \nThe \"rwd\" mode can be used to reduce the number of I/O\n operations performed.  Using \"rwd\" only requires updates to the\n file's content to be written to storage; using \"rws\" requires\n updates to both the file's content and its metadata to be written, which\n generally requires at least one more low-level I/O operation.\n\n \nIf there is a security manager, its checkRead method is\n called with the pathname of the file argument as its\n argument to see if read access to the file is allowed.  If the mode\n allows writing, the security manager's checkWrite method is\n also called with the path argument to see if write access to the file is\n allowed.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this random access file stream and releases any system\n resources associated with the stream. A closed random access\n file cannot perform input or output operations and cannot be\n reopened.\n\n \n If this file has an associated channel then the channel is closed\n as well.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the file channel associated with this file"], "return_type": ["FileChannel"]}, "method_name": "getChannel", "method_description": "Returns the unique FileChannel\n object associated with this file.\n\n \n The position of the returned channel will always be equal to\n this object's file-pointer offset as returned by the getFilePointer method.  Changing this object's\n file-pointer offset, whether explicitly or by reading or writing bytes,\n will change the position of the channel, and vice versa.  Changing the\n file's length via this object will change the length seen via the file\n channel, and vice versa.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the file descriptor object associated with this stream."], "return_type": ["FileDescriptor"]}, "method_name": "getFD", "method_description": "Returns the opaque file descriptor object associated with this\n stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the offset from the beginning of the file, in bytes,\n             at which the next read or write occurs."], "return_type": ["long"]}, "method_name": "getFilePointer", "method_description": "Returns the current offset in this file.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the length of this file, measured in bytes."], "return_type": ["long"]}, "method_name": "length", "method_description": "Returns the length of this file.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of data, or -1 if the end of the\n             file has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads a byte of data from this file. The byte is returned as an\n integer in the range 0 to 255 (0x00-0x0ff). This\n method blocks if no input is yet available.\n \n\n Although RandomAccessFile is not a subclass of\n InputStream, this method behaves in exactly the same\n way as the InputStream#read() method of\n InputStream.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             this file has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to b.length bytes of data from this file\n into an array of bytes. This method blocks until at least one byte\n of input is available.\n \n\n Although RandomAccessFile is not a subclass of\n InputStream, this method behaves in exactly the\n same way as the InputStream#read(byte[]) method of\n InputStream.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in array b\n                   at which the data is written."}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes read."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the file has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to len bytes of data from this file into an\n array of bytes. This method blocks until at least one byte of input\n is available.\n \n\n Although RandomAccessFile is not a subclass of\n InputStream, this method behaves in exactly the\n same way as the InputStream#read(byte[], int, int) method of\n InputStream.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the boolean value read."], "return_type": ["boolean"]}, "method_name": "readBoolean", "method_description": "Reads a boolean from this file. This method reads a\n single byte from the file, starting at the current file pointer.\n A value of 0 represents\n false. Any other value represents true.\n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of this file as a signed eight-bit\n             byte."], "return_type": ["byte"]}, "method_name": "readByte", "method_description": "Reads a signed eight-bit value from this file. This method reads a\n byte from the file, starting from the current file pointer.\n If the byte read is b, where\n 0\u00a0<=\u00a0b\u00a0<=\u00a0255,\n then the result is:\n \n\n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next two bytes of this file, interpreted as a\n                  char."], "return_type": ["char"]}, "method_name": "readChar", "method_description": "Reads a character from this file. This method reads two\n bytes from the file, starting at the current file pointer.\n If the bytes read, in order, are\n b1 and b2, where\n 0\u00a0<=\u00a0b1,\u00a0b2\u00a0<=\u00a0255,\n then the result is equal to:\n \n\n This method blocks until the two bytes are read, the end of the\n stream is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next eight bytes of this file, interpreted as a\n             double."], "return_type": ["double"]}, "method_name": "readDouble", "method_description": "Reads a double from this file. This method reads a\n long value, starting at the current file pointer,\n as if by the readLong method\n and then converts that long to a double\n using the longBitsToDouble method in\n class Double.\n \n\n This method blocks until the eight bytes are read, the end of the\n stream is detected, or an exception is thrown.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next four bytes of this file, interpreted as a\n             float."], "return_type": ["float"]}, "method_name": "readFloat", "method_description": "Reads a float from this file. This method reads an\n int value, starting at the current file pointer,\n as if by the readInt method\n and then converts that int to a float\n using the intBitsToFloat method in class\n Float.\n \n\n This method blocks until the four bytes are read, the end of the\n stream is detected, or an exception is thrown.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "readFully", "method_description": "Reads b.length bytes from this file into the byte\n array, starting at the current file pointer. This method reads\n repeatedly from the file until the requested number of bytes are\n read. This method blocks until the requested number of bytes are\n read, the end of the stream is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data."}, {"param_name": ["len"], "param_type": "int", "param_description": " the number of bytes to read."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "readFully", "method_description": "Reads exactly len bytes from this file into the byte\n array, starting at the current file pointer. This method reads\n repeatedly from the file until the requested number of bytes are\n read. This method blocks until the requested number of bytes are\n read, the end of the stream is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next four bytes of this file, interpreted as an\n             int."], "return_type": ["int"]}, "method_name": "readInt", "method_description": "Reads a signed 32-bit integer from this file. This method reads 4\n bytes from the file, starting at the current file pointer.\n If the bytes read, in order, are b1,\n b2, b3, and b4, where\n 0\u00a0<=\u00a0b1, b2, b3, b4\u00a0<=\u00a0255,\n then the result is equal to:\n \n\n This method blocks until the four bytes are read, the end of the\n stream is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next line of text from this file, or null if end\n             of file is encountered before even one byte is read."], "return_type": ["String"]}, "method_name": "readLine", "method_description": "Reads the next line of text from this file.  This method successively\n reads bytes from the file, starting at the current file pointer,\n until it reaches a line terminator or the end\n of the file.  Each byte is converted into a character by taking the\n byte's value for the lower eight bits of the character and setting the\n high eight bits of the character to zero.  This method does not,\n therefore, support the full Unicode character set.\n\n \n A line of text is terminated by a carriage-return character\n ('\\r'), a newline character ('\\n'), a\n carriage-return character immediately followed by a newline character,\n or the end of the file.  Line-terminating characters are discarded and\n are not included as part of the string returned.\n\n \n This method blocks until a newline character is read, a carriage\n return and the byte following it are read (to see if it is a newline),\n the end of the file is reached, or an exception is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next eight bytes of this file, interpreted as a\n             long."], "return_type": ["long"]}, "method_name": "readLong", "method_description": "Reads a signed 64-bit integer from this file. This method reads eight\n bytes from the file, starting at the current file pointer.\n If the bytes read, in order, are\n b1, b2, b3,\n b4, b5, b6,\n b7, and b8, where:\n \n\n then the result is equal to:\n \n\n This method blocks until the eight bytes are read, the end of the\n stream is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next two bytes of this file, interpreted as a signed\n             16-bit number."], "return_type": ["short"]}, "method_name": "readShort", "method_description": "Reads a signed 16-bit number from this file. The method reads two\n bytes from this file, starting at the current file pointer.\n If the two bytes read, in order, are\n b1 and b2, where each of the two values is\n between 0 and 255, inclusive, then the\n result is equal to:\n \n\n This method blocks until the two bytes are read, the end of the\n stream is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Unicode string."], "return_type": ["String"]}, "method_name": "readUTF", "method_description": "Reads in a string from this file. The string has been encoded\n using a\n modified UTF-8\n format.\n \n\n The first two bytes are read, starting from the current file\n pointer, as if by\n readUnsignedShort. This value gives the number of\n following bytes that are in the encoded string, not\n the length of the resulting string. The following bytes are then\n interpreted as bytes encoding characters in the modified UTF-8 format\n and are converted into characters.\n \n\n This method blocks until all the bytes are read, the end of the\n stream is detected, or an exception is thrown.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of this file, interpreted as an unsigned\n             eight-bit number."], "return_type": ["int"]}, "method_name": "readUnsignedByte", "method_description": "Reads an unsigned eight-bit number from this file. This method reads\n a byte from this file, starting at the current file pointer,\n and returns that byte.\n \n\n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next two bytes of this file, interpreted as an unsigned\n             16-bit integer."], "return_type": ["int"]}, "method_name": "readUnsignedShort", "method_description": "Reads an unsigned 16-bit number from this file. This method reads\n two bytes from the file, starting at the current file pointer.\n If the bytes read, in order, are\n b1 and b2, where\n 0\u00a0<=\u00a0b1, b2\u00a0<=\u00a0255,\n then the result is equal to:\n \n\n This method blocks until the two bytes are read, the end of the\n stream is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["pos"], "param_type": "long", "param_description": " the offset position, measured in bytes from the\n                   beginning of the file, at which to set the file\n                   pointer."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "seek", "method_description": "Sets the file-pointer offset, measured from the beginning of this\n file, at which the next read or write occurs.  The offset may be\n set beyond the end of the file. Setting the offset beyond the end\n of the file does not change the file length.  The file length will\n change only by writing after the offset has been set beyond the end\n of the file.\n", "method_declar": ""}, {"params": [{"param_name": ["newLength"], "param_type": "long", "param_description": " The desired length of the file"}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setLength", "method_description": "Sets the length of this file.\n\n \n If the present length of the file as returned by the\n length method is greater than the newLength\n argument then the file will be truncated.  In this case, if the file\n offset as returned by the getFilePointer method is greater\n than newLength then after this method returns the offset\n will be equal to newLength.\n\n \n If the present length of the file as returned by the\n length method is smaller than the newLength\n argument then the file will be extended.  In this case, the contents of\n the extended portion of the file are not defined.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": " the number of bytes to be skipped."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes skipped."], "return_type": ["int"]}, "method_name": "skipBytes", "method_description": "Attempts to skip over n bytes of input discarding the\n skipped bytes.\n \n\n\n This method may skip over some smaller number of bytes, possibly zero.\n This may result from any of a number of conditions; reaching end of\n file before n bytes have been skipped is only one\n possibility. This method never throws an EOFException.\n The actual number of bytes skipped is returned.  If n\n is negative, no bytes are skipped.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the data."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes b.length bytes from the specified byte array\n to this file, starting at the current file pointer.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the data."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the data."}, {"param_name": ["len"], "param_type": "int", "param_description": " the number of bytes to write."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes len bytes from the specified byte array\n starting at offset off to this file.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "int", "param_description": " the byte to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes the specified byte to this file. The write starts at\n the current file pointer.\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "boolean", "param_description": " a boolean value to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeBoolean", "method_description": "Writes a boolean to the file as a one-byte value. The\n value true is written out as the value\n (byte)1; the value false is written out\n as the value (byte)0. The write starts at\n the current position of the file pointer.\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "int", "param_description": " a byte value to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeByte", "method_description": "Writes a byte to the file as a one-byte value. The\n write starts at the current position of the file pointer.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a string of bytes to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeBytes", "method_description": "Writes the string to the file as a sequence of bytes. Each\n character in the string is written out, in sequence, by discarding\n its high eight bits. The write starts at the current position of\n the file pointer.\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "int", "param_description": " a char value to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeChar", "method_description": "Writes a char to the file as a two-byte value, high\n byte first. The write starts at the current position of the\n file pointer.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a String value to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeChars", "method_description": "Writes a string to the file as a sequence of characters. Each\n character is written to the data output stream as if by the\n writeChar method. The write starts at the current\n position of the file pointer.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "double", "param_description": " a double value to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeDouble", "method_description": "Converts the double argument to a long using the\n doubleToLongBits method in class Double,\n and then writes that long value to the file as an\n eight-byte quantity, high byte first. The write starts at the current\n position of the file pointer.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "float", "param_description": " a float value to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeFloat", "method_description": "Converts the float argument to an int using the\n floatToIntBits method in class Float,\n and then writes that int value to the file as a\n four-byte quantity, high byte first. The write starts at the\n current position of the file pointer.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "int", "param_description": " an int to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeInt", "method_description": "Writes an int to the file as four bytes, high byte first.\n The write starts at the current position of the file pointer.\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "long", "param_description": " a long to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeLong", "method_description": "Writes a long to the file as eight bytes, high byte first.\n The write starts at the current position of the file pointer.\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "int", "param_description": " a short to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeShort", "method_description": "Writes a short to the file as two bytes, high byte first.\n The write starts at the current position of the file pointer.\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": " a string to be written."}], "class_name": "RandomAccessFile", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeUTF", "method_description": "Writes a string to the file using\n modified UTF-8\n encoding in a machine-independent manner.\n \n\n First, two bytes are written to the file, starting at the\n current file pointer, as if by the\n writeShort method giving the number of bytes to\n follow. This value is the number of bytes actually written out,\n not the length of the string. Following the length, each character\n of the string is output, in sequence, using the modified UTF-8 encoding\n for each character.\n", "method_declar": ""}], "class_name": "RandomAccessFile", "Vars": null}