{"package_name": "java.io", "subclass_list": [], "class_description": "A buffered character-input stream that keeps track of line numbers.  This\n class defines methods setLineNumber(int) and getLineNumber() for setting and getting the current line number\n respectively. By default, line numbering begins at 0. This number increments at every\n line terminator as the data is read, and can be changed\n with a call to setLineNumber(int).  Note however, that\n setLineNumber(int) does not actually change the current position in\n the stream; it only changes the value that will be returned by\n getLineNumber(). A line is considered to be terminated by any one of a\n line feed ('\\n'), a carriage return ('\\r'), or a carriage return followed\n immediately by a linefeed. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["BufferedReader"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "Reader", "param_description": " A Reader object to provide the underlying stream"}], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a new line-numbering reader, using the default input-buffer\n size.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "Reader", "param_description": " A Reader object to provide the underlying stream"}, {"param_name": ["sz"], "param_type": "int", "param_description": " An int specifying the size of the buffer"}], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a new line-numbering reader, reading characters into a buffer of\n the given size.\n", "method_declar": ""}, {"params": [], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The current line number"], "return_type": ["int"]}, "method_name": "getLineNumber", "method_description": "Get the current line number.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["readAheadLimit"], "param_type": "int", "param_description": " Limit on the number of characters that may be read while still\n         preserving the mark.  After reading this many characters,\n         attempting to reset the stream may fail."}], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "Mark the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point, and will also reset\n the line number appropriately.\n", "method_declar": ""}, {"params": [], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The character read, or -1 if the end of the stream has been\n          reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Read a single character.  Line terminators are\n compressed into single newline ('\\n') characters.  Whenever a line\n terminator is read the current line number is incremented.\n", "method_declar": ""}, {"params": [{"param_name": ["cbuf"], "param_type": "char[]", "param_description": " Destination buffer"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset at which to start storing characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Maximum number of characters to read"}], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The number of bytes read, or -1 if the end of the stream has\n          already been reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Read characters into a portion of an array.  Whenever a line terminator is read the current line number is\n incremented.\n", "method_declar": ""}, {"params": [], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["A String containing the contents of the line, not including\n          any line termination characters, or\n          null if the end of the stream has been reached"], "return_type": ["String"]}, "method_name": "readLine", "method_description": "Read a line of text.  Whenever a line terminator is\n read the current line number is incremented.\n", "method_declar": ""}, {"params": [], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Reset the stream to the most recent mark.\n", "method_declar": ""}, {"params": [{"param_name": ["lineNumber"], "param_type": "int", "param_description": " An int specifying the line number"}], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setLineNumber", "method_description": "Set the current line number.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " The number of characters to skip"}], "class_name": "LineNumberReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The number of characters actually skipped"], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skip characters.\n", "method_declar": ""}], "class_name": "LineNumberReader", "Vars": null}