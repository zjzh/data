{"package_name": "java.io", "subclass_list": [], "class_description": "A PrintStream adds functionality to another output stream,\n namely the ability to print representations of various data values\n conveniently.  Two other features are provided as well.  Unlike other output\n streams, a PrintStream never throws an\n IOException; instead, exceptional situations merely set an\n internal flag that can be tested via the checkError method.\n Optionally, a PrintStream can be created so as to flush\n automatically; this means that the flush method is\n automatically invoked after a byte array is written, one of the\n println methods is invoked, or a newline character or byte\n ('\\n') is written. All characters printed by a PrintStream are converted into\n bytes using the platform's default character encoding.  The PrintWriter class should be used in situations that require writing\n characters rather than bytes. ", "class_type": "class", "typealias": [], "interface_list": ["Appendable", "Closeable"], "class_inherit_list": ["FilterOutputStream"], "Methods": [{"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " The output stream to which values and objects will be\n                    printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new print stream.  This stream will not flush automatically.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " The output stream to which values and objects will be\n                    printed"}, {"param_name": ["autoFlush"], "param_type": "boolean", "param_description": " A boolean; if true, the output buffer will be flushed\n                    whenever a byte array is written, one of the\n                    println methods is invoked, or a newline\n                    character or byte ('\\n') is written"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new print stream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " The output stream to which values and objects will be\n                    printed"}, {"param_name": ["autoFlush"], "param_type": "boolean", "param_description": " A boolean; if true, the output buffer will be flushed\n                    whenever a byte array is written, one of the\n                    println methods is invoked, or a newline\n                    character or byte ('\\n') is written"}, {"param_name": ["encoding"], "param_type": "String", "param_description": " The name of a supported\n                    \n                    character encoding"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new print stream.\n", "method_declar": ""}, {"params": [{"param_name": ["fileName"], "param_type": "String", "param_description": " The name of the file to use as the destination of this print\n         stream.  If the file exists, then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new print stream, without automatic line flushing, with the\n specified file name.  This convenience constructor creates\n the necessary intermediate OutputStreamWriter, which will encode characters using the\n default charset\n for this instance of the Java virtual machine.\n", "method_declar": ""}, {"params": [{"param_name": ["fileName"], "param_type": "String", "param_description": " The name of the file to use as the destination of this print\n         stream.  If the file exists, then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered."}, {"param_name": ["csn"], "param_type": "String", "param_description": " The name of a supported charset"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new print stream, without automatic line flushing, with the\n specified file name and charset.  This convenience constructor creates\n the necessary intermediate OutputStreamWriter, which will encode characters using the provided\n charset.\n", "method_declar": ""}, {"params": [{"param_name": ["file"], "param_type": "File", "param_description": " The file to use as the destination of this print stream.  If the\n         file exists, then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new print stream, without automatic line flushing, with the\n specified file.  This convenience constructor creates the necessary\n intermediate OutputStreamWriter,\n which will encode characters using the default charset for this\n instance of the Java virtual machine.\n", "method_declar": ""}, {"params": [{"param_name": ["file"], "param_type": "File", "param_description": " The file to use as the destination of this print stream.  If the\n         file exists, then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered."}, {"param_name": ["csn"], "param_type": "String", "param_description": " The name of a supported charset"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new print stream, without automatic line flushing, with the\n specified file and charset.  This convenience constructor creates\n the necessary intermediate OutputStreamWriter, which will encode characters using the provided\n charset.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "char", "param_description": " The 16-bit character to append"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["This output stream"], "return_type": ["PrintStream"]}, "method_name": "append", "method_description": "Appends the specified character to this output stream.\n\n \n An invocation of this method of the form out.append(c)\n behaves in exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["csq"], "param_type": "CharSequence", "param_description": " The character sequence from which a subsequence will be\n         appended.  If csq is null, then characters\n         will be appended as if csq contained the four\n         characters \"null\"."}, {"param_name": ["start"], "param_type": "int", "param_description": " The index of the first character in the subsequence"}, {"param_name": ["end"], "param_type": "int", "param_description": " The index of the character following the last character in the\n         subsequence"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["This output stream"], "return_type": ["PrintStream"]}, "method_name": "append", "method_description": "Appends a subsequence of the specified character sequence to this output\n stream.\n\n \n An invocation of this method of the form out.append(csq, start,\n end) when csq is not null, behaves in\n exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["csq"], "param_type": "CharSequence", "param_description": " The character sequence to append.  If csq is\n         null, then the four characters \"null\" are\n         appended to this output stream."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["This output stream"], "return_type": ["PrintStream"]}, "method_name": "append", "method_description": "Appends the specified character sequence to this output stream.\n\n \n An invocation of this method of the form out.append(csq)\n behaves in exactly the same way as the invocation\n\n \n Depending on the specification of toString for the\n character sequence csq, the entire sequence may not be\n appended.  For instance, invoking then toString method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit.\n", "method_declar": ""}, {"params": [], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if this stream has encountered an\n         IOException other than\n         InterruptedIOException, or the\n         setError method has been invoked"], "return_type": ["boolean"]}, "method_name": "checkError", "method_description": "Flushes the stream and checks its error state. The internal error state\n is set to true when the underlying output stream throws an\n IOException other than InterruptedIOException,\n and when the setError method is invoked.  If an operation\n on the underlying output stream throws an\n InterruptedIOException, then the PrintStream\n converts the exception back into an interrupt by doing:\n \n", "method_declar": ""}, {"params": [], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes the stream.  This is done by flushing the stream and then closing\n the underlying output stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "flush", "method_description": "Flushes the stream.  This is done by writing any buffered output bytes to\n the underlying output stream and then flushing that stream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["l"], "param_type": "Locale", "param_description": " The locale to apply during\n         formatting.  If l is null then no localization\n         is applied."}, {"param_name": ["format"], "param_type": "String", "param_description": " A format string as described in Format string syntax"}, {"param_name": ["args"], "param_type": "Object...", "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the conversion."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["This output stream"], "return_type": ["PrintStream"]}, "method_name": "format", "method_description": "Writes a formatted string to this output stream using the specified\n format string and arguments.\n", "method_declar": ""}, {"params": [{"param_name": ["format"], "param_type": "String", "param_description": " A format string as described in Format string syntax"}, {"param_name": ["args"], "param_type": "Object...", "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the conversion."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["This output stream"], "return_type": ["PrintStream"]}, "method_name": "format", "method_description": "Writes a formatted string to this output stream using the specified\n format string and arguments.\n\n \n The locale always used is the one returned by Locale.getDefault(), regardless of any\n previous invocations of other formatting methods on this object.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " The int to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints an integer.  The string produced by String.valueOf(int) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": " The double to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a double-precision floating-point number.  The string produced by\n String.valueOf(double) is translated into\n bytes according to the platform's default character encoding, and these\n bytes are written in exactly the manner of the write(int) method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "boolean", "param_description": " The boolean to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a boolean value.  The string produced by String.valueOf(boolean) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "char", "param_description": " The char to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a character.  The character is translated into one or more bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["l"], "param_type": "long", "param_description": " The long to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a long integer.  The string produced by String.valueOf(long) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "float", "param_description": " The float to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a floating-point number.  The string produced by String.valueOf(float) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " The String to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a string.  If the argument is null then the string\n \"null\" is printed.  Otherwise, the string's characters are\n converted into bytes according to the platform's default character\n encoding, and these bytes are written in exactly the manner of the\n write(int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " The Object to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints an object.  The string produced by the String.valueOf(Object) method is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "char[]", "param_description": " The array of chars to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints an array of characters.  The characters are converted into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["format"], "param_type": "String", "param_description": " A format string as described in Format string syntax"}, {"param_name": ["args"], "param_type": "Object...", "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the conversion."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["This output stream"], "return_type": ["PrintStream"]}, "method_name": "printf", "method_description": "A convenience method to write a formatted string to this output stream\n using the specified format string and arguments.\n\n \n An invocation of this method of the form out.printf(format,\n args) behaves in exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["l"], "param_type": "Locale", "param_description": " The locale to apply during\n         formatting.  If l is null then no localization\n         is applied."}, {"param_name": ["format"], "param_type": "String", "param_description": " A format string as described in Format string syntax"}, {"param_name": ["args"], "param_type": "Object...", "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the conversion."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["This output stream"], "return_type": ["PrintStream"]}, "method_name": "printf", "method_description": "A convenience method to write a formatted string to this output stream\n using the specified format string and arguments.\n\n \n An invocation of this method of the form out.printf(l, format,\n args) behaves in exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "Object", "param_description": " The Object to be printed."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints an Object and then terminate the line.  This method calls\n at first String.valueOf(x) to get the printed object's string value,\n then behaves as\n though it invokes print(java.lang.String) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "char", "param_description": " The char to be printed."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a character and then terminate the line.  This method behaves as\n though it invokes print(char) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "boolean", "param_description": " The boolean to be printed"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a boolean and then terminate the line.  This method behaves as\n though it invokes print(boolean) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "long", "param_description": " a The long to be printed."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a long and then terminate the line.  This method behaves as\n though it invokes print(long) and then\n println().\n", "method_declar": ""}, {"params": [], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Terminates the current line by writing the line separator string.  The\n line separator string is defined by the system property\n line.separator, and is not necessarily a single newline\n character ('\\n').\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "int", "param_description": " The int to be printed."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints an integer and then terminate the line.  This method behaves as\n though it invokes print(int) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "String", "param_description": " The String to be printed."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a String and then terminate the line.  This method behaves as\n though it invokes print(java.lang.String) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "char[]", "param_description": " an array of chars to print."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints an array of characters and then terminate the line.  This method\n behaves as though it invokes print(char[]) and\n then println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "float", "param_description": " The float to be printed."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a float and then terminate the line.  This method behaves as\n though it invokes print(float) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "double", "param_description": " The double to be printed."}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a double and then terminate the line.  This method behaves as\n though it invokes print(double) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " A byte array"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset from which to start taking bytes"}, {"param_name": ["len"], "param_type": "int", "param_description": " Number of bytes to write"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes len bytes from the specified byte array starting at\n offset off to this stream.  If automatic flushing is\n enabled then the flush method will be invoked.\n\n \n Note that the bytes will be written as given; to write characters\n that will be translated according to the platform's default character\n encoding, use the print(char) or println(char)\n methods.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "int", "param_description": " The byte to be written"}], "class_name": "PrintStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes the specified byte to this stream.  If the byte is a newline and\n automatic flushing is enabled then the flush method will be\n invoked.\n\n \n Note that the byte is written as given; to write a character that\n will be translated according to the platform's default character\n encoding, use the print(char) or println(char)\n methods.\nSee also:\n", "method_declar": ""}], "class_name": "PrintStream", "Vars": null}