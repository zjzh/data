{"package_name": "java.io", "subclass_list": [], "class_description": "Prints formatted representations of objects to a text-output stream.  This\n class implements all of the print methods found in PrintStream.  It does not contain methods for writing raw bytes, for which\n a program should use unencoded byte streams. Unlike the PrintStream class, if automatic flushing is enabled\n it will be done only when one of the println, printf, or\n format methods is invoked, rather than whenever a newline character\n happens to be output.  These methods use the platform's own notion of line\n separator rather than the newline character. Methods in this class never throw I/O exceptions, although some of its\n constructors may.  The client may inquire as to whether any errors have\n occurred by invoking checkError(). ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Writer"], "Methods": [{"params": [{"param_name": ["out"], "param_type": "Writer", "param_description": " A character-output stream"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new PrintWriter, without automatic line flushing.\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "Writer", "param_description": " A character-output stream"}, {"param_name": ["autoFlush"], "param_type": "boolean", "param_description": " A boolean; if true, the println,\n                    printf, or format methods will\n                    flush the output buffer"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new PrintWriter.\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " An output stream"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new PrintWriter, without automatic line flushing, from an\n existing OutputStream.  This convenience constructor creates the\n necessary intermediate OutputStreamWriter, which will convert characters\n into bytes using the default character encoding.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " An output stream"}, {"param_name": ["autoFlush"], "param_type": "boolean", "param_description": " A boolean; if true, the println,\n                    printf, or format methods will\n                    flush the output buffer"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new PrintWriter from an existing OutputStream.  This\n convenience constructor creates the necessary intermediate\n OutputStreamWriter, which will convert characters into bytes using the\n default character encoding.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["fileName"], "param_type": "String", "param_description": " The name of the file to use as the destination of this writer.\n         If the file exists then it will be truncated to zero size;\n         otherwise, a new file will be created.  The output will be\n         written to the file and is buffered."}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new PrintWriter, without automatic line flushing, with the\n specified file name.  This convenience constructor creates the necessary\n intermediate OutputStreamWriter,\n which will encode characters using the default charset for this\n instance of the Java virtual machine.\n", "method_declar": ""}, {"params": [{"param_name": ["fileName"], "param_type": "String", "param_description": " The name of the file to use as the destination of this writer.\n         If the file exists then it will be truncated to zero size;\n         otherwise, a new file will be created.  The output will be\n         written to the file and is buffered."}, {"param_name": ["csn"], "param_type": "String", "param_description": " The name of a supported charset"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new PrintWriter, without automatic line flushing, with the\n specified file name and charset.  This convenience constructor creates\n the necessary intermediate OutputStreamWriter, which will encode characters using the provided\n charset.\n", "method_declar": ""}, {"params": [{"param_name": ["file"], "param_type": "File", "param_description": " The file to use as the destination of this writer.  If the file\n         exists then it will be truncated to zero size; otherwise, a new\n         file will be created.  The output will be written to the file\n         and is buffered."}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new PrintWriter, without automatic line flushing, with the\n specified file.  This convenience constructor creates the necessary\n intermediate OutputStreamWriter,\n which will encode characters using the default charset for this\n instance of the Java virtual machine.\n", "method_declar": ""}, {"params": [{"param_name": ["file"], "param_type": "File", "param_description": " The file to use as the destination of this writer.  If the file\n         exists then it will be truncated to zero size; otherwise, a new\n         file will be created.  The output will be written to the file\n         and is buffered."}, {"param_name": ["csn"], "param_type": "String", "param_description": " The name of a supported charset"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new PrintWriter, without automatic line flushing, with the\n specified file and charset.  This convenience constructor creates the\n necessary intermediate OutputStreamWriter, which will encode characters using the provided\n charset.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "char", "param_description": " The 16-bit character to append"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["PrintWriter"]}, "method_name": "append", "method_description": "Appends the specified character to this writer.\n\n \n An invocation of this method of the form out.append(c)\n behaves in exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["csq"], "param_type": "CharSequence", "param_description": " The character sequence from which a subsequence will be\n         appended.  If csq is null, then characters\n         will be appended as if csq contained the four\n         characters \"null\"."}, {"param_name": ["start"], "param_type": "int", "param_description": " The index of the first character in the subsequence"}, {"param_name": ["end"], "param_type": "int", "param_description": " The index of the character following the last character in the\n         subsequence"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["PrintWriter"]}, "method_name": "append", "method_description": "Appends a subsequence of the specified character sequence to this writer.\n\n \n An invocation of this method of the form out.append(csq, start,\n end) when csq is not null, behaves in\n exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["csq"], "param_type": "CharSequence", "param_description": " The character sequence to append.  If csq is\n         null, then the four characters \"null\" are\n         appended to this writer."}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["PrintWriter"]}, "method_name": "append", "method_description": "Appends the specified character sequence to this writer.\n\n \n An invocation of this method of the form out.append(csq)\n behaves in exactly the same way as the invocation\n\n \n Depending on the specification of toString for the\n character sequence csq, the entire sequence may not be\n appended. For instance, invoking the toString method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit.\n", "method_declar": ""}, {"params": [], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the print stream has encountered an error,\n          either on the underlying output stream or during a format\n          conversion."], "return_type": ["boolean"]}, "method_name": "checkError", "method_description": "Flushes the stream if it's not closed and checks its error state.\n", "method_declar": ""}, {"params": [], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes the stream and releases any system resources associated\n with it. Closing a previously closed stream has no effect.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "flush", "method_description": "Flushes the stream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["l"], "param_type": "Locale", "param_description": " The locale to apply during\n         formatting.  If l is null then no localization\n         is applied."}, {"param_name": ["format"], "param_type": "String", "param_description": " A format string as described in Format string syntax."}, {"param_name": ["args"], "param_type": "Object...", "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the conversion."}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["PrintWriter"]}, "method_name": "format", "method_description": "Writes a formatted string to this writer using the specified format\n string and arguments.  If automatic flushing is enabled, calls to this\n method will flush the output buffer.\n", "method_declar": ""}, {"params": [{"param_name": ["format"], "param_type": "String", "param_description": " A format string as described in Format string syntax."}, {"param_name": ["args"], "param_type": "Object...", "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the conversion."}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["PrintWriter"]}, "method_name": "format", "method_description": "Writes a formatted string to this writer using the specified format\n string and arguments.  If automatic flushing is enabled, calls to this\n method will flush the output buffer.\n\n \n The locale always used is the one returned by Locale.getDefault(), regardless of any\n previous invocations of other formatting methods on this object.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " The int to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints an integer.  The string produced by String.valueOf(int) is translated into bytes according\n to the platform's default character encoding, and these bytes are\n written in exactly the manner of the write(int)\n method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": " The double to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a double-precision floating-point number.  The string produced by\n String.valueOf(double) is translated into\n bytes according to the platform's default character encoding, and these\n bytes are written in exactly the manner of the write(int) method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "boolean", "param_description": " The boolean to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a boolean value.  The string produced by String.valueOf(boolean) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the write(int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "char", "param_description": " The char to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a character.  The character is translated into one or more bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the write(int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["l"], "param_type": "long", "param_description": " The long to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a long integer.  The string produced by String.valueOf(long) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the write(int)\n method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "float", "param_description": " The float to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a floating-point number.  The string produced by String.valueOf(float) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the write(int)\n method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " The String to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints a string.  If the argument is null then the string\n \"null\" is printed.  Otherwise, the string's characters are\n converted into bytes according to the platform's default character\n encoding, and these bytes are written in exactly the manner of the\n write(int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " The Object to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints an object.  The string produced by the String.valueOf(Object) method is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the write(int)\n method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "char[]", "param_description": " The array of chars to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "print", "method_description": "Prints an array of characters.  The characters are converted into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the write(int)\n method.\n", "method_declar": ""}, {"params": [{"param_name": ["format"], "param_type": "String", "param_description": " A format string as described in Format string syntax."}, {"param_name": ["args"], "param_type": "Object...", "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the conversion."}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["PrintWriter"]}, "method_name": "printf", "method_description": "A convenience method to write a formatted string to this writer using\n the specified format string and arguments.  If automatic flushing is\n enabled, calls to this method will flush the output buffer.\n\n \n An invocation of this method of the form out.printf(format,\n args) behaves in exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["l"], "param_type": "Locale", "param_description": " The locale to apply during\n         formatting.  If l is null then no localization\n         is applied."}, {"param_name": ["format"], "param_type": "String", "param_description": " A format string as described in Format string syntax."}, {"param_name": ["args"], "param_type": "Object...", "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the conversion."}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["PrintWriter"]}, "method_name": "printf", "method_description": "A convenience method to write a formatted string to this writer using\n the specified format string and arguments.  If automatic flushing is\n enabled, calls to this method will flush the output buffer.\n\n \n An invocation of this method of the form out.printf(l, format,\n args) behaves in exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "Object", "param_description": " The Object to be printed."}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints an Object and then terminates the line.  This method calls\n at first String.valueOf(x) to get the printed object's string value,\n then behaves as\n though it invokes print(java.lang.String) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "char", "param_description": " the char value to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a character and then terminates the line.  This method behaves as\n though it invokes print(char) and then println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "boolean", "param_description": " the boolean value to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a boolean value and then terminates the line.  This method behaves\n as though it invokes print(boolean) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "long", "param_description": " the long value to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a long integer and then terminates the line.  This method behaves\n as though it invokes print(long) and then\n println().\n", "method_declar": ""}, {"params": [], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Terminates the current line by writing the line separator string.  The\n line separator string is defined by the system property\n line.separator, and is not necessarily a single newline\n character ('\\n').\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "int", "param_description": " the int value to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints an integer and then terminates the line.  This method behaves as\n though it invokes print(int) and then println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "String", "param_description": " the String value to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a String and then terminates the line.  This method behaves as\n though it invokes print(java.lang.String) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "char[]", "param_description": " the array of char values to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints an array of characters and then terminates the line.  This method\n behaves as though it invokes print(char[]) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "float", "param_description": " the float value to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a floating-point number and then terminates the line.  This method\n behaves as though it invokes print(float) and then\n println().\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "double", "param_description": " the double value to be printed"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "println", "method_description": "Prints a double-precision floating-point number and then terminates the\n line.  This method behaves as though it invokes print(double) and then println().\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "int", "param_description": " int specifying a character to be written."}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes a single character.\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "char[]", "param_description": " Array of characters"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset from which to start writing characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Number of characters to write"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes A Portion of an array of characters.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " String to be written"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes a string.  This method cannot be inherited from the Writer class\n because it must suppress I/O exceptions.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " A String"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset from which to start writing characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Number of characters to write"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes a portion of a string.\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "char[]", "param_description": " Array of characters to be written"}], "class_name": "PrintWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes an array of characters.  This method cannot be inherited from the\n Writer class because it must suppress I/O exceptions.\n", "method_declar": ""}], "class_name": "PrintWriter", "Vars": null}