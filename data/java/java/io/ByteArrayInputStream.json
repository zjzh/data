{"package_name": "java.io", "subclass_list": [], "class_description": "A ByteArrayInputStream contains\n an internal buffer that contains bytes that\n may be read from the stream. An internal\n counter keeps track of the next byte to\n be supplied by the read method. Closing a ByteArrayInputStream has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an IOException. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["InputStream"], "Methods": [{"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " the input buffer."}], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a ByteArrayInputStream\n so that it  uses buf as its\n buffer array.\n The buffer array is not copied.\n The initial value of pos\n is 0 and the initial value\n of  count is the length of\n buf.\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "byte[]", "param_description": " the input buffer."}, {"param_name": ["offset"], "param_type": "int", "param_description": " the offset in the buffer of the first byte to read."}, {"param_name": ["length"], "param_type": "int", "param_description": " the maximum number of bytes to read from the buffer."}], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates ByteArrayInputStream\n that uses buf as its\n buffer array. The initial value of pos\n is offset and the initial value\n of count is the minimum of offset+length\n and buf.length.\n The buffer array is not copied. The buffer's mark is\n set to the specified offset.\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of remaining bytes that can be read (or skipped\n          over) from this input stream without blocking."], "return_type": ["int"]}, "method_name": "available", "method_description": "Returns the number of remaining bytes that can be read (or skipped over)\n from this input stream.\n \n\n The value returned is count\u00a0- pos,\n which is the number of bytes remaining to be read from the input buffer.\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closing a ByteArrayInputStream has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an IOException.\n", "method_declar": ""}, {"params": [{"param_name": ["readAheadLimit"], "param_type": "int", "param_description": " the maximum limit of bytes that can be read before\n                      the mark position becomes invalid."}], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "Set the current marked position in the stream.\n ByteArrayInputStream objects are marked at position zero by\n default when constructed.  They may be marked at another\n position within the buffer by this method.\n \n\n If no mark has been set, then the value of the mark is the\n offset passed to the constructor (or 0 if the offset was not\n supplied).\n\n \n Note: The readAheadLimit for this class\n  has no meaning.\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this stream instance supports the mark\n          and reset methods; false otherwise."], "return_type": ["boolean"]}, "method_name": "markSupported", "method_description": "Tests if this InputStream supports mark/reset. The\n markSupported method of ByteArrayInputStream\n always returns true.\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of data, or -1 if the end of the\n          stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads the next byte of data from this input stream. The value\n byte is returned as an int in the range\n 0 to 255. If no byte is available\n because the end of the stream has been reached, the value\n -1 is returned.\n \n\n This read method\n cannot block.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the destination array b"}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes read."}], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n          -1 if there is no more data because the end of\n          the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to len bytes of data into an array of bytes\n from this input stream.\n If pos equals count,\n then -1 is returned to indicate\n end of file. Otherwise, the  number k\n of bytes read is equal to the smaller of\n len and count-pos.\n If k is positive, then bytes\n buf[pos] through buf[pos+k-1]\n are copied into b[off]  through\n b[off+k-1] in the manner performed\n by System.arraycopy. The\n value k is added into pos\n and k is returned.\n \n\n This read method cannot block.\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets the buffer to the marked position.  The marked position\n is 0 unless another position was marked or an offset was specified\n in the constructor.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " the number of bytes to be skipped."}], "class_name": "ByteArrayInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes skipped."], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skips n bytes of input from this input stream. Fewer\n bytes might be skipped if the end of the input stream is reached.\n The actual number k\n of bytes to be skipped is equal to the smaller\n of n and  count-pos.\n The value k is added into pos\n and k is returned.\n", "method_declar": ""}], "class_name": "ByteArrayInputStream", "Vars": null}