{"package_name": "java.io", "subclass_list": [], "class_description": "This class implements an output stream in which the data is\n written into a byte array. The buffer automatically grows as data\n is written to it.\n The data can be retrieved using toByteArray() and\n toString(). Closing a ByteArrayOutputStream has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an IOException. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["OutputStream"], "Methods": [{"params": [], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new byte array output stream. The buffer capacity is\n initially 32 bytes, though its size increases if necessary.\n", "method_declar": ""}, {"params": [{"param_name": ["size"], "param_type": "int", "param_description": " the initial size."}], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new byte array output stream, with a buffer capacity of\n the specified size, in bytes.\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closing a ByteArrayOutputStream has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an IOException.\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets the count field of this byte array output\n stream to zero, so that all currently accumulated output in the\n output stream is discarded. The output stream can be used again,\n reusing the already allocated buffer space.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value of the count field, which is the number\n          of valid bytes in this output stream."], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the current size of the buffer.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current contents of this output stream, as a byte array."], "return_type": ["byte[]"]}, "method_name": "toByteArray", "method_description": "Creates a newly allocated byte array. Its size is the current\n size of this output stream and the valid contents of the buffer\n have been copied into it.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["charsetName"], "param_type": "String", "param_description": " the name of a supported\n             charset"}], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["String decoded from the buffer's contents."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Converts the buffer's contents into a string by decoding the bytes using\n the named charset. The length of the new\n String is a function of the charset, and hence may not be equal\n to the length of the byte array.\n\n \n This method always replaces malformed-input and unmappable-character\n sequences with this charset's default replacement string. The CharsetDecoder class should be used when more control\n over the decoding process is required.\n", "method_declar": ""}, {"params": [], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["String decoded from the buffer's contents."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Converts the buffer's contents into a string decoding bytes using the\n platform's default character set. The length of the new String\n is a function of the character set, and hence may not be equal to the\n size of the buffer.\n\n \n This method always replaces malformed-input and unmappable-character\n sequences with the default replacement string for the platform's\n default character set. The CharsetDecoder\n class should be used when more control over the decoding process is\n required.\n", "method_declar": ""}, {"params": [{"param_name": ["hibyte"], "param_type": "int", "param_description": " the high byte of each resulting Unicode character."}], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current contents of the output stream, as a string."], "return_type": ["String"]}, "method_name": "toString", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    This method does not properly convert bytes into characters.\n As of JDK\u00a01.1, the preferred way to do this is via the\n toString(String enc) method, which takes an encoding-name\n argument, or the toString() method, which uses the\n platform's default character encoding.\n  \nCreates a newly allocated string. Its size is the current size of\n the output stream and the valid contents of the buffer have been\n copied into it. Each character c in the resulting string is\n constructed from the corresponding element b in the byte\n array such that:\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the data."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the data."}, {"param_name": ["len"], "param_type": "int", "param_description": " the number of bytes to write."}], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes len bytes from the specified byte array\n starting at offset off to this byte array output stream.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "int", "param_description": " the byte to be written."}], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes the specified byte to this byte array output stream.\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " the output stream to which to write the data."}], "class_name": "ByteArrayOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeTo", "method_description": "Writes the complete contents of this byte array output stream to\n the specified output stream argument, as if by calling the output\n stream's write method using out.write(buf, 0, count).\n", "method_declar": ""}], "class_name": "ByteArrayOutputStream", "Vars": null}