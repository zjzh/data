{"package_name": "java.io", "subclass_list": [], "class_description": "A data input stream lets an application read primitive Java data\n types from an underlying input stream in a machine-independent\n way. An application uses a data output stream to write data that\n can later be read by a data input stream. DataInputStream is not necessarily safe for multithreaded access.\n Thread safety is optional and is the responsibility of users of\n methods in this class. ", "class_type": "class", "typealias": [], "interface_list": ["DataInput"], "class_inherit_list": ["FilterInputStream"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " the specified input stream"}], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a DataInputStream that uses the specified\n underlying InputStream.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end\n             of the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads some number of bytes from the contained input stream and\n stores them into the buffer array b. The number of\n bytes actually read is returned as an integer. This method blocks\n until input data is available, end of file is detected, or an\n exception is thrown.\n\n \nIf b is null, a NullPointerException is\n thrown. If the length of b is zero, then no bytes are\n read and 0 is returned; otherwise, there is an attempt\n to read at least one byte. If no byte is available because the\n stream is at end of file, the value -1 is returned;\n otherwise, at least one byte is read and stored into b.\n\n \nThe first byte read is stored into element b[0], the\n next one into b[1], and so on. The number of bytes read\n is, at most, equal to the length of b. Let k\n be the number of bytes actually read; these bytes will be stored in\n elements b[0] through b[k-1], leaving\n elements b[k] through b[b.length-1]\n unaffected.\n\n \nThe read(b) method has the same effect as:\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the destination array b"}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes read."}], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end\n             of the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to len bytes of data from the contained\n input stream into an array of bytes.  An attempt is made to read\n as many as len bytes, but a smaller number may be read,\n possibly zero. The number of bytes actually read is returned as an\n integer.\n\n \n This method blocks until input data is available, end of file is\n detected, or an exception is thrown.\n\n \n If len is zero, then no bytes are read and\n 0 is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at end of\n file, the value -1 is returned; otherwise, at least one\n byte is read and stored into b.\n\n \n The first byte read is stored into element b[off], the\n next one into b[off+1], and so on. The number of bytes read\n is, at most, equal to len. Let k be the number of\n bytes actually read; these bytes will be stored in elements\n b[off] through b[off+k-1],\n leaving elements b[off+k] through\n b[off+len-1] unaffected.\n\n \n In every case, elements b[0] through\n b[off] and elements b[off+len] through\n b[b.length-1] are unaffected.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the boolean value read."], "return_type": ["boolean"]}, "method_name": "readBoolean", "method_description": "See the general contract of the readBoolean\n method of DataInput.\n \n\n Bytes for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of this input stream as a signed 8-bit\n             byte."], "return_type": ["byte"]}, "method_name": "readByte", "method_description": "See the general contract of the readByte\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next two bytes of this input stream, interpreted as a\n             char."], "return_type": ["char"]}, "method_name": "readChar", "method_description": "See the general contract of the readChar\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next eight bytes of this input stream, interpreted as a\n             double."], "return_type": ["double"]}, "method_name": "readDouble", "method_description": "See the general contract of the readDouble\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next four bytes of this input stream, interpreted as a\n             float."], "return_type": ["float"]}, "method_name": "readFloat", "method_description": "See the general contract of the readFloat\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "readFully", "method_description": "See the general contract of the readFully\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data."}, {"param_name": ["len"], "param_type": "int", "param_description": " the number of bytes to read."}], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "readFully", "method_description": "See the general contract of the readFully\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next four bytes of this input stream, interpreted as an\n             int."], "return_type": ["int"]}, "method_name": "readInt", "method_description": "See the general contract of the readInt\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next line of text from this input stream."], "return_type": ["String"]}, "method_name": "readLine", "method_description": "\n\n\n      This method is deprecated.\n    This method does not properly convert bytes to characters.\n As of JDK\u00a01.1, the preferred way to read lines of text is via the\n BufferedReader.readLine() method.  Programs that use the\n DataInputStream class to read lines can be converted to use\n the BufferedReader class by replacing code of the form:\n \nSee the general contract of the readLine\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next eight bytes of this input stream, interpreted as a\n             long."], "return_type": ["long"]}, "method_name": "readLong", "method_description": "See the general contract of the readLong\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next two bytes of this input stream, interpreted as a\n             signed 16-bit number."], "return_type": ["short"]}, "method_name": "readShort", "method_description": "See the general contract of the readShort\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Unicode string."], "return_type": ["String"]}, "method_name": "readUTF", "method_description": "See the general contract of the readUTF\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "DataInput", "param_description": " a data input stream."}], "class_name": "DataInputStream", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Unicode string."], "return_type": ["String"]}, "method_name": "readUTF", "method_description": "Reads from the\n stream in a representation\n of a Unicode  character string encoded in\n modified UTF-8 format;\n this string of characters is then returned as a String.\n The details of the modified UTF-8 representation\n are  exactly the same as for the readUTF\n method of DataInput.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of this input stream, interpreted as an\n             unsigned 8-bit number."], "return_type": ["int"]}, "method_name": "readUnsignedByte", "method_description": "See the general contract of the readUnsignedByte\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next two bytes of this input stream, interpreted as an\n             unsigned 16-bit integer."], "return_type": ["int"]}, "method_name": "readUnsignedShort", "method_description": "See the general contract of the readUnsignedShort\n method of DataInput.\n \n\n Bytes\n for this operation are read from the contained\n input stream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "int", "param_description": " the number of bytes to be skipped."}], "class_name": "DataInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes skipped."], "return_type": ["int"]}, "method_name": "skipBytes", "method_description": "See the general contract of the skipBytes\n method of DataInput.\n \n\n Bytes for this operation are read from the contained\n input stream.\n", "method_declar": ""}], "class_name": "DataInputStream", "Vars": null}