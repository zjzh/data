{"package_name": "java.io", "subclass_list": ["LineNumberReader", "LineNumberReader"], "class_description": "Reads text from a character-input stream, buffering characters so as to\n provide for the efficient reading of characters, arrays, and lines. The buffer size may be specified, or the default size may be used.  The\n default is large enough for most purposes. In general, each read request made of a Reader causes a corresponding\n read request to be made of the underlying character or byte stream.  It is\n therefore advisable to wrap a BufferedReader around any Reader whose read()\n operations may be costly, such as FileReaders and InputStreamReaders.  For\n example, Programs that use DataInputStreams for textual input can be localized by\n replacing each DataInputStream with an appropriate BufferedReader. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Reader"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "Reader", "param_description": " A Reader"}, {"param_name": ["sz"], "param_type": "int", "param_description": " Input-buffer size"}], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a buffering character-input stream that uses an input buffer of\n the specified size.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "Reader", "param_description": " A Reader"}], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a buffering character-input stream that uses a default-sized\n input buffer.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes the stream and releases any system resources associated with\n it.  Once the stream has been closed, further read(), ready(),\n mark(), reset(), or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Stream<String> providing the lines of text\n         described by this BufferedReader"], "return_type": ["Stream<String>"]}, "method_name": "lines", "method_description": "Returns a Stream, the elements of which are lines read from\n this BufferedReader.  The Stream is lazily populated,\n i.e., read only occurs during the\n terminal\n stream operation.\n\n \n The reader must not be operated on during the execution of the\n terminal stream operation. Otherwise, the result of the terminal stream\n operation is undefined.\n\n \n After execution of the terminal stream operation there are no\n guarantees that the reader will be at a specific position from which to\n read the next character or line.\n\n \n If an IOException is thrown when accessing the underlying\n BufferedReader, it is wrapped in an UncheckedIOException which will be thrown from the Stream\n method that caused the read to take place. This method will return a\n Stream if invoked on a BufferedReader that is closed. Any operation on\n that stream that requires reading from the BufferedReader after it is\n closed, will cause an UncheckedIOException to be thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["readAheadLimit"], "param_type": "int", "param_description": " Limit on the number of characters that may be\n                         read while still preserving the mark. An attempt\n                         to reset the stream after reading characters\n                         up to this limit or beyond may fail.\n                         A limit value larger than the size of the input\n                         buffer will cause a new buffer to be allocated\n                         whose size is no smaller than limit.\n                         Therefore large values should be used with care."}], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "Marks the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if this stream supports the mark operation."], "return_type": ["boolean"]}, "method_name": "markSupported", "method_description": "Tells whether this stream supports the mark() operation, which it does.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The character read, as an integer in the range\n         0 to 65535 (0x00-0xffff), or -1 if the\n         end of the stream has been reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads a single character.\n", "method_declar": ""}, {"params": [{"param_name": ["cbuf"], "param_type": "char[]", "param_description": " Destination buffer"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset at which to start storing characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Maximum number of characters to read"}], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The number of characters read, or -1 if the end of the\n             stream has been reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads characters into a portion of an array.\n\n \n This method implements the general contract of the corresponding\n Reader#read(char[], int, int) method of the\n Reader class.  As an additional convenience, it\n attempts to read as many characters as possible by repeatedly invoking\n the read method of the underlying stream.  This iterated\n read continues until one of the following conditions becomes\n true: \n Subclasses of this class are encouraged, but not required, to\n attempt to read as many characters as possible in the same fashion.\n\n \n Ordinarily this method takes characters from this stream's character\n buffer, filling it from the underlying stream as necessary.  If,\n however, the buffer is empty, the mark is not valid, and the requested\n length is at least as large as the buffer, then this method will read\n characters directly from the underlying stream into the given array.\n Thus redundant BufferedReaders will not copy data\n unnecessarily.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["A String containing the contents of the line, not including\n             any line-termination characters, or null if the end of the\n             stream has been reached"], "return_type": ["String"]}, "method_name": "readLine", "method_description": "Reads a line of text.  A line is considered to be terminated by any one\n of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return\n followed immediately by a linefeed.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["True if the next read() is guaranteed not to block for input,\n false otherwise.  Note that returning false does not guarantee that the\n next read will block."], "return_type": ["boolean"]}, "method_name": "ready", "method_description": "Tells whether this stream is ready to be read.  A buffered character\n stream is ready if the buffer is not empty, or if the underlying\n character stream is ready.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets the stream to the most recent mark.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " The number of characters to skip"}], "class_name": "BufferedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The number of characters actually skipped"], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skips characters.\n", "method_declar": ""}], "class_name": "BufferedReader", "Vars": null}