{"package_name": "java.io", "subclass_list": [], "class_description": "This class implements a character buffer that can be used as a\n character-input stream. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Reader"], "Methods": [{"params": [{"param_name": ["buf"], "param_type": "char[]", "param_description": " Input buffer (not copied)"}], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a CharArrayReader from the specified array of chars.\n", "method_declar": ""}, {"params": [{"param_name": ["buf"], "param_type": "char[]", "param_description": " Input buffer (not copied)"}, {"param_name": ["offset"], "param_type": "int", "param_description": " Offset of the first char to read"}, {"param_name": ["length"], "param_type": "int", "param_description": " Number of chars to read"}], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a CharArrayReader from the specified array of chars.\n\n \n The resulting reader will start reading at the given\n offset.  The total number of char values that can be\n read from this reader will be either length or\n buf.length-offset, whichever is smaller.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes the stream and releases any system resources associated with\n it.  Once the stream has been closed, further read(), ready(),\n mark(), reset(), or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n", "method_declar": ""}, {"params": [{"param_name": ["readAheadLimit"], "param_type": "int", "param_description": " Limit on the number of characters that may be\n                         read while still preserving the mark.  Because\n                         the stream's input comes from a character array,\n                         there is no actual limit; hence this argument is\n                         ignored."}], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "Marks the present position in the stream.  Subsequent calls to reset()\n will reposition the stream to this point.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if this stream supports the mark operation."], "return_type": ["boolean"]}, "method_name": "markSupported", "method_description": "Tells whether this stream supports the mark() operation, which it does.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The character read, as an integer in the range 0 to 65535\n             (0x00-0xffff), or -1 if the end of the stream has\n             been reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads a single character.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "char[]", "param_description": " Destination buffer"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset at which to start storing characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Maximum number of characters to read"}], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The actual number of characters read, or -1 if\n          the end of the stream has been reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads characters into a portion of an array.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["True if the next read() is guaranteed not to block for input,\n false otherwise.  Note that returning false does not guarantee that the\n next read will block."], "return_type": ["boolean"]}, "method_name": "ready", "method_description": "Tells whether this stream is ready to be read.  Character-array readers\n are always ready to be read.\n", "method_declar": ""}, {"params": [], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets the stream to the most recent mark, or to the beginning if it has\n never been marked.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " The number of characters to skip"}], "class_name": "CharArrayReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The number of characters actually skipped"], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skips characters.  Returns the number of characters that were skipped.\n\n \nThe n parameter may be negative, even though the\n skip method of the Reader superclass throws\n an exception in this case. If n is negative, then\n this method does nothing and returns 0.\n", "method_declar": ""}], "class_name": "CharArrayReader", "Vars": null}