{"package_name": "java.io", "subclass_list": [], "class_description": "Instances of the file descriptor class serve as an opaque handle\n to the underlying machine-specific structure representing an open\n file, an open socket, or another source or sink of bytes. The\n main practical use for a file descriptor is to create a\n FileInputStream or FileOutputStream to\n contain it. Applications should not create their own file descriptors. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "FileDescriptor", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an (invalid) FileDescriptor\n object.\n", "method_declar": ""}, {"params": [], "class_name": "FileDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "sync", "method_description": "Force all system buffers to synchronize with the underlying\n device.  This method returns after all modified data and\n attributes of this FileDescriptor have been written to the\n relevant device(s).  In particular, if this FileDescriptor\n refers to a physical storage medium, such as a file in a file\n system, sync will not return until all in-memory modified copies\n of buffers associated with this FileDescriptor have been\n written to the physical medium.\n\n sync is meant to be used by code that requires physical\n storage (such as a file) to be in a known state  For\n example, a class that provided a simple transaction facility\n might use sync to ensure that all changes to a file caused\n by a given transaction were recorded on a storage medium.\n\n sync only affects buffers downstream of this FileDescriptor.  If\n any in-memory buffering is being done by the application (for\n example, by a BufferedOutputStream object), those buffers must\n be flushed into the FileDescriptor (for example, by invoking\n OutputStream.flush) before that data will be affected by sync.\n", "method_declar": ""}, {"params": [], "class_name": "FileDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the file descriptor object represents a\n          valid, open file, socket, or other active I/O connection;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "valid", "method_description": "Tests if this file descriptor object is valid.\n", "method_declar": ""}], "class_name": "FileDescriptor", "Vars": null}