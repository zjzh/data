{"package_name": "java.io", "subclass_list": [], "class_description": "A character stream that collects its output in a string buffer, which can\n then be used to construct a string. Closing a StringWriter has no effect. The methods in this class\n can be called after the stream has been closed without generating an\n IOException. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Writer"], "Methods": [{"params": [], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a new string writer using the default initial string-buffer\n size.\n", "method_declar": ""}, {"params": [{"param_name": ["initialSize"], "param_type": "int", "param_description": " The number of char values that will fit into this buffer\n        before it is automatically expanded"}], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a new string writer using the specified initial string-buffer\n size.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "char", "param_description": " The 16-bit character to append"}], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["StringWriter"]}, "method_name": "append", "method_description": "Appends the specified character to this writer.\n\n \n An invocation of this method of the form out.append(c)\n behaves in exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["csq"], "param_type": "CharSequence", "param_description": " The character sequence from which a subsequence will be\n         appended.  If csq is null, then characters\n         will be appended as if csq contained the four\n         characters \"null\"."}, {"param_name": ["start"], "param_type": "int", "param_description": " The index of the first character in the subsequence"}, {"param_name": ["end"], "param_type": "int", "param_description": " The index of the character following the last character in the\n         subsequence"}], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["StringWriter"]}, "method_name": "append", "method_description": "Appends a subsequence of the specified character sequence to this writer.\n\n \n An invocation of this method of the form out.append(csq, start,\n end) when csq is not null, behaves in\n exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["csq"], "param_type": "CharSequence", "param_description": " The character sequence to append.  If csq is\n         null, then the four characters \"null\" are\n         appended to this writer."}], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["This writer"], "return_type": ["StringWriter"]}, "method_name": "append", "method_description": "Appends the specified character sequence to this writer.\n\n \n An invocation of this method of the form out.append(csq)\n behaves in exactly the same way as the invocation\n\n \n Depending on the specification of toString for the\n character sequence csq, the entire sequence may not be\n appended. For instance, invoking the toString method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit.\n", "method_declar": ""}, {"params": [], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closing a StringWriter has no effect. The methods in this\n class can be called after the stream has been closed without generating\n an IOException.\n", "method_declar": ""}, {"params": [], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "flush", "method_description": "Flush the stream.\n", "method_declar": ""}, {"params": [], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["StringBuffer holding the current buffer value."], "return_type": ["StringBuffer"]}, "method_name": "getBuffer", "method_description": "Return the string buffer itself.\n", "method_declar": ""}, {"params": [], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Return the buffer's current value as a string.\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": " String to be written"}], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Write a string.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "int", "param_description": " int specifying a character to be written"}], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Write a single character.\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": " String to be written"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset from which to start writing characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Number of characters to write"}], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Write a portion of a string.\n", "method_declar": ""}, {"params": [{"param_name": ["cbuf"], "param_type": "char[]", "param_description": " Array of characters"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset from which to start writing characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Number of characters to write"}], "class_name": "StringWriter", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Write a portion of an array of characters.\n", "method_declar": ""}], "class_name": "StringWriter", "Vars": null}