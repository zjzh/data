{"package_name": "java.io", "subclass_list": ["FileReader", "FileReader"], "class_description": "An InputStreamReader is a bridge from byte streams to character streams: It\n reads bytes and decodes them into characters using a specified charset.  The charset that it uses\n may be specified by name or may be given explicitly, or the platform's\n default charset may be accepted. Each invocation of one of an InputStreamReader's read() methods may\n cause one or more bytes to be read from the underlying byte-input stream.\n To enable the efficient conversion of bytes to characters, more bytes may\n be read ahead from the underlying stream than are necessary to satisfy the\n current read operation. For top efficiency, consider wrapping an InputStreamReader within a\n BufferedReader.  For example: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Reader"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " An InputStream"}], "class_name": "InputStreamReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an InputStreamReader that uses the default charset.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " An InputStream"}, {"param_name": ["charsetName"], "param_type": "String", "param_description": " The name of a supported\n         charset"}], "class_name": "InputStreamReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an InputStreamReader that uses the named charset.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " An InputStream"}, {"param_name": ["cs"], "param_type": "Charset", "param_description": " A charset"}], "class_name": "InputStreamReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an InputStreamReader that uses the given charset.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " An InputStream"}, {"param_name": ["dec"], "param_type": "CharsetDecoder", "param_description": " A charset decoder"}], "class_name": "InputStreamReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an InputStreamReader that uses the given charset decoder.\n", "method_declar": ""}, {"params": [], "class_name": "InputStreamReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes the stream and releases any system resources associated with\n it.  Once the stream has been closed, further read(), ready(),\n mark(), reset(), or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n", "method_declar": ""}, {"params": [], "class_name": "InputStreamReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The historical name of this encoding, or\n         null if the stream has been closed"], "return_type": ["String"]}, "method_name": "getEncoding", "method_description": "Returns the name of the character encoding being used by this stream.\n\n \n If the encoding has an historical name then that name is returned;\n otherwise the encoding's canonical name is returned.\n\n \n If this instance was created with the InputStreamReader(java.io.InputStream, java.lang.String) constructor then the returned\n name, being unique for the encoding, may differ from the name passed to\n the constructor. This method will return null if the\n stream has been closed.\n \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "InputStreamReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The character read, or -1 if the end of the stream has been\n         reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads a single character.\n", "method_declar": ""}, {"params": [{"param_name": ["cbuf"], "param_type": "char[]", "param_description": " Destination buffer"}, {"param_name": ["offset"], "param_type": "int", "param_description": " Offset at which to start storing characters"}, {"param_name": ["length"], "param_type": "int", "param_description": " Maximum number of characters to read"}], "class_name": "InputStreamReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The number of characters read, or -1 if the end of the\n             stream has been reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads characters into a portion of an array.\n", "method_declar": ""}, {"params": [], "class_name": "InputStreamReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["True if the next read() is guaranteed not to block for input,\n false otherwise.  Note that returning false does not guarantee that the\n next read will block."], "return_type": ["boolean"]}, "method_name": "ready", "method_description": "Tells whether this stream is ready to be read.  An InputStreamReader is\n ready if its input buffer is not empty, or if bytes are available to be\n read from the underlying byte stream.\n", "method_declar": ""}], "class_name": "InputStreamReader", "Vars": null}