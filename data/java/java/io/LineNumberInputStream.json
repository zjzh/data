{"package_name": "java.io", "subclass_list": [], "class_description": " This class was deprecated\n      in API level 1.\n    This class incorrectly assumes that bytes adequately represent\n             characters.  As of JDK\u00a01.1, the preferred way to operate on\n             character streams is via the new character-stream classes, which\n             include a class for counting line numbers. This class is an input stream filter that provides the added\n functionality of keeping track of the current line number. A line is a sequence of bytes ending with a carriage return\n character ('\\r'), a newline character\n ('\\n'), or a carriage return character followed\n immediately by a linefeed character. In all three cases, the line\n terminating character(s) are returned as a single newline character. The line number begins at 0, and is incremented by\n 1 when a read returns a newline character. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["FilterInputStream"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " the underlying input stream."}], "class_name": "LineNumberInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newline number input stream that reads its input\n from the specified input stream.\n", "method_declar": ""}, {"params": [], "class_name": "LineNumberInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of bytes that can be read from this input stream\n             without blocking."], "return_type": ["int"]}, "method_name": "available", "method_description": "Returns the number of bytes that can be read from this input\n stream without blocking.\n \n\n Note that if the underlying input stream is able to supply\n k input characters without blocking, the\n LineNumberInputStream can guarantee only to provide\n k/2 characters without blocking, because the\n k characters from the underlying input stream might\n consist of k/2 pairs of '\\r' and\n '\\n', which are converted to just\n k/2 '\\n' characters.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "LineNumberInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current line number."], "return_type": ["int"]}, "method_name": "getLineNumber", "method_description": "Returns the current line number.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["readlimit"], "param_type": "int", "param_description": " the maximum limit of bytes that can be read before\n                      the mark position becomes invalid."}], "class_name": "LineNumberInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "Marks the current position in this input stream. A subsequent\n call to the reset method repositions this stream at\n the last marked position so that subsequent reads re-read the same bytes.\n \n\n The mark method of\n LineNumberInputStream remembers the current line\n number in a private variable, and then calls the mark\n method of the underlying input stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "LineNumberInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of data, or -1 if the end of this\n             stream is reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads the next byte of data from this input stream. The value\n byte is returned as an int in the range\n 0 to 255. If no byte is available\n because the end of the stream has been reached, the value\n -1 is returned. This method blocks until input data\n is available, the end of the stream is detected, or an exception\n is thrown.\n \n\n The read method of\n LineNumberInputStream calls the read\n method of the underlying input stream. It checks for carriage\n returns and newline characters in the input, and modifies the\n current line number as appropriate. A carriage-return character or\n a carriage return followed by a newline character are both\n converted into a single newline character.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data."}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes read."}], "class_name": "LineNumberInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             this stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to len bytes of data from this input stream\n into an array of bytes. This method blocks until some input is available.\n \n\n The read method of\n LineNumberInputStream repeatedly calls the\n read method of zero arguments to fill in the byte array.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "LineNumberInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Repositions this stream to the position at the time the\n mark method was last called on this input stream.\n \n\n The reset method of\n LineNumberInputStream resets the line number to be\n the line number at the time the mark method was\n called, and then calls the reset method of the\n underlying input stream.\n \n\n Stream marks are intended to be used in\n situations where you need to read ahead a little to see what's in\n the stream. Often this is most easily done by invoking some\n general parser. If the stream is of the type handled by the\n parser, it just chugs along happily. If the stream is not of\n that type, the parser should toss an exception when it fails,\n which, if it happens within readlimit bytes, allows the outer\n code to reset the stream and try another parser.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["lineNumber"], "param_type": "int", "param_description": " the new line number."}], "class_name": "LineNumberInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setLineNumber", "method_description": "Sets the line number to the specified argument.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " the number of bytes to be skipped."}], "class_name": "LineNumberInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes skipped."], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skips over and discards n bytes of data from this\n input stream. The skip method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly 0. The actual number of bytes skipped is\n returned.  If n is negative, no bytes are skipped.\n \n\n The skip method of LineNumberInputStream creates\n a byte array and then repeatedly reads into it until\n n bytes have been read or the end of the stream has\n been reached.\nSee also:\n", "method_declar": ""}], "class_name": "LineNumberInputStream", "Vars": null}