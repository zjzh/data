{"package_name": "java.io", "subclass_list": [], "class_description": "A piped input stream should be connected\n to a piped output stream; the piped  input\n stream then provides whatever data bytes\n are written to the piped output  stream.\n Typically, data is read from a PipedInputStream\n object by one thread  and data is written\n to the corresponding PipedOutputStream\n by some  other thread. Attempting to use\n both objects from a single thread is not\n recommended, as it may deadlock the thread.\n The piped input stream contains a buffer,\n decoupling read operations from write operations,\n within limits.\n A pipe is said to be  broken  if a\n thread that was providing data bytes to the connected\n piped output stream is no longer alive. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["InputStream"], "Methods": [{"params": [{"param_name": ["src"], "param_type": "PipedOutputStream", "param_description": " the stream to connect to."}], "class_name": "PipedInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PipedInputStream so\n that it is connected to the piped output\n stream src. Data bytes written\n to src will then be  available\n as input from this stream.\n", "method_declar": ""}, {"params": [{"param_name": ["src"], "param_type": "PipedOutputStream", "param_description": " the stream to connect to."}, {"param_name": ["pipeSize"], "param_type": "int", "param_description": " the size of the pipe's buffer."}], "class_name": "PipedInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PipedInputStream so that it is\n connected to the piped output stream\n src and uses the specified pipe size for\n the pipe's buffer.\n Data bytes written to src will then\n be available as input from this stream.\n", "method_declar": ""}, {"params": [], "class_name": "PipedInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PipedInputStream so\n that it is not yet connected.\n It must be connected to a\n PipedOutputStream before being used.\n", "method_declar": ""}, {"params": [{"param_name": ["pipeSize"], "param_type": "int", "param_description": " the size of the pipe's buffer."}], "class_name": "PipedInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PipedInputStream so that it is not yet\n connected and\n uses the specified pipe size for the pipe's buffer.\n It must be connected to a PipedOutputStream before being used.\n", "method_declar": ""}, {"params": [], "class_name": "PipedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of bytes that can be read from this input stream\n         without blocking, or 0 if this input stream has been\n         closed by invoking its close() method, or if the pipe\n         is unconnected, or\n           broken."], "return_type": ["int"]}, "method_name": "available", "method_description": "Returns the number of bytes that can be read from this input\n stream without blocking.\n", "method_declar": ""}, {"params": [], "class_name": "PipedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this piped input stream and releases any system resources\n associated with the stream.\n", "method_declar": ""}, {"params": [{"param_name": ["src"], "param_type": "PipedOutputStream", "param_description": " The piped output stream to connect to."}], "class_name": "PipedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "connect", "method_description": "Causes this piped input stream to be connected\n to the piped  output stream src.\n If this object is already connected to some\n other piped output  stream, an IOException\n is thrown.\n \n\n If src is an\n unconnected piped output stream and snk\n is an unconnected piped input stream, they\n may be connected by either the call:\n\n \n\n or the call:\n\n \n\n The two calls have the same effect.\n", "method_declar": ""}, {"params": [], "class_name": "PipedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of data, or -1 if the end of the\n             stream is reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads the next byte of data from this piped input stream. The\n value byte is returned as an int in the range\n 0 to 255.\n This method blocks until input data is available, the end of the\n stream is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the destination array b"}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes read."}], "class_name": "PipedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to len bytes of data from this piped input\n stream into an array of bytes. Less than len bytes\n will be read if the end of the data stream is reached or if\n len exceeds the pipe's buffer size.\n If len  is zero, then no bytes are read and 0 is returned;\n otherwise, the method blocks until at least 1 byte of input is\n available, end of the stream has been detected, or an exception is\n thrown.\n", "method_declar": ""}], "class_name": "PipedInputStream", "Vars": null}