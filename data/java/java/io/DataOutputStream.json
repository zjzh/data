{"package_name": "java.io", "subclass_list": [], "class_description": "A data output stream lets an application write primitive Java data\n types to an output stream in a portable way. An application can\n then use a data input stream to read the data back in. ", "class_type": "class", "typealias": [], "interface_list": ["DataOutput"], "class_inherit_list": ["FilterOutputStream"], "Methods": [{"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " the underlying output stream, to be saved for later\n                use."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new data output stream to write data to the specified\n underlying output stream. The counter written is\n set to zero.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "flush", "method_description": "Flushes this data output stream. This forces any buffered output\n bytes to be written out to the stream.\n \n\n The flush method of DataOutputStream\n calls the flush method of its underlying output stream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value of the written field."], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the current value of the counter written,\n the number of bytes written to this data output stream so far.\n If the counter overflows, it will be wrapped to Integer.MAX_VALUE.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the data."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the data."}, {"param_name": ["len"], "param_type": "int", "param_description": " the number of bytes to write."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes len bytes from the specified byte array\n starting at offset off to the underlying output stream.\n If no exception is thrown, the counter written is\n incremented by len.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "int", "param_description": " the byte to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes the specified byte (the low eight bits of the argument\n b) to the underlying output stream. If no exception\n is thrown, the counter written is incremented by\n 1.\n \n\n Implements the write method of OutputStream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "boolean", "param_description": " a boolean value to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeBoolean", "method_description": "Writes a boolean to the underlying output stream as\n a 1-byte value. The value true is written out as the\n value (byte)1; the value false is\n written out as the value (byte)0. If no exception is\n thrown, the counter written is incremented by\n 1.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "int", "param_description": " a byte value to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeByte", "method_description": "Writes out a byte to the underlying output stream as\n a 1-byte value. If no exception is thrown, the counter\n written is incremented by 1.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a string of bytes to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeBytes", "method_description": "Writes out the string to the underlying output stream as a\n sequence of bytes. Each character in the string is written out, in\n sequence, by discarding its high eight bits. If no exception is\n thrown, the counter written is incremented by the\n length of s.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "int", "param_description": " a char value to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeChar", "method_description": "Writes a char to the underlying output stream as a\n 2-byte value, high byte first. If no exception is thrown, the\n counter written is incremented by 2.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a String value to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeChars", "method_description": "Writes a string to the underlying output stream as a sequence of\n characters. Each character is written to the data output stream as\n if by the writeChar method. If no exception is\n thrown, the counter written is incremented by twice\n the length of s.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "double", "param_description": " a double value to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeDouble", "method_description": "Converts the double argument to a long using the\n doubleToLongBits method in class Double,\n and then writes that long value to the underlying\n output stream as an 8-byte quantity, high byte first. If no\n exception is thrown, the counter written is\n incremented by 8.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "float", "param_description": " a float value to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeFloat", "method_description": "Converts the float argument to an int using the\n floatToIntBits method in class Float,\n and then writes that int value to the underlying\n output stream as a 4-byte quantity, high byte first. If no\n exception is thrown, the counter written is\n incremented by 4.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "int", "param_description": " an int to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeInt", "method_description": "Writes an int to the underlying output stream as four\n bytes, high byte first. If no exception is thrown, the counter\n written is incremented by 4.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "long", "param_description": " a long to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeLong", "method_description": "Writes a long to the underlying output stream as eight\n bytes, high byte first. In no exception is thrown, the counter\n written is incremented by 8.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "int", "param_description": " a short to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeShort", "method_description": "Writes a short to the underlying output stream as two\n bytes, high byte first. If no exception is thrown, the counter\n written is incremented by 2.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": " a string to be written."}], "class_name": "DataOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "writeUTF", "method_description": "Writes a string to the underlying output stream using\n modified UTF-8\n encoding in a machine-independent manner.\n \n\n First, two bytes are written to the output stream as if by the\n writeShort method giving the number of bytes to\n follow. This value is the number of bytes actually written out,\n not the length of the string. Following the length, each character\n of the string is output, in sequence, using the modified UTF-8 encoding\n for the character. If no exception is thrown, the counter\n written is incremented by the total number of\n bytes written to the output stream. This will be at least two\n plus the length of str, and at most two plus\n thrice the length of str.\n", "method_declar": ""}], "class_name": "DataOutputStream", "Vars": null}