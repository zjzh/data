{"package_name": "java.io", "subclass_list": [], "class_description": "A character stream whose source is a string. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Reader"], "Methods": [{"params": [{"param_name": ["s"], "param_type": "String", "param_description": " String providing the character stream."}], "class_name": "StringReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new string reader.\n", "method_declar": ""}, {"params": [], "class_name": "StringReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes the stream and releases any system resources associated with\n it. Once the stream has been closed, further read(),\n ready(), mark(), or reset() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n", "method_declar": ""}, {"params": [{"param_name": ["readAheadLimit"], "param_type": "int", "param_description": " Limit on the number of characters that may be\n                         read while still preserving the mark.  Because\n                         the stream's input comes from a string, there\n                         is no actual limit, so this argument must not\n                         be negative, but is otherwise ignored."}], "class_name": "StringReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "Marks the present position in the stream.  Subsequent calls to reset()\n will reposition the stream to this point.\n", "method_declar": ""}, {"params": [], "class_name": "StringReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if this stream supports the mark operation."], "return_type": ["boolean"]}, "method_name": "markSupported", "method_description": "Tells whether this stream supports the mark() operation, which it does.\n", "method_declar": ""}, {"params": [], "class_name": "StringReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The character read, or -1 if the end of the stream has been\n             reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads a single character.\n", "method_declar": ""}, {"params": [{"param_name": ["cbuf"], "param_type": "char[]", "param_description": " Destination buffer"}, {"param_name": ["off"], "param_type": "int", "param_description": " Offset at which to start writing characters"}, {"param_name": ["len"], "param_type": "int", "param_description": " Maximum number of characters to read"}], "class_name": "StringReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The number of characters read, or -1 if the end of the\n             stream has been reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads characters into a portion of an array.\n", "method_declar": ""}, {"params": [], "class_name": "StringReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["True if the next read() is guaranteed not to block for input"], "return_type": ["boolean"]}, "method_name": "ready", "method_description": "Tells whether this stream is ready to be read.\n", "method_declar": ""}, {"params": [], "class_name": "StringReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets the stream to the most recent mark, or to the beginning of the\n string if it has never been marked.\n", "method_declar": ""}, {"params": [{"param_name": ["ns"], "param_type": "long", "param_description": " The number of characters to skip"}], "class_name": "StringReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["The number of characters actually skipped"], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skips the specified number of characters in the stream. Returns\n the number of characters that were skipped.\n\n \nThe ns parameter may be negative, even though the\n skip method of the Reader superclass throws\n an exception in this case. Negative values of ns cause the\n stream to skip backwards. Negative return values indicate a skip\n backwards. It is not possible to skip backwards past the beginning of\n the string.\n\n \nIf the entire string has been read or skipped, then this method has\n no effect and always returns 0.\n", "method_declar": ""}], "class_name": "StringReader", "Vars": null}