{"package_name": "java.io", "subclass_list": [], "class_description": "Piped character-input streams. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Reader"], "Methods": [{"params": [{"param_name": ["src"], "param_type": "PipedWriter", "param_description": " the stream to connect to."}], "class_name": "PipedReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PipedReader so\n that it is connected to the piped writer\n src. Data written to src\n will then be available as input from this stream.\n", "method_declar": ""}, {"params": [{"param_name": ["src"], "param_type": "PipedWriter", "param_description": " the stream to connect to."}, {"param_name": ["pipeSize"], "param_type": "int", "param_description": " the size of the pipe's buffer."}], "class_name": "PipedReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PipedReader so that it is connected\n to the piped writer src and uses the specified\n pipe size for the pipe's buffer. Data written to src\n will then be  available as input from this stream.\n", "method_declar": ""}, {"params": [], "class_name": "PipedReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PipedReader so\n that it is not yet connected. It must be connected to a PipedWriter\n before being used.\n", "method_declar": ""}, {"params": [{"param_name": ["pipeSize"], "param_type": "int", "param_description": " the size of the pipe's buffer."}], "class_name": "PipedReader", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PipedReader so that it is not yet\n connected and uses\n the specified pipe size for the pipe's buffer.\n It must be  connected to a PipedWriter\n before being used.\n", "method_declar": ""}, {"params": [], "class_name": "PipedReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this piped stream and releases any system resources\n associated with the stream.\n", "method_declar": ""}, {"params": [{"param_name": ["src"], "param_type": "PipedWriter", "param_description": " The piped writer to connect to."}], "class_name": "PipedReader", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "connect", "method_description": "Causes this piped reader to be connected\n to the piped  writer src.\n If this object is already connected to some\n other piped writer, an IOException\n is thrown.\n \n\n If src is an\n unconnected piped writer and snk\n is an unconnected piped reader, they\n may be connected by either the call:\n\n \n\n or the call:\n\n \n\n The two calls have the same effect.\n", "method_declar": ""}, {"params": [], "class_name": "PipedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next character of data, or -1 if the end of the\n             stream is reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads the next character of data from this piped stream.\n If no character is available because the end of the stream\n has been reached, the value -1 is returned.\n This method blocks until input data is available, the end of\n the stream is detected, or an exception is thrown.\n", "method_declar": ""}, {"params": [{"param_name": ["cbuf"], "param_type": "char[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data."}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of characters read."}], "class_name": "PipedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of characters read into the buffer, or\n             -1 if there is no more data because the end of\n             the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to len characters of data from this piped\n stream into an array of characters. Less than len characters\n will be read if the end of the data stream is reached or if\n len exceeds the pipe's buffer size. This method\n blocks until at least one character of input is available.\n", "method_declar": ""}, {"params": [], "class_name": "PipedReader", "is_static": false, "return_value": {"return_name": [], "return_description": ["True if the next read() is guaranteed not to block for input,\n false otherwise.  Note that returning false does not guarantee that the\n next read will block."], "return_type": ["boolean"]}, "method_name": "ready", "method_description": "Tell whether this stream is ready to be read.  A piped character\n stream is ready if the circular buffer is not empty.\n", "method_declar": ""}], "class_name": "PipedReader", "Vars": null}