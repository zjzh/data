{"package_name": "java.io", "subclass_list": [], "class_description": "A BufferedInputStream adds\n functionality to another input stream-namely,\n the ability to buffer the input and to\n support the mark and reset\n methods. When  the BufferedInputStream\n is created, an internal buffer array is\n created. As bytes  from the stream are read\n or skipped, the internal buffer is refilled\n as necessary  from the contained input stream,\n many bytes at a time. The mark\n operation  remembers a point in the input\n stream and the reset operation\n causes all the  bytes read since the most\n recent mark operation to be\n reread before new bytes are  taken from\n the contained input stream. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["FilterInputStream"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " the underlying input stream."}], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a BufferedInputStream\n and saves its  argument, the input stream\n in, for later use. An internal\n buffer array is created and  stored in buf.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " the underlying input stream."}, {"param_name": ["size"], "param_type": "int", "param_description": " the buffer size."}], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a BufferedInputStream\n with the specified buffer size,\n and saves its  argument, the input stream\n in, for later use.  An internal\n buffer array of length  size\n is created and stored in buf.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["an estimate of the number of bytes that can be read (or skipped\n             over) from this input stream without blocking."], "return_type": ["int"]}, "method_name": "available", "method_description": "Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. The next invocation might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n \n\n This method returns the sum of the number of bytes remaining to be read in\n the buffer (count\u00a0- pos) and the result of calling the\n in.available().\n", "method_declar": ""}, {"params": [], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this input stream and releases any system resources\n associated with the stream.\n Once the stream has been closed, further read(), available(), reset(),\n or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect.\n", "method_declar": ""}, {"params": [{"param_name": ["readlimit"], "param_type": "int", "param_description": " the maximum limit of bytes that can be read before\n                      the mark position becomes invalid."}], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "See the general contract of the mark\n method of InputStream.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["a boolean indicating if this stream type supports\n          the mark and reset methods."], "return_type": ["boolean"]}, "method_name": "markSupported", "method_description": "Tests if this input stream supports the mark\n and reset methods. The markSupported\n method of BufferedInputStream returns\n true.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of data, or -1 if the end of the\n             stream is reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "See\n the general contract of the read\n method of InputStream.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " destination buffer."}, {"param_name": ["off"], "param_type": "int", "param_description": " offset at which to start storing bytes."}, {"param_name": ["len"], "param_type": "int", "param_description": " maximum number of bytes to read."}], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of bytes read, or -1 if the end of\n             the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads bytes from this byte-input stream into the specified byte array,\n starting at the given offset.\n\n \n This method implements the general contract of the corresponding\n InputStream#read(byte[], int, int) method of\n the InputStream class.  As an additional\n convenience, it attempts to read as many bytes as possible by repeatedly\n invoking the read method of the underlying stream.  This\n iterated read continues until one of the following\n conditions becomes true: \n Subclasses of this class are encouraged, but not required, to\n attempt to read as many bytes as possible in the same fashion.\n", "method_declar": ""}, {"params": [], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "See the general contract of the reset\n method of InputStream.\n \n\n If markpos is -1\n (no mark has been set or the mark has been\n invalidated), an IOException\n is thrown. Otherwise, pos is\n set equal to markpos.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " the number of bytes to be skipped."}], "class_name": "BufferedInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes skipped."], "return_type": ["long"]}, "method_name": "skip", "method_description": "See the general contract of the skip\n method of InputStream.\n", "method_declar": ""}], "class_name": "BufferedInputStream", "Vars": null}