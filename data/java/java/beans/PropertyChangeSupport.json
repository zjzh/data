{"package_name": "java.beans", "subclass_list": [], "class_description": "This is a utility class that can be used by beans that support bound\n properties.  It manages a list of listeners and dispatches\n PropertyChangeEvents to them.  You can use an instance of this class\n as a member field of your bean and delegate these types of work to it.\n The PropertyChangeListener can be registered for all properties\n or for a property specified by name. Here is an example of PropertyChangeSupport usage that follows\n the rules and recommendations laid out in the JavaBeans\u2122 specification: A PropertyChangeSupport instance is thread-safe. This class is serializable.  When it is serialized it will save\n (and restore) any listeners that are themselves serializable.  Any\n non-serializable listeners will be skipped during serialization. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["sourceBean"], "param_type": "Object", "param_description": " The bean to be given as the source for any events."}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a PropertyChangeSupport object.\n", "method_declar": ""}, {"params": [{"param_name": ["listener"], "param_type": "PropertyChangeListener", "param_description": " The PropertyChangeListener to be added"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addPropertyChangeListener", "method_description": "Add a PropertyChangeListener to the listener list.\n The listener is registered for all properties.\n The same listener object may be added more than once, and will be called\n as many times as it is added.\n If listener is null, no exception is thrown and no action\n is taken.\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " The name of the property to listen on."}, {"param_name": ["listener"], "param_type": "PropertyChangeListener", "param_description": " The PropertyChangeListener to be added"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addPropertyChangeListener", "method_description": "Add a PropertyChangeListener for a specific property.  The listener\n will be invoked only when a call on firePropertyChange names that\n specific property.\n The same listener object may be added more than once.  For each\n property,  the listener will be invoked the number of times it was added\n for that property.\n If propertyName or listener is null, no\n exception is thrown and no action is taken.\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " the programmatic name of the property that was changed"}, {"param_name": ["index"], "param_type": "int", "param_description": " the index of the property element that was changed"}, {"param_name": ["oldValue"], "param_type": "boolean", "param_description": " the old value of the property"}, {"param_name": ["newValue"], "param_type": "boolean", "param_description": " the new value of the property"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "fireIndexedPropertyChange", "method_description": "Reports a boolean bound indexed property update to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n\n No event is fired if old and new values are equal.\n \n\n This is merely a convenience wrapper around the more general\n fireIndexedPropertyChange(java.lang.String, int, java.lang.Object, java.lang.Object) method.\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " the programmatic name of the property that was changed"}, {"param_name": ["index"], "param_type": "int", "param_description": " the index of the property element that was changed"}, {"param_name": ["oldValue"], "param_type": "int", "param_description": " the old value of the property"}, {"param_name": ["newValue"], "param_type": "int", "param_description": " the new value of the property"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "fireIndexedPropertyChange", "method_description": "Reports an integer bound indexed property update to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n\n No event is fired if old and new values are equal.\n \n\n This is merely a convenience wrapper around the more general\n fireIndexedPropertyChange(java.lang.String, int, java.lang.Object, java.lang.Object) method.\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " the programmatic name of the property that was changed"}, {"param_name": ["index"], "param_type": "int", "param_description": " the index of the property element that was changed"}, {"param_name": ["oldValue"], "param_type": "Object", "param_description": " the old value of the property"}, {"param_name": ["newValue"], "param_type": "Object", "param_description": " the new value of the property"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "fireIndexedPropertyChange", "method_description": "Reports a bound indexed property update to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n\n No event is fired if old and new values are equal and non-null.\n \n\n This is merely a convenience wrapper around the more general\n firePropertyChange(java.beans.PropertyChangeEvent) method.\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " the programmatic name of the property that was changed"}, {"param_name": ["oldValue"], "param_type": "Object", "param_description": " the old value of the property"}, {"param_name": ["newValue"], "param_type": "Object", "param_description": " the new value of the property"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "firePropertyChange", "method_description": "Reports a bound property update to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n\n No event is fired if old and new values are equal and non-null.\n \n\n This is merely a convenience wrapper around the more general\n firePropertyChange(java.beans.PropertyChangeEvent) method.\n", "method_declar": ""}, {"params": [{"param_name": ["event"], "param_type": "PropertyChangeEvent", "param_description": " the PropertyChangeEvent to be fired"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "firePropertyChange", "method_description": "Fires a property change event to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n\n No event is fired if the given event's old and new values are equal and non-null.\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " the programmatic name of the property that was changed"}, {"param_name": ["oldValue"], "param_type": "int", "param_description": " the old value of the property"}, {"param_name": ["newValue"], "param_type": "int", "param_description": " the new value of the property"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "firePropertyChange", "method_description": "Reports an integer bound property update to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n\n No event is fired if old and new values are equal.\n \n\n This is merely a convenience wrapper around the more general\n firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)  method.\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " the programmatic name of the property that was changed"}, {"param_name": ["oldValue"], "param_type": "boolean", "param_description": " the old value of the property"}, {"param_name": ["newValue"], "param_type": "boolean", "param_description": " the new value of the property"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "firePropertyChange", "method_description": "Reports a boolean bound property update to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n\n No event is fired if old and new values are equal.\n \n\n This is merely a convenience wrapper around the more general\n firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)  method.\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " The name of the property being listened to"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": ["all of the PropertyChangeListeners associated with\n         the named property.  If no such listeners have been added,\n         or if propertyName is null, an empty array is\n         returned."], "return_type": ["PropertyChangeListener[]"]}, "method_name": "getPropertyChangeListeners", "method_description": "Returns an array of all the listeners which have been associated\n with the named property.\n", "method_declar": ""}, {"params": [], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": ["all of the PropertyChangeListeners added or an\n         empty array if no listeners have been added"], "return_type": ["PropertyChangeListener[]"]}, "method_name": "getPropertyChangeListeners", "method_description": "Returns an array of all the listeners that were added to the\n PropertyChangeSupport object with addPropertyChangeListener().\n \n\n If some listeners have been added with a named property, then\n the returned array will be a mixture of PropertyChangeListeners\n and PropertyChangeListenerProxys. If the calling\n method is interested in distinguishing the listeners then it must\n test each element to see if it's a\n PropertyChangeListenerProxy, perform the cast, and examine\n the parameter.\n\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " the property name."}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if there are one or more listeners for the given property"], "return_type": ["boolean"]}, "method_name": "hasListeners", "method_description": "Check if there are any listeners for a specific property, including\n those registered on all properties.  If propertyName\n is null, only check for listeners registered on all properties.\n", "method_declar": ""}, {"params": [{"param_name": ["propertyName"], "param_type": "String", "param_description": " The name of the property that was listened on."}, {"param_name": ["listener"], "param_type": "PropertyChangeListener", "param_description": " The PropertyChangeListener to be removed"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "removePropertyChangeListener", "method_description": "Remove a PropertyChangeListener for a specific property.\n If listener was added more than once to the same event\n source for the specified property, it will be notified one less time\n after being removed.\n If propertyName is null,  no exception is thrown and no\n action is taken.\n If listener is null, or was never added for the specified\n property, no exception is thrown and no action is taken.\n", "method_declar": ""}, {"params": [{"param_name": ["listener"], "param_type": "PropertyChangeListener", "param_description": " The PropertyChangeListener to be removed"}], "class_name": "PropertyChangeSupport", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "removePropertyChangeListener", "method_description": "Remove a PropertyChangeListener from the listener list.\n This removes a PropertyChangeListener that was registered\n for all properties.\n If listener was added more than once to the same event\n source, it will be notified one less time after being removed.\n If listener is null, or was never added, no exception is\n thrown and no action is taken.\n", "method_declar": ""}], "class_name": "PropertyChangeSupport", "Vars": null}