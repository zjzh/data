{"package_name": "java.util", "subclass_list": [], "class_description": "The Stack class represents a last-in-first-out\n (LIFO) stack of objects. It extends class Vector with five\n operations that allow a vector to be treated as a stack. The usual\n push and pop operations are provided, as well as a\n method to peek at the top item on the stack, a method to test\n for whether the stack is empty, and a method to search\n the stack for an item and discover how far it is from the top. When a stack is first created, it contains no items. A more complete and consistent set of LIFO stack operations is\n provided by the Deque interface and its implementations, which\n should be used in preference to this class.  For example: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Vector"], "Methods": [{"params": [], "class_name": "Stack", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an empty Stack.\n", "method_declar": ""}, {"params": [], "class_name": "Stack", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if this stack contains\n          no items; false otherwise."], "return_type": ["boolean"]}, "method_name": "empty", "method_description": "Tests if this stack is empty.\n", "method_declar": ""}, {"params": [], "class_name": "Stack", "is_static": false, "return_value": {"return_name": [], "return_description": ["the object at the top of this stack (the last item\n          of the Vector object)."], "return_type": ["E"]}, "method_name": "peek", "method_description": "Looks at the object at the top of this stack without removing it\n from the stack.\n", "method_declar": ""}, {"params": [], "class_name": "Stack", "is_static": false, "return_value": {"return_name": [], "return_description": ["The object at the top of this stack (the last item\n          of the Vector object)."], "return_type": ["E"]}, "method_name": "pop", "method_description": "Removes the object at the top of this stack and returns that\n object as the value of this function.\n", "method_declar": ""}, {"params": [{"param_name": ["item"], "param_type": "E", "param_description": " the item to be pushed onto this stack."}], "class_name": "Stack", "is_static": false, "return_value": {"return_name": [], "return_description": ["the item argument."], "return_type": ["E"]}, "method_name": "push", "method_description": "Pushes an item onto the top of this stack. This has exactly\n the same effect as:\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " the desired object."}], "class_name": "Stack", "is_static": false, "return_value": {"return_name": [], "return_description": ["the 1-based position from the top of the stack where\n          the object is located; the return value -1\n          indicates that the object is not on the stack."], "return_type": ["int"]}, "method_name": "search", "method_description": "Returns the 1-based position where an object is on this stack.\n If the object o occurs as an item in this stack, this\n method returns the distance from the top of the stack of the\n occurrence nearest the top of the stack; the topmost item on the\n stack is considered to be at distance 1. The equals\n method is used to compare o to the\n items in this stack.\n", "method_declar": ""}], "class_name": "Stack", "Vars": null}