{"package_name": "java.util", "subclass_list": ["Stack", "Stack"], "class_description": "The Vector class implements a growable array of\n objects. Like an array, it contains components that can be\n accessed using an integer index. However, the size of a\n Vector can grow or shrink as needed to accommodate\n adding and removing items after the Vector has been created. Each vector tries to optimize storage management by maintaining a\n capacity and a capacityIncrement. The\n capacity is always at least as large as the vector\n size; it is usually larger because as components are added to the\n vector, the vector's storage increases in chunks the size of\n capacityIncrement. An application can increase the\n capacity of a vector before inserting a large number of\n components; this reduces the amount of incremental reallocation. The iterators returned by this class's iterator and\n listIterator methods are fail-fast:\n if the vector is structurally modified at any time after the iterator is\n created, in any way except through the iterator's own\n ListIterator#remove() or\n ListIterator#add(Object) methods, the iterator will throw a\n ConcurrentModificationException.  Thus, in the face of\n concurrent modification, the iterator fails quickly and cleanly, rather\n than risking arbitrary, non-deterministic behavior at an undetermined\n time in the future.  The Enumeration returned by\n the elements method are not fail-fast. Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:  the fail-fast behavior of iterators\n should be used only to detect bugs. As of the Java 2 platform v1.2, this class was retrofitted to\n implement the List interface, making it a member of the\n \n Java Collections Framework.  Unlike the new collection\n implementations, Vector is synchronized.  If a thread-safe\n implementation is not needed, it is recommended to use ArrayList in place of Vector. ", "class_type": "class", "typealias": [], "interface_list": ["List", "RandomAccess", "Cloneable", "Serializable"], "class_inherit_list": ["AbstractList"], "Methods": [{"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity of the vector"}, {"param_name": ["capacityIncrement"], "param_type": "int", "param_description": " the amount by which the capacity is\n                              increased when the vector overflows"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty vector with the specified initial capacity and\n capacity increment.\n", "method_declar": ""}, {"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity of the vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty vector with the specified initial capacity and\n with its capacity increment equal to zero.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty vector so that its internal data array\n has size 10 and its standard capacity increment is\n zero.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection whose elements are to be placed into this\n       vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a vector containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index at which the specified element is to be inserted"}, {"param_name": ["element"], "param_type": "E", "param_description": " element to be inserted"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "add", "method_description": "Inserts the specified element at the specified position in this Vector.\n Shifts the element currently at that position (if any) and any\n subsequent elements to the right (adds one to their indices).\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " element to be appended to this Vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Appends the specified element to the end of this Vector.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index at which to insert the first element from the\n              specified collection"}, {"param_name": ["c"], "param_type": "Collection", "param_description": " elements to be inserted into this Vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this Vector changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "addAll", "method_description": "Inserts all of the elements in the specified Collection into this\n Vector at the specified position.  Shifts the element currently at\n that position (if any) and any subsequent elements to the right\n (increases their indices).  The new elements will appear in the Vector\n in the order that they are returned by the specified Collection's\n iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " elements to be inserted into this Vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this Vector changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "addAll", "method_description": "Appends all of the elements in the specified Collection to the end of\n this Vector, in the order that they are returned by the specified\n Collection's Iterator.  The behavior of this operation is undefined if\n the specified Collection is modified while the operation is in progress.\n (This implies that the behavior of this call is undefined if the\n specified Collection is this Vector, and this Vector is nonempty.)\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "E", "param_description": " the component to be added"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addElement", "method_description": "Adds the specified component to the end of this vector,\n increasing its size by one. The capacity of this vector is\n increased if its size becomes greater than its capacity.\n\n \nThis method is identical in functionality to the\n add(E)\n method (which is part of the List interface).\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current capacity (the length of its internal\n          data array, kept in the field elementData\n          of this vector)"], "return_type": ["int"]}, "method_name": "capacity", "method_description": "Returns the current capacity of this vector.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the elements from this Vector.  The Vector will\n be empty after this call returns (unless it throws an exception).\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this vector"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Returns a clone of this vector. The copy will contain a\n reference to a clone of the internal data array, not a reference\n to the original internal data array of this Vector object.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element whose presence in this vector is to be tested"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this vector contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this vector contains the specified element.\n More formally, returns true if and only if this vector\n contains at least one element e such that\n (o==null\u00a0?\u00a0e==null\u00a0:\u00a0o.equals(e)).\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " a collection whose elements will be tested for containment\n          in this Vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this Vector contains all of the elements in the\n         specified collection"], "return_type": ["boolean"]}, "method_name": "containsAll", "method_description": "Returns true if this Vector contains all of the elements in the\n specified Collection.\n", "method_declar": ""}, {"params": [{"param_name": ["anArray"], "param_type": "Object[]", "param_description": " the array into which the components get copied"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "copyInto", "method_description": "Copies the components of this vector into the specified array.\n The item at index k in this vector is copied into\n component k of anArray.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " an index into this vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the component at the specified index"], "return_type": ["E"]}, "method_name": "elementAt", "method_description": "Returns the component at the specified index.\n\n \nThis method is identical in functionality to the get(int)\n method (which is part of the List interface).\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["an enumeration of the components of this vector"], "return_type": ["Enumeration<E>"]}, "method_name": "elements", "method_description": "Returns an enumeration of the components of this vector. The\n returned Enumeration object will generate all items in\n this vector. The first item generated is the item at index 0,\n then the item at index 1, and so on.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["minCapacity"], "param_type": "int", "param_description": " the desired minimum capacity"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "ensureCapacity", "method_description": "Increases the capacity of this vector, if necessary, to ensure\n that it can hold at least the number of components specified by\n the minimum capacity argument.\n\n \nIf the current capacity of this vector is less than\n minCapacity, then its capacity is increased by replacing its\n internal data array, kept in the field elementData, with a\n larger one.  The size of the new data array will be the old size plus\n capacityIncrement, unless the value of\n capacityIncrement is less than or equal to zero, in which case\n the new capacity will be twice the old capacity; but if this new size\n is still smaller than minCapacity, then the new capacity will\n be minCapacity.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " the Object to be compared for equality with this Vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the specified Object is equal to this Vector"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the specified Object with this Vector for equality.  Returns\n true if and only if the specified Object is also a List, both Lists\n have the same size, and all corresponding pairs of elements in the two\n Lists are equal.  (Two elements e1 and\n e2 are equal if (e1==null ? e2==null :\n e1.equals(e2)).)  In other words, two Lists are defined to be\n equal if they contain the same elements in the same order.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first component of this vector"], "return_type": ["E"]}, "method_name": "firstElement", "method_description": "Returns the first component (the item at index 0) of\n this vector.\n", "method_declar": ""}, {"params": [{"param_name": ["action"], "param_type": "Consumer", "param_description": "\nConsumer "}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "forEach", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index of the element to return"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["object at the specified index"], "return_type": ["E"]}, "method_name": "get", "method_description": "Returns the element at the specified position in this Vector.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the hash code value for this list"], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns the hash code value for this Vector.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to search for"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the first occurrence of the specified element in\n         this vector, or -1 if this vector does not contain the element"], "return_type": ["int"]}, "method_name": "indexOf", "method_description": "Returns the index of the first occurrence of the specified element\n in this vector, or -1 if this vector does not contain the element.\n More formally, returns the lowest index i such that\n (o==null\u00a0?\u00a0get(i)==null\u00a0:\u00a0o.equals(get(i))),\n or -1 if there is no such index.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to search for"}, {"param_name": ["index"], "param_type": "int", "param_description": " index to start searching from"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the first occurrence of the element in\n         this vector at position index or later in the vector;\n         -1 if the element is not found."], "return_type": ["int"]}, "method_name": "indexOf", "method_description": "Returns the index of the first occurrence of the specified element in\n this vector, searching forwards from index, or returns -1 if\n the element is not found.\n More formally, returns the lowest index i such that\n (i\u00a0>=\u00a0index\u00a0&&\u00a0(o==null\u00a0?\u00a0get(i)==null\u00a0:\u00a0o.equals(get(i)))),\n or -1 if there is no such index.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "E", "param_description": " the component to insert"}, {"param_name": ["index"], "param_type": "int", "param_description": " where to insert the new component"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "insertElementAt", "method_description": "Inserts the specified object as a component in this vector at the\n specified index. Each component in this vector with\n an index greater or equal to the specified index is\n shifted upward to have an index one greater than the value it had\n previously.\n\n \nThe index must be a value greater than or equal to 0\n and less than or equal to the current size of the vector. (If the\n index is equal to the current size of the vector, the new element\n is appended to the Vector.)\n\n \nThis method is identical in functionality to the\n add(int, E)\n method (which is part of the List interface).  Note that the\n add method reverses the order of the parameters, to more closely\n match array usage.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if this vector has\n          no components, that is, its size is zero;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Tests if this vector has no components.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this list in proper sequence"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this list in proper sequence.\n\n \nThe returned iterator is fail-fast.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last component of the vector, i.e., the component at index\n          size()\u00a0-\u00a01."], "return_type": ["E"]}, "method_name": "lastElement", "method_description": "Returns the last component of the vector.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to search for"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the last occurrence of the specified element in\n         this vector, or -1 if this vector does not contain the element"], "return_type": ["int"]}, "method_name": "lastIndexOf", "method_description": "Returns the index of the last occurrence of the specified element\n in this vector, or -1 if this vector does not contain the element.\n More formally, returns the highest index i such that\n (o==null\u00a0?\u00a0get(i)==null\u00a0:\u00a0o.equals(get(i))),\n or -1 if there is no such index.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to search for"}, {"param_name": ["index"], "param_type": "int", "param_description": " index to start searching backwards from"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the last occurrence of the element at position\n         less than or equal to index in this vector;\n         -1 if the element is not found."], "return_type": ["int"]}, "method_name": "lastIndexOf", "method_description": "Returns the index of the last occurrence of the specified element in\n this vector, searching backwards from index, or returns -1 if\n the element is not found.\n More formally, returns the highest index i such that\n (i\u00a0<=\u00a0index\u00a0&&\u00a0(o==null\u00a0?\u00a0get(i)==null\u00a0:\u00a0o.equals(get(i)))),\n or -1 if there is no such index.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index of the first element to be returned from the\n        list iterator (by a call to ListIterator#next)"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["a list iterator over the elements in this list (in proper\n         sequence), starting at the specified position in the list"], "return_type": ["ListIterator<E>"]}, "method_name": "listIterator", "method_description": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.\n The specified index indicates the first element that would be\n returned by an initial call to ListIterator#next.\n An initial call to ListIterator#previous would\n return the element with the specified index minus one.\n\n \nThe returned list iterator is fail-fast.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["a list iterator over the elements in this list (in proper\n         sequence)"], "return_type": ["ListIterator<E>"]}, "method_name": "listIterator", "method_description": "Returns a list iterator over the elements in this list (in proper\n sequence).\n\n \nThe returned list iterator is fail-fast.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this Vector, if present"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the Vector contained the specified element"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the first occurrence of the specified element in this Vector\n If the Vector does not contain the element, it is unchanged.  More\n formally, removes the element with the lowest index i such that\n (o==null ? get(i)==null : o.equals(get(i))) (if such\n an element exists).\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index of the element to be removed"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["element that was removed"], "return_type": ["E"]}, "method_name": "remove", "method_description": "Removes the element at the specified position in this Vector.\n Shifts any subsequent elements to the left (subtracts one from their\n indices).  Returns the element that was removed from the Vector.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " a collection of elements to be removed from the Vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this Vector changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "removeAll", "method_description": "Removes from this Vector all of its elements that are contained in the\n specified Collection.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "removeAllElements", "method_description": "Removes all components from this vector and sets its size to zero.\n\n \nThis method is identical in functionality to the clear()\n method (which is part of the List interface).\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the component to be removed"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the argument was a component of this\n          vector; false otherwise."], "return_type": ["boolean"]}, "method_name": "removeElement", "method_description": "Removes the first (lowest-indexed) occurrence of the argument\n from this vector. If the object is found in this vector, each\n component in the vector with an index greater or equal to the\n object's index is shifted downward to have an index one smaller\n than the value it had previously.\n\n \nThis method is identical in functionality to the\n remove(java.lang.Object) method (which is part of the\n List interface).\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index of the object to remove"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "removeElementAt", "method_description": "Deletes the component at the specified index. Each component in\n this vector with an index greater or equal to the specified\n index is shifted downward to have an index one\n smaller than the value it had previously. The size of this vector\n is decreased by 1.\n\n \nThe index must be a value greater than or equal to 0\n and less than the current size of the vector.\n\n \nThis method is identical in functionality to the remove(int)\n method (which is part of the List interface).  Note that the\n remove method returns the old value that was stored at the\n specified position.\n", "method_declar": ""}, {"params": [{"param_name": ["filter"], "param_type": "Predicate", "param_description": " a predicate which returns true for elements to be\n        removed"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if any elements were removed"], "return_type": ["boolean"]}, "method_name": "removeIf", "method_description": "Removes all of the elements of this collection that satisfy the given\n predicate.  Errors or runtime exceptions thrown during iteration or by\n the predicate are relayed to the caller.\n", "method_declar": ""}, {"params": [{"param_name": ["operator"], "param_type": "UnaryOperator", "param_description": " the operator to apply to each element"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "replaceAll", "method_description": "Replaces each element of this list with the result of applying the\n operator to that element.  Errors or runtime exceptions thrown by\n the operator are relayed to the caller.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " a collection of elements to be retained in this Vector\n          (all other elements are removed)"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this Vector changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "retainAll", "method_description": "Retains only the elements in this Vector that are contained in the\n specified Collection.  In other words, removes from this Vector all\n of its elements that are not contained in the specified Collection.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index of the element to replace"}, {"param_name": ["element"], "param_type": "E", "param_description": " element to be stored at the specified position"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element previously at the specified position"], "return_type": ["E"]}, "method_name": "set", "method_description": "Replaces the element at the specified position in this Vector with the\n specified element.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "E", "param_description": " what the component is to be set to"}, {"param_name": ["index"], "param_type": "int", "param_description": " the specified index"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setElementAt", "method_description": "Sets the component at the specified index of this\n vector to be the specified object. The previous component at that\n position is discarded.\n\n \nThe index must be a value greater than or equal to 0\n and less than the current size of the vector.\n\n \nThis method is identical in functionality to the\n set(int, E)\n method (which is part of the List interface). Note that the\n set method reverses the order of the parameters, to more closely\n match array usage.  Note also that the set method returns the\n old value that was stored at the specified position.\n", "method_declar": ""}, {"params": [{"param_name": ["newSize"], "param_type": "int", "param_description": " the new size of this vector"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSize", "method_description": "Sets the size of this vector. If the new size is greater than the\n current size, new null items are added to the end of\n the vector. If the new size is less than the current size, all\n components at index newSize and greater are discarded.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of components in this vector"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of components in this vector.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Comparator", "param_description": " the Comparator used to compare list elements.\n          A null value indicates that the elements'\n          Comparable should be used"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "sort", "method_description": "Sorts this list according to the order induced by the specified\n Comparator.\n\n \nAll elements in this list must be mutually comparable using the\n specified comparator (that is, c.compare(e1, e2) must not throw\n a ClassCastException for any elements e1 and e2\n in the list).\n\n \nIf the specified comparator is null then all elements in this\n list must implement the Comparable interface and the elements'\n Comparable should be used.\n\n \nThis list must be modifiable, but need not be resizable.\n\n \nFor apps running on and targeting Android versions greater than\n Nougat (API level > 25), Collections#sort(List)\n delegates to this method. Such apps must not call\n Collections#sort(List) from this method. Instead, prefer\n not overriding this method at all. If you must override it, consider\n this implementation:\n \n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this list"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n list.\n\n \nThe Spliterator reports Spliterator#SIZED,\n Spliterator#SUBSIZED, and Spliterator#ORDERED.\n Overriding implementations should document the reporting of additional\n characteristic values.\n", "method_declar": ""}, {"params": [{"param_name": ["fromIndex"], "param_type": "int", "param_description": " low endpoint (inclusive) of the subList"}, {"param_name": ["toIndex"], "param_type": "int", "param_description": " high endpoint (exclusive) of the subList"}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the specified range within this List"], "return_type": ["List<E>"]}, "method_name": "subList", "method_description": "Returns a view of the portion of this List between fromIndex,\n inclusive, and toIndex, exclusive.  (If fromIndex and toIndex are\n equal, the returned List is empty.)  The returned List is backed by this\n List, so changes in the returned List are reflected in this List, and\n vice-versa.  The returned List supports all of the optional List\n operations supported by this List.\n\n \nThis method eliminates the need for explicit range operations (of\n the sort that commonly exist for arrays).  Any operation that expects\n a List can be used as a range operation by operating on a subList view\n instead of a whole List.  For example, the following idiom\n removes a range of elements from a List:\n \nThe semantics of the List returned by this method become undefined if\n the backing list (i.e., this List) is structurally modified in\n any way other than via the returned List.  (Structural modifications are\n those that change the size of the List, or otherwise perturb it in such\n a fashion that iterations in progress may yield incorrect results.)\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this collection"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this Vector\n in the correct order.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the Vector are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose."}], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing the elements of the Vector"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this Vector in the\n correct order; the runtime type of the returned array is that of the\n specified array.  If the Vector fits in the specified array, it is\n returned therein.  Otherwise, a new array is allocated with the runtime\n type of the specified array and the size of this Vector.\n\n \nIf the Vector fits in the specified array with room to spare\n (i.e., the array has more elements than the Vector),\n the element in the array immediately following the end of the\n Vector is set to null.  (This is useful in determining the length\n of the Vector only if the caller knows that the Vector\n does not contain any null elements.)\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this collection"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this Vector, containing\n the String representation of each element.\n", "method_declar": ""}, {"params": [], "class_name": "Vector", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "trimToSize", "method_description": "Trims the capacity of this vector to be the vector's current\n size. If the capacity of this vector is larger than its current\n size, then the capacity is changed to equal the size by replacing\n its internal data array, kept in the field elementData,\n with a smaller one. An application can use this operation to\n minimize the storage of a vector.\n", "method_declar": ""}], "class_name": "Vector", "Vars": null}