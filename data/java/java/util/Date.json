{"package_name": "java.util", "subclass_list": ["Date", "Time", "Timestamp", "Date", "Time", "Timestamp"], "class_description": "The class Date represents a specific instant\n in time, with millisecond precision. Prior to JDK\u00a01.1, the class Date had two additional\n functions.  It allowed the interpretation of dates as year, month, day, hour,\n minute, and second values.  It also allowed the formatting and parsing\n of date strings.  Unfortunately, the API for these functions was not\n amenable to internationalization.  As of JDK\u00a01.1, the\n Calendar class should be used to convert between dates and time\n fields and the DateFormat class should be used to format and\n parse date strings.\n The corresponding methods in Date are deprecated. Although the Date class is intended to reflect\n coordinated universal time (UTC), it may not do so exactly,\n depending on the host environment of the Java Virtual Machine.\n Nearly all modern operating systems assume that 1\u00a0day\u00a0=\n 24\u00a0\u00d7\u00a060\u00a0\u00d7\u00a060\u00a0= 86400 seconds\n in all cases. In UTC, however, about once every year or two there\n is an extra second, called a \"leap second.\" The leap\n second is always added as the last second of the day, and always\n on December 31 or June 30. For example, the last minute of the\n year 1995 was 61 seconds long, thanks to an added leap second.\n Most computer clocks are not accurate enough to be able to reflect\n the leap-second distinction. Some computer standards are defined in terms of Greenwich mean\n time (GMT), which is equivalent to universal time (UT).  GMT is\n the \"civil\" name for the standard; UT is the\n \"scientific\" name for the same standard. The\n distinction between UTC and UT is that UTC is based on an atomic\n clock and UT is based on astronomical observations, which for all\n practical purposes is an invisibly fine hair to split. Because the\n earth's rotation is not uniform (it slows down and speeds up\n in complicated ways), UT does not always flow uniformly. Leap\n seconds are introduced as needed into UTC so as to keep UTC within\n 0.9 seconds of UT1, which is a version of UT with certain\n corrections applied. There are other time and date systems as\n well; for example, the time scale used by the satellite-based\n global positioning system (GPS) is synchronized to UTC but is\n not adjusted for leap seconds. An interesting source of\n further information is the U.S. Naval Observatory, particularly\n the Directorate of Time at: and their definitions of \"Systems of Time\" at: In all methods of class Date that accept or return\n year, month, date, hours, minutes, and seconds values, the\n following representations are used: In all cases, arguments given to methods for these purposes need\n not fall within the indicated ranges; for example, a date may be\n specified as January 32 and is interpreted as meaning February 1. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable", "Cloneable", "Comparable<Date>"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Allocates a Date object and initializes it so that\n it represents the time at which it was allocated, measured to the\n nearest millisecond.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["date"], "param_type": "long", "param_description": " the milliseconds since January 1, 1970, 00:00:00 GMT."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Allocates a Date object and initializes it to\n represent the specified number of milliseconds since the\n standard base time known as \"the epoch\", namely January 1,\n 1970, 00:00:00 GMT.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the year minus 1900."}, {"param_name": ["month"], "param_type": "int", "param_description": " the month between 0-11."}, {"param_name": ["date"], "param_type": "int", "param_description": " the day of the month between 1-31."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n\n\n      This constructor is deprecated.\n    As of JDK version 1.1,\n replaced by Calendar.set(year + 1900, month, date)\n or GregorianCalendar(year + 1900, month, date).\n  \nAllocates a Date object and initializes it so that\n it represents midnight, local time, at the beginning of the day\n specified by the year, month, and\n date arguments.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the year minus 1900."}, {"param_name": ["month"], "param_type": "int", "param_description": " the month between 0-11."}, {"param_name": ["date"], "param_type": "int", "param_description": " the day of the month between 1-31."}, {"param_name": ["hrs"], "param_type": "int", "param_description": " the hours between 0-23."}, {"param_name": ["min"], "param_type": "int", "param_description": " the minutes between 0-59."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n\n\n      This constructor is deprecated.\n    As of JDK version 1.1,\n replaced by Calendar.set(year + 1900, month, date,\n hrs, min) or GregorianCalendar(year + 1900,\n month, date, hrs, min).\n  \nAllocates a Date object and initializes it so that\n it represents the instant at the start of the minute specified by\n the year, month, date,\n hrs, and min arguments, in the local\n time zone.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the year minus 1900."}, {"param_name": ["month"], "param_type": "int", "param_description": " the month between 0-11."}, {"param_name": ["date"], "param_type": "int", "param_description": " the day of the month between 1-31."}, {"param_name": ["hrs"], "param_type": "int", "param_description": " the hours between 0-23."}, {"param_name": ["min"], "param_type": "int", "param_description": " the minutes between 0-59."}, {"param_name": ["sec"], "param_type": "int", "param_description": " the seconds between 0-59."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n\n\n      This constructor is deprecated.\n    As of JDK version 1.1,\n replaced by Calendar.set(year + 1900, month, date,\n hrs, min, sec) or GregorianCalendar(year + 1900,\n month, date, hrs, min, sec).\n  \nAllocates a Date object and initializes it so that\n it represents the instant at the start of the second specified\n by the year, month, date,\n hrs, min, and sec arguments,\n in the local time zone.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a string representation of the date."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n\n\n      This constructor is deprecated.\n    As of JDK version 1.1,\n replaced by DateFormat.parse(String s).\n  \nAllocates a Date object and initializes it so that\n it represents the date and time indicated by the string\n s, which is interpreted as if by the\n Date#parse method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the year minus 1900."}, {"param_name": ["month"], "param_type": "int", "param_description": " the month between 0-11."}, {"param_name": ["date"], "param_type": "int", "param_description": " the day of the month between 1-31."}, {"param_name": ["hrs"], "param_type": "int", "param_description": " the hours between 0-23."}, {"param_name": ["min"], "param_type": "int", "param_description": " the minutes between 0-59."}, {"param_name": ["sec"], "param_type": "int", "param_description": " the seconds between 0-59."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [], "return_description": ["the number of milliseconds since January 1, 1970, 00:00:00 GMT for\n          the date and time specified by the arguments."], "return_type": ["long"]}, "method_name": "UTC", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.set(year + 1900, month, date,\n hrs, min, sec) or GregorianCalendar(year + 1900,\n month, date, hrs, min, sec), using a UTC\n TimeZone, followed by Calendar.getTime().getTime().\n  \nDetermines the date and time based on the arguments. The\n arguments are interpreted as a year, month, day of the month,\n hour of the day, minute within the hour, and second within the\n minute, exactly as for the Date constructor with six\n arguments, except that the arguments are interpreted relative\n to UTC rather than to the local time zone. The time indicated is\n returned represented as the distance, measured in milliseconds,\n of that time from the epoch (00:00:00 GMT on January 1, 1970).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["when"], "param_type": "Date", "param_description": " a date."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if the instant represented\n          by this Date object is strictly later than the\n          instant represented by when;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "after", "method_description": "Tests if this date is after the specified date.\n", "method_declar": ""}, {"params": [{"param_name": ["when"], "param_type": "Date", "param_description": " a date."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if the instant of time\n            represented by this Date object is strictly\n            earlier than the instant represented by when;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "before", "method_description": "Tests if this date is before the specified date.\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this instance."], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Return a copy of this object.\n", "method_declar": ""}, {"params": [{"param_name": ["anotherDate"], "param_type": "Date", "param_description": " the Date to be compared."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value 0 if the argument Date is equal to\n          this Date; a value less than 0 if this Date\n          is before the Date argument; and a value greater than\n      0 if this Date is after the Date argument."], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares two Dates for ordering.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to compare with."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are the same;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares two dates for equality.\n The result is true if and only if the argument is\n not null and is a Date object that\n represents the same point in time, to the millisecond, as this object.\n \n\n Thus, two Date objects are equal if and only if the\n getTime method returns the same long\n value for both.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["instant"], "param_type": "Instant", "param_description": " the instant to convert"}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Date representing the same point on the time-line as\n  the provided instant"], "return_type": ["Date"]}, "method_name": "from", "method_description": "Obtains an instance of Date from an Instant object.\n \n\nInstant uses a precision of nanoseconds, whereas Date\n uses a precision of milliseconds.  The conversion will trancate any\n excess precision information as though the amount in nanoseconds was\n subject to integer division by one million.\n \n\nInstant can store points on the time-line further in the future\n and further in the past than Date. In this scenario, this method\n will throw an exception.\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the day of the month represented by this date."], "return_type": ["int"]}, "method_name": "getDate", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.get(Calendar.DAY_OF_MONTH).\n  \nReturns the day of the month represented by this Date object.\n The value returned is between 1 and 31\n representing the day of the month that contains or begins with the\n instant in time represented by this Date object, as\n interpreted in the local time zone.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the day of the week represented by this date."], "return_type": ["int"]}, "method_name": "getDay", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.get(Calendar.DAY_OF_WEEK).\n  \nReturns the day of the week represented by this date. The\n returned value (0 = Sunday, 1 = Monday,\n 2 = Tuesday, 3 = Wednesday, 4 =\n Thursday, 5 = Friday, 6 = Saturday)\n represents the day of the week that contains or begins with\n the instant in time represented by this Date object,\n as interpreted in the local time zone.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the hour represented by this date."], "return_type": ["int"]}, "method_name": "getHours", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.get(Calendar.HOUR_OF_DAY).\n  \nReturns the hour represented by this Date object. The\n returned value is a number (0 through 23)\n representing the hour within the day that contains or begins\n with the instant in time represented by this Date\n object, as interpreted in the local time zone.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of minutes past the hour represented by this date."], "return_type": ["int"]}, "method_name": "getMinutes", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.get(Calendar.MINUTE).\n  \nReturns the number of minutes past the hour represented by this date,\n as interpreted in the local time zone.\n The value returned is between 0 and 59.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the month represented by this date."], "return_type": ["int"]}, "method_name": "getMonth", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.get(Calendar.MONTH).\n  \nReturns a number representing the month that contains or begins\n with the instant in time represented by this Date object.\n The value returned is between 0 and 11,\n with the value 0 representing January.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of seconds past the minute represented by this date."], "return_type": ["int"]}, "method_name": "getSeconds", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.get(Calendar.SECOND).\n  \nReturns the number of seconds past the minute represented by this date.\n The value returned is between 0 and 61. The\n values 60 and 61 can only occur on those\n Java Virtual Machines that take leap seconds into account.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of milliseconds since January 1, 1970, 00:00:00 GMT\n          represented by this date."], "return_type": ["long"]}, "method_name": "getTime", "method_description": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT\n represented by this Date object.\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the time-zone offset, in minutes, for the current time zone."], "return_type": ["int"]}, "method_name": "getTimezoneOffset", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by -(Calendar.get(Calendar.ZONE_OFFSET) +\n Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000).\n  \nReturns the offset, measured in minutes, for the local time zone\n relative to UTC that is appropriate for the time represented by\n this Date object.\n \n\n For example, in Massachusetts, five time zones west of Greenwich:\n \n\n This method produces the same result as if it computed:\n \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["the year represented by this date, minus 1900."], "return_type": ["int"]}, "method_name": "getYear", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.get(Calendar.YEAR) - 1900.\n  \nReturns a value that is the result of subtracting 1900 from the\n year that contains or begins with the instant in time represented\n by this Date object, as interpreted in the local\n time zone.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code value for this object. The result is the\n exclusive OR of the two halves of the primitive long\n value returned by the Date#getTime\n method. That is, the hash code is the value of the expression:\n \n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a string to be parsed as a date."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [], "return_description": ["the number of milliseconds since January 1, 1970, 00:00:00 GMT\n          represented by the string argument."], "return_type": ["long"]}, "method_name": "parse", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by DateFormat.parse(String s).\n  \nAttempts to interpret the string s as a representation\n of a date and time. If the attempt is successful, the time\n indicated is returned represented as the distance, measured in\n milliseconds, of that time from the epoch (00:00:00 GMT on\n January 1, 1970). If the attempt fails, an\n IllegalArgumentException is thrown.\n \n\n It accepts many syntaxes; in particular, it recognizes the IETF\n standard date syntax: \"Sat, 12 Aug 1995 13:30:00 GMT\". It also\n understands the continental U.S. time-zone abbreviations, but for\n general use, a time-zone offset should be used: \"Sat, 12 Aug 1995\n 13:30:00 GMT+0430\" (4 hours, 30 minutes west of the Greenwich\n meridian). If no time zone is specified, the local time zone is\n assumed. GMT and UTC are considered equivalent.\n \n\n The string s is processed from left to right, looking for\n data of interest. Any material in s that is within the\n ASCII parenthesis characters ( and ) is ignored.\n Parentheses may be nested. Otherwise, the only characters permitted\n within s are these ASCII characters:\n \n\n A consecutive sequence of decimal digits is treated as a decimal\n number:\n\n A consecutive sequence of letters is regarded as a word and treated\n as follows:\n\n Once the entire string s has been scanned, it is converted to a time\n result in one of two ways. If a time zone or time-zone offset has been\n recognized, then the year, month, day of month, hour, minute, and\n second are interpreted in UTC and then the time-zone offset is\n applied. Otherwise, the year, month, day of month, hour, minute, and\n second are interpreted in the local time zone.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["date"], "param_type": "int", "param_description": " the day of the month value between 1-31."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDate", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.set(Calendar.DAY_OF_MONTH, int date).\n  \nSets the day of the month of this Date object to the\n specified value. This Date object is modified so that\n it represents a point in time within the specified day of the\n month, with the year, month, hour, minute, and second the same\n as before, as interpreted in the local time zone. If the date\n was April 30, for example, and the date is set to 31, then it\n will be treated as if it were on May 1, because April has only\n 30 days.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["hours"], "param_type": "int", "param_description": " the hour value."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setHours", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.set(Calendar.HOUR_OF_DAY, int hours).\n  \nSets the hour of this Date object to the specified value.\n This Date object is modified so that it represents a point\n in time within the specified hour of the day, with the year, month,\n date, minute, and second the same as before, as interpreted in the\n local time zone.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["minutes"], "param_type": "int", "param_description": " the value of the minutes."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMinutes", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.set(Calendar.MINUTE, int minutes).\n  \nSets the minutes of this Date object to the specified value.\n This Date object is modified so that it represents a point\n in time within the specified minute of the hour, with the year, month,\n date, hour, and second the same as before, as interpreted in the\n local time zone.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["month"], "param_type": "int", "param_description": " the month value between 0-11."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setMonth", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.set(Calendar.MONTH, int month).\n  \nSets the month of this date to the specified value. This\n Date object is modified so that it represents a point\n in time within the specified month, with the year, date, hour,\n minute, and second the same as before, as interpreted in the\n local time zone. If the date was October 31, for example, and\n the month is set to June, then the new date will be treated as\n if it were on July 1, because June has only 30 days.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["seconds"], "param_type": "int", "param_description": " the seconds value."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSeconds", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.set(Calendar.SECOND, int seconds).\n  \nSets the seconds of this Date to the specified value.\n This Date object is modified so that it represents a\n point in time within the specified second of the minute, with\n the year, month, date, hour, and minute the same as before, as\n interpreted in the local time zone.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["time"], "param_type": "long", "param_description": " the number of milliseconds."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTime", "method_description": "Sets this Date object to represent a point in time that is\n time milliseconds after January 1, 1970 00:00:00 GMT.\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the year value."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setYear", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by Calendar.set(Calendar.YEAR, year + 1900).\n  \nSets the year of this Date object to be the specified\n value plus 1900. This Date object is modified so\n that it represents a point in time within the specified year,\n with the month, date, hour, minute, and second the same as\n before, as interpreted in the local time zone. (Of course, if\n the date was February 29, for example, and the year is set to a\n non-leap year, then the new date will be treated as if it were\n on March 1.)\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this date, using the Internet GMT\n          conventions."], "return_type": ["String"]}, "method_name": "toGMTString", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by DateFormat.format(Date date), using a\n GMT TimeZone.\n  \nCreates a string representation of this Date object of\n the form:\n \n\n The result does not depend on the local time zone.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["an instant representing the same point on the time-line as\n  this Date object"], "return_type": ["Instant"]}, "method_name": "toInstant", "method_description": "Converts this Date object to an Instant.\n \n\n The conversion creates an Instant that represents the same\n point on the time-line as this Date.\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this date, using the locale\n          conventions."], "return_type": ["String"]}, "method_name": "toLocaleString", "method_description": "\n\n\n      This method was deprecated\n      in API level 15.\n    As of JDK version 1.1,\n replaced by DateFormat.format(Date date).\n  \nCreates a string representation of this Date object in an\n implementation-dependent form. The intent is that the form should\n be familiar to the user of the Java application, wherever it may\n happen to be running. The intent is comparable to that of the\n \"%c\" format supported by the strftime()\n function of ISO\u00a0C.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this date."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Converts this Date object to a String\n of the form:\n \nSee also:\n", "method_declar": ""}], "class_name": "Date", "Vars": null}