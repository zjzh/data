{"package_name": "java.util", "subclass_list": [], "class_description": "A simple service-provider loading facility. A service is a well-known set of interfaces and (usually\n abstract) classes.  A service provider is a specific implementation\n of a service.  The classes in a provider typically implement the interfaces\n and subclass the classes defined in the service itself.  Service providers\n can be installed in an implementation of the Java platform in the form of\n extensions, that is, jar files placed into any of the usual extension\n directories.  Providers can also be made available by adding them to the\n application's class path or by some other platform-specific means. For the purpose of loading, a service is represented by a single type,\n that is, a single interface or abstract class.  (A concrete class can be\n used, but this is not recommended.)  A provider of a given service contains\n one or more concrete classes that extend this service type with data\n and code specific to the provider.  The provider class is typically\n not the entire provider itself but rather a proxy which contains enough\n information to decide whether the provider is able to satisfy a particular\n request together with code that can create the actual provider on demand.\n The details of provider classes tend to be highly service-specific; no\n single class or interface could possibly unify them, so no such type is\n defined here.  The only requirement enforced by this facility is that\n provider classes must have a zero-argument constructor so that they can be\n instantiated during loading. A service provider is identified by placing a\n provider-configuration file in the resource directory\n META-INF/services.  The file's name is the fully-qualified binary name of the service's type.\n The file contains a list of fully-qualified binary names of concrete\n provider classes, one per line.  Space and tab characters surrounding each\n name, as well as blank lines, are ignored.  The comment character is\n '#' ('\\u0023',\n NUMBER SIGN); on\n each line all characters following the first comment character are ignored.\n The file must be encoded in UTF-8. If a particular concrete provider class is named in more than one\n configuration file, or is named in the same configuration file more than\n once, then the duplicates are ignored.  The configuration file naming a\n particular provider need not be in the same jar file or other distribution\n unit as the provider itself.  The provider must be accessible from the same\n class loader that was initially queried to locate the configuration file;\n note that this is not necessarily the class loader from which the file was\n actually loaded. Providers are located and instantiated lazily, that is, on demand.  A\n service loader maintains a cache of the providers that have been loaded so\n far.  Each invocation of the iterator method returns an\n iterator that first yields all of the elements of the cache, in\n instantiation order, and then lazily locates and instantiates any remaining\n providers, adding each one to the cache in turn.  The cache can be cleared\n via the reload method. Service loaders always execute in the security context of the caller.\n Trusted system code should typically invoke the methods in this class, and\n the methods of the iterators which they return, from within a privileged\n security context. Instances of this class are not safe for use by multiple concurrent\n threads. Unless otherwise specified, passing a null argument to any\n method in this class will cause a NullPointerException to be thrown. Example\n Suppose we have a service type com.example.CodecSet which is\n intended to represent sets of encoder/decoder pairs for some protocol.  In\n this case it is an abstract class with two abstract methods: If com.example.impl.StandardCodecs is an implementation of the\n CodecSet service then its jar file also contains a file named This file contains the single line: The CodecSet class creates and saves a single service instance\n at initialization: To locate an encoder for a given encoding name it defines a static\n factory method which iterates through the known and available providers,\n returning only when it has located a suitable encoder or has run out of\n providers. A getDecoder method is defined similarly. Usage Note If\n the class path of a class loader that is used for provider loading includes\n remote network URLs then those URLs will be dereferenced in the process of\n searching for provider-configuration files. This activity is normal, although it may cause puzzling entries to be\n created in web-server logs.  If a web server is not configured correctly,\n however, then this activity may cause the provider-loading algorithm to fail\n spuriously. A web server should return an HTTP 404 (Not Found) response when a\n requested resource does not exist.  Sometimes, however, web servers are\n erroneously configured to return an HTTP 200 (OK) response along with a\n helpful HTML error page in such cases.  This will cause a ServiceConfigurationError to be thrown when this class attempts to parse\n the HTML page as a provider-configuration file.  The best solution to this\n problem is to fix the misconfigured web server to return the correct\n response code (HTTP 404) along with the HTML error page. ", "class_type": "class", "typealias": [], "interface_list": ["Iterable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "ServiceLoader", "Vars": null}