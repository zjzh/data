{"package_name": "java.util", "subclass_list": [], "class_description": "A facility for threads to schedule tasks for future execution in a\n background thread.  Tasks may be scheduled for one-time execution, or for\n repeated execution at regular intervals. Corresponding to each Timer object is a single background\n thread that is used to execute all of the timer's tasks, sequentially.\n Timer tasks should complete quickly.  If a timer task takes excessive time\n to complete, it \"hogs\" the timer's task execution thread.  This can, in\n turn, delay the execution of subsequent tasks, which may \"bunch up\" and\n execute in rapid succession when (and if) the offending task finally\n completes. After the last live reference to a Timer object goes away\n and all outstanding tasks have completed execution, the timer's task\n execution thread terminates gracefully (and becomes subject to garbage\n collection).  However, this can take arbitrarily long to occur.  By\n default, the task execution thread does not run as a daemon thread,\n so it is capable of keeping an application from terminating.  If a caller\n wants to terminate a timer's task execution thread rapidly, the caller\n should invoke the timer's cancel method. If the timer's task execution thread terminates unexpectedly, for\n example, because its stop method is invoked, any further\n attempt to schedule a task on the timer will result in an\n IllegalStateException, as if the timer's cancel\n method had been invoked. This class is thread-safe: multiple threads can share a single\n Timer object without the need for external synchronization. This class does not offer real-time guarantees: it schedules\n tasks using the Object.wait(long) method. Java 5.0 introduced the java.util.concurrent package and\n one of the concurrency utilities therein is the ScheduledThreadPoolExecutor which is a thread pool for repeatedly\n executing tasks at a given rate or delay.  It is effectively a more\n versatile replacement for the Timer/TimerTask\n combination, as it allows multiple service threads, accepts various\n time units, and doesn't require subclassing TimerTask (just\n implement Runnable).  Configuring ScheduledThreadPoolExecutor with one thread makes it equivalent to\n Timer. Implementation note: This class scales to large numbers of concurrently\n scheduled tasks (thousands should present no problem).  Internally,\n it uses a binary heap to represent its task queue, so the cost to schedule\n a task is O(log n), where n is the number of concurrently scheduled tasks. Implementation note: All constructors start a timer thread. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Timer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new timer.  The associated thread does not\nThread#setDaemon.\n", "method_declar": ""}, {"params": [{"param_name": ["isDaemon"], "param_type": "boolean", "param_description": " true if the associated thread should run as a daemon."}], "class_name": "Timer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new timer whose associated thread may be specified to\n Thread#setDaemon.\n A daemon thread is called for if the timer will be used to\n schedule repeating \"maintenance activities\", which must be\n performed as long as the application is running, but should not\n prolong the lifetime of the application.\n", "method_declar": ""}, {"params": [{"param_name": ["name"], "param_type": "String", "param_description": " the name of the associated thread"}], "class_name": "Timer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new timer whose associated thread has the specified name.\n The associated thread does not\nThread#setDaemon.\n", "method_declar": ""}, {"params": [{"param_name": ["name"], "param_type": "String", "param_description": " the name of the associated thread"}, {"param_name": ["isDaemon"], "param_type": "boolean", "param_description": " true if the associated thread should run as a daemon"}], "class_name": "Timer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new timer whose associated thread has the specified name,\n and may be specified to\n Thread#setDaemon.\n", "method_declar": ""}, {"params": [], "class_name": "Timer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "cancel", "method_description": "Terminates this timer, discarding any currently scheduled tasks.\n Does not interfere with a currently executing task (if it exists).\n Once a timer has been terminated, its execution thread terminates\n gracefully, and no more tasks may be scheduled on it.\n\n \nNote that calling this method from within the run method of a\n timer task that was invoked by this timer absolutely guarantees that\n the ongoing task execution is the last task execution that will ever\n be performed by this timer.\n\n \nThis method may be called repeatedly; the second and subsequent\n calls have no effect.\n", "method_declar": ""}, {"params": [], "class_name": "Timer", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of tasks removed from the queue."], "return_type": ["int"]}, "method_name": "purge", "method_description": "Removes all cancelled tasks from this timer's task queue.  Calling\n this method has no effect on the behavior of the timer, but\n eliminates the references to the cancelled tasks from the queue.\n If there are no external references to these tasks, they become\n eligible for garbage collection.\n\n \nMost programs will have no need to call this method.\n It is designed for use by the rare application that cancels a large\n number of tasks.  Calling this method trades time for space: the\n runtime of the method may be proportional to n + c log n, where n\n is the number of tasks in the queue and c is the number of cancelled\n tasks.\n\n \nNote that it is permissible to call this method from within a\n a task scheduled on this timer.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "TimerTask", "param_description": " task to be scheduled."}, {"param_name": ["delay"], "param_type": "long", "param_description": " delay in milliseconds before task is to be executed."}, {"param_name": ["period"], "param_type": "long", "param_description": " time in milliseconds between successive task executions."}], "class_name": "Timer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "schedule", "method_description": "Schedules the specified task for repeated fixed-delay execution,\n beginning after the specified delay.  Subsequent executions take place\n at approximately regular intervals separated by the specified period.\n\n \nIn fixed-delay execution, each execution is scheduled relative to\n the actual execution time of the previous execution.  If an execution\n is delayed for any reason (such as garbage collection or other\n background activity), subsequent executions will be delayed as well.\n In the long run, the frequency of execution will generally be slightly\n lower than the reciprocal of the specified period (assuming the system\n clock underlying Object.wait(long) is accurate).\n\n \nFixed-delay execution is appropriate for recurring activities\n that require \"smoothness.\"  In other words, it is appropriate for\n activities where it is more important to keep the frequency accurate\n in the short run than in the long run.  This includes most animation\n tasks, such as blinking a cursor at regular intervals.  It also includes\n tasks wherein regular activity is performed in response to human\n input, such as automatically repeating a character as long as a key\n is held down.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "TimerTask", "param_description": " task to be scheduled."}, {"param_name": ["time"], "param_type": "Date", "param_description": " time at which task is to be executed."}], "class_name": "Timer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "schedule", "method_description": "Schedules the specified task for execution at the specified time.  If\n the time is in the past, the task is scheduled for immediate execution.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "TimerTask", "param_description": " task to be scheduled."}, {"param_name": ["firstTime"], "param_type": "Date", "param_description": " First time at which task is to be executed."}, {"param_name": ["period"], "param_type": "long", "param_description": " time in milliseconds between successive task executions."}], "class_name": "Timer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "schedule", "method_description": "Schedules the specified task for repeated fixed-delay execution,\n beginning at the specified time. Subsequent executions take place at\n approximately regular intervals, separated by the specified period.\n\n \nIn fixed-delay execution, each execution is scheduled relative to\n the actual execution time of the previous execution.  If an execution\n is delayed for any reason (such as garbage collection or other\n background activity), subsequent executions will be delayed as well.\n In the long run, the frequency of execution will generally be slightly\n lower than the reciprocal of the specified period (assuming the system\n clock underlying Object.wait(long) is accurate).  As a\n consequence of the above, if the scheduled first time is in the past,\n it is scheduled for immediate execution.\n\n \nFixed-delay execution is appropriate for recurring activities\n that require \"smoothness.\"  In other words, it is appropriate for\n activities where it is more important to keep the frequency accurate\n in the short run than in the long run.  This includes most animation\n tasks, such as blinking a cursor at regular intervals.  It also includes\n tasks wherein regular activity is performed in response to human\n input, such as automatically repeating a character as long as a key\n is held down.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "TimerTask", "param_description": " task to be scheduled."}, {"param_name": ["delay"], "param_type": "long", "param_description": " delay in milliseconds before task is to be executed."}], "class_name": "Timer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "schedule", "method_description": "Schedules the specified task for execution after the specified delay.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "TimerTask", "param_description": " task to be scheduled."}, {"param_name": ["delay"], "param_type": "long", "param_description": " delay in milliseconds before task is to be executed."}, {"param_name": ["period"], "param_type": "long", "param_description": " time in milliseconds between successive task executions."}], "class_name": "Timer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "scheduleAtFixedRate", "method_description": "Schedules the specified task for repeated fixed-rate execution,\n beginning after the specified delay.  Subsequent executions take place\n at approximately regular intervals, separated by the specified period.\n\n \nIn fixed-rate execution, each execution is scheduled relative to the\n scheduled execution time of the initial execution.  If an execution is\n delayed for any reason (such as garbage collection or other background\n activity), two or more executions will occur in rapid succession to\n \"catch up.\"  In the long run, the frequency of execution will be\n exactly the reciprocal of the specified period (assuming the system\n clock underlying Object.wait(long) is accurate).\n\n \nFixed-rate execution is appropriate for recurring activities that\n are sensitive to absolute time, such as ringing a chime every\n hour on the hour, or running scheduled maintenance every day at a\n particular time.  It is also appropriate for recurring activities\n where the total time to perform a fixed number of executions is\n important, such as a countdown timer that ticks once every second for\n ten seconds.  Finally, fixed-rate execution is appropriate for\n scheduling multiple repeating timer tasks that must remain synchronized\n with respect to one another.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "TimerTask", "param_description": " task to be scheduled."}, {"param_name": ["firstTime"], "param_type": "Date", "param_description": " First time at which task is to be executed."}, {"param_name": ["period"], "param_type": "long", "param_description": " time in milliseconds between successive task executions."}], "class_name": "Timer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "scheduleAtFixedRate", "method_description": "Schedules the specified task for repeated fixed-rate execution,\n beginning at the specified time. Subsequent executions take place at\n approximately regular intervals, separated by the specified period.\n\n \nIn fixed-rate execution, each execution is scheduled relative to the\n scheduled execution time of the initial execution.  If an execution is\n delayed for any reason (such as garbage collection or other background\n activity), two or more executions will occur in rapid succession to\n \"catch up.\"  In the long run, the frequency of execution will be\n exactly the reciprocal of the specified period (assuming the system\n clock underlying Object.wait(long) is accurate).  As a\n consequence of the above, if the scheduled first time is in the past,\n then any \"missed\" executions will be scheduled for immediate \"catch up\"\n execution.\n\n \nFixed-rate execution is appropriate for recurring activities that\n are sensitive to absolute time, such as ringing a chime every\n hour on the hour, or running scheduled maintenance every day at a\n particular time.  It is also appropriate for recurring activities\n where the total time to perform a fixed number of executions is\n important, such as a countdown timer that ticks once every second for\n ten seconds.  Finally, fixed-rate execution is appropriate for\n scheduling multiple repeating timer tasks that must remain synchronized\n with respect to one another.\n", "method_declar": ""}], "class_name": "Timer", "Vars": null}