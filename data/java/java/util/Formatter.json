{"package_name": "java.util", "subclass_list": [], "class_description": "An interpreter for printf-style format strings.  This class provides support\n for layout justification and alignment, common formats for numeric, string,\n and date/time data, and locale-specific output.  Common Java types such as\n byte, BigDecimal, and Calendar\n are supported.  Limited formatting customization for arbitrary user types is\n provided through the Formattable interface. Formatters are not necessarily safe for multithreaded access.  Thread\n safety is optional and is the responsibility of users of methods in this\n class. Formatted printing for the Java language is heavily inspired by C's\n printf.  Although the format strings are similar to C, some\n customizations have been made to accommodate the Java language and exploit\n some of its features.  Also, Java formatting is more strict than C's; for\n example, if a conversion is incompatible with a flag, an exception will be\n thrown.  In C inapplicable flags are silently ignored.  The format strings\n are thus intended to be recognizable to C programmers but not necessarily\n completely compatible with those in C. Examples of expected usage: Convenience methods for common formatting requests exist as illustrated\n by the following invocations: Like C's sprintf(3), Strings may be formatted using the static\n method String#format(String,Object...): This specification is divided into two sections.  The first section, Summary, covers the basic formatting concepts.  This\n section is intended for users who want to get started quickly and are\n familiar with formatted printing in other programming languages.  The second\n section, Details, covers the specific implementation\n details.  It is intended for users who want more precise specification of\n formatting behavior. This section is intended to provide a brief overview of formatting\n concepts.  For precise behavioral details, refer to the Details section. Every method which produces formatted output requires a format\n string and an argument list.  The format string is a String which may contain fixed text and one or more embedded format\n specifiers.  Consider the following example: Conversions are divided into the following categories: The following table summarizes the supported conversions.  Conversions\n denoted by an upper-case character (i.e. 'B', 'H',\n 'S', 'C', 'X', 'E', 'G',\n 'A', and 'T') are the same as those for the corresponding\n lower-case conversion characters except that the result is converted to\n upper case according to the rules of the prevailing Locale.  The result is equivalent to the following invocation of String#toUpperCase() Any characters not explicitly defined as conversions are illegal and are\n reserved for future extensions. The following date and time conversion suffix characters are defined for\n the 't' and 'T' conversions.  The types are similar to but\n not completely identical to those defined by GNU date and POSIX\n strftime(3c).  Additional conversion types are provided to access\n Java-specific functionality (e.g. 'L' for milliseconds within the\n second). The following conversion characters are used for formatting times: The following conversion characters are used for formatting dates: The following conversion characters are used for formatting common\n date/time compositions. Any characters not explicitly defined as date/time conversion suffixes\n are illegal and are reserved for future extensions. The following table summarizes the supported flags.  y means the\n flag is supported for the indicated argument types. 1 Depends on the definition of Formattable. 2 For 'd' conversion only. 3 For 'o', 'x', and 'X'\n conversions only. 4 For 'd', 'o', 'x', and\n 'X' conversions applied to BigInteger\n or 'd' applied to byte, Byte, short, Short, int and Integer, long, and Long. 5 For 'e', 'E', 'f',\n 'g', and 'G' conversions only. Any characters not explicitly defined as flags are illegal and are\n reserved for future extensions. The width is the minimum number of characters to be written to the\n output.  For the line separator conversion, width is not applicable; if it\n is provided, an exception will be thrown. For general argument types, the precision is the maximum number of\n characters to be written to the output. For the floating-point conversions 'a', 'A', 'e',\n 'E', and 'f' the precision is the number of digits after the\n radix point.  If the conversion is 'g' or 'G', then the\n precision is the total number of digits in the resulting magnitude after\n rounding. For character, integral, and date/time argument types and the percent\n and line separator conversions, the precision is not applicable; if a\n precision is provided, an exception will be thrown. The argument index is a decimal integer indicating the position of the\n argument in the argument list.  The first argument is referenced by\n \"1$\", the second by \"2$\", etc. Another way to reference arguments by position is to use the\n '<' ('\\u003c') flag, which causes the argument for\n the previous format specifier to be re-used.  For example, the following two\n statements would produce identical strings: This section is intended to provide behavioral details for formatting,\n including conditions and exceptions, supported data types, localization, and\n interactions between flags, conversions, and data types.  For an overview of\n formatting concepts, refer to the Summary Any characters not explicitly defined as conversions, date/time\n conversion suffixes, or flags are illegal and are reserved for\n future extensions.  Use of such a character in a format string will\n cause an UnknownFormatConversionException or UnknownFormatFlagsException to be thrown. If the format specifier contains a width or precision with an invalid\n value or which is otherwise unsupported, then a IllegalFormatWidthException or IllegalFormatPrecisionException\n respectively will be thrown. If a format specifier contains a conversion character that is not\n applicable to the corresponding argument, then an IllegalFormatConversionException will be thrown. All specified exceptions may be thrown by any of the format\n methods of Formatter as well as by any format convenience\n methods such as String#format(String,Object...) and\n PrintStream.printf. Conversions denoted by an upper-case character (i.e. 'B',\n 'H', 'S', 'C', 'X', 'E',\n 'G', 'A', and 'T') are the same as those for the\n corresponding lower-case conversion characters except that the result is\n converted to upper case according to the rules of the prevailing Locale.  The result is equivalent to the following\n invocation of String#toUpperCase() The following general conversions may be applied to any argument type: The following flags apply to general conversions: The width is the minimum number of characters to\n be written to the\n output.  If the length of the converted value is less than the width then\n the output will be padded by '\u00a0\u00a0' ('\\u0020')\n until the total number of characters equals the width.  The padding is on\n the left by default.  If the '-' flag is given, then the padding\n will be on the right.  If the width is not specified then there is no\n minimum. The precision is the maximum number of characters to be written to the\n output.  The precision is applied before the width, thus the output will be\n truncated to precision characters even if the width is greater than\n the precision.  If the precision is not specified then there is no explicit\n limit on the number of characters. The '-' flag defined for General\n conversions applies.  If the '#' flag is given, then a FormatFlagsConversionMismatchException will be thrown. The width is defined as for General conversions. The precision is not applicable.  If the precision is specified then an\n IllegalFormatPrecisionException will be thrown. Numeric conversions are divided into the following categories: Numeric types will be formatted according to the following algorithm: Number Localization Algorithm After digits are obtained for the integer part, fractional part, and\n exponent (as appropriate for the data type), the following transformation\n is applied: If the value is NaN or positive infinity the literal strings \"NaN\" or\n \"Infinity\" respectively, will be output.  If the value is negative infinity,\n then the output will be \"(Infinity)\" if the '(' flag is given\n otherwise the output will be \"-Infinity\".  These values are not localized. Byte, Short, Integer, and Long The following conversions may be applied to byte, Byte,\n short, Short, int and Integer,\n long, and Long. If the conversion is 'o', 'x', or 'X' and\n both the '#' and the '0' flags are given, then result will\n contain the radix indicator ('0' for octal and \"0x\" or\n \"0X\" for hexadecimal), some number of zeros (based on the width),\n and the value. If the '-' flag is not given, then the space padding will occur\n before the sign. The following flags apply to numeric integral\n conversions: If no flags are given the default formatting is\n as follows: The width is the minimum number of characters to\n be written to the output.  This includes any signs, digits, grouping\n separators, radix indicator, and parentheses.  If the length of the\n converted value is less than the width then the output will be padded by\n spaces ('\\u0020') until the total number of characters equals\n width.  The padding is on the left by default.  If '-' flag is\n given then the padding will be on the right.  If width is not specified then\n there is no minimum. The precision is not applicable.  If precision is specified then an\n IllegalFormatPrecisionException will be thrown. BigInteger The following conversions may be applied to BigInteger. If the conversion is 'o', 'x', or 'X' and\n both the '#' and the '0' flags are given, then result will\n contain the base indicator ('0' for octal and \"0x\" or\n \"0X\" for hexadecimal), some number of zeros (based on the width),\n and the value. If the '0' flag is given and the value is negative, then the\n zero padding will occur after the sign. If the '-' flag is not given, then the space padding will occur\n before the sign. All flags defined for Byte, Short, Integer, and\n Long apply.  The default behavior when no flags are\n given is the same as for Byte, Short, Integer, and Long. The specification of width is the same as\n defined for Byte, Short, Integer, and Long. The precision is not applicable.  If precision is specified then an\n IllegalFormatPrecisionException will be thrown. Float and Double The following conversions may be applied to float, Float, double and Double. All flags defined for Byte, Short, Integer, and\n Long apply. If the '#' flag is given, then the decimal separator will\n always be present. If no flags are given the default formatting\n is as follows: The width is the minimum number of characters\n to be written to the output.  This includes any signs, digits, grouping\n separators, decimal separators, exponential symbol, radix indicator,\n parentheses, and strings representing infinity and NaN as applicable.  If\n the length of the converted value is less than the width then the output\n will be padded by spaces ('\\u0020') until the total number of\n characters equals width.  The padding is on the left by default.  If the\n '-' flag is given then the padding will be on the right.  If width\n is not specified then there is no minimum. If the conversion is 'e',\n 'E' or 'f', then the precision is the number of digits\n after the decimal separator.  If the precision is not specified, then it is\n assumed to be 6. If the conversion is 'g' or 'G', then the precision is\n the total number of significant digits in the resulting magnitude after\n rounding.  If the precision is not specified, then the default value is\n 6.  If the precision is 0, then it is taken to be\n 1. If the conversion is 'a' or 'A', then the precision\n is the number of hexadecimal digits after the radix point.  If the\n precision is not provided, then all of the digits as returned by Double#toHexString(double) will be output. BigDecimal The following conversions may be applied BigDecimal. All flags defined for Byte, Short, Integer, and\n Long apply. If the '#' flag is given, then the decimal separator will\n always be present. The default behavior when no flags are\n given is the same as for Float and Double. The specification of width and precision is the same as defined for Float and\n Double. This conversion may be applied to long, Long, Calendar, Date and TemporalAccessor The following date and time conversion character suffixes are defined\n for the 't' and 'T' conversions.  The types are similar to\n but not completely identical to those defined by GNU date and\n POSIX strftime(3c).  Additional conversion types are provided to\n access Java-specific functionality (e.g. 'L' for milliseconds\n within the second). The following conversion characters are used for formatting times: The following conversion characters are used for formatting dates: The following conversion characters are used for formatting common\n date/time compositions. The '-' flag defined for General\n conversions applies.  If the '#' flag is given, then a FormatFlagsConversionMismatchException will be thrown. The width is the minimum number of characters to\n be written to the output.  If the length of the converted value is less than\n the width then the output will be padded by spaces\n ('\\u0020') until the total number of characters equals width.\n The padding is on the left by default.  If the '-' flag is given\n then the padding will be on the right.  If width is not specified then there\n is no minimum. The precision is not applicable.  If the precision is specified then an\n IllegalFormatPrecisionException will be thrown. The conversion does not correspond to any argument. The conversion does not correspond to any argument. Flags, width, and precision are not applicable.  If any are provided an\n IllegalFormatFlagsException, IllegalFormatWidthException,\n and IllegalFormatPrecisionException, respectively will be thrown. Format specifiers can reference arguments in three ways: It is possible to have a format string which uses all forms of indexing,\n for example: The maximum number of arguments is limited by the maximum dimension of a\n Java array as defined by\n The Java\u2122 Virtual Machine Specification.\n If the argument index is does not correspond to an\n available argument, then a MissingFormatArgumentException is thrown. If there are more arguments than format specifiers, the extra arguments\n are ignored. Unless otherwise specified, passing a null argument to any\n method or constructor in this class will cause a NullPointerException to be thrown. ", "class_type": "class", "typealias": [], "interface_list": ["Closeable", "Flushable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "Formatter", "Vars": null}