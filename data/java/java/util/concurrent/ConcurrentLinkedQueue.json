{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "An unbounded thread-safe Queue based on linked nodes.\n This queue orders elements FIFO (first-in-first-out).\n The head of the queue is that element that has been on the\n queue the longest time.\n The tail of the queue is that element that has been on the\n queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.\n A ConcurrentLinkedQueue is an appropriate choice when\n many threads will share access to a common collection.\n Like most other concurrent collection implementations, this class\n does not permit the use of null elements. This implementation employs an efficient non-blocking\n algorithm based on one described in\n \n Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue\n Algorithms by Maged M. Michael and Michael L. Scott. Iterators are weakly consistent, returning elements\n reflecting the state of the queue at some point at or since the\n creation of the iterator.  They do not throw ConcurrentModificationException, and may proceed concurrently\n with other operations.  Elements contained in the queue since the creation\n of the iterator will be returned exactly once. Beware that, unlike in most collections, the size method\n is NOT a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations addAll,\n removeAll, retainAll, containsAll,\n equals, and toArray are not guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an addAll operation might view only some\n of the added elements. This class and its iterator implement all of the optional\n methods of the Queue and Iterator interfaces. Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n ConcurrentLinkedQueue\nhappen-before\n actions subsequent to the access or removal of that element from\n the ConcurrentLinkedQueue in another thread. ", "class_type": "class", "typealias": [], "interface_list": ["Queue", "Serializable"], "class_inherit_list": ["AbstractQueue"], "Methods": [{"params": [], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a ConcurrentLinkedQueue that is initially empty.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection of elements to initially contain"}], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a ConcurrentLinkedQueue\n initially containing the elements of the given collection,\n added in traversal order of the collection's iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never throw\n IllegalStateException or return false.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the elements to be inserted into this queue"}], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "addAll", "method_description": "Appends all of the elements in the specified collection to the end of\n this queue, in the order that they are returned by the specified\n collection's iterator.  Attempts to addAll of a queue to\n itself result in IllegalArgumentException.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be checked for containment in this queue"}], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this queue contains the specified element.\n More formally, returns true if and only if this queue contains\n at least one element e such that o.equals(e).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue contains no elements"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Returns true if this queue contains no elements.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this queue in proper sequence"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n \nThe returned iterator is\n weakly consistent.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Queue#offer)"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never return false.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this queue is empty"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Retrieves, but does not remove, the head of this queue,\n or returns null if this queue is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this queue is empty"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue,\n or returns null if this queue is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this queue, if present"}], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element e such\n that o.equals(e), if this queue contains one or more such\n elements.\n Returns true if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this queue"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this queue.  If this queue\n contains more than Integer.MAX_VALUE elements, returns\n Integer.MAX_VALUE.\n\n \nBeware that, unlike in most collections, this method is\n NOT a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current\n number of elements requires an O(n) traversal.\n Additionally, if elements are added or removed during execution\n of this method, the returned result may be inaccurate.  Thus,\n this method is typically not very useful in concurrent\n applications.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this queue"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Returns a Spliterator over the elements in this queue.\n\n \nThe returned spliterator is\n weakly consistent.\n\n \nThe Spliterator reports Spliterator#CONCURRENT,\n Spliterator#ORDERED, and Spliterator#NONNULL.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose"}], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n \nIf this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n null.\n\n \nLike the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \nSuppose x is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of String:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue, in\n proper sequence.\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this collection"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this collection.  The string\n representation consists of a list of the collection's elements in the\n order they are returned by its iterator, enclosed in square brackets\n (\"[]\").  Adjacent elements are separated by the characters\n \", \" (comma and space).  Elements are converted to strings as\n by String#valueOf(Object).\n", "method_declar": ""}], "class_name": "ConcurrentLinkedQueue", "Vars": null}