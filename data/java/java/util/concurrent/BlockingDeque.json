{"package_name": "java.util.concurrent", "subclass_list": ["LinkedBlockingDeque", "LinkedBlockingDeque", "BlockingDeque"], "class_description": "A Deque that additionally supports blocking operations that wait\n for the deque to become non-empty when retrieving an element, and wait for\n space to become available in the deque when storing an element. BlockingDeque methods come in four forms, with different ways\n of handling operations that cannot be satisfied immediately, but may be\n satisfied at some point in the future:\n one throws an exception, the second returns a special value (either\n null or false, depending on the operation), the third\n blocks the current thread indefinitely until the operation can succeed,\n and the fourth blocks for only a given maximum time limit before giving\n up.  These methods are summarized in the following table: Like any BlockingQueue, a BlockingDeque is thread safe,\n does not permit null elements, and may (or may not) be\n capacity-constrained. A BlockingDeque implementation may be used directly as a FIFO\n BlockingQueue. The methods inherited from the\n BlockingQueue interface are precisely equivalent to\n BlockingDeque methods as indicated in the following table: Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n BlockingDeque\nhappen-before\n actions subsequent to the access or removal of that element from\n the BlockingDeque in another thread. This interface is a member of the\n \n Java Collections Framework. ", "class_type": "interface", "typealias": [], "interface_list": ["BlockingQueue", "Deque"], "class_inherit_list": [], "Methods": [], "class_name": "BlockingDeque", "Vars": null}