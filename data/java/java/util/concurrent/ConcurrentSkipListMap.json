{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A scalable concurrent ConcurrentNavigableMap implementation.\n The map is sorted according to the Comparable of its keys, or by a Comparator provided at map\n creation time, depending on which constructor is used. This class implements a concurrent variant of SkipLists\n providing expected average log(n) time cost for the\n containsKey, get, put and\n remove operations and their variants.  Insertion, removal,\n update, and access operations safely execute concurrently by\n multiple threads. Iterators and spliterators are\n weakly consistent. Ascending key ordered views and their iterators are faster than\n descending ones. All Map.Entry pairs returned by methods in this class\n and its views represent snapshots of mappings at the time they were\n produced. They do not support the Entry.setValue\n method. (Note however that it is possible to change mappings in the\n associated map using put, putIfAbsent, or\n replace, depending on exactly which effect you need.) Beware that, unlike in most collections, the size\n method is not a constant-time operation. Because of the\n asynchronous nature of these maps, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations putAll, equals,\n toArray, containsValue, and clear are\n not guaranteed to be performed atomically. For example, an\n iterator operating concurrently with a putAll operation\n might view only some of the added elements. This class and its views and iterators implement all of the\n optional methods of the Map and Iterator\n interfaces. Like most other concurrent collections, this class does\n not permit the use of null keys or values because some\n null return values cannot be reliably distinguished from the absence of\n elements. ", "class_type": "class", "typealias": [], "interface_list": ["ConcurrentNavigableMap<K", "\u00a0V>", "Cloneable", "Serializable"], "class_inherit_list": ["AbstractMap<K,\u00a0V>"], "Methods": [{"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty map, sorted according to the\n Comparable of the keys.\n", "method_declar": ""}, {"params": [{"param_name": ["comparator"], "param_type": "Comparator", "param_description": " the comparator that will be used to order this map.\n        If null, the Comparable of the keys will be used."}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty map, sorted according to the specified\n comparator.\n", "method_declar": ""}, {"params": [{"param_name": ["m"], "param_type": "Map", "param_description": " the map whose mappings are to be placed in this map"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new map containing the same mappings as the given map,\n sorted according to the Comparable of\n the keys.\n", "method_declar": ""}, {"params": [{"param_name": ["m"], "param_type": "SortedMap", "param_description": " the sorted map whose mappings are to be placed in this\n        map, and whose comparator is to be used to sort this map"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new map containing the same mappings and using the\n same ordering as the specified sorted map.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the least key greater than or equal to\n         key, or null if there is no such key"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "ceilingEntry", "method_description": "Returns a key-value mapping associated with the least key\n greater than or equal to the given key, or null if\n there is no such entry. The returned entry does not\n support the Entry.setValue method.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the least key greater than or equal to key,\n         or null if there is no such key"], "return_type": ["K"]}, "method_name": "ceilingKey", "method_description": "Returns the least key greater than or equal to the given key,\n or null if there is no such key.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the mappings from this map.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a shallow copy of this map"], "return_type": ["ConcurrentSkipListMap<K,\u00a0V>"]}, "method_name": "clone", "method_description": "Returns a shallow copy of this ConcurrentSkipListMap\n instance. (The keys and values themselves are not cloned.)\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the comparator used to order the keys in this map,\n         or null if this map uses the natural ordering\n         of its keys"], "return_type": ["Comparator<?\u00a0super\u00a0K>"]}, "method_name": "comparator", "method_description": "Returns the comparator used to order the keys in this map, or\n null if this map uses the Comparable of its keys.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["remappingFunction"], "param_type": "BiFunction", "param_description": " the function to compute a value"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new value associated with the specified key, or null if none"], "return_type": ["V"]}, "method_name": "compute", "method_description": "Attempts to compute a mapping for the specified key and its\n current mapped value (or null if there is no current\n mapping). The function is NOT guaranteed to be applied\n once atomically.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["mappingFunction"], "param_type": "Function", "param_description": " the function to compute a value"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current (existing or computed) value associated with\n         the specified key, or null if the computed value is null"], "return_type": ["V"]}, "method_name": "computeIfAbsent", "method_description": "If the specified key is not already associated with a value,\n attempts to compute its value using the given mapping function\n and enters it into this map unless null.  The function\n is NOT guaranteed to be applied once atomically only\n if the value is not present.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which a value may be associated"}, {"param_name": ["remappingFunction"], "param_type": "BiFunction", "param_description": " the function to compute a value"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new value associated with the specified key, or null if none"], "return_type": ["V"]}, "method_name": "computeIfPresent", "method_description": "If the value for the specified key is present, attempts to\n compute a new mapping given the key and its current mapped\n value. The function is NOT guaranteed to be applied\n once atomically.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " key whose presence in this map is to be tested"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this map contains a mapping for the specified key"], "return_type": ["boolean"]}, "method_name": "containsKey", "method_description": "Returns true if this map contains a mapping for the specified\n key.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "Object", "param_description": " value whose presence in this map is to be tested"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if a mapping to value exists;\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "containsValue", "method_description": "Returns true if this map maps one or more keys to the\n specified value.  This operation requires time linear in the\n map size. Additionally, it is possible for the map to change\n during execution of this method, in which case the returned\n result may be inaccurate.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reverse order navigable set view of the keys in this map"], "return_type": ["NavigableSet<K>"]}, "method_name": "descendingKeySet", "method_description": "Returns a reverse order NavigableSet view of the keys contained in this map.\n The set's iterator returns the keys in descending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n\n \nThe view's iterators and spliterators are\n weakly consistent.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reverse order view of this map"], "return_type": ["ConcurrentNavigableMap<K,\u00a0V>"]}, "method_name": "descendingMap", "method_description": "Returns a reverse order view of the mappings contained in this map.\n The descending map is backed by this map, so changes to the map are\n reflected in the descending map, and vice-versa.\n\n \nThe returned map has an ordering equivalent to\n Collections.reverseOrder(comparator()).\n The expression m.descendingMap().descendingMap() returns a\n view of m essentially equivalent to m.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a set view of the mappings contained in this map,\n         sorted in ascending key order"], "return_type": ["Set<Entry<K,\u00a0V>>"]}, "method_name": "entrySet", "method_description": "Returns a Set view of the mappings contained in this map.\n\n \nThe set's iterator returns the entries in ascending key order.  The\n set's spliterator additionally reports Spliterator#CONCURRENT,\n Spliterator#NONNULL, Spliterator#SORTED and\n Spliterator#ORDERED, with an encounter order that is ascending\n key order.\n\n \nThe set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll and clear\n operations.  It does not support the add or\n addAll operations.\n\n \nThe view's iterators and spliterators are\n weakly consistent.\n\n \nThe Map.Entry elements traversed by the iterator\n or spliterator do not support the setValue\n operation.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be compared for equality with this map"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the specified object is equal to this map"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the specified object with this map for equality.\n Returns true if the given object is also a map and the\n two maps represent the same mappings.  More formally, two maps\n m1 and m2 represent the same mappings if\n m1.entrySet().equals(m2.entrySet()).  This\n operation may return misleading results if either map is\n concurrently modified during execution of this method.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the least key,\n         or null if this map is empty"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "firstEntry", "method_description": "Returns a key-value mapping associated with the least\n key in this map, or null if the map is empty.\n The returned entry does not support\n the Entry.setValue method.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first (lowest) key currently in this map"], "return_type": ["K"]}, "method_name": "firstKey", "method_description": "Returns the first (lowest) key currently in this map.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the greatest key less than or equal to\n         key, or null if there is no such key"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "floorEntry", "method_description": "Returns a key-value mapping associated with the greatest key\n less than or equal to the given key, or null if there\n is no such key. The returned entry does not support\n the Entry.setValue method.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the greatest key less than or equal to key,\n         or null if there is no such key"], "return_type": ["K"]}, "method_name": "floorKey", "method_description": "Returns the greatest key less than or equal to the given key,\n or null if there is no such key.\n", "method_declar": ""}, {"params": [{"param_name": ["action"], "param_type": "BiConsumer", "param_description": " The action to be performed for each entry"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "forEach", "method_description": "Performs the given action for each entry in this map until all entries\n have been processed or the action throws an exception.   Unless\n otherwise specified by the implementing class, actions are performed in\n the order of entry set iteration (if an iteration order is specified.)\n Exceptions thrown by the action are relayed to the caller.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key whose associated value is to be returned"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value to which the specified key is mapped, or\n         null if this map contains no mapping for the key"], "return_type": ["V"]}, "method_name": "get", "method_description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n \nMore formally, if this map contains a mapping from a key\n k to a value v such that key compares\n equal to k according to the map's ordering, then this\n method returns v; otherwise it returns null.\n (There can be at most one such mapping.)\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key"}, {"param_name": ["defaultValue"], "param_type": "V", "param_description": " the value to return if this map contains\n no mapping for the given key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the mapping for the key, if present; else the defaultValue"], "return_type": ["V"]}, "method_name": "getOrDefault", "method_description": "Returns the value to which the specified key is mapped,\n or the given defaultValue if this map contains no mapping for the key.\n", "method_declar": ""}, {"params": [{"param_name": ["toKey"], "param_type": "K", "param_description": " high endpoint (exclusive) of the keys in the returned map"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys are strictly\n         less than toKey"], "return_type": ["ConcurrentNavigableMap<K,\u00a0V>"]}, "method_name": "headMap", "method_description": "Returns a view of the portion of this map whose keys are\n strictly less than toKey.  The returned map is backed\n by this map, so changes in the returned map are reflected in\n this map, and vice-versa.  The returned map supports all\n optional map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n\n \nEquivalent to headMap(toKey, false).\n", "method_declar": ""}, {"params": [{"param_name": ["toKey"], "param_type": "K", "param_description": " high endpoint of the keys in the returned map"}, {"param_name": ["inclusive"], "param_type": "boolean", "param_description": " true if the high endpoint\n        is to be included in the returned view"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys are less than\n         (or equal to, if inclusive is true) toKey"], "return_type": ["ConcurrentNavigableMap<K,\u00a0V>"]}, "method_name": "headMap", "method_description": "Returns a view of the portion of this map whose keys are less than (or\n equal to, if inclusive is true) toKey.  The returned\n map is backed by this map, so changes in the returned map are reflected\n in this map, and vice-versa.  The returned map supports all optional\n map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the least key greater than key,\n         or null if there is no such key"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "higherEntry", "method_description": "Returns a key-value mapping associated with the least key\n strictly greater than the given key, or null if there\n is no such key. The returned entry does not support\n the Entry.setValue method.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the least key greater than key,\n         or null if there is no such key"], "return_type": ["K"]}, "method_name": "higherKey", "method_description": "Returns the least key strictly greater than the given key, or\n null if there is no such key.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this map contains no key-value mappings"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Returns true if this map contains no key-value mappings.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a navigable set view of the keys in this map"], "return_type": ["NavigableSet<K>"]}, "method_name": "keySet", "method_description": "Returns a NavigableSet view of the keys contained in this map.\n\n \nThe set's iterator returns the keys in ascending order.\n The set's spliterator additionally reports Spliterator#CONCURRENT,\n Spliterator#NONNULL, Spliterator#SORTED and\n Spliterator#ORDERED, with an encounter order that is ascending\n key order.  The spliterator's comparator (see\n Spliterator.getComparator()) is null if\n the map's comparator (see comparator()) is null.\n Otherwise, the spliterator's comparator is the same as or imposes the\n same total ordering as the map's comparator.\n\n \nThe set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n\n \nThe view's iterators and spliterators are\n weakly consistent.\n\n \nThis method is equivalent to method navigableKeySet.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the greatest key,\n         or null if this map is empty"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "lastEntry", "method_description": "Returns a key-value mapping associated with the greatest\n key in this map, or null if the map is empty.\n The returned entry does not support\n the Entry.setValue method.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last (highest) key currently in this map"], "return_type": ["K"]}, "method_name": "lastKey", "method_description": "Returns the last (highest) key currently in this map.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the greatest key less than key,\n         or null if there is no such key"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "lowerEntry", "method_description": "Returns a key-value mapping associated with the greatest key\n strictly less than the given key, or null if there is\n no such key. The returned entry does not support the\n Entry.setValue method.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the greatest key less than key,\n         or null if there is no such key"], "return_type": ["K"]}, "method_name": "lowerKey", "method_description": "Returns the greatest key strictly less than the given key, or\n null if there is no such key.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " the value to use if absent"}, {"param_name": ["remappingFunction"], "param_type": "BiFunction", "param_description": " the function to recompute a value if present"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new value associated with the specified key, or null if none"], "return_type": ["V"]}, "method_name": "merge", "method_description": "If the specified key is not already associated with a value,\n associates it with the given value.  Otherwise, replaces the\n value with the results of the given remapping function, or\n removes if null. The function is NOT\n guaranteed to be applied once atomically.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a navigable set view of the keys in this map"], "return_type": ["NavigableSet<K>"]}, "method_name": "navigableKeySet", "method_description": "Returns a NavigableSet view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n\n \nThe view's iterators and spliterators are\n weakly consistent.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the removed first entry of this map,\n         or null if this map is empty"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "pollFirstEntry", "method_description": "Removes and returns a key-value mapping associated with\n the least key in this map, or null if the map is empty.\n The returned entry does not support\n the Entry.setValue method.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the removed last entry of this map,\n         or null if this map is empty"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "pollLastEntry", "method_description": "Removes and returns a key-value mapping associated with\n the greatest key in this map, or null if the map is empty.\n The returned entry does not support\n the Entry.setValue method.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with the specified key, or\n         null if there was no mapping for the key"], "return_type": ["V"]}, "method_name": "put", "method_description": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with the specified key,\n         or null if there was no mapping for the key"], "return_type": ["V"]}, "method_name": "putIfAbsent", "method_description": "If the specified key is not already associated\n with a value, associates it with the given value.\n This is equivalent to, for this map:\n \n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " key with which the specified value is associated"}, {"param_name": ["value"], "param_type": "Object", "param_description": " value expected to be associated with the specified key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value was removed"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the entry for a key only if currently mapped to a given value.\n This is equivalent to, for this map:\n \n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " key for which mapping should be removed"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with the specified key, or\n         null if there was no mapping for the key"], "return_type": ["V"]}, "method_name": "remove", "method_description": "Removes the mapping for the specified key from this map if present.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is associated"}, {"param_name": ["oldValue"], "param_type": "V", "param_description": " value expected to be associated with the specified key"}, {"param_name": ["newValue"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value was replaced"], "return_type": ["boolean"]}, "method_name": "replace", "method_description": "Replaces the entry for a key only if currently mapped to a given value.\n This is equivalent to, for this map:\n \n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with the specified key,\n         or null if there was no mapping for the key"], "return_type": ["V"]}, "method_name": "replace", "method_description": "Replaces the entry for a key only if currently mapped to some value.\n This is equivalent to, for this map:\n \n", "method_declar": ""}, {"params": [{"param_name": ["function"], "param_type": "BiFunction", "param_description": " the function to apply to each entry"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "replaceAll", "method_description": "Replaces each entry's value with the result of invoking the given\n function on that entry until all entries have been processed or the\n function throws an exception.  Exceptions thrown by the function are\n relayed to the caller.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this map"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of key-value mappings in this map.  If this map\n contains more than Integer.MAX_VALUE elements, it\n returns Integer.MAX_VALUE.\n\n \nBeware that, unlike in most collections, this method is\n NOT a constant-time operation. Because of the\n asynchronous nature of these maps, determining the current\n number of elements requires traversing them all to count them.\n Additionally, it is possible for the size to change during\n execution of this method, in which case the returned result\n will be inaccurate. Thus, this method is typically not very\n useful in concurrent applications.\n", "method_declar": ""}, {"params": [{"param_name": ["fromKey"], "param_type": "K", "param_description": " low endpoint (inclusive) of the keys in the returned map"}, {"param_name": ["toKey"], "param_type": "K", "param_description": " high endpoint (exclusive) of the keys in the returned map"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys range from\n         fromKey, inclusive, to toKey, exclusive"], "return_type": ["ConcurrentNavigableMap<K,\u00a0V>"]}, "method_name": "subMap", "method_description": "Returns a view of the portion of this map whose keys range from\n fromKey, inclusive, to toKey, exclusive.  (If\n fromKey and toKey are equal, the returned map\n is empty.)  The returned map is backed by this map, so changes\n in the returned map are reflected in this map, and vice-versa.\n The returned map supports all optional map operations that this\n map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n\n \nEquivalent to subMap(fromKey, true, toKey, false).\n", "method_declar": ""}, {"params": [{"param_name": ["fromKey"], "param_type": "K", "param_description": " low endpoint of the keys in the returned map"}, {"param_name": ["fromInclusive"], "param_type": "boolean", "param_description": " true if the low endpoint\n        is to be included in the returned view"}, {"param_name": ["toKey"], "param_type": "K", "param_description": " high endpoint of the keys in the returned map"}, {"param_name": ["toInclusive"], "param_type": "boolean", "param_description": " true if the high endpoint\n        is to be included in the returned view"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys range from\n         fromKey to toKey"], "return_type": ["ConcurrentNavigableMap<K,\u00a0V>"]}, "method_name": "subMap", "method_description": "Returns a view of the portion of this map whose keys range from\n fromKey to toKey.  If fromKey and\n toKey are equal, the returned map is empty unless\n fromInclusive and toInclusive are both true.  The\n returned map is backed by this map, so changes in the returned map are\n reflected in this map, and vice-versa.  The returned map supports all\n optional map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside of its range, or to construct a\n submap either of whose endpoints lie outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["fromKey"], "param_type": "K", "param_description": " low endpoint of the keys in the returned map"}, {"param_name": ["inclusive"], "param_type": "boolean", "param_description": " true if the low endpoint\n        is to be included in the returned view"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys are greater than\n         (or equal to, if inclusive is true) fromKey"], "return_type": ["ConcurrentNavigableMap<K,\u00a0V>"]}, "method_name": "tailMap", "method_description": "Returns a view of the portion of this map whose keys are greater than (or\n equal to, if inclusive is true) fromKey.  The returned\n map is backed by this map, so changes in the returned map are reflected\n in this map, and vice-versa.  The returned map supports all optional\n map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["fromKey"], "param_type": "K", "param_description": " low endpoint (inclusive) of the keys in the returned map"}], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys are greater\n         than or equal to fromKey"], "return_type": ["ConcurrentNavigableMap<K,\u00a0V>"]}, "method_name": "tailMap", "method_description": "Returns a view of the portion of this map whose keys are\n greater than or equal to fromKey.  The returned map is\n backed by this map, so changes in the returned map are\n reflected in this map, and vice-versa.  The returned map\n supports all optional map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n\n \nEquivalent to tailMap(fromKey, true).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a collection view of the values contained in this map"], "return_type": ["Collection<V>"]}, "method_name": "values", "method_description": "Returns a Collection view of the values contained in this map.\n \nThe collection's iterator returns the values in ascending order\n of the corresponding keys. The collections's spliterator additionally\n reports Spliterator#CONCURRENT, Spliterator#NONNULL and\n Spliterator#ORDERED, with an encounter order that is ascending\n order of the corresponding keys.\n\n \nThe collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations.\n\n \nThe view's iterators and spliterators are\n weakly consistent.\n", "method_declar": ""}], "class_name": "ConcurrentSkipListMap", "Vars": null}