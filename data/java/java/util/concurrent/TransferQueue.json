{"package_name": "java.util.concurrent", "subclass_list": ["LinkedTransferQueue", "LinkedTransferQueue", "TransferQueue"], "class_description": "A BlockingQueue in which producers may wait for consumers\n to receive elements.  A TransferQueue may be useful for\n example in message passing applications in which producers\n sometimes (using method transfer(E)) await receipt of\n elements by consumers invoking take or poll, while\n at other times enqueue elements (via method put) without\n waiting for receipt.\n Non-blocking and\n time-out versions of\n tryTransfer are also available.\n A TransferQueue may also be queried, via hasWaitingConsumer(), whether there are any threads waiting for\n items, which is a converse analogy to a peek operation. Like other blocking queues, a TransferQueue may be\n capacity bounded.  If so, an attempted transfer operation may\n initially block waiting for available space, and/or subsequently\n block waiting for reception by a consumer.  Note that in a queue\n with zero capacity, such as SynchronousQueue, put\n and transfer are effectively synonymous. ", "class_type": "interface", "typealias": [], "interface_list": ["BlockingQueue"], "class_inherit_list": [], "Methods": [], "class_name": "TransferQueue", "Vars": null}