{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A bounded BlockingQueue backed by an\n array.  This queue orders elements FIFO (first-in-first-out).  The\n head of the queue is that element that has been on the\n queue the longest time.  The tail of the queue is that\n element that has been on the queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue. This is a classic \"bounded buffer\", in which a\n fixed-sized array holds elements inserted by producers and\n extracted by consumers.  Once created, the capacity cannot be\n changed.  Attempts to put an element into a full queue\n will result in the operation blocking; attempts to take an\n element from an empty queue will similarly block. This class supports an optional fairness policy for ordering\n waiting producer and consumer threads.  By default, this ordering\n is not guaranteed. However, a queue constructed with fairness set\n to true grants threads access in FIFO order. Fairness\n generally decreases throughput but reduces variability and avoids\n starvation. This class and its iterator implement all of the\n optional methods of the Collection and Iterator interfaces. ", "class_type": "class", "typealias": [], "interface_list": ["BlockingQueue", "Serializable"], "class_inherit_list": ["AbstractQueue"], "Methods": [{"params": [{"param_name": ["capacity"], "param_type": "int", "param_description": " the capacity of this queue"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an ArrayBlockingQueue with the given (fixed)\n capacity and default access policy.\n", "method_declar": ""}, {"params": [{"param_name": ["capacity"], "param_type": "int", "param_description": " the capacity of this queue"}, {"param_name": ["fair"], "param_type": "boolean", "param_description": " if true then queue accesses for threads blocked\n        on insertion or removal, are processed in FIFO order;\n        if false the access order is unspecified."}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an ArrayBlockingQueue with the given (fixed)\n capacity and the specified access policy.\n", "method_declar": ""}, {"params": [{"param_name": ["capacity"], "param_type": "int", "param_description": " the capacity of this queue"}, {"param_name": ["fair"], "param_type": "boolean", "param_description": " if true then queue accesses for threads blocked\n        on insertion or removal, are processed in FIFO order;\n        if false the access order is unspecified."}, {"param_name": ["c"], "param_type": "Collection", "param_description": " the collection of elements to initially contain"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an ArrayBlockingQueue with the given (fixed)\n capacity, the specified access policy and initially containing the\n elements of the given collection,\n added in traversal order of the collection's iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning true upon success and throwing an\n IllegalStateException if this queue is full.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be checked for containment in this queue"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this queue contains the specified element.\n More formally, returns true if and only if this queue contains\n at least one element e such that o.equals(e).\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}, {"param_name": ["maxElements"], "param_type": "int", "param_description": " the maximum number of elements to transfer"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes all available elements from this queue and adds them\n to the given collection.  This operation may be more\n efficient than repeatedly polling this queue.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this queue in proper sequence"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n \nThe returned iterator is\n weakly consistent.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the element was added to this queue, else\n         false"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning true upon success and false if this queue\n is full.  This method is generally preferable to method add(E),\n which can fail to insert an element only by throwing an exception.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful, or false if\n         the specified waiting time elapses before space is available"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element at the tail of this queue, waiting\n up to the specified wait time for space to become available if\n the queue is full.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this queue is empty"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Retrieves, but does not remove, the head of this queue,\n or returns null if this queue is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if the\n         specified waiting time elapses before an element is available"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this queue is empty"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue,\n or returns null if this queue is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "put", "method_description": "Inserts the specified element at the tail of this queue, waiting\n for space to become available if the queue is full.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the remaining capacity"], "return_type": ["int"]}, "method_name": "remainingCapacity", "method_description": "Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this queue\n less the current size of this queue.\n\n \nNote that you cannot always tell if an attempt to insert\n an element will succeed by inspecting remainingCapacity\n because it may be the case that another thread is about to\n insert or remove an element.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this queue, if present"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element e such\n that o.equals(e), if this queue contains one or more such\n elements.\n Returns true if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).\n\n \nRemoval of interior elements in circular array based queues\n is an intrinsically slow and disruptive operation, so should\n be undertaken only in exceptional circumstances, ideally\n only when the queue is known not to be accessible by other\n threads.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this queue"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this queue.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this queue"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Returns a Spliterator over the elements in this queue.\n\n \nThe returned spliterator is\n weakly consistent.\n\n \nThe Spliterator reports Spliterator#CONCURRENT,\n Spliterator#ORDERED, and Spliterator#NONNULL.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue"], "return_type": ["E"]}, "method_name": "take", "method_description": "Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose"}], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n \nIf this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n null.\n\n \nLike the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \nSuppose x is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of String:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue, in\n proper sequence.\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this collection"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this collection.  The string\n representation consists of a list of the collection's elements in the\n order they are returned by its iterator, enclosed in square brackets\n (\"[]\").  Adjacent elements are separated by the characters\n \", \" (comma and space).  Elements are converted to strings as\n by String#valueOf(Object).\n", "method_declar": ""}], "class_name": "ArrayBlockingQueue", "Vars": null}