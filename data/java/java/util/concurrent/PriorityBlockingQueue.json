{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "An unbounded BlockingQueue that uses\n the same ordering rules as class PriorityQueue and supplies\n blocking retrieval operations.  While this queue is logically\n unbounded, attempted additions may fail due to resource exhaustion\n (causing OutOfMemoryError). This class does not permit\n null elements.  A priority queue relying on Comparable also does not permit insertion of\n non-comparable objects (doing so results in\n ClassCastException). This class and its iterator implement all of the\n optional methods of the Collection and Iterator interfaces.  The Iterator provided in method iterator() is not guaranteed to traverse the elements of\n the PriorityBlockingQueue in any particular order. If you need\n ordered traversal, consider using\n Arrays.sort(pq.toArray()).  Also, method drainTo\n can be used to remove some or all elements in priority\n order and place them in another collection. Operations on this class make no guarantees about the ordering\n of elements with equal priority. If you need to enforce an\n ordering, you can define custom classes or comparators that use a\n secondary key to break ties in primary priority values.  For\n example, here is a class that applies first-in-first-out\n tie-breaking to comparable elements. To use it, you would insert a\n new FIFOEntry(anEntry) instead of a plain entry object. ", "class_type": "class", "typealias": [], "interface_list": ["BlockingQueue", "Serializable"], "class_inherit_list": ["AbstractQueue"], "Methods": [{"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PriorityBlockingQueue with the default\n initial capacity (11) that orders its elements according to\n their Comparable.\n", "method_declar": ""}, {"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity for this priority queue"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PriorityBlockingQueue with the specified\n initial capacity that orders its elements according to their\n Comparable.\n", "method_declar": ""}, {"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity for this priority queue"}, {"param_name": ["comparator"], "param_type": "Comparator", "param_description": " the comparator that will be used to order this\n         priority queue.  If null, the Comparable of the elements will be used."}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PriorityBlockingQueue with the specified initial\n capacity that orders its elements according to the specified\n comparator.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection whose elements are to be placed\n         into this priority queue"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a PriorityBlockingQueue containing the elements\n in the specified collection.  If the specified collection is a\n SortedSet or a PriorityQueue, this\n priority queue will be ordered according to the same ordering.\n Otherwise, this priority queue will be ordered according to the\n Comparable of its elements.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Inserts the specified element into this priority queue.\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the comparator used to order the elements in this queue,\n         or null if this queue uses the natural\n         ordering of its elements"], "return_type": ["Comparator<?\u00a0super\u00a0E>"]}, "method_name": "comparator", "method_description": "Returns the comparator used to order the elements in this queue,\n or null if this queue uses the Comparable of its elements.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be checked for containment in this queue"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this queue contains the specified element.\n More formally, returns true if and only if this queue contains\n at least one element e such that o.equals(e).\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}, {"param_name": ["maxElements"], "param_type": "int", "param_description": " the maximum number of elements to transfer"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes all available elements from this queue and adds them\n to the given collection.  This operation may be more\n efficient than repeatedly polling this queue.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this queue"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this queue. The\n iterator does not return the elements in any particular order.\n\n \nThe returned iterator is\n weakly consistent.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Queue#offer)"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never return false.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " This parameter is ignored as the method never blocks"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " This parameter is ignored as the method never blocks"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by\n  BlockingQueue#offer(Object,long,TimeUnit))"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never block or\n return false.\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this queue is empty"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Retrieves, but does not remove, the head of this queue,\n or returns null if this queue is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if the\n         specified waiting time elapses before an element is available"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available.\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this queue is empty"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue,\n or returns null if this queue is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "put", "method_description": "Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never block.\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["Integer.MAX_VALUE always"], "return_type": ["int"]}, "method_name": "remainingCapacity", "method_description": "Always returns Integer.MAX_VALUE because\n a PriorityBlockingQueue is not capacity constrained.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this queue, if present"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element e such\n that o.equals(e), if this queue contains one or more such\n elements.  Returns true if and only if this queue contained\n the specified element (or equivalently, if this queue changed as a\n result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this collection"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this collection.  If this collection\n contains more than Integer.MAX_VALUE elements, returns\n Integer.MAX_VALUE.\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this queue"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Returns a Spliterator over the elements in this queue.\n\n \nThe returned spliterator is\n weakly consistent.\n\n \nThe Spliterator reports Spliterator#SIZED and\n Spliterator#NONNULL.\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue"], "return_type": ["E"]}, "method_name": "take", "method_description": "Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose"}], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.\n\n \nIf this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n null.\n\n \nLike the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \nSuppose x is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of String:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue.\n The returned array elements are in no particular order.\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}, {"params": [], "class_name": "PriorityBlockingQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this collection"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this collection.  The string\n representation consists of a list of the collection's elements in the\n order they are returned by its iterator, enclosed in square brackets\n (\"[]\").  Adjacent elements are separated by the characters\n \", \" (comma and space).  Elements are converted to strings as\n by String#valueOf(Object).\n", "method_declar": ""}], "class_name": "PriorityBlockingQueue", "Vars": null}