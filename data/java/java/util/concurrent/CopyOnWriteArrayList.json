{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A thread-safe variant of ArrayList in which all mutative\n operations (add, set, and so on) are implemented by\n making a fresh copy of the underlying array. This is ordinarily too costly, but may be more efficient\n than alternatives when traversal operations vastly outnumber\n mutations, and is useful when you cannot or don't want to\n synchronize traversals, yet need to preclude interference among\n concurrent threads.  The \"snapshot\" style iterator method uses a\n reference to the state of the array at the point that the iterator\n was created. This array never changes during the lifetime of the\n iterator, so interference is impossible and the iterator is\n guaranteed not to throw ConcurrentModificationException.\n The iterator will not reflect additions, removals, or changes to\n the list since the iterator was created.  Element-changing\n operations on iterators themselves (remove, set, and\n add) are not supported. These methods throw\n UnsupportedOperationException. All elements are permitted, including null. Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n CopyOnWriteArrayList\nhappen-before\n actions subsequent to the access or removal of that element from\n the CopyOnWriteArrayList in another thread. ", "class_type": "class", "typealias": [], "interface_list": ["List", "RandomAccess", "Cloneable", "Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an empty list.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection of initially held elements"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a list containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["toCopyIn"], "param_type": "E[]", "param_description": " the array (a copy of this array is used as the\n        internal array)"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a list holding a copy of the given array.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " element to be appended to this list"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Appends the specified element to the end of this list.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index at which the specified element is to be inserted"}, {"param_name": ["element"], "param_type": "E", "param_description": " element to be inserted"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "add", "method_description": "Inserts the specified element at the specified position in this\n list. Shifts the element currently at that position (if any) and\n any subsequent elements to the right (adds one to their indices).\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " collection containing elements to be added to this list"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "addAll", "method_description": "Appends all of the elements in the specified collection to the end\n of this list, in the order that they are returned by the specified\n collection's iterator.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index at which to insert the first element\n        from the specified collection"}, {"param_name": ["c"], "param_type": "Collection", "param_description": " collection containing elements to be added to this list"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "addAll", "method_description": "Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in this list in the order that they are returned by the\n specified collection's iterator.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " collection containing elements to be added to this list"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements added"], "return_type": ["int"]}, "method_name": "addAllAbsent", "method_description": "Appends all of the elements in the specified collection that\n are not already contained in this list, to the end of\n this list, in the order that they are returned by the\n specified collection's iterator.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " element to be added to this list, if absent"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the element was added"], "return_type": ["boolean"]}, "method_name": "addIfAbsent", "method_description": "Appends the element, if not present.\n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the elements from this list.\n The list will be empty after this call returns.\n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this list"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Returns a shallow copy of this list.  (The elements themselves\n are not copied.)\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element whose presence in this list is to be tested"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this list contains the specified element.\n More formally, returns true if and only if this list contains\n at least one element e such that Objects.equals(o, e).\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " collection to be checked for containment in this list"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list contains all of the elements of the\n         specified collection"], "return_type": ["boolean"]}, "method_name": "containsAll", "method_description": "Returns true if this list contains all of the elements of the\n specified collection.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " the object to be compared for equality with this list"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the specified object is equal to this list"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the specified object with this list for equality.\n Returns true if the specified object is the same object\n as this object, or if it is also a List and the sequence\n of elements returned by an List#iterator()\n over the specified list is the same as the sequence returned by\n an iterator over this list.  The two sequences are considered to\n be the same if they have the same length and corresponding\n elements at the same position in the sequence are equal.\n Two elements e1 and e2 are considered\n equal if Objects.equals(e1, e2).\n", "method_declar": ""}, {"params": [{"param_name": ["action"], "param_type": "Consumer", "param_description": "\nConsumer "}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "forEach", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index of the element to return"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element at the specified position in this list"], "return_type": ["E"]}, "method_name": "get", "method_description": "Returns the element at the specified position in this list.\n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the hash code value for this list"], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns the hash code value for this list.\n\n \nThis implementation uses the definition in List#hashCode.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " element to search for"}, {"param_name": ["index"], "param_type": "int", "param_description": " index to start searching from"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the first occurrence of the element in\n         this list at position index or later in the list;\n         -1 if the element is not found."], "return_type": ["int"]}, "method_name": "indexOf", "method_description": "Returns the index of the first occurrence of the specified element in\n this list, searching forwards from index, or returns -1 if\n the element is not found.\n More formally, returns the lowest index i such that\n i >= index && Objects.equals(get(i), e),\n or -1 if there is no such index.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to search for"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the first occurrence of the specified element in\n         this list, or -1 if this list does not contain the element"], "return_type": ["int"]}, "method_name": "indexOf", "method_description": "Returns the index of the first occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the lowest index i such that\n (o==null\u00a0?\u00a0get(i)==null\u00a0:\u00a0o.equals(get(i))),\n or -1 if there is no such index.\n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list contains no elements"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Returns true if this list contains no elements.\n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this list in proper sequence"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this list in proper sequence.\n\n \nThe returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does NOT support the\n remove method.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to search for"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the last occurrence of the specified element in\n         this list, or -1 if this list does not contain the element"], "return_type": ["int"]}, "method_name": "lastIndexOf", "method_description": "Returns the index of the last occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the highest index i such that\n (o==null\u00a0?\u00a0get(i)==null\u00a0:\u00a0o.equals(get(i))),\n or -1 if there is no such index.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " element to search for"}, {"param_name": ["index"], "param_type": "int", "param_description": " index to start searching backwards from"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the last occurrence of the element at position\n         less than or equal to index in this list;\n         -1 if the element is not found."], "return_type": ["int"]}, "method_name": "lastIndexOf", "method_description": "Returns the index of the last occurrence of the specified element in\n this list, searching backwards from index, or returns -1 if\n the element is not found.\n More formally, returns the highest index i such that\n i <= index && Objects.equals(get(i), e),\n or -1 if there is no such index.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index of the first element to be returned from the\n        list iterator (by a call to ListIterator#next)"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["a list iterator over the elements in this list (in proper\n         sequence), starting at the specified position in the list"], "return_type": ["ListIterator<E>"]}, "method_name": "listIterator", "method_description": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.\n The specified index indicates the first element that would be\n returned by an initial call to ListIterator#next.\n An initial call to ListIterator#previous would\n return the element with the specified index minus one.\n\n \nThe returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does NOT support the\n remove, set or add methods.\n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["a list iterator over the elements in this list (in proper\n         sequence)"], "return_type": ["ListIterator<E>"]}, "method_name": "listIterator", "method_description": "Returns a list iterator over the elements in this list (in proper\n sequence).\n\n \nThe returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does NOT support the\n remove, set or add methods.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index of the element to be removed"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element previously at the specified position"], "return_type": ["E"]}, "method_name": "remove", "method_description": "Removes the element at the specified position in this list.\n Shifts any subsequent elements to the left (subtracts one from their\n indices).  Returns the element that was removed from the list.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this list, if present"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list contained the specified element"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the first occurrence of the specified element from this list,\n if it is present.  If this list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n i such that Objects.equals(o, get(i))\n (if such an element exists).  Returns true if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call).\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " collection containing elements to be removed from this list"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "removeAll", "method_description": "Removes from this list all of its elements that are contained in\n the specified collection. This is a particularly expensive operation\n in this class because of the need for an internal temporary array.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["filter"], "param_type": "Predicate", "param_description": " a predicate which returns true for elements to be\n        removed"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if any elements were removed"], "return_type": ["boolean"]}, "method_name": "removeIf", "method_description": "Removes all of the elements of this collection that satisfy the given\n predicate.  Errors or runtime exceptions thrown during iteration or by\n the predicate are relayed to the caller.\n", "method_declar": ""}, {"params": [{"param_name": ["operator"], "param_type": "UnaryOperator", "param_description": " the operator to apply to each element"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "replaceAll", "method_description": "Replaces each element of this list with the result of applying the\n operator to that element.  Errors or runtime exceptions thrown by\n the operator are relayed to the caller.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " collection containing elements to be retained in this list"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "retainAll", "method_description": "Retains only the elements in this list that are contained in the\n specified collection.  In other words, removes from this list all of\n its elements that are not contained in the specified collection.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index of the element to replace"}, {"param_name": ["element"], "param_type": "E", "param_description": " element to be stored at the specified position"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element previously at the specified position"], "return_type": ["E"]}, "method_name": "set", "method_description": "Replaces the element at the specified position in this list with the\n specified element.\n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this list"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this list.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Comparator", "param_description": " the Comparator used to compare list elements.\n          A null value indicates that the elements'\n          Comparable should be used"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "sort", "method_description": "Sorts this list according to the order induced by the specified\n Comparator.\n\n \nAll elements in this list must be mutually comparable using the\n specified comparator (that is, c.compare(e1, e2) must not throw\n a ClassCastException for any elements e1 and e2\n in the list).\n\n \nIf the specified comparator is null then all elements in this\n list must implement the Comparable interface and the elements'\n Comparable should be used.\n\n \nThis list must be modifiable, but need not be resizable.\n\n \nFor apps running on and targeting Android versions greater than\n Nougat (API level > 25), Collections#sort(List)\n delegates to this method. Such apps must not call\n Collections#sort(List) from this method. Instead, prefer\n not overriding this method at all. If you must override it, consider\n this implementation:\n \n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this list"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Returns a Spliterator over the elements in this list.\n\n \nThe Spliterator reports Spliterator#IMMUTABLE,\n Spliterator#ORDERED, Spliterator#SIZED, and\n Spliterator#SUBSIZED.\n\n \nThe spliterator provides a snapshot of the state of the list\n when the spliterator was constructed. No synchronization is needed while\n operating on the spliterator.\n", "method_declar": ""}, {"params": [{"param_name": ["fromIndex"], "param_type": "int", "param_description": " low endpoint (inclusive) of the subList"}, {"param_name": ["toIndex"], "param_type": "int", "param_description": " high endpoint (exclusive) of the subList"}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the specified range within this list"], "return_type": ["List<E>"]}, "method_name": "subList", "method_description": "Returns a view of the portion of this list between\n fromIndex, inclusive, and toIndex, exclusive.\n The returned list is backed by this list, so changes in the\n returned list are reflected in this list.\n\n \nThe semantics of the list returned by this method become\n undefined if the backing list (i.e., this list) is modified in\n any way other than via the returned list.\n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all the elements in this list"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this list\n in proper sequence (from first to last element).\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this list.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the list are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose."}], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all the elements in this list"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this list in\n proper sequence (from first to last element); the runtime type of\n the returned array is that of the specified array.  If the list fits\n in the specified array, it is returned therein.  Otherwise, a new\n array is allocated with the runtime type of the specified array and\n the size of this list.\n\n \nIf this list fits in the specified array with room to spare\n (i.e., the array has more elements than this list), the element in\n the array immediately following the end of the list is set to\n null.  (This is useful in determining the length of this\n list only if the caller knows that this list does not contain\n any null elements.)\n\n \nLike the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \nSuppose x is a list known to contain only strings.\n The following code can be used to dump the list into a newly\n allocated array of String:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "CopyOnWriteArrayList", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this list"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this list.  The string\n representation consists of the string representations of the list's\n elements in the order they are returned by its iterator, enclosed in\n square brackets (\"[]\").  Adjacent elements are separated by\n the characters \", \" (comma and space).  Elements are\n converted to strings as by String#valueOf(Object).\n", "method_declar": ""}], "class_name": "CopyOnWriteArrayList", "Vars": null}