{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A synchronization aid that allows a set of threads to all wait for\n each other to reach a common barrier point.  CyclicBarriers are\n useful in programs involving a fixed sized party of threads that\n must occasionally wait for each other. The barrier is called\n cyclic because it can be re-used after the waiting threads\n are released. A CyclicBarrier supports an optional Runnable command\n that is run once per barrier point, after the last thread in the party\n arrives, but before any threads are released.\n This barrier action is useful\n for updating shared-state before any of the parties continue. Sample usage: Here is an example of using a barrier in a\n parallel decomposition design: If the barrier action does not rely on the parties being suspended when\n it is executed, then any of the threads in the party could execute that\n action when it is released. To facilitate this, each invocation of\n await() returns the arrival index of that thread at the barrier.\n You can then choose which thread should execute the barrier action, for\n example: The CyclicBarrier uses an all-or-none breakage model\n for failed synchronization attempts: If a thread leaves a barrier\n point prematurely because of interruption, failure, or timeout, all\n other threads waiting at that barrier point will also leave\n abnormally via BrokenBarrierException (or\n InterruptedException if they too were interrupted at about\n the same time). Memory consistency effects: Actions in a thread prior to calling\n await()\nhappen-before\n actions that are part of the barrier action, which in turn\n happen-before actions following a successful return from the\n corresponding await() in other threads. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["parties"], "param_type": "int", "param_description": " the number of threads that must invoke await()\n        before the barrier is tripped"}, {"param_name": ["barrierAction"], "param_type": "Runnable", "param_description": " the command to execute when the barrier is\n        tripped, or null if there is no action"}], "class_name": "CyclicBarrier", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new CyclicBarrier that will trip when the\n given number of parties (threads) are waiting upon it, and which\n will execute the given barrier action when the barrier is tripped,\n performed by the last thread entering the barrier.\n", "method_declar": ""}, {"params": [{"param_name": ["parties"], "param_type": "int", "param_description": " the number of threads that must invoke await()\n        before the barrier is tripped"}], "class_name": "CyclicBarrier", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new CyclicBarrier that will trip when the\n given number of parties (threads) are waiting upon it, and\n does not perform a predefined action when the barrier is tripped.\n", "method_declar": ""}, {"params": [], "class_name": "CyclicBarrier", "is_static": false, "return_value": {"return_name": [], "return_description": ["the arrival index of the current thread, where index\n         getParties() - 1 indicates the first\n         to arrive and zero indicates the last to arrive"], "return_type": ["int"]}, "method_name": "await", "method_description": "Waits until all parties have invoked\n await on this barrier.\n\n \nIf the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n \nIf the current thread:\n \nIf the barrier is reset() while any thread is waiting,\n or if the barrier is broken when\n await is invoked, or while any thread is waiting, then\n BrokenBarrierException is thrown.\n\n \nIf any thread is Thread#interrupt while waiting,\n then all other waiting threads will throw\n BrokenBarrierException and the barrier is placed in the broken\n state.\n\n \nIf the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " the time to wait for the barrier"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the timeout parameter"}], "class_name": "CyclicBarrier", "is_static": false, "return_value": {"return_name": [], "return_description": ["the arrival index of the current thread, where index\n         getParties() - 1 indicates the first\n         to arrive and zero indicates the last to arrive"], "return_type": ["int"]}, "method_name": "await", "method_description": "Waits until all parties have invoked\n await on this barrier, or the specified waiting time elapses.\n\n \nIf the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n \nIf the current thread:\n \nIf the specified waiting time elapses then TimeoutException\n is thrown. If the time is less than or equal to zero, the\n method will not wait at all.\n\n \nIf the barrier is reset() while any thread is waiting,\n or if the barrier is broken when\n await is invoked, or while any thread is waiting, then\n BrokenBarrierException is thrown.\n\n \nIf any thread is Thread#interrupt while\n waiting, then all other waiting threads will throw BrokenBarrierException and the barrier is placed in the broken\n state.\n\n \nIf the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state.\n", "method_declar": ""}, {"params": [], "class_name": "CyclicBarrier", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of parties currently blocked in await()"], "return_type": ["int"]}, "method_name": "getNumberWaiting", "method_description": "Returns the number of parties currently waiting at the barrier.\n This method is primarily useful for debugging and assertions.\n", "method_declar": ""}, {"params": [], "class_name": "CyclicBarrier", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of parties required to trip this barrier"], "return_type": ["int"]}, "method_name": "getParties", "method_description": "Returns the number of parties required to trip this barrier.\n", "method_declar": ""}, {"params": [], "class_name": "CyclicBarrier", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if one or more parties broke out of this\n         barrier due to interruption or timeout since\n         construction or the last reset, or a barrier action\n         failed due to an exception; false otherwise."], "return_type": ["boolean"]}, "method_name": "isBroken", "method_description": "Queries if this barrier is in a broken state.\n", "method_declar": ""}, {"params": [], "class_name": "CyclicBarrier", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets the barrier to its initial state.  If any parties are\n currently waiting at the barrier, they will return with a\n BrokenBarrierException. Note that resets after\n a breakage has occurred for other reasons can be complicated to\n carry out; threads need to re-synchronize in some other way,\n and choose one to perform the reset.  It may be preferable to\n instead create a new barrier for subsequent use.\n", "method_declar": ""}], "class_name": "CyclicBarrier", "Vars": null}