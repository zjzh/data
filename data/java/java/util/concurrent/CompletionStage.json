{"package_name": "java.util.concurrent", "subclass_list": ["CompletableFuture", "CompletableFuture", "Future", "CompletionStage"], "class_description": "A stage of a possibly asynchronous computation, that performs an\n action or computes a value when another CompletionStage completes.\n A stage completes upon termination of its computation, but this may\n in turn trigger other dependent stages.  The functionality defined\n in this interface takes only a few basic forms, which expand out to\n a larger set of methods to capture a range of usage styles: All methods adhere to the above triggering, execution, and\n exceptional completion specifications (which are not repeated in\n individual method specifications). Additionally, while arguments\n used to pass a completion result (that is, for parameters of type\n T) for methods accepting them may be null, passing a null\n value for any other parameter will result in a NullPointerException being thrown. Method form handle is the most general way of\n creating a continuation stage, unconditionally performing a\n computation that is given both the result and exception (if any) of\n the triggering CompletionStage, and computing an arbitrary result.\n Method whenComplete is similar, but preserves\n the result of the triggering stage instead of computing a new one.\n Because a stage's normal result may be null, both methods\n should have a computation structured thus: This interface does not define methods for initially creating,\n forcibly completing normally or exceptionally, probing completion\n status or results, or awaiting completion of a stage.\n Implementations of CompletionStage may provide means of achieving\n such effects, as appropriate.  Method toCompletableFuture()\n enables interoperability among different implementations of this\n interface by providing a common conversion type. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "CompletionStage", "Vars": null}