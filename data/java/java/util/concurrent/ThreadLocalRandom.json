{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A random number generator isolated to the current thread.  Like the\n global Random generator used by the Math class, a ThreadLocalRandom is initialized\n with an internally generated seed that may not otherwise be\n modified. When applicable, use of ThreadLocalRandom rather\n than shared Random objects in concurrent programs will\n typically encounter much less overhead and contention.  Use of\n ThreadLocalRandom is particularly appropriate when multiple\n tasks (for example, each a ForkJoinTask) use random numbers\n in parallel in thread pools. Usages of this class should typically be of the form:\n ThreadLocalRandom.current().nextX(...) (where\n X is Int, Long, etc).\n When all usages are of this form, it is never possible to\n accidently share a ThreadLocalRandom across multiple threads. This class also provides additional commonly used bounded random\n generation methods. Instances of ThreadLocalRandom are not cryptographically\n secure.  Consider instead using SecureRandom\n in security-sensitive applications. Additionally,\n default-constructed instances do not use a cryptographically random\n seed unless the System#getProperty\njava.util.secureRandomSeed is set to true. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Random"], "Methods": [], "class_name": "ThreadLocalRandom", "Vars": null}