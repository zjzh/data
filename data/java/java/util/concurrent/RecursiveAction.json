{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A recursive resultless ForkJoinTask.  This class\n establishes conventions to parameterize resultless actions as\n Void ForkJoinTasks. Because null is the\n only valid value of type Void, methods such as join\n always return null upon completion. Sample Usages. Here is a simple but complete ForkJoin\n sort that sorts a given long[] array: The following example illustrates some refinements and idioms\n that may lead to better performance: RecursiveActions need not be\n fully recursive, so long as they maintain the basic\n divide-and-conquer approach. Here is a class that sums the squares\n of each element of a double array, by subdividing out only the\n right-hand-sides of repeated divisions by two, and keeping track of\n them with a chain of next references. It uses a dynamic\n threshold based on method getSurplusQueuedTaskCount, but\n counterbalances potential excess partitioning by directly\n performing leaf actions on unstolen tasks rather than further\n subdividing. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["ForkJoinTask<Void>"], "Methods": [{"params": [], "class_name": "RecursiveAction", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "RecursiveAction", "is_static": false, "return_value": {"return_name": [], "return_description": ["null always"], "return_type": ["Void"]}, "method_name": "getRawResult", "method_description": "Always returns null.\n", "method_declar": ""}], "class_name": "RecursiveAction", "Vars": null}