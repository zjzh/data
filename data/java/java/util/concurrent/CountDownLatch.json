{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A synchronization aid that allows one or more threads to wait until\n a set of operations being performed in other threads completes. A CountDownLatch is initialized with a given count.\n The await methods block until the current count reaches\n zero due to invocations of the countDown() method, after which\n all waiting threads are released and any subsequent invocations of\n await return immediately.  This is a one-shot phenomenon\n -- the count cannot be reset.  If you need a version that resets the\n count, consider using a CyclicBarrier. A CountDownLatch is a versatile synchronization tool\n and can be used for a number of purposes.  A\n CountDownLatch initialized with a count of one serves as a\n simple on/off latch, or gate: all threads invoking await\n wait at the gate until it is opened by a thread invoking countDown().  A CountDownLatch initialized to N\n can be used to make one thread wait until N threads have\n completed some action, or some action has been completed N times. A useful property of a CountDownLatch is that it\n doesn't require that threads calling countDown wait for\n the count to reach zero before proceeding, it simply prevents any\n thread from proceeding past an await until all\n threads could pass. Sample usage: Here is a pair of classes in which a group\n of worker threads use two countdown latches: Another typical usage would be to divide a problem into N parts,\n describe each part with a Runnable that executes that portion and\n counts down on the latch, and queue all the Runnables to an\n Executor.  When all sub-parts are complete, the coordinating thread\n will be able to pass through await. (When threads must repeatedly\n count down in this way, instead use a CyclicBarrier.) Memory consistency effects: Until the count reaches\n zero, actions in a thread prior to calling\n countDown()\nhappen-before\n actions following a successful return from a corresponding\n await() in another thread. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["count"], "param_type": "int", "param_description": " the number of times countDown() must be invoked\n        before threads can pass through await()"}], "class_name": "CountDownLatch", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a CountDownLatch initialized with the given count.\n", "method_declar": ""}, {"params": [], "class_name": "CountDownLatch", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "await", "method_description": "Causes the current thread to wait until the latch has counted down to\n zero, unless the thread is Thread#interrupt.\n\n \nIf the current count is zero then this method returns immediately.\n\n \nIf the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of two things happen:\n \nIf the current thread:\n \n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " the maximum time to wait"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the timeout argument"}], "class_name": "CountDownLatch", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the count reached zero and false\n         if the waiting time elapsed before the count reached zero"], "return_type": ["boolean"]}, "method_name": "await", "method_description": "Causes the current thread to wait until the latch has counted down to\n zero, unless the thread is Thread#interrupt,\n or the specified waiting time elapses.\n\n \nIf the current count is zero then this method returns immediately\n with the value true.\n\n \nIf the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of three things happen:\n \nIf the count reaches zero then the method returns with the\n value true.\n\n \nIf the current thread:\n \nIf the specified waiting time elapses then the value false\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.\n", "method_declar": ""}, {"params": [], "class_name": "CountDownLatch", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "countDown", "method_description": "Decrements the count of the latch, releasing all waiting threads if\n the count reaches zero.\n\n \nIf the current count is greater than zero then it is decremented.\n If the new count is zero then all waiting threads are re-enabled for\n thread scheduling purposes.\n\n \nIf the current count equals zero then nothing happens.\n", "method_declar": ""}, {"params": [], "class_name": "CountDownLatch", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current count"], "return_type": ["long"]}, "method_name": "getCount", "method_description": "Returns the current count.\n\n \nThis method is typically used for debugging and testing purposes.\n", "method_declar": ""}, {"params": [], "class_name": "CountDownLatch", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string identifying this latch, as well as its state"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string identifying this latch, as well as its state.\n The state, in brackets, includes the String \"Count =\"\n followed by the current count.\n", "method_declar": ""}], "class_name": "CountDownLatch", "Vars": null}