{"package_name": "java.util.concurrent.locks", "subclass_list": [], "class_description": "A reentrant mutual exclusion Lock with the same basic\n behavior and semantics as the implicit monitor lock accessed using\n synchronized methods and statements, but with extended\n capabilities. A ReentrantLock is owned by the thread last\n successfully locking, but not yet unlocking it. A thread invoking\n lock will return, successfully acquiring the lock, when\n the lock is not owned by another thread. The method will return\n immediately if the current thread already owns the lock. This can\n be checked using methods isHeldByCurrentThread(), and getHoldCount(). The constructor for this class accepts an optional\n fairness parameter.  When set true, under\n contention, locks favor granting access to the longest-waiting\n thread.  Otherwise this lock does not guarantee any particular\n access order.  Programs using fair locks accessed by many threads\n may display lower overall throughput (i.e., are slower; often much\n slower) than those using the default setting, but have smaller\n variances in times to obtain locks and guarantee lack of\n starvation. Note however, that fairness of locks does not guarantee\n fairness of thread scheduling. Thus, one of many threads using a\n fair lock may obtain it multiple times in succession while other\n active threads are not progressing and not currently holding the\n lock.\n Also note that the untimed tryLock() method does not\n honor the fairness setting. It will succeed if the lock\n is available even if other threads are waiting. It is recommended practice to always immediately\n follow a call to lock with a try block, most\n typically in a before/after construction such as: In addition to implementing the Lock interface, this\n class defines a number of public and protected\n methods for inspecting the state of the lock.  Some of these\n methods are only useful for instrumentation and monitoring. Serialization of this class behaves in the same way as built-in\n locks: a deserialized lock is in the unlocked state, regardless of\n its state when serialized. This lock supports a maximum of 2147483647 recursive locks by\n the same thread. Attempts to exceed this limit result in\n Error throws from locking methods. ", "class_type": "class", "typealias": [], "interface_list": ["Lock", "Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an instance of ReentrantLock.\n This is equivalent to using ReentrantLock(false).\n", "method_declar": ""}, {"params": [{"param_name": ["fair"], "param_type": "boolean", "param_description": " true if this lock should use a fair ordering policy"}], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an instance of ReentrantLock with the\n given fairness policy.\n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of holds on this lock by the current thread,\n         or zero if this lock is not held by the current thread"], "return_type": ["int"]}, "method_name": "getHoldCount", "method_description": "Queries the number of holds on this lock by the current thread.\n\n \nA thread has a hold on a lock for each lock action that is not\n matched by an unlock action.\n\n \nThe hold count information is typically only used for testing and\n debugging purposes. For example, if a certain section of code should\n not be entered with the lock already held then we can assert that\n fact:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["the estimated number of threads waiting for this lock"], "return_type": ["int"]}, "method_name": "getQueueLength", "method_description": "Returns an estimate of the number of threads waiting to acquire\n this lock.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization control.\n", "method_declar": ""}, {"params": [{"param_name": ["condition"], "param_type": "Condition", "param_description": " the condition"}], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["the estimated number of waiting threads"], "return_type": ["int"]}, "method_name": "getWaitQueueLength", "method_description": "Returns an estimate of the number of threads waiting on the\n given condition associated with this lock. Note that because\n timeouts and interrupts may occur at any time, the estimate\n serves only as an upper bound on the actual number of waiters.\n This method is designed for use in monitoring of the system\n state, not for synchronization control.\n", "method_declar": ""}, {"params": [{"param_name": ["thread"], "param_type": "Thread", "param_description": " the thread"}], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the given thread is queued waiting for this lock"], "return_type": ["boolean"]}, "method_name": "hasQueuedThread", "method_description": "Queries whether the given thread is waiting to acquire this\n lock. Note that because cancellations may occur at any time, a\n true return does not guarantee that this thread\n will ever acquire this lock.  This method is designed primarily for use\n in monitoring of the system state.\n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if there may be other threads waiting to\n         acquire the lock"], "return_type": ["boolean"]}, "method_name": "hasQueuedThreads", "method_description": "Queries whether any threads are waiting to acquire this lock. Note that\n because cancellations may occur at any time, a true\n return does not guarantee that any other thread will ever\n acquire this lock.  This method is designed primarily for use in\n monitoring of the system state.\n", "method_declar": ""}, {"params": [{"param_name": ["condition"], "param_type": "Condition", "param_description": " the condition"}], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if there are any waiting threads"], "return_type": ["boolean"]}, "method_name": "hasWaiters", "method_description": "Queries whether any threads are waiting on the given condition\n associated with this lock. Note that because timeouts and\n interrupts may occur at any time, a true return does\n not guarantee that a future signal will awaken any\n threads.  This method is designed primarily for use in\n monitoring of the system state.\n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this lock has fairness set true"], "return_type": ["boolean"]}, "method_name": "isFair", "method_description": "Returns true if this lock has fairness set true.\n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if current thread holds this lock and\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "isHeldByCurrentThread", "method_description": "Queries if this lock is held by the current thread.\n\n \nAnalogous to the Thread#holdsLock(Object) method for\n built-in monitor locks, this method is typically used for\n debugging and testing. For example, a method that should only be\n called while a lock is held can assert that this is the case:\n\n \nIt can also be used to ensure that a reentrant lock is used\n in a non-reentrant manner, for example:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if any thread holds this lock and\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "isLocked", "method_description": "Queries if this lock is held by any thread. This method is\n designed for use in monitoring of the system state,\n not for synchronization control.\n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "lock", "method_description": "Acquires the lock.\n\n \nAcquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.\n\n \nIf the current thread already holds the lock then the hold\n count is incremented by one and the method returns immediately.\n\n \nIf the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until the lock has been acquired,\n at which time the lock hold count is set to one.\n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "lockInterruptibly", "method_description": "Acquires the lock unless the current thread is\n Thread#interrupt.\n\n \nAcquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.\n\n \nIf the current thread already holds this lock then the hold count\n is incremented by one and the method returns immediately.\n\n \nIf the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:\n\n \nIf the lock is acquired by the current thread then the lock hold\n count is set to one.\n\n \nIf the current thread:\n\n \nIn this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock.\n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Condition object"], "return_type": ["Condition"]}, "method_name": "newCondition", "method_description": "Returns a Condition instance for use with this\n Lock instance.\n\n \nThe returned Condition instance supports the same\n usages as do the Object monitor methods (Object#wait(), Object#notify, and Object#notifyAll) when used with the built-in\n monitor lock.\n\n \n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string identifying this lock, as well as its lock state"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes either the String \"Unlocked\"\n or the String \"Locked by\" followed by the\n Thread#getName of the owning thread.\n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the lock was free and was acquired by the\n         current thread, or the lock was already held by the current\n         thread; and false otherwise"], "return_type": ["boolean"]}, "method_name": "tryLock", "method_description": "Acquires the lock only if it is not held by another thread at the time\n of invocation.\n\n \nAcquires the lock if it is not held by another thread and\n returns immediately with the value true, setting the\n lock hold count to one. Even when this lock has been set to use a\n fair ordering policy, a call to tryLock() will\n immediately acquire the lock if it is available, whether or not\n other threads are currently waiting for the lock.\n This \"barging\" behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to honor\n the fairness setting for this lock, then use\n tryLock(0, TimeUnit.SECONDS) \n which is almost equivalent (it also detects interruption).\n\n \nIf the current thread already holds this lock then the hold\n count is incremented by one and the method returns true.\n\n \nIf the lock is held by another thread then this method will return\n immediately with the value false.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " the time to wait for the lock"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the timeout argument"}], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the lock was free and was acquired by the\n         current thread, or the lock was already held by the current\n         thread; and false if the waiting time elapsed before\n         the lock could be acquired"], "return_type": ["boolean"]}, "method_name": "tryLock", "method_description": "Acquires the lock if it is not held by another thread within the given\n waiting time and the current thread has not been\n Thread#interrupt.\n\n \nAcquires the lock if it is not held by another thread and returns\n immediately with the value true, setting the lock hold count\n to one. If this lock has been set to use a fair ordering policy then\n an available lock will not be acquired if any other threads\n are waiting for the lock. This is in contrast to the tryLock()\n method. If you want a timed tryLock that does permit barging on\n a fair lock then combine the timed and un-timed forms together:\n\n \nIf the current thread\n already holds this lock then the hold count is incremented by one and\n the method returns true.\n\n \nIf the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n \nIf the lock is acquired then the value true is returned and\n the lock hold count is set to one.\n\n \nIf the current thread:\n\n \nIf the specified waiting time elapses then the value false\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.\n\n \nIn this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock, and\n over reporting the elapse of the waiting time.\n", "method_declar": ""}, {"params": [], "class_name": "ReentrantLock", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "unlock", "method_description": "Attempts to release this lock.\n\n \nIf the current thread is the holder of this lock then the hold\n count is decremented.  If the hold count is now zero then the lock\n is released.  If the current thread is not the holder of this\n lock then IllegalMonitorStateException is thrown.\n", "method_declar": ""}], "class_name": "ReentrantLock", "Vars": null}