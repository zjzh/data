{"package_name": "java.util.concurrent.locks", "subclass_list": ["ReentrantLock", "ReentrantReadWriteLock.ReadLock", "ReentrantReadWriteLock.WriteLock", "ReentrantLock", "Lock", "ReentrantReadWriteLock.ReadLock", "ReentrantReadWriteLock#readLock", "ReentrantReadWriteLock.WriteLock", "ReentrantReadWriteLock#writeLock"], "class_description": "Lock implementations provide more extensive locking\n operations than can be obtained using synchronized methods\n and statements.  They allow more flexible structuring, may have\n quite different properties, and may support multiple associated\n Condition objects. A lock is a tool for controlling access to a shared resource by\n multiple threads. Commonly, a lock provides exclusive access to a\n shared resource: only one thread at a time can acquire the lock and\n all access to the shared resource requires that the lock be\n acquired first. However, some locks may allow concurrent access to\n a shared resource, such as the read lock of a ReadWriteLock. The use of synchronized methods or statements provides\n access to the implicit monitor lock associated with every object, but\n forces all lock acquisition and release to occur in a block-structured way:\n when multiple locks are acquired they must be released in the opposite\n order, and all locks must be released in the same lexical scope in which\n they were acquired. While the scoping mechanism for synchronized methods\n and statements makes it much easier to program with monitor locks,\n and helps avoid many common programming errors involving locks,\n there are occasions where you need to work with locks in a more\n flexible way. For example, some algorithms for traversing\n concurrently accessed data structures require the use of\n \"hand-over-hand\" or \"chain locking\": you\n acquire the lock of node A, then node B, then release A and acquire\n C, then release B and acquire D and so on.  Implementations of the\n Lock interface enable the use of such techniques by\n allowing a lock to be acquired and released in different scopes,\n and allowing multiple locks to be acquired and released in any\n order. With this increased flexibility comes additional\n responsibility. The absence of block-structured locking removes the\n automatic release of locks that occurs with synchronized\n methods and statements. In most cases, the following idiom\n should be used: Lock implementations provide additional functionality\n over the use of synchronized methods and statements by\n providing a non-blocking attempt to acquire a lock (tryLock()), an attempt to acquire the lock that can be\n interrupted (lockInterruptibly(), and an attempt to acquire\n the lock that can timeout (tryLock(long, java.util.concurrent.TimeUnit)). A Lock class can also provide behavior and semantics\n that is quite different from that of the implicit monitor lock,\n such as guaranteed ordering, non-reentrant usage, or deadlock\n detection. If an implementation provides such specialized semantics\n then the implementation must document those semantics. Note that Lock instances are just normal objects and can\n themselves be used as the target in a synchronized statement.\n Acquiring the\n monitor lock of a Lock instance has no specified relationship\n with invoking any of the lock() methods of that instance.\n It is recommended that to avoid confusion you never use Lock\n instances in this way, except within their own implementation. Except where noted, passing a null value for any\n parameter will result in a NullPointerException being\n thrown. All Lock implementations must enforce the same\n memory synchronization semantics as provided by the built-in monitor\n lock, as described in\n \n Chapter 17 of\n The Java\u2122 Language Specification: The three forms of lock acquisition (interruptible,\n non-interruptible, and timed) may differ in their performance\n characteristics, ordering guarantees, or other implementation\n qualities.  Further, the ability to interrupt the ongoing\n acquisition of a lock may not be available in a given Lock\n class.  Consequently, an implementation is not required to define\n exactly the same guarantees or semantics for all three forms of\n lock acquisition, nor is it required to support interruption of an\n ongoing lock acquisition.  An implementation is required to clearly\n document the semantics and guarantees provided by each of the\n locking methods. It must also obey the interruption semantics as\n defined in this interface, to the extent that interruption of lock\n acquisition is supported: which is either totally, or only on\n method entry. As interruption generally implies cancellation, and checks for\n interruption are often infrequent, an implementation can favor responding\n to an interrupt over normal method return. This is true even if it can be\n shown that the interrupt occurred after another action may have unblocked\n the thread. An implementation should document this behavior. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "Lock", "Vars": null}