{"package_name": "java.util.concurrent.locks", "subclass_list": [], "class_description": "Basic thread blocking primitives for creating locks and other\n synchronization classes. This class associates, with each thread that uses it, a permit\n (in the sense of the Semaphore class). A call to park will return immediately\n if the permit is available, consuming it in the process; otherwise\n it may block.  A call to unpark makes the permit\n available, if it was not already available. (Unlike with Semaphores\n though, permits do not accumulate. There is at most one.)\n Reliable usage requires the use of volatile (or atomic) variables\n to control when to park or unpark.  Orderings of calls to these\n methods are maintained with respect to volatile variable accesses,\n but not necessarily non-volatile variable accesses. Methods park and unpark provide efficient\n means of blocking and unblocking threads that do not encounter the\n problems that cause the deprecated methods Thread.suspend\n and Thread.resume to be unusable for such purposes: Races\n between one thread invoking park and another thread trying\n to unpark it will preserve liveness, due to the\n permit. Additionally, park will return if the caller's\n thread was interrupted, and timeout versions are supported. The\n park method may also return at any other time, for \"no\n reason\", so in general must be invoked within a loop that rechecks\n conditions upon return. In this sense park serves as an\n optimization of a \"busy wait\" that does not waste as much time\n spinning, but must be paired with an unpark to be\n effective. The three forms of park each also support a\n blocker object parameter. This object is recorded while\n the thread is blocked to permit monitoring and diagnostic tools to\n identify the reasons that threads are blocked. (Such tools may\n access blockers using method getBlocker(java.lang.Thread).)\n The use of these forms rather than the original forms without this\n parameter is strongly encouraged. The normal argument to supply as\n a blocker within a lock implementation is this. These methods are designed to be used as tools for creating\n higher-level synchronization utilities, and are not in themselves\n useful for most concurrency control applications.  The park\n method is designed for use only in constructions of the form: Sample Usage. Here is a sketch of a first-in-first-out\n non-reentrant lock class: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "LockSupport", "Vars": null}