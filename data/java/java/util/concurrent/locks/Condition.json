{"package_name": "java.util.concurrent.locks", "subclass_list": ["AbstractQueuedLongSynchronizer.ConditionObject", "AbstractQueuedSynchronizer.ConditionObject", "AbstractQueuedLongSynchronizer.ConditionObject", "AbstractQueuedLongSynchronizer", "Lock", "AbstractQueuedSynchronizer.ConditionObject", "AbstractQueuedSynchronizer", "Lock"], "class_description": "Condition factors out the Object monitor\n methods (Object#wait(), Object#notify\n and Object#notifyAll) into distinct objects to\n give the effect of having multiple wait-sets per object, by\n combining them with the use of arbitrary Lock implementations.\n Where a Lock replaces the use of synchronized methods\n and statements, a Condition replaces the use of the Object\n monitor methods. Conditions (also known as condition queues or\n condition variables) provide a means for one thread to\n suspend execution (to \"wait\") until notified by another\n thread that some state condition may now be true.  Because access\n to this shared state information occurs in different threads, it\n must be protected, so a lock of some form is associated with the\n condition. The key property that waiting for a condition provides\n is that it atomically releases the associated lock and\n suspends the current thread, just like Object.wait. A Condition instance is intrinsically bound to a lock.\n To obtain a Condition instance for a particular Lock\n instance use its Lock#newCondition method. As an example, suppose we have a bounded buffer which supports\n put and take methods.  If a\n take is attempted on an empty buffer, then the thread will block\n until an item becomes available; if a put is attempted on a\n full buffer, then the thread will block until a space becomes available.\n We would like to keep waiting put threads and take\n threads in separate wait-sets so that we can use the optimization of\n only notifying a single thread at a time when items or spaces become\n available in the buffer. This can be achieved using two\n Condition instances. A Condition implementation can provide behavior and semantics\n that is\n different from that of the Object monitor methods, such as\n guaranteed ordering for notifications, or not requiring a lock to be held\n when performing notifications.\n If an implementation provides such specialized semantics then the\n implementation must document those semantics. Note that Condition instances are just normal objects and can\n themselves be used as the target in a synchronized statement,\n and can have their own monitor Object#wait and\n Object#notify methods invoked.\n Acquiring the monitor lock of a Condition instance, or using its\n monitor methods, has no specified relationship with acquiring the\n Lock associated with that Condition or the use of its\n waiting and signalling methods.\n It is recommended that to avoid confusion you never use Condition\n instances in this way, except perhaps within their own implementation. Except where noted, passing a null value for any parameter\n will result in a NullPointerException being thrown. When waiting upon a Condition, a \"spurious\n wakeup\" is permitted to occur, in\n general, as a concession to the underlying platform semantics.\n This has little practical impact on most application programs as a\n Condition should always be waited upon in a loop, testing\n the state predicate that is being waited for.  An implementation is\n free to remove the possibility of spurious wakeups but it is\n recommended that applications programmers always assume that they can\n occur and so always wait in a loop. The three forms of condition waiting\n (interruptible, non-interruptible, and timed) may differ in their ease of\n implementation on some platforms and in their performance characteristics.\n In particular, it may be difficult to provide these features and maintain\n specific semantics such as ordering guarantees.\n Further, the ability to interrupt the actual suspension of the thread may\n not always be feasible to implement on all platforms. Consequently, an implementation is not required to define exactly the\n same guarantees or semantics for all three forms of waiting, nor is it\n required to support interruption of the actual suspension of the thread. An implementation is required to\n clearly document the semantics and guarantees provided by each of the\n waiting methods, and when an implementation does support interruption of\n thread suspension then it must obey the interruption semantics as defined\n in this interface. As interruption generally implies cancellation, and checks for\n interruption are often infrequent, an implementation can favor responding\n to an interrupt over normal method return. This is true even if it can be\n shown that the interrupt occurred after another action that may have\n unblocked the thread. An implementation should document this behavior. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "Condition", "Vars": null}