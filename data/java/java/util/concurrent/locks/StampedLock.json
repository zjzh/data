{"package_name": "java.util.concurrent.locks", "subclass_list": [], "class_description": "A capability-based lock with three modes for controlling read/write\n access.  The state of a StampedLock consists of a version and mode.\n Lock acquisition methods return a stamp that represents and\n controls access with respect to a lock state; \"try\" versions of\n these methods may instead return the special value zero to\n represent failure to acquire access. Lock release and conversion\n methods require stamps as arguments, and fail if they do not match\n the state of the lock. The three modes are: This class also supports methods that conditionally provide\n conversions across the three modes. For example, method tryConvertToWriteLock(long) attempts to \"upgrade\" a mode, returning\n a valid write stamp if (1) already in writing mode (2) in reading\n mode and there are no other readers or (3) in optimistic mode and\n the lock is available. The forms of these methods are designed to\n help reduce some of the code bloat that otherwise occurs in\n retry-based designs. StampedLocks are designed for use as internal utilities in the\n development of thread-safe components. Their use relies on\n knowledge of the internal properties of the data, objects, and\n methods they are protecting.  They are not reentrant, so locked\n bodies should not call other unknown methods that may try to\n re-acquire locks (although you may pass a stamp to other methods\n that can use or convert it).  The use of read lock modes relies on\n the associated code sections being side-effect-free.  Unvalidated\n optimistic read sections cannot call methods that are not known to\n tolerate potential inconsistencies.  Stamps use finite\n representations, and are not cryptographically secure (i.e., a\n valid stamp may be guessable). Stamp values may recycle after (no\n sooner than) one year of continuous operation. A stamp held without\n use or validation for longer than this period may fail to validate\n correctly.  StampedLocks are serializable, but always deserialize\n into initial unlocked state, so they are not useful for remote\n locking. The scheduling policy of StampedLock does not consistently\n prefer readers over writers or vice versa.  All \"try\" methods are\n best-effort and do not necessarily conform to any scheduling or\n fairness policy. A zero return from any \"try\" method for acquiring\n or converting locks does not carry any information about the state\n of the lock; a subsequent invocation may succeed. Because it supports coordinated usage across multiple lock\n modes, this class does not directly implement the Lock or\n ReadWriteLock interfaces. However, a StampedLock may be\n viewed asReadLock(), asWriteLock(), or asReadWriteLock() in applications requiring only the associated\n set of functionality. Sample Usage. The following illustrates some usage idioms\n in a class that maintains simple two-dimensional points. The sample\n code illustrates some try/catch conventions even though they are\n not strictly needed here because no exceptions can occur in their\n bodies. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new lock, initially in unlocked state.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["the lock"], "return_type": ["Lock"]}, "method_name": "asReadLock", "method_description": "Returns a plain Lock view of this StampedLock in which\n the Lock#lock method is mapped to readLock(),\n and similarly for other methods. The returned Lock does not\n support a Condition; method Lock#newCondition() throws UnsupportedOperationException.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["the lock"], "return_type": ["ReadWriteLock"]}, "method_name": "asReadWriteLock", "method_description": "Returns a ReadWriteLock view of this StampedLock in\n which the ReadWriteLock#readLock() method is mapped to\n asReadLock(), and ReadWriteLock#writeLock() to\n asWriteLock().\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["the lock"], "return_type": ["Lock"]}, "method_name": "asWriteLock", "method_description": "Returns a plain Lock view of this StampedLock in which\n the Lock#lock method is mapped to writeLock(),\n and similarly for other methods. The returned Lock does not\n support a Condition; method Lock#newCondition() throws UnsupportedOperationException.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of read locks held"], "return_type": ["int"]}, "method_name": "getReadLockCount", "method_description": "Queries the number of read locks held for this lock. This\n method is designed for use in monitoring system state, not for\n synchronization control.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the lock is currently held non-exclusively"], "return_type": ["boolean"]}, "method_name": "isReadLocked", "method_description": "Returns true if the lock is currently held non-exclusively.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the lock is currently held exclusively"], "return_type": ["boolean"]}, "method_name": "isWriteLocked", "method_description": "Returns true if the lock is currently held exclusively.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stamp that can be used to unlock or convert mode"], "return_type": ["long"]}, "method_name": "readLock", "method_description": "Non-exclusively acquires the lock, blocking if necessary\n until available.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stamp that can be used to unlock or convert mode"], "return_type": ["long"]}, "method_name": "readLockInterruptibly", "method_description": "Non-exclusively acquires the lock, blocking if necessary\n until available or the current thread is interrupted.\n Behavior under interruption matches that specified\n for method Lock#lockInterruptibly().\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string identifying this lock, as well as its lock state"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string identifying this lock, as well as its lock\n state.  The state, in brackets, includes the String \"Unlocked\" or the String \"Write-locked\" or the String\n \"Read-locks:\" followed by the current number of\n read-locks held.\n", "method_declar": ""}, {"params": [{"param_name": ["stamp"], "param_type": "long", "param_description": " a stamp"}], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a valid optimistic read stamp, or zero on failure"], "return_type": ["long"]}, "method_name": "tryConvertToOptimisticRead", "method_description": "If the lock state matches the given stamp then, atomically, if the stamp\n represents holding a lock, releases it and returns an\n observation stamp.  Or, if an optimistic read, returns it if\n validated. This method returns zero in all other cases, and so\n may be useful as a form of \"tryUnlock\".\n", "method_declar": ""}, {"params": [{"param_name": ["stamp"], "param_type": "long", "param_description": " a stamp"}], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a valid read stamp, or zero on failure"], "return_type": ["long"]}, "method_name": "tryConvertToReadLock", "method_description": "If the lock state matches the given stamp, atomically performs one of\n the following actions. If the stamp represents holding a write\n lock, releases it and obtains a read lock.  Or, if a read lock,\n returns it. Or, if an optimistic read, acquires a read lock and\n returns a read stamp only if immediately available. This method\n returns zero in all other cases.\n", "method_declar": ""}, {"params": [{"param_name": ["stamp"], "param_type": "long", "param_description": " a stamp"}], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a valid write stamp, or zero on failure"], "return_type": ["long"]}, "method_name": "tryConvertToWriteLock", "method_description": "If the lock state matches the given stamp, atomically performs one of\n the following actions. If the stamp represents holding a write\n lock, returns it.  Or, if a read lock, if the write lock is\n available, releases the read lock and returns a write stamp.\n Or, if an optimistic read, returns a write stamp only if\n immediately available. This method returns zero in all other\n cases.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stamp, or zero if exclusively locked"], "return_type": ["long"]}, "method_name": "tryOptimisticRead", "method_description": "Returns a stamp that can later be validated, or zero\n if exclusively locked.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stamp that can be used to unlock or convert mode,\n or zero if the lock is not available"], "return_type": ["long"]}, "method_name": "tryReadLock", "method_description": "Non-exclusively acquires the lock if it is immediately available.\n", "method_declar": ""}, {"params": [{"param_name": ["time"], "param_type": "long", "param_description": " the maximum time to wait for the lock"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the time argument"}], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stamp that can be used to unlock or convert mode,\n or zero if the lock is not available"], "return_type": ["long"]}, "method_name": "tryReadLock", "method_description": "Non-exclusively acquires the lock if it is available within the\n given time and the current thread has not been interrupted.\n Behavior under timeout and interruption matches that specified\n for method Lock#tryLock(long,TimeUnit).\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the read lock was held, else false"], "return_type": ["boolean"]}, "method_name": "tryUnlockRead", "method_description": "Releases one hold of the read lock if it is held, without\n requiring a stamp value. This method may be useful for recovery\n after errors.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the lock was held, else false"], "return_type": ["boolean"]}, "method_name": "tryUnlockWrite", "method_description": "Releases the write lock if it is held, without requiring a\n stamp value. This method may be useful for recovery after\n errors.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stamp that can be used to unlock or convert mode,\n or zero if the lock is not available"], "return_type": ["long"]}, "method_name": "tryWriteLock", "method_description": "Exclusively acquires the lock if it is immediately available.\n", "method_declar": ""}, {"params": [{"param_name": ["time"], "param_type": "long", "param_description": " the maximum time to wait for the lock"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the time argument"}], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stamp that can be used to unlock or convert mode,\n or zero if the lock is not available"], "return_type": ["long"]}, "method_name": "tryWriteLock", "method_description": "Exclusively acquires the lock if it is available within the\n given time and the current thread has not been interrupted.\n Behavior under timeout and interruption matches that specified\n for method Lock#tryLock(long,TimeUnit).\n", "method_declar": ""}, {"params": [{"param_name": ["stamp"], "param_type": "long", "param_description": " a stamp returned by a lock operation"}], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "unlock", "method_description": "If the lock state matches the given stamp, releases the\n corresponding mode of the lock.\n", "method_declar": ""}, {"params": [{"param_name": ["stamp"], "param_type": "long", "param_description": " a stamp returned by a read-lock operation"}], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "unlockRead", "method_description": "If the lock state matches the given stamp, releases the\n non-exclusive lock.\n", "method_declar": ""}, {"params": [{"param_name": ["stamp"], "param_type": "long", "param_description": " a stamp returned by a write-lock operation"}], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "unlockWrite", "method_description": "If the lock state matches the given stamp, releases the\n exclusive lock.\n", "method_declar": ""}, {"params": [{"param_name": ["stamp"], "param_type": "long", "param_description": " a stamp"}], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the lock has not been exclusively acquired\n since issuance of the given stamp; else false"], "return_type": ["boolean"]}, "method_name": "validate", "method_description": "Returns true if the lock has not been exclusively acquired\n since issuance of the given stamp. Always returns false if the\n stamp is zero. Always returns true if the stamp represents a\n currently held lock. Invoking this method with a value not\n obtained from tryOptimisticRead() or a locking method\n for this lock has no defined effect or result.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stamp that can be used to unlock or convert mode"], "return_type": ["long"]}, "method_name": "writeLock", "method_description": "Exclusively acquires the lock, blocking if necessary\n until available.\n", "method_declar": ""}, {"params": [], "class_name": "StampedLock", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stamp that can be used to unlock or convert mode"], "return_type": ["long"]}, "method_name": "writeLockInterruptibly", "method_description": "Exclusively acquires the lock, blocking if necessary\n until available or the current thread is interrupted.\n Behavior under interruption matches that specified\n for method Lock#lockInterruptibly().\n", "method_declar": ""}], "class_name": "StampedLock", "Vars": null}