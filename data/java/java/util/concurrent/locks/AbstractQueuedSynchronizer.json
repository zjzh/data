{"package_name": "java.util.concurrent.locks", "subclass_list": [], "class_description": "Provides a framework for implementing blocking locks and related\n synchronizers (semaphores, events, etc) that rely on\n first-in-first-out (FIFO) wait queues.  This class is designed to\n be a useful basis for most kinds of synchronizers that rely on a\n single atomic int value to represent state. Subclasses\n must define the protected methods that change this state, and which\n define what that state means in terms of this object being acquired\n or released.  Given these, the other methods in this class carry\n out all queuing and blocking mechanics. Subclasses can maintain\n other state fields, but only the atomically updated int\n value manipulated using methods getState(), setState(int) and compareAndSetState(int, int) is tracked with respect\n to synchronization. Subclasses should be defined as non-public internal helper\n classes that are used to implement the synchronization properties\n of their enclosing class.  Class\n AbstractQueuedSynchronizer does not implement any\n synchronization interface.  Instead it defines methods such as\n acquireInterruptibly(int) that can be invoked as\n appropriate by concrete locks and related synchronizers to\n implement their public methods. This class supports either or both a default exclusive\n mode and a shared mode. When acquired in exclusive mode,\n attempted acquires by other threads cannot succeed. Shared mode\n acquires by multiple threads may (but need not) succeed. This class\n does not \"understand\" these differences except in the\n mechanical sense that when a shared mode acquire succeeds, the next\n waiting thread (if one exists) must also determine whether it can\n acquire as well. Threads waiting in the different modes share the\n same FIFO queue. Usually, implementation subclasses support only\n one of these modes, but both can come into play for example in a\n ReadWriteLock. Subclasses that support only exclusive or\n only shared modes need not define the methods supporting the unused mode. This class defines a nested ConditionObject class that\n can be used as a Condition implementation by subclasses\n supporting exclusive mode for which method isHeldExclusively() reports whether synchronization is exclusively\n held with respect to the current thread, method release(int)\n invoked with the current getState() value fully releases\n this object, and acquire(int), given this saved state value,\n eventually restores this object to its previous acquired state.  No\n AbstractQueuedSynchronizer method otherwise creates such a\n condition, so if this constraint cannot be met, do not use it.  The\n behavior of ConditionObject depends of course on the\n semantics of its synchronizer implementation. This class provides inspection, instrumentation, and monitoring\n methods for the internal queue, as well as similar methods for\n condition objects. These can be exported as desired into classes\n using an AbstractQueuedSynchronizer for their\n synchronization mechanics. Serialization of this class stores only the underlying atomic\n integer maintaining state, so deserialized objects have empty\n thread queues. Typical subclasses requiring serializability will\n define a readObject method that restores this to a known\n initial state upon deserialization. To use this class as the basis of a synchronizer, redefine the\n following methods, as applicable, by inspecting and/or modifying\n the synchronization state using getState(), setState(int) and/or compareAndSetState(int, int): You may also find the inherited methods from AbstractOwnableSynchronizer useful to keep track of the thread\n owning an exclusive synchronizer.  You are encouraged to use them\n -- this enables monitoring and diagnostic tools to assist users in\n determining which threads hold locks. Even though this class is based on an internal FIFO queue, it\n does not automatically enforce FIFO acquisition policies.  The core\n of exclusive synchronization takes the form: Because checks in acquire are invoked before\n enqueuing, a newly acquiring thread may barge ahead of\n others that are blocked and queued.  However, you can, if desired,\n define tryAcquire and/or tryAcquireShared to\n disable barging by internally invoking one or more of the inspection\n methods, thereby providing a fair FIFO acquisition order.\n In particular, most fair synchronizers can define tryAcquire\n to return false if hasQueuedPredecessors() (a method\n specifically designed to be used by fair synchronizers) returns\n true.  Other variations are possible. Throughput and scalability are generally highest for the\n default barging (also known as greedy,\n renouncement, and convoy-avoidance) strategy.\n While this is not guaranteed to be fair or starvation-free, earlier\n queued threads are allowed to recontend before later queued\n threads, and each recontention has an unbiased chance to succeed\n against incoming threads.  Also, while acquires do not\n \"spin\" in the usual sense, they may perform multiple\n invocations of tryAcquire interspersed with other\n computations before blocking.  This gives most of the benefits of\n spins when exclusive synchronization is only briefly held, without\n most of the liabilities when it isn't. If so desired, you can\n augment this by preceding calls to acquire methods with\n \"fast-path\" checks, possibly prechecking hasContended()\n and/or hasQueuedThreads() to only do so if the synchronizer\n is likely not to be contended. This class provides an efficient and scalable basis for\n synchronization in part by specializing its range of use to\n synchronizers that can rely on int state, acquire, and\n release parameters, and an internal FIFO wait queue. When this does\n not suffice, you can build synchronizers from a lower level using\n atomic classes, your own custom\n Queue classes, and LockSupport blocking\n support. Here is a non-reentrant mutual exclusion lock class that uses\n the value zero to represent the unlocked state, and one to\n represent the locked state. While a non-reentrant lock\n does not strictly require recording of the current owner\n thread, this class does so anyway to make usage easier to monitor.\n It also supports conditions and exposes\n one of the instrumentation methods: Here is a latch class that is like a\n CountDownLatch\n except that it only requires a single signal to\n fire. Because a latch is non-exclusive, it uses the shared\n acquire and release methods. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["AbstractOwnableSynchronizer"], "Methods": [], "class_name": "AbstractQueuedSynchronizer", "Vars": null}