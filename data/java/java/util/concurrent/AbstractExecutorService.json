{"package_name": "java.util.concurrent", "subclass_list": ["ForkJoinPool", "ThreadPoolExecutor", "ForkJoinPool", "ExecutorService", "ForkJoinTask", "ThreadPoolExecutor", "ExecutorService", "Executors"], "class_description": "Provides default implementations of ExecutorService\n execution methods. This class implements the submit,\n invokeAny and invokeAll methods using a\n RunnableFuture returned by newTaskFor, which defaults\n to the FutureTask class provided in this package.  For example,\n the implementation of submit(Runnable) creates an\n associated RunnableFuture that is executed and\n returned. Subclasses may override the newTaskFor methods\n to return RunnableFuture implementations other than\n FutureTask. Extension example. Here is a sketch of a class\n that customizes ThreadPoolExecutor to use\n a CustomTask class instead of the default FutureTask: ", "class_type": "class", "typealias": [], "interface_list": ["ExecutorService"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "AbstractExecutorService", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["tasks"], "param_type": "Collection", "param_description": " the collection of tasks"}], "class_name": "AbstractExecutorService", "is_static": false, "return_value": {"return_name": [], "return_description": ["a list of Futures representing the tasks, in the same\n         sequential order as produced by the iterator for the\n         given task list, each of which has completed"], "return_type": ["List<Future<T>>"]}, "method_name": "invokeAll", "method_description": "Executes the given tasks, returning a list of Futures holding\n their status and results when all complete.\n Future#isDone is true for each\n element of the returned list.\n Note that a completed task could have\n terminated either normally or by throwing an exception.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["tasks"], "param_type": "Collection", "param_description": " the collection of tasks"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " the maximum time to wait"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the timeout argument"}], "class_name": "AbstractExecutorService", "is_static": false, "return_value": {"return_name": [], "return_description": ["a list of Futures representing the tasks, in the same\n         sequential order as produced by the iterator for the\n         given task list. If the operation did not time out,\n         each task will have completed. If it did time out, some\n         of these tasks will not have completed."], "return_type": ["List<Future<T>>"]}, "method_name": "invokeAll", "method_description": "Executes the given tasks, returning a list of Futures holding\n their status and results\n when all complete or the timeout expires, whichever happens first.\n Future#isDone is true for each\n element of the returned list.\n Upon return, tasks that have not completed are cancelled.\n Note that a completed task could have\n terminated either normally or by throwing an exception.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["tasks"], "param_type": "Collection", "param_description": " the collection of tasks"}], "class_name": "AbstractExecutorService", "is_static": false, "return_value": {"return_name": [], "return_description": ["the result returned by one of the tasks"], "return_type": ["T"]}, "method_name": "invokeAny", "method_description": "Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do. Upon normal or exceptional return,\n tasks that have not completed are cancelled.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["tasks"], "param_type": "Collection", "param_description": " the collection of tasks"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " the maximum time to wait"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the timeout argument"}], "class_name": "AbstractExecutorService", "is_static": false, "return_value": {"return_name": [], "return_description": ["the result returned by one of the tasks"], "return_type": ["T"]}, "method_name": "invokeAny", "method_description": "Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do before the given timeout elapses.\n Upon normal or exceptional return, tasks that have not\n completed are cancelled.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "Callable", "param_description": " the task to submit"}], "class_name": "AbstractExecutorService", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Future representing pending completion of the task"], "return_type": ["Future<T>"]}, "method_name": "submit", "method_description": "Submits a value-returning task for execution and returns a\n Future representing the pending results of the task. The\n Future's get method will return the task's result upon\n successful completion.\n\n \n\n If you would like to immediately block waiting\n for a task, you can use constructions of the form\n result = exec.submit(aCallable).get();\n\nNote: The Executors class includes a set of methods\n that can convert some other common closure-like objects,\n for example, PrivilegedAction to\n Callable form so they can be submitted.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "Runnable", "param_description": " the task to submit"}, {"param_name": ["result"], "param_type": "T", "param_description": " the result to return"}], "class_name": "AbstractExecutorService", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Future representing pending completion of the task"], "return_type": ["Future<T>"]}, "method_name": "submit", "method_description": "Submits a Runnable task for execution and returns a Future\n representing that task. The Future's get method will\n return the given result upon successful completion.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "Runnable", "param_description": " the task to submit"}], "class_name": "AbstractExecutorService", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Future representing pending completion of the task"], "return_type": ["Future<?>"]}, "method_name": "submit", "method_description": "Submits a Runnable task for execution and returns a Future\n representing that task. The Future's get method will\n return null upon successful completion.\n", "method_declar": ""}], "class_name": "AbstractExecutorService", "Vars": null}