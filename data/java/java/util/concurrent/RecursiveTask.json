{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A recursive result-bearing ForkJoinTask. For a classic example, here is a task computing Fibonacci numbers: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["ForkJoinTask"], "Methods": [{"params": [], "class_name": "RecursiveTask", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "RecursiveTask", "is_static": false, "return_value": {"return_name": [], "return_description": ["the result, or null if not completed"], "return_type": ["V"]}, "method_name": "getRawResult", "method_description": "Returns the result that would be returned by join(), even\n if this task completed abnormally, or null if this task\n is not known to have been completed.  This method is designed\n to aid debugging, as well as to support extensions. Its use in\n any other context is discouraged.\n", "method_declar": ""}], "class_name": "RecursiveTask", "Vars": null}