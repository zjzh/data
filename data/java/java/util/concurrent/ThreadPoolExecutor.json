{"package_name": "java.util.concurrent", "subclass_list": ["ScheduledThreadPoolExecutor", "ScheduledThreadPoolExecutor", "ThreadPoolExecutor"], "class_description": "An ExecutorService that executes each submitted task using\n one of possibly several pooled threads, normally configured\n using Executors factory methods. Thread pools address two different problems: they usually\n provide improved performance when executing large numbers of\n asynchronous tasks, due to reduced per-task invocation overhead,\n and they provide a means of bounding and managing the resources,\n including threads, consumed when executing a collection of tasks.\n Each ThreadPoolExecutor also maintains some basic\n statistics, such as the number of completed tasks. To be useful across a wide range of contexts, this class\n provides many adjustable parameters and extensibility\n hooks. However, programmers are urged to use the more convenient\n Executors factory methods Executors#newCachedThreadPool (unbounded thread pool, with\n automatic thread reclamation), Executors#newFixedThreadPool\n (fixed size thread pool) and Executors#newSingleThreadExecutor (single background thread), that\n preconfigure settings for the most common usage\n scenarios. Otherwise, use the following guide when manually\n configuring and tuning this class: Extension example. Most extensions of this class\n override one or more of the protected hook methods. For example,\n here is a subclass that adds a simple pause/resume feature: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["AbstractExecutorService"], "Methods": [], "class_name": "ThreadPoolExecutor", "Vars": null}