{"package_name": "java.util.concurrent", "subclass_list": ["ExecutorCompletionService", "ExecutorCompletionService", "CompletionService", "Executor"], "class_description": "A service that decouples the production of new asynchronous tasks\n from the consumption of the results of completed tasks.  Producers\n submit tasks for execution. Consumers take\n completed tasks and process their results in the order they\n complete.  A CompletionService can for example be used to\n manage asynchronous I/O, in which tasks that perform reads are\n submitted in one part of a program or system, and then acted upon\n in a different part of the program when the reads complete,\n possibly in a different order than they were requested. Typically, a CompletionService relies on a separate\n Executor to actually execute the tasks, in which case the\n CompletionService only manages an internal completion\n queue. The ExecutorCompletionService class provides an\n implementation of this approach. Memory consistency effects: Actions in a thread prior to\n submitting a task to a CompletionService\nhappen-before\n actions taken by that task, which in turn happen-before\n actions following a successful return from the corresponding take(). ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "CompletionService", "Vars": null}