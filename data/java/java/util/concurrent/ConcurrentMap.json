{"package_name": "java.util.concurrent", "subclass_list": ["ConcurrentHashMap", "ConcurrentNavigableMap", "ConcurrentSkipListMap", "ConcurrentHashMap", "ConcurrentNavigableMap", "ConcurrentMap", "NavigableMap", "ConcurrentSkipListMap", "ConcurrentNavigableMap"], "class_description": "A Map providing thread safety and atomicity\n guarantees. To maintain the specified guarantees, default implementations of\n methods including putIfAbsent(K, V) inherited from Map\n must be overridden by implementations of this interface. Similarly,\n implementations of the collections returned by methods Map.keySet(), Map.values(), and Map.entrySet() must override\n methods such as removeIf when necessary to\n preserve atomicity guarantees. Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n ConcurrentMap as a key or value\n happen-before\n actions subsequent to the access or removal of that object from\n the ConcurrentMap in another thread. ", "class_type": "interface", "typealias": [], "interface_list": ["Map<K", "\u00a0V>"], "class_inherit_list": [], "Methods": [], "class_name": "ConcurrentMap", "Vars": null}