{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "An unbounded TransferQueue based on linked nodes.\n This queue orders elements FIFO (first-in-first-out) with respect\n to any given producer.  The head of the queue is that\n element that has been on the queue the longest time for some\n producer.  The tail of the queue is that element that has\n been on the queue the shortest time for some producer. Beware that, unlike in most collections, the size method\n is NOT a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations addAll,\n removeAll, retainAll, containsAll,\n equals, and toArray are not guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an addAll operation might view only some\n of the added elements. This class and its iterator implement all of the\n optional methods of the Collection and Iterator interfaces. Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n LinkedTransferQueue\nhappen-before\n actions subsequent to the access or removal of that element from\n the LinkedTransferQueue in another thread. ", "class_type": "class", "typealias": [], "interface_list": ["TransferQueue", "Serializable"], "class_inherit_list": ["AbstractQueue"], "Methods": [{"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an initially empty LinkedTransferQueue.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection of elements to initially contain"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a LinkedTransferQueue\n initially containing the elements of the given collection,\n added in traversal order of the collection's iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never throw\n IllegalStateException or return false.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be checked for containment in this queue"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this queue contains the specified element.\n More formally, returns true if and only if this queue contains\n at least one element e such that o.equals(e).\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}, {"param_name": ["maxElements"], "param_type": "int", "param_description": " the maximum number of elements to transfer"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes all available elements from this queue and adds them\n to the given collection.  This operation may be more\n efficient than repeatedly polling this queue.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of consumers waiting to receive elements"], "return_type": ["int"]}, "method_name": "getWaitingConsumerCount", "method_description": "Returns an estimate of the number of consumers waiting to\n receive elements via BlockingQueue.take() or timed\n poll.  The return value is an\n approximation of a momentary state of affairs, that may be\n inaccurate if consumers have completed or given up waiting.\n The value may be useful for monitoring and heuristics, but\n not for synchronization control.  Implementations of this\n method are likely to be noticeably slower than those for\n hasWaitingConsumer().\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if there is at least one waiting consumer"], "return_type": ["boolean"]}, "method_name": "hasWaitingConsumer", "method_description": "Returns true if there is at least one consumer waiting\n to receive an element via BlockingQueue.take() or\n timed poll.\n The return value represents a momentary state of affairs.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue contains no elements"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Returns true if this queue contains no elements.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this queue in proper sequence"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n \nThe returned iterator is\n weakly consistent.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by\n  BlockingQueue.offer)"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never block or\n return false.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Queue#offer)"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never return false.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this queue is empty"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Retrieves, but does not remove, the head of this queue,\n or returns null if this queue is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if the\n         specified waiting time elapses before an element is available"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this queue is empty"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue,\n or returns null if this queue is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "put", "method_description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never block.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["Integer.MAX_VALUE (as specified by\n         BlockingQueue.remainingCapacity)"], "return_type": ["int"]}, "method_name": "remainingCapacity", "method_description": "Always returns Integer.MAX_VALUE because a\n LinkedTransferQueue is not capacity constrained.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this queue, if present"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this queue changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element e such\n that o.equals(e), if this queue contains one or more such\n elements.\n Returns true if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this queue"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this queue.  If this queue\n contains more than Integer.MAX_VALUE elements, returns\n Integer.MAX_VALUE.\n\n \nBeware that, unlike in most collections, this method is\n NOT a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current\n number of elements requires an O(n) traversal.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this queue"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Returns a Spliterator over the elements in this queue.\n\n \nThe returned spliterator is\n weakly consistent.\n\n \nThe Spliterator reports Spliterator#CONCURRENT,\n Spliterator#ORDERED, and Spliterator#NONNULL.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue"], "return_type": ["E"]}, "method_name": "take", "method_description": "Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue, in\n proper sequence.\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n \nIf this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n null.\n\n \nLike the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \nSuppose x is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of String:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this collection"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this collection.  The string\n representation consists of a list of the collection's elements in the\n order they are returned by its iterator, enclosed in square brackets\n (\"[]\").  Adjacent elements are separated by the characters\n \", \" (comma and space).  Elements are converted to strings as\n by String#valueOf(Object).\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to transfer"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "transfer", "method_description": "Transfers the element to a consumer, waiting if necessary to do so.\n\n \nMore precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n take() or timed poll),\n else inserts the specified element at the tail of this queue\n and waits until the element is received by a consumer.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to transfer"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the element was transferred, else\n         false"], "return_type": ["boolean"]}, "method_name": "tryTransfer", "method_description": "Transfers the element to a waiting consumer immediately, if possible.\n\n \nMore precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n take() or timed poll),\n otherwise returning false without enqueuing the element.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to transfer"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "LinkedTransferQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful, or false if\n         the specified waiting time elapses before completion,\n         in which case the element is not left enqueued"], "return_type": ["boolean"]}, "method_name": "tryTransfer", "method_description": "Transfers the element to a consumer if it is possible to do so\n before the timeout elapses.\n\n \nMore precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n take() or timed poll),\n else inserts the specified element at the tail of this queue\n and waits until the element is received by a consumer,\n returning false if the specified wait time elapses\n before the element can be transferred.\n", "method_declar": ""}], "class_name": "LinkedTransferQueue", "Vars": null}