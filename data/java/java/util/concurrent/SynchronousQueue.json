{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A BlockingQueue in which each insert\n operation must wait for a corresponding remove operation by another\n thread, and vice versa.  A synchronous queue does not have any\n internal capacity, not even a capacity of one.  You cannot\n peek at a synchronous queue because an element is only\n present when you try to remove it; you cannot insert an element\n (using any method) unless another thread is trying to remove it;\n you cannot iterate as there is nothing to iterate.  The\n head of the queue is the element that the first queued\n inserting thread is trying to add to the queue; if there is no such\n queued thread then no element is available for removal and\n poll() will return null.  For purposes of other\n Collection methods (for example contains), a\n SynchronousQueue acts as an empty collection.  This queue\n does not permit null elements. Synchronous queues are similar to rendezvous channels used in\n CSP and Ada. They are well suited for handoff designs, in which an\n object running in one thread must sync up with an object running\n in another thread in order to hand it some information, event, or\n task. This class supports an optional fairness policy for ordering\n waiting producer and consumer threads.  By default, this ordering\n is not guaranteed. However, a queue constructed with fairness set\n to true grants threads access in FIFO order. This class and its iterator implement all of the\n optional methods of the Collection and Iterator interfaces. ", "class_type": "class", "typealias": [], "interface_list": ["BlockingQueue", "Serializable"], "class_inherit_list": ["AbstractQueue"], "Methods": [{"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a SynchronousQueue with nonfair access policy.\n", "method_declar": ""}, {"params": [{"param_name": ["fair"], "param_type": "boolean", "param_description": " if true, waiting threads contend in FIFO order for\n        access; otherwise the order is unspecified."}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a SynchronousQueue with the specified fairness policy.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Does nothing.\n A SynchronousQueue has no internal capacity.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " the element"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["false"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Always returns false.\n A SynchronousQueue has no internal capacity.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["false unless given collection is empty"], "return_type": ["boolean"]}, "method_name": "containsAll", "method_description": "Returns false unless the given collection is empty.\n A SynchronousQueue has no internal capacity.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}, {"param_name": ["maxElements"], "param_type": "int", "param_description": " the maximum number of elements to transfer"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes all available elements from this queue and adds them\n to the given collection.  This operation may be more\n efficient than repeatedly polling this queue.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Always returns true.\n A SynchronousQueue has no internal capacity.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an empty iterator"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an empty iterator in which hasNext always returns\n false.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the element was added to this queue, else\n         false"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element into this queue, if another thread is\n waiting to receive it.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful, or false if the\n         specified waiting time elapses before a consumer appears"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element into this queue, waiting if necessary\n up to the specified wait time for another thread to receive it.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["null"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Always returns null.\n A SynchronousQueue does not return elements\n unless actively waited on.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if the\n         specified waiting time elapses before an element is present"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue, waiting\n if necessary up to the specified wait time, for another thread\n to insert it.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if no\n         element is available"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue, if another thread\n is currently making an element available.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "put", "method_description": "Adds the specified element to this queue, waiting if necessary for\n another thread to receive it.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["zero"], "return_type": ["int"]}, "method_name": "remainingCapacity", "method_description": "Always returns zero.\n A SynchronousQueue has no internal capacity.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " the element to remove"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["false"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Always returns false.\n A SynchronousQueue has no internal capacity.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["false"], "return_type": ["boolean"]}, "method_name": "removeAll", "method_description": "Always returns false.\n A SynchronousQueue has no internal capacity.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["false"], "return_type": ["boolean"]}, "method_name": "retainAll", "method_description": "Always returns false.\n A SynchronousQueue has no internal capacity.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["zero"], "return_type": ["int"]}, "method_name": "size", "method_description": "Always returns zero.\n A SynchronousQueue has no internal capacity.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an empty spliterator"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Returns an empty spliterator in which calls to\n Spliterator.trySplit() always return null.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue"], "return_type": ["E"]}, "method_name": "take", "method_description": "Retrieves and removes the head of this queue, waiting if necessary\n for another thread to insert it.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array"}], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the specified array"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Sets the zeroth element of the specified array to null\n (if the array has non-zero length) and returns it.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["a zero-length array"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns a zero-length array.\n", "method_declar": ""}, {"params": [], "class_name": "SynchronousQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["\"[]\""], "return_type": ["String"]}, "method_name": "toString", "method_description": "Always returns \"[]\".\n", "method_declar": ""}], "class_name": "SynchronousQueue", "Vars": null}