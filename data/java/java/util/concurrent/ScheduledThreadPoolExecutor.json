{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A ThreadPoolExecutor that can additionally schedule\n commands to run after a given delay, or to execute periodically.\n This class is preferable to Timer when multiple\n worker threads are needed, or when the additional flexibility or\n capabilities of ThreadPoolExecutor (which this class\n extends) are required. Delayed tasks execute no sooner than they are enabled, but\n without any real-time guarantees about when, after they are\n enabled, they will commence. Tasks scheduled for exactly the same\n execution time are enabled in first-in-first-out (FIFO) order of\n submission. When a submitted task is cancelled before it is run, execution\n is suppressed.  By default, such a cancelled task is not\n automatically removed from the work queue until its delay elapses.\n While this enables further inspection and monitoring, it may also\n cause unbounded retention of cancelled tasks. Successive executions of a periodic task scheduled via\n scheduleAtFixedRate or\n scheduleWithFixedDelay\n do not overlap. While different executions may be performed by\n different threads, the effects of prior executions\n happen-before\n those of subsequent ones. While this class inherits from ThreadPoolExecutor, a few\n of the inherited tuning methods are not useful for it. In\n particular, because it acts as a fixed-sized pool using\n corePoolSize threads and an unbounded queue, adjustments\n to maximumPoolSize have no useful effect. Additionally, it\n is almost never a good idea to set corePoolSize to zero or\n use allowCoreThreadTimeOut because this may leave the pool\n without threads to handle tasks once they become eligible to run. Extension notes: This class overrides the\n ThreadPoolExecutor#execute(Runnable) and\n AbstractExecutorService#submit(Runnable)\n methods to generate internal ScheduledFuture objects to\n control per-task delays and scheduling.  To preserve\n functionality, any further overrides of these methods in\n subclasses must invoke superclass versions, which effectively\n disables additional task customization.  However, this class\n provides alternative protected extension method\n decorateTask (one version each for Runnable and\n Callable) that can be used to customize the concrete task\n types used to execute commands entered via execute,\n submit, schedule, scheduleAtFixedRate,\n and scheduleWithFixedDelay.  By default, a\n ScheduledThreadPoolExecutor uses a task type extending\n FutureTask. However, this may be modified or replaced using\n subclasses of the form: ", "class_type": "class", "typealias": [], "interface_list": ["ScheduledExecutorService"], "class_inherit_list": ["ThreadPoolExecutor"], "Methods": [{"params": [{"param_name": ["corePoolSize"], "param_type": "int", "param_description": " the number of threads to keep in the pool, even\n        if they are idle, unless allowCoreThreadTimeOut is set"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new ScheduledThreadPoolExecutor with the\n given core pool size.\n", "method_declar": ""}, {"params": [{"param_name": ["corePoolSize"], "param_type": "int", "param_description": " the number of threads to keep in the pool, even\n        if they are idle, unless allowCoreThreadTimeOut is set"}, {"param_name": ["threadFactory"], "param_type": "ThreadFactory", "param_description": " the factory to use when the executor\n        creates a new thread"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new ScheduledThreadPoolExecutor with the\n given initial parameters.\n", "method_declar": ""}, {"params": [{"param_name": ["corePoolSize"], "param_type": "int", "param_description": " the number of threads to keep in the pool, even\n        if they are idle, unless allowCoreThreadTimeOut is set"}, {"param_name": ["handler"], "param_type": "RejectedExecutionHandler", "param_description": " the handler to use when execution is blocked\n        because the thread bounds and queue capacities are reached"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new ScheduledThreadPoolExecutor with the\n given initial parameters.\n", "method_declar": ""}, {"params": [{"param_name": ["corePoolSize"], "param_type": "int", "param_description": " the number of threads to keep in the pool, even\n        if they are idle, unless allowCoreThreadTimeOut is set"}, {"param_name": ["threadFactory"], "param_type": "ThreadFactory", "param_description": " the factory to use when the executor\n        creates a new thread"}, {"param_name": ["handler"], "param_type": "RejectedExecutionHandler", "param_description": " the handler to use when execution is blocked\n        because the thread bounds and queue capacities are reached"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new ScheduledThreadPoolExecutor with the\n given initial parameters.\n", "method_declar": ""}, {"params": [{"param_name": ["command"], "param_type": "Runnable", "param_description": " the task to execute"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "execute", "method_description": "Executes command with zero required delay.\n This has effect equivalent to\n schedule(command, 0, anyUnit).\n Note that inspections of the queue and of the list returned by\n shutdownNow will access the zero-delayed\n ScheduledFuture, not the command itself.\n\n \nA consequence of the use of ScheduledFuture objects is\n that ThreadPoolExecutor#afterExecute is always\n called with a null second Throwable argument, even if the\n command terminated abruptly.  Instead, the Throwable\n thrown by such a task can be obtained via Future#get.\n", "method_declar": ""}, {"params": [], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if will continue after shutdown"], "return_type": ["boolean"]}, "method_name": "getContinueExistingPeriodicTasksAfterShutdownPolicy", "method_description": "Gets the policy on whether to continue executing existing\n periodic tasks even when this executor has been shutdown.\n In this case, these tasks will only terminate upon\n shutdownNow or after setting the policy to\n false when already shutdown.\n This value is by default false.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if will execute after shutdown"], "return_type": ["boolean"]}, "method_name": "getExecuteExistingDelayedTasksAfterShutdownPolicy", "method_description": "Gets the policy on whether to execute existing delayed\n tasks even when this executor has been shutdown.\n In this case, these tasks will only terminate upon\n shutdownNow, or after setting the policy to\n false when already shutdown.\n This value is by default true.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["the task queue"], "return_type": ["BlockingQueue<Runnable>"]}, "method_name": "getQueue", "method_description": "Returns the task queue used by this executor.  Access to the\n task queue is intended primarily for debugging and monitoring.\n This queue may be in active use.  Retrieving the task queue\n does not prevent queued tasks from executing.\n\n \nEach element of this queue is a ScheduledFuture.\n For tasks submitted via one of the schedule methods, the\n element will be identical to the returned ScheduledFuture.\n For tasks submitted using execute, the element\n will be a zero-delay ScheduledFuture.\n\n \nIteration over this queue is not guaranteed to traverse\n tasks in the order in which they will execute.\n", "method_declar": ""}, {"params": [], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if cancelled tasks are immediately removed\n         from the queue"], "return_type": ["boolean"]}, "method_name": "getRemoveOnCancelPolicy", "method_description": "Gets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation.  This value is\n by default false.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["callable"], "param_type": "Callable", "param_description": " the function to execute"}, {"param_name": ["delay"], "param_type": "long", "param_description": " the time from now to delay execution"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the delay parameter"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a ScheduledFuture that can be used to extract result or cancel"], "return_type": ["ScheduledFuture<V>"]}, "method_name": "schedule", "method_description": "Creates and executes a ScheduledFuture that becomes enabled after the\n given delay.\n", "method_declar": ""}, {"params": [{"param_name": ["command"], "param_type": "Runnable", "param_description": " the task to execute"}, {"param_name": ["delay"], "param_type": "long", "param_description": " the time from now to delay execution"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the delay parameter"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a ScheduledFuture representing pending completion of\n         the task and whose get() method will return\n         null upon completion"], "return_type": ["ScheduledFuture<?>"]}, "method_name": "schedule", "method_description": "Creates and executes a one-shot action that becomes enabled\n after the given delay.\n", "method_declar": ""}, {"params": [{"param_name": ["command"], "param_type": "Runnable", "param_description": " the task to execute"}, {"param_name": ["initialDelay"], "param_type": "long", "param_description": " the time to delay first execution"}, {"param_name": ["period"], "param_type": "long", "param_description": " the period between successive executions"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the initialDelay and period parameters"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a ScheduledFuture representing pending completion of\n         the series of repeated tasks.  The future's Future#get() method will never return normally,\n         and will throw an exception upon task cancellation or\n         abnormal termination of a task execution."], "return_type": ["ScheduledFuture<?>"]}, "method_name": "scheduleAtFixedRate", "method_description": "Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the given\n period; that is, executions will commence after\n initialDelay, then initialDelay + period, then\n initialDelay + 2 * period, and so on.\n\n \nThe sequence of task executions continues indefinitely until\n one of the following exceptional completions occur:\n \nIf any execution of this task takes longer than its period, then\n subsequent executions may start late, but will not concurrently\n execute.\n", "method_declar": ""}, {"params": [{"param_name": ["command"], "param_type": "Runnable", "param_description": " the task to execute"}, {"param_name": ["initialDelay"], "param_type": "long", "param_description": " the time to delay first execution"}, {"param_name": ["delay"], "param_type": "long", "param_description": " the delay between the termination of one\n execution and the commencement of the next"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the initialDelay and delay parameters"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a ScheduledFuture representing pending completion of\n         the series of repeated tasks.  The future's Future#get() method will never return normally,\n         and will throw an exception upon task cancellation or\n         abnormal termination of a task execution."], "return_type": ["ScheduledFuture<?>"]}, "method_name": "scheduleWithFixedDelay", "method_description": "Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the\n given delay between the termination of one execution and the\n commencement of the next.\n\n \nThe sequence of task executions continues indefinitely until\n one of the following exceptional completions occur:\n \n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "boolean", "param_description": " if true, continue after shutdown, else don't"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setContinueExistingPeriodicTasksAfterShutdownPolicy", "method_description": "Sets the policy on whether to continue executing existing\n periodic tasks even when this executor has been shutdown.\n In this case, these tasks will only terminate upon\n shutdownNow or after setting the policy to\n false when already shutdown.\n This value is by default false.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "boolean", "param_description": " if true, execute after shutdown, else don't"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setExecuteExistingDelayedTasksAfterShutdownPolicy", "method_description": "Sets the policy on whether to execute existing delayed\n tasks even when this executor has been shutdown.\n In this case, these tasks will only terminate upon\n shutdownNow, or after setting the policy to\n false when already shutdown.\n This value is by default true.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "boolean", "param_description": " if true, remove on cancellation, else don't"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setRemoveOnCancelPolicy", "method_description": "Sets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation.  This value is\n by default false.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "shutdown", "method_description": "Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n\n \nThis method does not wait for previously submitted tasks to\n complete execution.  Use awaitTermination\n to do that.\n\n \nIf the ExecuteExistingDelayedTasksAfterShutdownPolicy\n has been set false, existing delayed tasks whose delays\n have not yet elapsed are cancelled.  And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set\n true, future executions of existing periodic tasks will\n be cancelled.\n", "method_declar": ""}, {"params": [], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["list of tasks that never commenced execution.\n         Each element of this list is a ScheduledFuture.\n         For tasks submitted via one of the schedule\n         methods, the element will be identical to the returned\n         ScheduledFuture.  For tasks submitted using\n         execute, the element will be a\n         zero-delay ScheduledFuture."], "return_type": ["List<Runnable>"]}, "method_name": "shutdownNow", "method_description": "Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution. These tasks are drained (removed)\n from the task queue upon return from this method.\n\n \nThis method does not wait for actively executing tasks to\n terminate.  Use awaitTermination to\n do that.\n\n \nThere are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  This implementation\n interrupts tasks via Thread#interrupt; any task that\n fails to respond to interrupts may never terminate.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "Runnable", "param_description": " the task to submit"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Future representing pending completion of the task"], "return_type": ["Future<?>"]}, "method_name": "submit", "method_description": "Submits a Runnable task for execution and returns a Future\n representing that task. The Future's get method will\n return null upon successful completion.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "Callable", "param_description": " the task to submit"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Future representing pending completion of the task"], "return_type": ["Future<T>"]}, "method_name": "submit", "method_description": "Submits a value-returning task for execution and returns a\n Future representing the pending results of the task. The\n Future's get method will return the task's result upon\n successful completion.\n\n \n\n If you would like to immediately block waiting\n for a task, you can use constructions of the form\n result = exec.submit(aCallable).get();\n\nNote: The Executors class includes a set of methods\n that can convert some other common closure-like objects,\n for example, PrivilegedAction to\n Callable form so they can be submitted.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "Runnable", "param_description": " the task to submit"}, {"param_name": ["result"], "param_type": "T", "param_description": " the result to return"}], "class_name": "ScheduledThreadPoolExecutor", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Future representing pending completion of the task"], "return_type": ["Future<T>"]}, "method_name": "submit", "method_description": "Submits a Runnable task for execution and returns a Future\n representing that task. The Future's get method will\n return the given result upon successful completion.\n", "method_declar": ""}], "class_name": "ScheduledThreadPoolExecutor", "Vars": null}