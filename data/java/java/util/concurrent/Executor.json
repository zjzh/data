{"package_name": "java.util.concurrent", "subclass_list": ["AbstractExecutorService", "ExecutorService", "ForkJoinPool", "ScheduledExecutorService", "ScheduledThreadPoolExecutor", "ThreadPoolExecutor", "AbstractExecutorService", "ExecutorService", "ExecutorService", "Executor", "Future", "ForkJoinPool", "ExecutorService", "ForkJoinTask", "ScheduledExecutorService", "ExecutorService", "ScheduledThreadPoolExecutor", "ThreadPoolExecutor", "ThreadPoolExecutor", "ExecutorService", "Executors"], "class_description": "An object that executes submitted Runnable tasks. This\n interface provides a way of decoupling task submission from the\n mechanics of how each task will be run, including details of thread\n use, scheduling, etc.  An Executor is normally used\n instead of explicitly creating threads. For example, rather than\n invoking new Thread(new RunnableTask()).start() for each\n of a set of tasks, you might use: Memory consistency effects: Actions in a thread prior to\n submitting a Runnable object to an Executor\nhappen-before\n its execution begins, perhaps in another thread. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "Executor", "Vars": null}