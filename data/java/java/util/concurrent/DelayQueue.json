{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "An unbounded BlockingQueue of\n Delayed elements, in which an element can only be taken\n when its delay has expired.  The head of the queue is that\n Delayed element whose delay expired furthest in the\n past.  If no delay has expired there is no head and poll\n will return null. Expiration occurs when an element's\n getDelay(TimeUnit.NANOSECONDS) method returns a value less\n than or equal to zero.  Even though unexpired elements cannot be\n removed using take or poll, they are otherwise\n treated as normal elements. For example, the size method\n returns the count of both expired and unexpired elements.\n This queue does not permit null elements. This class and its iterator implement all of the\n optional methods of the Collection and Iterator interfaces.  The Iterator provided in method iterator() is not guaranteed to traverse the elements of\n the DelayQueue in any particular order. ", "class_type": "class", "typealias": [], "interface_list": ["BlockingQueue<E\u00a0extends\u00a0Delayed>"], "class_inherit_list": ["AbstractQueue<E\u00a0extends\u00a0Delayed>"], "Methods": [{"params": [], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new DelayQueue that is initially empty.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection of elements to initially contain"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a DelayQueue initially containing the elements of the\n given collection of Delayed instances.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Inserts the specified element into this delay queue.\n", "method_declar": ""}, {"params": [], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Atomically removes all of the elements from this delay queue.\n The queue will be empty after this call returns.\n Elements with an unexpired delay are not waited for; they are\n simply discarded from the queue.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}, {"param_name": ["maxElements"], "param_type": "int", "param_description": " the maximum number of elements to transfer"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes all available elements from this queue and adds them\n to the given collection.  This operation may be more\n efficient than repeatedly polling this queue.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this queue"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over all the elements (both expired and\n unexpired) in this queue. The iterator does not return the\n elements in any particular order.\n\n \nThe returned iterator is\n weakly consistent.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element into this delay queue.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " This parameter is ignored as the method never blocks"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " This parameter is ignored as the method never blocks"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element into this delay queue. As the queue is\n unbounded this method will never block.\n", "method_declar": ""}, {"params": [], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this\n         queue is empty"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Retrieves, but does not remove, the head of this queue, or\n returns null if this queue is empty.  Unlike\n poll, if no expired elements are available in the queue,\n this method returns the element that will expire next,\n if one exists.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if the\n         specified waiting time elapses before an element with\n         an expired delay becomes available"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is available on this queue,\n or the specified wait time expires.\n", "method_declar": ""}, {"params": [], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue, or null if this\n         queue has no elements with an expired delay"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of this queue, or returns null\n if this queue has no elements with an expired delay.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "put", "method_description": "Inserts the specified element into this delay queue. As the queue is\n unbounded this method will never block.\n", "method_declar": ""}, {"params": [], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["Integer.MAX_VALUE"], "return_type": ["int"]}, "method_name": "remainingCapacity", "method_description": "Always returns Integer.MAX_VALUE because\n a DelayQueue is not capacity constrained.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this collection, if present"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if an element was removed as a result of this call"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes a single instance of the specified element from this\n queue, if it is present, whether or not it has expired.\n", "method_declar": ""}, {"params": [], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this collection"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this collection.  If this collection\n contains more than Integer.MAX_VALUE elements, returns\n Integer.MAX_VALUE.\n", "method_declar": ""}, {"params": [], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this queue"], "return_type": ["E"]}, "method_name": "take", "method_description": "Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is available on this queue.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose"}], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.\n\n \nIf this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n null.\n\n \nLike the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \nThe following code can be used to dump a delay queue into a newly\n allocated array of Delayed:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "DelayQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this queue"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this queue.\n The returned array elements are in no particular order.\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}], "class_name": "DelayQueue", "Vars": null}