{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A scalable concurrent NavigableSet implementation based on\n a ConcurrentSkipListMap.  The elements of the set are kept\n sorted according to their Comparable,\n or by a Comparator provided at set creation time, depending\n on which constructor is used. This implementation provides expected average log(n) time\n cost for the contains, add, and remove\n operations and their variants.  Insertion, removal, and access\n operations safely execute concurrently by multiple threads. Iterators and spliterators are\n weakly consistent. Ascending ordered views and their iterators are faster than\n descending ones. Beware that, unlike in most collections, the size\n method is not a constant-time operation. Because of the\n asynchronous nature of these sets, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations addAll,\n removeAll, retainAll, containsAll,\n equals, and toArray are not guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an addAll operation might view only some\n of the added elements. This class and its iterators implement all of the\n optional methods of the Set and Iterator\n interfaces. Like most other concurrent collection implementations,\n this class does not permit the use of null elements,\n because null arguments and return values cannot be reliably\n distinguished from the absence of elements. ", "class_type": "class", "typealias": [], "interface_list": ["NavigableSet", "Cloneable", "Serializable"], "class_inherit_list": ["AbstractSet"], "Methods": [{"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty set that orders its elements according to\n their Comparable.\n", "method_declar": ""}, {"params": [{"param_name": ["comparator"], "param_type": "Comparator", "param_description": " the comparator that will be used to order this set.\n        If null, the Comparable of the elements will be used."}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty set that orders its elements according to\n the specified comparator.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " The elements that will comprise the new set"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new set containing the elements in the specified\n collection, that orders its elements according to their\n Comparable.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "SortedSet", "param_description": " sorted set whose elements will comprise the new set"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new set containing the same elements and using the\n same ordering as the specified sorted set.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " element to be added to this set"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set did not already contain the\n         specified element"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Adds the specified element to this set if it is not already present.\n More formally, adds the specified element e to this set if\n the set contains no element e2 such that e.equals(e2).\n If this set already contains the element, the call leaves the set\n unchanged and returns false.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the value to match"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the least element greater than or equal to e,\n         or null if there is no such element"], "return_type": ["E"]}, "method_name": "ceiling", "method_description": "Returns the least element in this set greater than or equal to\n the given element, or null if there is no such element.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the elements from this set.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a shallow copy of this set"], "return_type": ["ConcurrentSkipListSet<E>"]}, "method_name": "clone", "method_description": "Returns a shallow copy of this ConcurrentSkipListSet\n instance. (The elements themselves are not cloned.)\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the comparator used to order the elements in this set,\n         or null if this set uses the natural ordering\n         of its elements"], "return_type": ["Comparator<?\u00a0super\u00a0E>"]}, "method_name": "comparator", "method_description": "Returns the comparator used to order the elements in this set,\n or null if this set uses the Comparable of its elements.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be checked for containment in this set"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this set contains the specified element.\n More formally, returns true if and only if this set\n contains an element e such that o.equals(e).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this set in descending order"], "return_type": ["Iterator<E>"]}, "method_name": "descendingIterator", "method_description": "Returns an iterator over the elements in this set in descending order.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reverse order view of this set"], "return_type": ["NavigableSet<E>"]}, "method_name": "descendingSet", "method_description": "Returns a reverse order view of the elements contained in this set.\n The descending set is backed by this set, so changes to the set are\n reflected in the descending set, and vice-versa.\n\n \nThe returned set has an ordering equivalent to\n Collections#reverseOrder(Comparator)(comparator()).\n The expression s.descendingSet().descendingSet() returns a\n view of s essentially equivalent to s.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " the object to be compared for equality with this set"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the specified object is equal to this set"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the specified object with this set for equality.  Returns\n true if the specified object is also a set, the two sets\n have the same size, and every member of the specified set is\n contained in this set (or equivalently, every member of this set is\n contained in the specified set).  This definition ensures that the\n equals method works properly across different implementations of the\n set interface.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first (lowest) element currently in this set"], "return_type": ["E"]}, "method_name": "first", "method_description": "Returns the first (lowest) element currently in this set.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the value to match"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the greatest element less than or equal to e,\n         or null if there is no such element"], "return_type": ["E"]}, "method_name": "floor", "method_description": "Returns the greatest element in this set less than or equal to\n the given element, or null if there is no such element.\n", "method_declar": ""}, {"params": [{"param_name": ["toElement"], "param_type": "E", "param_description": " high endpoint of the returned set"}, {"param_name": ["inclusive"], "param_type": "boolean", "param_description": " true if the high endpoint\n        is to be included in the returned view"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements are less than\n         (or equal to, if inclusive is true) toElement"], "return_type": ["NavigableSet<E>"]}, "method_name": "headSet", "method_description": "Returns a view of the portion of this set whose elements are less than\n (or equal to, if inclusive is true) toElement.  The\n returned set is backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set supports all\n optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["toElement"], "param_type": "E", "param_description": " high endpoint (exclusive) of the returned set"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements are strictly\n         less than toElement"], "return_type": ["NavigableSet<E>"]}, "method_name": "headSet", "method_description": "Returns a view of the portion of this set whose elements are\n strictly less than toElement.  The returned set is\n backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set\n supports all optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n\n \nEquivalent to headSet(toElement, false).\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the value to match"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the least element greater than e,\n         or null if there is no such element"], "return_type": ["E"]}, "method_name": "higher", "method_description": "Returns the least element in this set strictly greater than the\n given element, or null if there is no such element.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set contains no elements"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Returns true if this set contains no elements.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this set in ascending order"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this set in ascending order.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last (highest) element currently in this set"], "return_type": ["E"]}, "method_name": "last", "method_description": "Returns the last (highest) element currently in this set.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the value to match"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the greatest element less than e,\n         or null if there is no such element"], "return_type": ["E"]}, "method_name": "lower", "method_description": "Returns the greatest element in this set strictly less than the\n given element, or null if there is no such element.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first element, or null if this set is empty"], "return_type": ["E"]}, "method_name": "pollFirst", "method_description": "Retrieves and removes the first (lowest) element,\n or returns null if this set is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last element, or null if this set is empty"], "return_type": ["E"]}, "method_name": "pollLast", "method_description": "Retrieves and removes the last (highest) element,\n or returns null if this set is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be removed from this set, if present"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set contained the specified element"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the specified element from this set if it is present.\n More formally, removes an element e such that\n o.equals(e), if this set contains such an element.\n Returns true if this set contained the element (or\n equivalently, if this set changed as a result of the call).\n (This set will not contain the element once the call returns.)\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " collection containing elements to be removed from this set"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "removeAll", "method_description": "Removes from this set all of its elements that are contained in\n the specified collection.  If the specified collection is also\n a set, this operation effectively modifies this set so that its\n value is the asymmetric set difference of the two sets.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this set"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this set.  If this set\n contains more than Integer.MAX_VALUE elements, it\n returns Integer.MAX_VALUE.\n\n \nBeware that, unlike in most collections, this method is\n NOT a constant-time operation. Because of the\n asynchronous nature of these sets, determining the current\n number of elements requires traversing them all to count them.\n Additionally, it is possible for the size to change during\n execution of this method, in which case the returned result\n will be inaccurate. Thus, this method is typically not very\n useful in concurrent applications.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this set"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Returns a Spliterator over the elements in this set.\n\n \nThe Spliterator reports Spliterator#CONCURRENT,\n Spliterator#NONNULL, Spliterator#DISTINCT,\n Spliterator#SORTED and Spliterator#ORDERED, with an\n encounter order that is ascending order.  Overriding implementations\n should document the reporting of additional characteristic values.\n\n \nThe spliterator's comparator (see\n Spliterator.getComparator()) is null if\n the set's comparator (see comparator()) is null.\n Otherwise, the spliterator's comparator is the same as or imposes the\n same total ordering as the set's comparator.\n", "method_declar": ""}, {"params": [{"param_name": ["fromElement"], "param_type": "E", "param_description": " low endpoint of the returned set"}, {"param_name": ["fromInclusive"], "param_type": "boolean", "param_description": " true if the low endpoint\n        is to be included in the returned view"}, {"param_name": ["toElement"], "param_type": "E", "param_description": " high endpoint of the returned set"}, {"param_name": ["toInclusive"], "param_type": "boolean", "param_description": " true if the high endpoint\n        is to be included in the returned view"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements range from\n         fromElement, inclusive, to toElement, exclusive"], "return_type": ["NavigableSet<E>"]}, "method_name": "subSet", "method_description": "Returns a view of the portion of this set whose elements range from\n fromElement to toElement.  If fromElement and\n toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true.  The returned set\n is backed by this set, so changes in the returned set are reflected in\n this set, and vice-versa.  The returned set supports all optional set\n operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["fromElement"], "param_type": "E", "param_description": " low endpoint (inclusive) of the returned set"}, {"param_name": ["toElement"], "param_type": "E", "param_description": " high endpoint (exclusive) of the returned set"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements range from\n         fromElement, inclusive, to toElement, exclusive"], "return_type": ["NavigableSet<E>"]}, "method_name": "subSet", "method_description": "Returns a view of the portion of this set whose elements range\n from fromElement, inclusive, to toElement,\n exclusive.  (If fromElement and toElement are\n equal, the returned set is empty.)  The returned set is backed\n by this set, so changes in the returned set are reflected in\n this set, and vice-versa.  The returned set supports all\n optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n\n \nEquivalent to subSet(fromElement, true, toElement, false).\n", "method_declar": ""}, {"params": [{"param_name": ["fromElement"], "param_type": "E", "param_description": " low endpoint of the returned set"}, {"param_name": ["inclusive"], "param_type": "boolean", "param_description": " true if the low endpoint\n        is to be included in the returned view"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements are greater\n         than or equal to fromElement"], "return_type": ["NavigableSet<E>"]}, "method_name": "tailSet", "method_description": "Returns a view of the portion of this set whose elements are greater\n than (or equal to, if inclusive is true) fromElement.\n The returned set is backed by this set, so changes in the returned set\n are reflected in this set, and vice-versa.  The returned set supports\n all optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["fromElement"], "param_type": "E", "param_description": " low endpoint (inclusive) of the returned set"}], "class_name": "ConcurrentSkipListSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements are greater\n         than or equal to fromElement"], "return_type": ["NavigableSet<E>"]}, "method_name": "tailSet", "method_description": "Returns a view of the portion of this set whose elements are\n greater than or equal to fromElement.  The returned\n set is backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set\n supports all optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n\n \nEquivalent to tailSet(fromElement, true).\n", "method_declar": ""}], "class_name": "ConcurrentSkipListSet", "Vars": null}