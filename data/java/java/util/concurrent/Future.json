{"package_name": "java.util.concurrent", "subclass_list": ["CompletableFuture", "CountedCompleter", "ForkJoinTask", "FutureTask", "RecursiveAction", "RecursiveTask", "RunnableFuture", "RunnableScheduledFuture", "ScheduledFuture", "CompletableFuture", "Future", "CompletionStage", "CountedCompleter", "ForkJoinTask", "ForkJoinTask", "ForkJoinPool", "FutureTask", "RecursiveAction", "ForkJoinTask", "RecursiveTask", "ForkJoinTask", "RunnableFuture", "Future", "Runnable", "RunnableScheduledFuture", "ScheduledFuture", "Runnable", "ScheduledFuture"], "class_description": "A Future represents the result of an asynchronous\n computation.  Methods are provided to check if the computation is\n complete, to wait for its completion, and to retrieve the result of\n the computation.  The result can only be retrieved using method\n get when the computation has completed, blocking if\n necessary until it is ready.  Cancellation is performed by the\n cancel method.  Additional methods are provided to\n determine if the task completed normally or was cancelled. Once a\n computation has completed, the computation cannot be cancelled.\n If you would like to use a Future for the sake\n of cancellability but not provide a usable result, you can\n declare types of the form Future<?> and\n return null as a result of the underlying task. Sample Usage (Note that the following classes are all\n made-up.) Memory consistency effects: Actions taken by the asynchronous computation\n  happen-before\n actions following the corresponding Future.get() in another thread. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "Future", "Vars": null}