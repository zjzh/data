{"package_name": "java.util.concurrent.atomic", "subclass_list": [], "class_description": "One or more variables that together maintain an initially zero\n long sum.  When updates (method add(long)) are contended\n across threads, the set of variables may grow dynamically to reduce\n contention. Method sum() (or, equivalently, longValue()) returns the current total combined across the\n variables maintaining the sum. This class is usually preferable to AtomicLong when\n multiple threads update a common sum that is used for purposes such\n as collecting statistics, not for fine-grained synchronization\n control.  Under low update contention, the two classes have similar\n characteristics. But under high contention, expected throughput of\n this class is significantly higher, at the expense of higher space\n consumption. LongAdders can be used with a ConcurrentHashMap to maintain a scalable\n frequency map (a form of histogram or multiset). For example, to\n add a count to a ConcurrentHashMap<String,LongAdder> freqs,\n initializing if not already present, you can use freqs.computeIfAbsent(key, k -> new LongAdder()).increment(); This class extends Number, but does not define\n methods such as equals, hashCode and compareTo because instances are expected to be mutated, and so are\n not useful as collection keys. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Number"], "Methods": [{"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new adder with initial sum of zero.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "long", "param_description": " the value to add"}], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "add", "method_description": "Adds the given value.\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "decrement", "method_description": "Equivalent to add(-1).\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type double."], "return_type": ["double"]}, "method_name": "doubleValue", "method_description": "Returns the sum() as a double after a widening\n primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type float."], "return_type": ["float"]}, "method_name": "floatValue", "method_description": "Returns the sum() as a float\n after a widening primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "increment", "method_description": "Equivalent to add(1).\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type int."], "return_type": ["int"]}, "method_name": "intValue", "method_description": "Returns the sum() as an int after a narrowing\n primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the sum"], "return_type": ["long"]}, "method_name": "longValue", "method_description": "Equivalent to sum().\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets variables maintaining the sum to zero.  This method may\n be a useful alternative to creating a new adder, but is only\n effective if there are no concurrent updates.  Because this\n method is intrinsically racy, it should only be used when it is\n known that no threads are concurrently updating.\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the sum"], "return_type": ["long"]}, "method_name": "sum", "method_description": "Returns the current sum.  The returned value is NOT an\n atomic snapshot; invocation in the absence of concurrent\n updates returns an accurate result, but concurrent updates that\n occur while the sum is being calculated might not be\n incorporated.\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the sum"], "return_type": ["long"]}, "method_name": "sumThenReset", "method_description": "Equivalent in effect to sum() followed by reset(). This method may apply for example during quiescent\n points between multithreaded computations.  If there are\n updates concurrent with this method, the returned value is\n not guaranteed to be the final value occurring before\n the reset.\n", "method_declar": ""}, {"params": [], "class_name": "LongAdder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the String representation of the sum()"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns the String representation of the sum().\n", "method_declar": ""}], "class_name": "LongAdder", "Vars": null}