{"package_name": "java.util.concurrent.atomic", "subclass_list": [], "class_description": "An object reference that may be updated atomically. See the java.util.concurrent.atomic package specification for description\n of the properties of atomic variables. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["initialValue"], "param_type": "V", "param_description": " the initial value"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new AtomicReference with the given initial value.\n", "method_declar": ""}, {"params": [], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new AtomicReference with null initial value.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "V", "param_description": " the update value"}, {"param_name": ["accumulatorFunction"], "param_type": "BinaryOperator", "param_description": " a side-effect-free function of two arguments"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["the updated value"], "return_type": ["V"]}, "method_name": "accumulateAndGet", "method_description": "Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the updated value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function\n is applied with the current value as its first argument,\n and the given update as the second argument.\n", "method_declar": ""}, {"params": [{"param_name": ["expect"], "param_type": "V", "param_description": " the expected value"}, {"param_name": ["update"], "param_type": "V", "param_description": " the new value"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful. False return indicates that\n the actual value was not equal to the expected value."], "return_type": ["boolean"]}, "method_name": "compareAndSet", "method_description": "Atomically sets the value to the given updated value\n if the current value == the expected value.\n", "method_declar": ""}, {"params": [], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current value"], "return_type": ["V"]}, "method_name": "get", "method_description": "Gets the current value.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "V", "param_description": " the update value"}, {"param_name": ["accumulatorFunction"], "param_type": "BinaryOperator", "param_description": " a side-effect-free function of two arguments"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value"], "return_type": ["V"]}, "method_name": "getAndAccumulate", "method_description": "Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the previous value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function\n is applied with the current value as its first argument,\n and the given update as the second argument.\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "V", "param_description": " the new value"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value"], "return_type": ["V"]}, "method_name": "getAndSet", "method_description": "Atomically sets to the given value and returns the old value.\n", "method_declar": ""}, {"params": [{"param_name": ["updateFunction"], "param_type": "UnaryOperator", "param_description": " a side-effect-free function"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value"], "return_type": ["V"]}, "method_name": "getAndUpdate", "method_description": "Atomically updates the current value with the results of\n applying the given function, returning the previous value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "V", "param_description": " the new value"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "lazySet", "method_description": "Eventually sets to the given value.\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "V", "param_description": " the new value"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "set", "method_description": "Sets to the given value.\n", "method_declar": ""}, {"params": [], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["the String representation of the current value"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns the String representation of the current value.\n", "method_declar": ""}, {"params": [{"param_name": ["updateFunction"], "param_type": "UnaryOperator", "param_description": " a side-effect-free function"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["the updated value"], "return_type": ["V"]}, "method_name": "updateAndGet", "method_description": "Atomically updates the current value with the results of\n applying the given function, returning the updated value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.\n", "method_declar": ""}, {"params": [{"param_name": ["expect"], "param_type": "V", "param_description": " the expected value"}, {"param_name": ["update"], "param_type": "V", "param_description": " the new value"}], "class_name": "AtomicReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful"], "return_type": ["boolean"]}, "method_name": "weakCompareAndSet", "method_description": "Atomically sets the value to the given updated value\n if the current value == the expected value.\n\n \nMay fail\n spuriously and does not provide ordering guarantees, so is\n only rarely an appropriate alternative to compareAndSet.\n", "method_declar": ""}], "class_name": "AtomicReference", "Vars": null}