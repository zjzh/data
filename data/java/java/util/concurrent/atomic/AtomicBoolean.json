{"package_name": "java.util.concurrent.atomic", "subclass_list": [], "class_description": "A boolean value that may be updated atomically. See the\n java.util.concurrent.atomic package specification for\n description of the properties of atomic variables. An\n AtomicBoolean is used in applications such as atomically\n updated flags, and cannot be used as a replacement for a\n Boolean. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["initialValue"], "param_type": "boolean", "param_description": " the initial value"}], "class_name": "AtomicBoolean", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new AtomicBoolean with the given initial value.\n", "method_declar": ""}, {"params": [], "class_name": "AtomicBoolean", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new AtomicBoolean with initial value false.\n", "method_declar": ""}, {"params": [{"param_name": ["expect"], "param_type": "boolean", "param_description": " the expected value"}, {"param_name": ["update"], "param_type": "boolean", "param_description": " the new value"}], "class_name": "AtomicBoolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful. False return indicates that\n the actual value was not equal to the expected value."], "return_type": ["boolean"]}, "method_name": "compareAndSet", "method_description": "Atomically sets the value to the given updated value\n if the current value == the expected value.\n", "method_declar": ""}, {"params": [], "class_name": "AtomicBoolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current value"], "return_type": ["boolean"]}, "method_name": "get", "method_description": "Returns the current value.\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "boolean", "param_description": " the new value"}], "class_name": "AtomicBoolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value"], "return_type": ["boolean"]}, "method_name": "getAndSet", "method_description": "Atomically sets to the given value and returns the previous value.\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "boolean", "param_description": " the new value"}], "class_name": "AtomicBoolean", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "lazySet", "method_description": "Eventually sets to the given value.\n", "method_declar": ""}, {"params": [{"param_name": ["newValue"], "param_type": "boolean", "param_description": " the new value"}], "class_name": "AtomicBoolean", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "set", "method_description": "Unconditionally sets to the given value.\n", "method_declar": ""}, {"params": [], "class_name": "AtomicBoolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["the String representation of the current value"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns the String representation of the current value.\n", "method_declar": ""}, {"params": [{"param_name": ["expect"], "param_type": "boolean", "param_description": " the expected value"}, {"param_name": ["update"], "param_type": "boolean", "param_description": " the new value"}], "class_name": "AtomicBoolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful"], "return_type": ["boolean"]}, "method_name": "weakCompareAndSet", "method_description": "Atomically sets the value to the given updated value\n if the current value == the expected value.\n\n \nMay fail\n spuriously and does not provide ordering guarantees, so is\n only rarely an appropriate alternative to compareAndSet.\n", "method_declar": ""}], "class_name": "AtomicBoolean", "Vars": null}