{"package_name": "java.util.concurrent.atomic", "subclass_list": [], "class_description": "An array of object references in which elements may be updated\n atomically.  See the java.util.concurrent.atomic package\n specification for description of the properties of atomic\n variables. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["length"], "param_type": "int", "param_description": " the length of the array"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new AtomicReferenceArray of the given length, with all\n elements initially null.\n", "method_declar": ""}, {"params": [{"param_name": ["array"], "param_type": "E[]", "param_description": " the array to copy elements from"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new AtomicReferenceArray with the same length as, and\n all elements copied from, the given array.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}, {"param_name": ["x"], "param_type": "E", "param_description": " the update value"}, {"param_name": ["accumulatorFunction"], "param_type": "BinaryOperator", "param_description": " a side-effect-free function of two arguments"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["the updated value"], "return_type": ["E"]}, "method_name": "accumulateAndGet", "method_description": "Atomically updates the element at index i with the\n results of applying the given function to the current and\n given values, returning the updated value. The function should\n be side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function is\n applied with the current value at index i as its first\n argument, and the given update as the second argument.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}, {"param_name": ["expect"], "param_type": "E", "param_description": " the expected value"}, {"param_name": ["update"], "param_type": "E", "param_description": " the new value"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful. False return indicates that\n the actual value was not equal to the expected value."], "return_type": ["boolean"]}, "method_name": "compareAndSet", "method_description": "Atomically sets the element at position i to the given\n updated value if the current value == the expected value.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current value"], "return_type": ["E"]}, "method_name": "get", "method_description": "Gets the current value at position i.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}, {"param_name": ["x"], "param_type": "E", "param_description": " the update value"}, {"param_name": ["accumulatorFunction"], "param_type": "BinaryOperator", "param_description": " a side-effect-free function of two arguments"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value"], "return_type": ["E"]}, "method_name": "getAndAccumulate", "method_description": "Atomically updates the element at index i with the\n results of applying the given function to the current and\n given values, returning the previous value. The function should\n be side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function is\n applied with the current value at index i as its first\n argument, and the given update as the second argument.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}, {"param_name": ["newValue"], "param_type": "E", "param_description": " the new value"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value"], "return_type": ["E"]}, "method_name": "getAndSet", "method_description": "Atomically sets the element at position i to the given\n value and returns the old value.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}, {"param_name": ["updateFunction"], "param_type": "UnaryOperator", "param_description": " a side-effect-free function"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value"], "return_type": ["E"]}, "method_name": "getAndUpdate", "method_description": "Atomically updates the element at index i with the results\n of applying the given function, returning the previous value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}, {"param_name": ["newValue"], "param_type": "E", "param_description": " the new value"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "lazySet", "method_description": "Eventually sets the element at position i to the given value.\n", "method_declar": ""}, {"params": [], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["the length of the array"], "return_type": ["int"]}, "method_name": "length", "method_description": "Returns the length of the array.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}, {"param_name": ["newValue"], "param_type": "E", "param_description": " the new value"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "set", "method_description": "Sets the element at position i to the given value.\n", "method_declar": ""}, {"params": [], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["the String representation of the current values of array"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns the String representation of the current values of array.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}, {"param_name": ["updateFunction"], "param_type": "UnaryOperator", "param_description": " a side-effect-free function"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["the updated value"], "return_type": ["E"]}, "method_name": "updateAndGet", "method_description": "Atomically updates the element at index i with the results\n of applying the given function, returning the updated value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": " the index"}, {"param_name": ["expect"], "param_type": "E", "param_description": " the expected value"}, {"param_name": ["update"], "param_type": "E", "param_description": " the new value"}], "class_name": "AtomicReferenceArray", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful"], "return_type": ["boolean"]}, "method_name": "weakCompareAndSet", "method_description": "Atomically sets the element at position i to the given\n updated value if the current value == the expected value.\n\n \nMay fail\n spuriously and does not provide ordering guarantees, so is\n only rarely an appropriate alternative to compareAndSet.\n", "method_declar": ""}], "class_name": "AtomicReferenceArray", "Vars": null}