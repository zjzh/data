{"package_name": "java.util.concurrent.atomic", "subclass_list": [], "class_description": "One or more variables that together maintain a running long\n value updated using a supplied function.  When updates (method\n accumulate(long)) are contended across threads, the set of variables\n may grow dynamically to reduce contention.  Method get()\n (or, equivalently, longValue()) returns the current value\n across the variables maintaining updates. This class is usually preferable to AtomicLong when\n multiple threads update a common value that is used for purposes such\n as collecting statistics, not for fine-grained synchronization\n control.  Under low update contention, the two classes have similar\n characteristics. But under high contention, expected throughput of\n this class is significantly higher, at the expense of higher space\n consumption. The order of accumulation within or across threads is not\n guaranteed and cannot be depended upon, so this class is only\n applicable to functions for which the order of accumulation does\n not matter. The supplied accumulator function should be\n side-effect-free, since it may be re-applied when attempted updates\n fail due to contention among threads. The function is applied with\n the current value as its first argument, and the given update as\n the second argument.  For example, to maintain a running maximum\n value, you could supply Long::max along with Long.MIN_VALUE as the identity. Class LongAdder provides analogs of the functionality of\n this class for the common special case of maintaining counts and\n sums.  The call new LongAdder() is equivalent to new\n LongAccumulator((x, y) -> x + y, 0L. This class extends Number, but does not define\n methods such as equals, hashCode and compareTo because instances are expected to be mutated, and so are\n not useful as collection keys. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Number"], "Methods": [{"params": [{"param_name": ["accumulatorFunction"], "param_type": "LongBinaryOperator", "param_description": " a side-effect-free function of two arguments"}, {"param_name": ["identity"], "param_type": "long", "param_description": " identity (initial value) for the accumulator function"}], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new instance using the given accumulator function\n and identity element.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "long", "param_description": " the value"}], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "accumulate", "method_description": "Updates with the given value.\n", "method_declar": ""}, {"params": [], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type double."], "return_type": ["double"]}, "method_name": "doubleValue", "method_description": "Returns the current value as a double\n after a widening primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type float."], "return_type": ["float"]}, "method_name": "floatValue", "method_description": "Returns the current value as a float\n after a widening primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current value"], "return_type": ["long"]}, "method_name": "get", "method_description": "Returns the current value.  The returned value is NOT\n an atomic snapshot; invocation in the absence of concurrent\n updates returns an accurate result, but concurrent updates that\n occur while the value is being calculated might not be\n incorporated.\n", "method_declar": ""}, {"params": [], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value before reset"], "return_type": ["long"]}, "method_name": "getThenReset", "method_description": "Equivalent in effect to get() followed by reset(). This method may apply for example during quiescent\n points between multithreaded computations.  If there are\n updates concurrent with this method, the returned value is\n not guaranteed to be the final value occurring before\n the reset.\n", "method_declar": ""}, {"params": [], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type int."], "return_type": ["int"]}, "method_name": "intValue", "method_description": "Returns the current value as an int\n after a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current value"], "return_type": ["long"]}, "method_name": "longValue", "method_description": "Equivalent to get().\n", "method_declar": ""}, {"params": [], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets variables maintaining updates to the identity value.\n This method may be a useful alternative to creating a new\n updater, but is only effective if there are no concurrent\n updates.  Because this method is intrinsically racy, it should\n only be used when it is known that no threads are concurrently\n updating.\n", "method_declar": ""}, {"params": [], "class_name": "LongAccumulator", "is_static": false, "return_value": {"return_name": [], "return_description": ["the String representation of the current value"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns the String representation of the current value.\n", "method_declar": ""}], "class_name": "LongAccumulator", "Vars": null}