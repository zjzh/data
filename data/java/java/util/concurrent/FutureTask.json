{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A cancellable asynchronous computation.  This class provides a base\n implementation of Future, with methods to start and cancel\n a computation, query to see if the computation is complete, and\n retrieve the result of the computation.  The result can only be\n retrieved when the computation has completed; the get\n methods will block if the computation has not yet completed.  Once\n the computation has completed, the computation cannot be restarted\n or cancelled (unless the computation is invoked using\n runAndReset()). A FutureTask can be used to wrap a Callable or\n Runnable object.  Because FutureTask implements\n Runnable, a FutureTask can be submitted to an\n Executor for execution. In addition to serving as a standalone class, this class provides\n protected functionality that may be useful when creating\n customized task classes. ", "class_type": "class", "typealias": [], "interface_list": ["RunnableFuture"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["callable"], "param_type": "Callable", "param_description": " the callable task"}], "class_name": "FutureTask", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a FutureTask that will, upon running, execute the\n given Callable.\n", "method_declar": ""}, {"params": [{"param_name": ["runnable"], "param_type": "Runnable", "param_description": " the runnable task"}, {"param_name": ["result"], "param_type": "V", "param_description": " the result to return on successful completion. If\n you don't need a particular result, consider using\n constructions of the form:\n Future<?> f = new FutureTask<Void>(runnable, null)"}], "class_name": "FutureTask", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a FutureTask that will, upon running, execute the\n given Runnable, and arrange that get will return the\n given result on successful completion.\n", "method_declar": ""}, {"params": [{"param_name": ["mayInterruptIfRunning"], "param_type": "boolean", "param_description": " true if the thread executing this\n task should be interrupted; otherwise, in-progress tasks are allowed\n to complete"}], "class_name": "FutureTask", "is_static": false, "return_value": {"return_name": [], "return_description": ["false if the task could not be cancelled,\n typically because it has already completed normally;\n true otherwise"], "return_type": ["boolean"]}, "method_name": "cancel", "method_description": "Attempts to cancel execution of this task.  This attempt will\n fail if the task has already completed, has already been cancelled,\n or could not be cancelled for some other reason. If successful,\n and this task has not started when cancel is called,\n this task should never run.  If the task has already started,\n then the mayInterruptIfRunning parameter determines\n whether the thread executing this task should be interrupted in\n an attempt to stop the task.\n\n \nAfter this method returns, subsequent calls to isDone() will\n always return true.  Subsequent calls to isCancelled()\n will always return true if this method returned true.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " the maximum time to wait"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the timeout argument"}], "class_name": "FutureTask", "is_static": false, "return_value": {"return_name": [], "return_description": ["the computed result"], "return_type": ["V"]}, "method_name": "get", "method_description": "Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available.\n", "method_declar": ""}, {"params": [], "class_name": "FutureTask", "is_static": false, "return_value": {"return_name": [], "return_description": ["the computed result"], "return_type": ["V"]}, "method_name": "get", "method_description": "Waits if necessary for the computation to complete, and then\n retrieves its result.\n", "method_declar": ""}, {"params": [], "class_name": "FutureTask", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this task was cancelled before it completed"], "return_type": ["boolean"]}, "method_name": "isCancelled", "method_description": "Returns true if this task was cancelled before it completed\n normally.\n", "method_declar": ""}, {"params": [], "class_name": "FutureTask", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this task completed"], "return_type": ["boolean"]}, "method_name": "isDone", "method_description": "Returns true if this task completed.\n\n Completion may be due to normal termination, an exception, or\n cancellation -- in all of these cases, this method will return\n true.\n", "method_declar": ""}, {"params": [], "class_name": "FutureTask", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "run", "method_description": "Sets this Future to the result of its computation\n unless it has been cancelled.\n", "method_declar": ""}], "class_name": "FutureTask", "Vars": null}