{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "An unbounded concurrent Deque based on linked nodes.\n Concurrent insertion, removal, and access operations execute safely\n across multiple threads.\n A ConcurrentLinkedDeque is an appropriate choice when\n many threads will share access to a common collection.\n Like most other concurrent collection implementations, this class\n does not permit the use of null elements. Iterators and spliterators are\n weakly consistent. Beware that, unlike in most collections, the size method\n is NOT a constant-time operation. Because of the\n asynchronous nature of these deques, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations addAll,\n removeAll, retainAll, containsAll,\n equals, and toArray are not guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an addAll operation might view only some\n of the added elements. This class and its iterator implement all of the optional\n methods of the Deque and Iterator interfaces. Memory consistency effects: As with other concurrent collections,\n actions in a thread prior to placing an object into a\n ConcurrentLinkedDeque\nhappen-before\n actions subsequent to the access or removal of that element from\n the ConcurrentLinkedDeque in another thread. ", "class_type": "class", "typealias": [], "interface_list": ["Deque", "Serializable"], "class_inherit_list": ["AbstractCollection"], "Methods": [{"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty deque.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection of elements to initially contain"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a deque initially containing the elements of\n the given collection, added in traversal order of the\n collection's iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " element whose presence in this collection is to be ensured"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Inserts the specified element at the tail of this deque.\n As the deque is unbounded, this method will never throw\n IllegalStateException or return false.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the elements to be inserted into this deque"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this deque changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "addAll", "method_description": "Appends all of the elements in the specified collection to the end of\n this deque, in the order that they are returned by the specified\n collection's iterator.  Attempts to addAll of a deque to\n itself result in IllegalArgumentException.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addFirst", "method_description": "Inserts the specified element at the front of this deque.\n As the deque is unbounded, this method will never throw\n IllegalStateException.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addLast", "method_description": "Inserts the specified element at the end of this deque.\n As the deque is unbounded, this method will never throw\n IllegalStateException.\n\n \nThis method is equivalent to add(E).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the elements from this deque.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element whose presence in this deque is to be tested"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this deque contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this deque contains the specified element.\n More formally, returns true if and only if this deque contains\n at least one element e such that o.equals(e).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this deque in reverse order"], "return_type": ["Iterator<E>"]}, "method_name": "descendingIterator", "method_description": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).\n\n \nThe returned iterator is\n weakly consistent.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of the queue represented by this deque"], "return_type": ["E"]}, "method_name": "element", "method_description": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).\n This method differs from peek only in that it throws an\n exception if this deque is empty.\n\n \nThis method is equivalent to getFirst().\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque"], "return_type": ["E"]}, "method_name": "getFirst", "method_description": "Retrieves, but does not remove, the first element of this deque.\n\n This method differs from peekFirst only in that it\n throws an exception if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque"], "return_type": ["E"]}, "method_name": "getLast", "method_description": "Retrieves, but does not remove, the last element of this deque.\n This method differs from peekLast only in that it\n throws an exception if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this collection contains no elements"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Returns true if this collection contains no elements.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this deque in proper sequence"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n \nThe returned iterator is\n weakly consistent.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Queue#offer)"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element at the tail of this deque.\n As the deque is unbounded, this method will never return false.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Deque#offerFirst)"], "return_type": ["boolean"]}, "method_name": "offerFirst", "method_description": "Inserts the specified element at the front of this deque.\n As the deque is unbounded, this method will never return false.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Deque#offerLast)"], "return_type": ["boolean"]}, "method_name": "offerLast", "method_description": "Inserts the specified element at the end of this deque.\n As the deque is unbounded, this method will never return false.\n\n \nThis method is equivalent to add(E).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of the queue represented by this deque, or\n         null if this deque is empty"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque), or\n returns null if this deque is empty.\n\n \nThis method is equivalent to peekFirst().\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "peekFirst", "method_description": "Retrieves, but does not remove, the first element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "peekLast", "method_description": "Retrieves, but does not remove, the last element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first element of this deque, or null if\n         this deque is empty"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n null if this deque is empty.\n\n \nThis method is equivalent to pollFirst().\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "pollFirst", "method_description": "Retrieves and removes the first element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "pollLast", "method_description": "Retrieves and removes the last element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element at the front of this deque (which is the top\n         of the stack represented by this deque)"], "return_type": ["E"]}, "method_name": "pop", "method_description": "Pops an element from the stack represented by this deque.  In other\n words, removes and returns the first element of this deque.\n\n \nThis method is equivalent to removeFirst().\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to push"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "push", "method_description": "Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is possible to do so\n immediately without violating capacity restrictions, throwing an\n IllegalStateException if no space is currently available.\n\n \nThis method is equivalent to addFirst(E).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of the queue represented by this deque"], "return_type": ["E"]}, "method_name": "remove", "method_description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque).\n This method differs from poll only in that it throws an\n exception if this deque is empty.\n\n \nThis method is equivalent to removeFirst().\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this deque, if present"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the deque contained the specified element"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n \nThis method is equivalent to removeFirstOccurrence(java.lang.Object).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque"], "return_type": ["E"]}, "method_name": "removeFirst", "method_description": "Retrieves and removes the first element of this deque.  This method\n differs from pollFirst only in that it throws an\n exception if this deque is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this deque, if present"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the deque contained the specified element"], "return_type": ["boolean"]}, "method_name": "removeFirstOccurrence", "method_description": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque"], "return_type": ["E"]}, "method_name": "removeLast", "method_description": "Retrieves and removes the last element of this deque.  This method\n differs from pollLast only in that it throws an\n exception if this deque is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this deque, if present"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the deque contained the specified element"], "return_type": ["boolean"]}, "method_name": "removeLastOccurrence", "method_description": "Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this deque"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this deque.  If this deque\n contains more than Integer.MAX_VALUE elements, it\n returns Integer.MAX_VALUE.\n\n \nBeware that, unlike in most collections, this method is\n NOT a constant-time operation. Because of the\n asynchronous nature of these deques, determining the current\n number of elements requires traversing them all to count them.\n Additionally, it is possible for the size to change during\n execution of this method, in which case the returned result\n will be inaccurate. Thus, this method is typically not very\n useful in concurrent applications.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this deque"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Returns a Spliterator over the elements in this deque.\n\n \nThe returned spliterator is\n weakly consistent.\n\n \nThe Spliterator reports Spliterator#CONCURRENT,\n Spliterator#ORDERED, and Spliterator#NONNULL.\n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this deque"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this deque, in\n proper sequence (from first to last element).\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this deque.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the deque are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose"}], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this deque"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this deque,\n in proper sequence (from first to last element); the runtime\n type of the returned array is that of the specified array.  If\n the deque fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of\n the specified array and the size of this deque.\n\n \nIf this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n null.\n\n \nLike the toArray() method, this method acts as\n bridge between array-based and collection-based APIs.  Further,\n this method allows precise control over the runtime type of the\n output array, and may, under certain circumstances, be used to\n save allocation costs.\n\n \nSuppose x is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of String:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "ConcurrentLinkedDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this collection"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this collection.  The string\n representation consists of a list of the collection's elements in the\n order they are returned by its iterator, enclosed in square brackets\n (\"[]\").  Adjacent elements are separated by the characters\n \", \" (comma and space).  Elements are converted to strings as\n by String#valueOf(Object).\n", "method_declar": ""}], "class_name": "ConcurrentLinkedDeque", "Vars": null}