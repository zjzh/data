{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A CompletionService that uses a supplied Executor\n to execute tasks.  This class arranges that submitted tasks are,\n upon completion, placed on a queue accessible using take.\n The class is lightweight enough to be suitable for transient use\n when processing groups of tasks. Usage Examples.\n\n Suppose you have a set of solvers for a certain problem, each\n returning a value of some type Result, and would like to\n run them concurrently, processing the results of each of them that\n return a non-null value, in some method use(Result r). You\n could write this as: ", "class_type": "class", "typealias": [], "interface_list": ["CompletionService"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["executor"], "param_type": "Executor", "param_description": " the executor to use"}], "class_name": "ExecutorCompletionService", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an ExecutorCompletionService using the supplied\n executor for base task execution and a\n LinkedBlockingQueue as a completion queue.\n", "method_declar": ""}, {"params": [{"param_name": ["executor"], "param_type": "Executor", "param_description": " the executor to use"}, {"param_name": ["completionQueue"], "param_type": "BlockingQueue", "param_description": " the queue to use as the completion queue\n        normally one dedicated for use by this service. This\n        queue is treated as unbounded -- failed attempted\n        Queue.add operations for completed tasks cause\n        them not to be retrievable."}], "class_name": "ExecutorCompletionService", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an ExecutorCompletionService using the supplied\n executor for base task execution and the supplied queue as its\n completion queue.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "ExecutorCompletionService", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Future representing the next completed task or\n         null if the specified waiting time elapses\n         before one is present"], "return_type": ["Future<V>"]}, "method_name": "poll", "method_description": "Retrieves and removes the Future representing the next\n completed task, waiting if necessary up to the specified wait\n time if none are yet present.\n", "method_declar": ""}, {"params": [], "class_name": "ExecutorCompletionService", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Future representing the next completed task, or\n         null if none are present"], "return_type": ["Future<V>"]}, "method_name": "poll", "method_description": "Retrieves and removes the Future representing the next\n completed task, or null if none are present.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "Runnable", "param_description": " the task to submit"}, {"param_name": ["result"], "param_type": "V", "param_description": " the result to return upon successful completion"}], "class_name": "ExecutorCompletionService", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Future representing pending completion of the task,\n         and whose get() method will return the given\n         result value upon completion"], "return_type": ["Future<V>"]}, "method_name": "submit", "method_description": "Submits a Runnable task for execution and returns a Future\n representing that task.  Upon completion, this task may be\n taken or polled.\n", "method_declar": ""}, {"params": [{"param_name": ["task"], "param_type": "Callable", "param_description": " the task to submit"}], "class_name": "ExecutorCompletionService", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Future representing pending completion of the task"], "return_type": ["Future<V>"]}, "method_name": "submit", "method_description": "Submits a value-returning task for execution and returns a Future\n representing the pending results of the task.  Upon completion,\n this task may be taken or polled.\n", "method_declar": ""}, {"params": [], "class_name": "ExecutorCompletionService", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Future representing the next completed task"], "return_type": ["Future<V>"]}, "method_name": "take", "method_description": "Retrieves and removes the Future representing the next\n completed task, waiting if none are yet present.\n", "method_declar": ""}], "class_name": "ExecutorCompletionService", "Vars": null}