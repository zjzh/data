{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A synchronization point at which threads can pair and swap elements\n within pairs.  Each thread presents some object on entry to the\n exchange method, matches with a partner thread,\n and receives its partner's object on return.  An Exchanger may be\n viewed as a bidirectional form of a SynchronousQueue.\n Exchangers may be useful in applications such as genetic algorithms\n and pipeline designs. Sample Usage:\n Here are the highlights of a class that uses an Exchanger\n to swap buffers between threads so that the thread filling the\n buffer gets a freshly emptied one when it needs it, handing off the\n filled one to the thread emptying the buffer. Memory consistency effects: For each pair of threads that\n successfully exchange objects via an Exchanger, actions\n prior to the exchange() in each thread\n happen-before\n those subsequent to a return from the corresponding exchange()\n in the other thread. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Exchanger", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new Exchanger.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "V", "param_description": " the object to exchange"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " the maximum time to wait"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the timeout argument"}], "class_name": "Exchanger", "is_static": false, "return_value": {"return_name": [], "return_description": ["the object provided by the other thread"], "return_type": ["V"]}, "method_name": "exchange", "method_description": "Waits for another thread to arrive at this exchange point (unless\n the current thread is Thread#interrupt or\n the specified waiting time elapses), and then transfers the given\n object to it, receiving its object in return.\n\n \nIf another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n \nIf no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of three things happens:\n \nIf the current thread:\n \nIf the specified waiting time elapses then TimeoutException is thrown.  If the time is less than or equal\n to zero, the method will not wait at all.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "V", "param_description": " the object to exchange"}], "class_name": "Exchanger", "is_static": false, "return_value": {"return_name": [], "return_description": ["the object provided by the other thread"], "return_type": ["V"]}, "method_name": "exchange", "method_description": "Waits for another thread to arrive at this exchange point (unless\n the current thread is Thread#interrupt),\n and then transfers the given object to it, receiving its object\n in return.\n\n \nIf another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n \nIf no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of two things happens:\n \nIf the current thread:\n \n", "method_declar": ""}], "class_name": "Exchanger", "Vars": null}