{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "An optionally-bounded BlockingDeque based on\n linked nodes. The optional capacity bound constructor argument serves as a\n way to prevent excessive expansion. The capacity, if unspecified,\n is equal to Integer#MAX_VALUE.  Linked nodes are\n dynamically created upon each insertion unless this would bring the\n deque above capacity. Most operations run in constant time (ignoring time spent\n blocking).  Exceptions include remove,\n removeFirstOccurrence, removeLastOccurrence, contains, iterator.remove(), and the bulk\n operations, all of which run in linear time. This class and its iterator implement all of the\n optional methods of the Collection and Iterator interfaces. ", "class_type": "class", "typealias": [], "interface_list": ["BlockingDeque", "Serializable"], "class_inherit_list": ["AbstractQueue"], "Methods": [{"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a LinkedBlockingDeque with a capacity of\n Integer#MAX_VALUE.\n", "method_declar": ""}, {"params": [{"param_name": ["capacity"], "param_type": "int", "param_description": " the capacity of this deque"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a LinkedBlockingDeque with the given (fixed) capacity.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection of elements to initially contain"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a LinkedBlockingDeque with a capacity of\n Integer#MAX_VALUE, initially containing the elements of\n the given collection, added in traversal order of the\n collection's iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Inserts the specified element at the end of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n it is generally preferable to use method offer.\n\n \nThis method is equivalent to addLast(E).\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addFirst", "method_description": "Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an IllegalStateException if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use offerFirst.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addLast", "method_description": "Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an IllegalStateException if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use offerLast.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Atomically removes all of the elements from this deque.\n The deque will be empty after this call returns.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be checked for containment in this deque"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this deque contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this deque contains the specified element.\n More formally, returns true if and only if this deque contains\n at least one element e such that o.equals(e).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this deque in reverse order"], "return_type": ["Iterator<E>"]}, "method_name": "descendingIterator", "method_description": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).\n\n \nThe returned iterator is\n weakly consistent.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}, {"param_name": ["maxElements"], "param_type": "int", "param_description": " the maximum number of elements to transfer"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection to transfer elements into"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements transferred"], "return_type": ["int"]}, "method_name": "drainTo", "method_description": "Removes all available elements from this queue and adds them\n to the given collection.  This operation may be more\n efficient than repeatedly polling this queue.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of the queue represented by this deque"], "return_type": ["E"]}, "method_name": "element", "method_description": "Retrieves, but does not remove, the head of the queue represented by\n this deque.  This method differs from peek only in that\n it throws an exception if this deque is empty.\n\n \nThis method is equivalent to getFirst.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque"], "return_type": ["E"]}, "method_name": "getFirst", "method_description": "Retrieves, but does not remove, the first element of this deque.\n\n This method differs from peekFirst only in that it\n throws an exception if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque"], "return_type": ["E"]}, "method_name": "getLast", "method_description": "Retrieves, but does not remove, the last element of this deque.\n This method differs from peekLast only in that it\n throws an exception if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this deque in proper sequence"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n \nThe returned iterator is\n weakly consistent.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the element was added to this deque, else\n         false"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting up to the\n specified wait time if necessary for space to become available.\n\n \nThis method is equivalent to\n offerLast.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the element was added to this deque, else\n         false"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n true upon success and false if no space is currently\n available.  When using a capacity-restricted deque, this method is\n generally preferable to the add(E) method, which can fail to\n insert an element only by throwing an exception.\n\n \nThis method is equivalent to offerLast.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the element was added to this deque, else\n         false"], "return_type": ["boolean"]}, "method_name": "offerFirst", "method_description": "Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning true upon success and false if no space is\n currently available.\n When using a capacity-restricted deque, this method is generally\n preferable to the addFirst method, which can\n fail to insert an element only by throwing an exception.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful, or false if\n         the specified waiting time elapses before space is available"], "return_type": ["boolean"]}, "method_name": "offerFirst", "method_description": "Inserts the specified element at the front of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the element was added to this deque, else\n         false"], "return_type": ["boolean"]}, "method_name": "offerLast", "method_description": "Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning true upon success and false if no space is\n currently available.\n When using a capacity-restricted deque, this method is generally\n preferable to the addLast method, which can\n fail to insert an element only by throwing an exception.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}, {"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful, or false if\n         the specified waiting time elapses before space is available"], "return_type": ["boolean"]}, "method_name": "offerLast", "method_description": "Inserts the specified element at the end of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque), or\n returns null if this deque is empty.\n\n \nThis method is equivalent to peekFirst.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "peekFirst", "method_description": "Retrieves, but does not remove, the first element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "peekLast", "method_description": "Retrieves, but does not remove, the last element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if the\n         specified waiting time elapses before an element is available"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting up to the\n specified wait time if necessary for an element to become available.\n\n \nThis method is equivalent to\n pollFirst.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n null if this deque is empty.\n\n \nThis method is equivalent to Deque.pollFirst().\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "pollFirst", "method_description": "Retrieves and removes the first element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if the specified\n         waiting time elapses before an element is available"], "return_type": ["E"]}, "method_name": "pollFirst", "method_description": "Retrieves and removes the first element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque, or null if the specified\n         waiting time elapses before an element is available"], "return_type": ["E"]}, "method_name": "pollLast", "method_description": "Retrieves and removes the last element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "pollLast", "method_description": "Retrieves and removes the last element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element at the front of this deque (which is the top\n         of the stack represented by this deque)"], "return_type": ["E"]}, "method_name": "pop", "method_description": "Pops an element from the stack represented by this deque.  In other\n words, removes and returns the first element of this deque.\n\n \nThis method is equivalent to removeFirst().\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to push"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "push", "method_description": "Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is possible to do so\n immediately without violating capacity restrictions, throwing an\n IllegalStateException if no space is currently available.\n\n \nThis method is equivalent to addFirst.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "put", "method_description": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting if necessary for\n space to become available.\n\n \nThis method is equivalent to putLast.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "putFirst", "method_description": "Inserts the specified element at the front of this deque,\n waiting if necessary for space to become available.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "putLast", "method_description": "Inserts the specified element at the end of this deque,\n waiting if necessary for space to become available.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the remaining capacity"], "return_type": ["int"]}, "method_name": "remainingCapacity", "method_description": "Returns the number of additional elements that this deque can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this deque\n less the current size of this deque.\n\n \nNote that you cannot always tell if an attempt to insert\n an element will succeed by inspecting remainingCapacity\n because it may be the case that another thread is about to\n insert or remove an element.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of the queue represented by this deque"], "return_type": ["E"]}, "method_name": "remove", "method_description": "Retrieves and removes the head of the queue represented by this deque.\n This method differs from poll only in that it throws an\n exception if this deque is empty.\n\n \nThis method is equivalent to removeFirst.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this deque, if present"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this deque changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n \nThis method is equivalent to\n removeFirstOccurrence.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque"], "return_type": ["E"]}, "method_name": "removeFirst", "method_description": "Retrieves and removes the first element of this deque.  This method\n differs from pollFirst only in that it throws an\n exception if this deque is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this deque, if present"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if an element was removed as a result of this call"], "return_type": ["boolean"]}, "method_name": "removeFirstOccurrence", "method_description": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque"], "return_type": ["E"]}, "method_name": "removeLast", "method_description": "Retrieves and removes the last element of this deque.  This method\n differs from pollLast only in that it throws an\n exception if this deque is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this deque, if present"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if an element was removed as a result of this call"], "return_type": ["boolean"]}, "method_name": "removeLastOccurrence", "method_description": "Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this deque"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this deque.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this deque"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Returns a Spliterator over the elements in this deque.\n\n \nThe returned spliterator is\n weakly consistent.\n\n \nThe Spliterator reports Spliterator#CONCURRENT,\n Spliterator#ORDERED, and Spliterator#NONNULL.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque"], "return_type": ["E"]}, "method_name": "take", "method_description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting if\n necessary until an element becomes available.\n\n \nThis method is equivalent to takeFirst.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque"], "return_type": ["E"]}, "method_name": "takeFirst", "method_description": "Retrieves and removes the first element of this deque, waiting\n if necessary until an element becomes available.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque"], "return_type": ["E"]}, "method_name": "takeLast", "method_description": "Retrieves and removes the last element of this deque, waiting\n if necessary until an element becomes available.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this deque"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this deque, in\n proper sequence (from first to last element).\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this deque.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the deque are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose"}], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this deque"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this deque, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the deque fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this deque.\n\n \nIf this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n null.\n\n \nLike the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \nSuppose x is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of String:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "LinkedBlockingDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this collection"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this collection.  The string\n representation consists of a list of the collection's elements in the\n order they are returned by its iterator, enclosed in square brackets\n (\"[]\").  Adjacent elements are separated by the characters\n \", \" (comma and space).  Elements are converted to strings as\n by String#valueOf(Object).\n", "method_declar": ""}], "class_name": "LinkedBlockingDeque", "Vars": null}