{"package_name": "java.util.concurrent", "subclass_list": [], "class_description": "A reusable synchronization barrier, similar in functionality to\n CyclicBarrier and\n CountDownLatch\n but supporting more flexible usage. Registration. Unlike the case for other barriers, the\n number of parties registered to synchronize on a phaser\n may vary over time.  Tasks may be registered at any time (using\n methods register(), bulkRegister(int), or forms of\n constructors establishing initial numbers of parties), and\n optionally deregistered upon any arrival (using arriveAndDeregister()).  As is the case with most basic\n synchronization constructs, registration and deregistration affect\n only internal counts; they do not establish any further internal\n bookkeeping, so tasks cannot query whether they are registered.\n (However, you can introduce such bookkeeping by subclassing this\n class.) Synchronization. Like a CyclicBarrier, a Phaser may be repeatedly awaited.  Method arriveAndAwaitAdvance() has effect analogous to CyclicBarrier.await. Each\n generation of a phaser has an associated phase number. The phase\n number starts at zero, and advances when all parties arrive at the\n phaser, wrapping around to zero after reaching Integer.MAX_VALUE. The use of phase numbers enables independent\n control of actions upon arrival at a phaser and upon awaiting\n others, via two kinds of methods that may be invoked by any\n registered party: Termination. A phaser may enter a termination\n state, that may be checked using method isTerminated(). Upon\n termination, all synchronization methods immediately return without\n waiting for advance, as indicated by a negative return value.\n Similarly, attempts to register upon termination have no effect.\n Termination is triggered when an invocation of onAdvance\n returns true. The default implementation returns true if a deregistration has caused the number of registered\n parties to become zero.  As illustrated below, when phasers control\n actions with a fixed number of iterations, it is often convenient\n to override this method to cause termination when the current phase\n number reaches a threshold. Method forceTermination() is\n also available to abruptly release waiting threads and allow them\n to terminate. Tiering. Phasers may be tiered (i.e.,\n constructed in tree structures) to reduce contention. Phasers with\n large numbers of parties that would otherwise experience heavy\n synchronization contention costs may instead be set up so that\n groups of sub-phasers share a common parent.  This may greatly\n increase throughput even though it incurs greater per-operation\n overhead. In a tree of tiered phasers, registration and deregistration of\n child phasers with their parent are managed automatically.\n Whenever the number of registered parties of a child phaser becomes\n non-zero (as established in the Phaser(java.util.concurrent.Phaser, int)\n constructor, register(), or bulkRegister(int)), the\n child phaser is registered with its parent.  Whenever the number of\n registered parties becomes zero as the result of an invocation of\n arriveAndDeregister(), the child phaser is deregistered\n from its parent. Monitoring. While synchronization methods may be invoked\n only by registered parties, the current state of a phaser may be\n monitored by any caller.  At any given moment there are getRegisteredParties() parties in total, of which getArrivedParties() have arrived at the current phase (getPhase()).  When the remaining (getUnarrivedParties())\n parties arrive, the phase advances.  The values returned by these\n methods may reflect transient states and so are not in general\n useful for synchronization control.  Method toString()\n returns snapshots of these state queries in a form convenient for\n informal monitoring. Sample usages: A Phaser may be used instead of a CountDownLatch\n to control a one-shot action serving a variable number of parties.\n The typical idiom is for the method setting this up to first\n register, then start the actions, then deregister, as in: One way to cause a set of threads to repeatedly perform actions\n for a given number of iterations is to override onAdvance: Related constructions may be used to await particular phase numbers\n in contexts where you are sure that the phase will never wrap around\n Integer.MAX_VALUE. For example: To create a set of n tasks using a tree of phasers, you\n could use code of the following form, assuming a Task class with a\n constructor accepting a Phaser that it registers with upon\n construction. After invocation of build(new Task[n], 0, n,\n new Phaser()), these tasks could then be started, for example by\n submitting to a pool: Implementation notes: This implementation restricts the\n maximum number of parties to 65535. Attempts to register additional\n parties result in IllegalStateException. However, you can and\n should create tiered phasers to accommodate arbitrarily large sets\n of participants. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new phaser with no initially registered parties, no\n parent, and initial phase number 0. Any thread using this\n phaser will need to first register for it.\n", "method_declar": ""}, {"params": [{"param_name": ["parties"], "param_type": "int", "param_description": " the number of parties required to advance to the\n next phase"}], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new phaser with the given number of registered\n unarrived parties, no parent, and initial phase number 0.\n", "method_declar": ""}, {"params": [{"param_name": ["parent"], "param_type": "Phaser", "param_description": " the parent phaser"}], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Equivalent to Phaser(parent, 0).\n", "method_declar": ""}, {"params": [{"param_name": ["parent"], "param_type": "Phaser", "param_description": " the parent phaser"}, {"param_name": ["parties"], "param_type": "int", "param_description": " the number of parties required to advance to the\n next phase"}], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new phaser with the given parent and number of\n registered unarrived parties.  When the given parent is non-null\n and the given number of parties is greater than zero, this\n child phaser is registered with its parent.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the arrival phase number, or a negative value if terminated"], "return_type": ["int"]}, "method_name": "arrive", "method_description": "Arrives at this phaser, without waiting for others to arrive.\n\n \nIt is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an IllegalStateException only upon some subsequent operation on\n this phaser, if ever.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the arrival phase number, or the (negative)\n current phase if terminated"], "return_type": ["int"]}, "method_name": "arriveAndAwaitAdvance", "method_description": "Arrives at this phaser and awaits others. Equivalent in effect\n to awaitAdvance(arrive()).  If you need to await with\n interruption or timeout, you can arrange this with an analogous\n construction using one of the other forms of the awaitAdvance method.  If instead you need to deregister upon\n arrival, use awaitAdvance(arriveAndDeregister()).\n\n \nIt is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an IllegalStateException only upon some subsequent operation on\n this phaser, if ever.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the arrival phase number, or a negative value if terminated"], "return_type": ["int"]}, "method_name": "arriveAndDeregister", "method_description": "Arrives at this phaser and deregisters from it without waiting\n for others to arrive. Deregistration reduces the number of\n parties required to advance in future phases.  If this phaser\n has a parent, and deregistration causes this phaser to have\n zero parties, this phaser is also deregistered from its parent.\n\n \nIt is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an IllegalStateException only upon some subsequent operation on\n this phaser, if ever.\n", "method_declar": ""}, {"params": [{"param_name": ["phase"], "param_type": "int", "param_description": " an arrival phase number, or negative value if\n terminated; this argument is normally the value returned by a\n previous call to arrive or arriveAndDeregister."}], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next arrival phase number, or the argument if it is\n negative, or the (negative) current phase\n if terminated"], "return_type": ["int"]}, "method_name": "awaitAdvance", "method_description": "Awaits the phase of this phaser to advance from the given phase\n value, returning immediately if the current phase is not equal\n to the given phase value or this phaser is terminated.\n", "method_declar": ""}, {"params": [{"param_name": ["phase"], "param_type": "int", "param_description": " an arrival phase number, or negative value if\n terminated; this argument is normally the value returned by a\n previous call to arrive or arriveAndDeregister."}], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next arrival phase number, or the argument if it is\n negative, or the (negative) current phase\n if terminated"], "return_type": ["int"]}, "method_name": "awaitAdvanceInterruptibly", "method_description": "Awaits the phase of this phaser to advance from the given phase\n value, throwing InterruptedException if interrupted\n while waiting, or returning immediately if the current phase is\n not equal to the given phase value or this phaser is\n terminated.\n", "method_declar": ""}, {"params": [{"param_name": ["phase"], "param_type": "int", "param_description": " an arrival phase number, or negative value if\n terminated; this argument is normally the value returned by a\n previous call to arrive or arriveAndDeregister."}, {"param_name": ["timeout"], "param_type": "long", "param_description": " how long to wait before giving up, in units of\n        unit"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " a TimeUnit determining how to interpret the\n        timeout parameter"}], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next arrival phase number, or the argument if it is\n negative, or the (negative) current phase\n if terminated"], "return_type": ["int"]}, "method_name": "awaitAdvanceInterruptibly", "method_description": "Awaits the phase of this phaser to advance from the given phase\n value or the given timeout to elapse, throwing InterruptedException if interrupted while waiting, or\n returning immediately if the current phase is not equal to the\n given phase value or this phaser is terminated.\n", "method_declar": ""}, {"params": [{"param_name": ["parties"], "param_type": "int", "param_description": " the number of additional parties required to\n advance to the next phase"}], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the arrival phase number to which this registration\n applied.  If this value is negative, then this phaser has\n terminated, in which case registration has no effect."], "return_type": ["int"]}, "method_name": "bulkRegister", "method_description": "Adds the given number of new unarrived parties to this phaser.\n If an ongoing invocation of onAdvance(int, int) is in progress,\n this method may await its completion before returning.  If this\n phaser has a parent, and the given number of parties is greater\n than zero, and this phaser previously had no registered\n parties, this child phaser is also registered with its parent.\n If this phaser is terminated, the attempt to register has no\n effect, and a negative value is returned.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "forceTermination", "method_description": "Forces this phaser to enter termination state.  Counts of\n registered parties are unaffected.  If this phaser is a member\n of a tiered set of phasers, then all of the phasers in the set\n are terminated.  If this phaser is already terminated, this\n method has no effect.  This method may be useful for\n coordinating recovery after one or more tasks encounter\n unexpected exceptions.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of arrived parties"], "return_type": ["int"]}, "method_name": "getArrivedParties", "method_description": "Returns the number of registered parties that have arrived at\n the current phase of this phaser. If this phaser has terminated,\n the returned value is meaningless and arbitrary.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the parent of this phaser, or null if none"], "return_type": ["Phaser"]}, "method_name": "getParent", "method_description": "Returns the parent of this phaser, or null if none.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the phase number, or a negative value if terminated"], "return_type": ["int"]}, "method_name": "getPhase", "method_description": "Returns the current phase number. The maximum phase number is\n Integer.MAX_VALUE, after which it restarts at\n zero. Upon termination, the phase number is negative,\n in which case the prevailing phase prior to termination\n may be obtained via getPhase() + Integer.MIN_VALUE.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of parties"], "return_type": ["int"]}, "method_name": "getRegisteredParties", "method_description": "Returns the number of parties registered at this phaser.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the root ancestor of this phaser"], "return_type": ["Phaser"]}, "method_name": "getRoot", "method_description": "Returns the root ancestor of this phaser, which is the same as\n this phaser if it has no parent.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of unarrived parties"], "return_type": ["int"]}, "method_name": "getUnarrivedParties", "method_description": "Returns the number of registered parties that have not yet\n arrived at the current phase of this phaser. If this phaser has\n terminated, the returned value is meaningless and arbitrary.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this phaser has been terminated"], "return_type": ["boolean"]}, "method_name": "isTerminated", "method_description": "Returns true if this phaser has been terminated.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["the arrival phase number to which this registration\n applied.  If this value is negative, then this phaser has\n terminated, in which case registration has no effect."], "return_type": ["int"]}, "method_name": "register", "method_description": "Adds a new unarrived party to this phaser.  If an ongoing\n invocation of onAdvance(int, int) is in progress, this method\n may await its completion before returning.  If this phaser has\n a parent, and this phaser previously had no registered parties,\n this child phaser is also registered with its parent. If\n this phaser is terminated, the attempt to register has\n no effect, and a negative value is returned.\n", "method_declar": ""}, {"params": [], "class_name": "Phaser", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string identifying this phaser, as well as its state"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string identifying this phaser, as well as its\n state.  The state, in brackets, includes the String \"phase = \" followed by the phase number, \"parties = \"\n followed by the number of registered parties, and \"arrived = \" followed by the number of arrived parties.\n", "method_declar": ""}], "class_name": "Phaser", "Vars": null}