{"package_name": "java.util", "subclass_list": ["AbstractSequentialList", "ArrayList", "Vector", "AbstractSequentialList", "ArrayList", "Vector"], "class_description": "This class provides a skeletal implementation of the List\n interface to minimize the effort required to implement this interface\n backed by a \"random access\" data store (such as an array).  For sequential\n access data (such as a linked list), AbstractSequentialList should\n be used in preference to this class. To implement an unmodifiable list, the programmer needs only to extend\n this class and provide implementations for the get(int) and\n List#size() methods. To implement a modifiable list, the programmer must additionally\n override the set(int, E) method (which otherwise\n throws an UnsupportedOperationException).  If the list is\n variable-size the programmer must additionally override the\n add(int, E) and remove(int) methods. The programmer should generally provide a void (no argument) and collection\n constructor, as per the recommendation in the Collection interface\n specification. Unlike the other abstract collection implementations, the programmer does\n not have to provide an iterator implementation; the iterator and\n list iterator are implemented by this class, on top of the \"random access\"\n methods:\n get(int),\n set(int, E),\n add(int, E) and\n remove(int). The documentation for each non-abstract method in this class describes its\n implementation in detail.  Each of these methods may be overridden if the\n collection being implemented admits a more efficient implementation. This class is a member of the\n \n Java Collections Framework. ", "class_type": "class", "typealias": [], "interface_list": ["List"], "class_inherit_list": ["AbstractCollection"], "Methods": [], "class_name": "AbstractList", "Vars": null}