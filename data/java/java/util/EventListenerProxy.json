{"package_name": "java.util", "subclass_list": ["PropertyChangeListenerProxy", "PropertyChangeListenerProxy"], "class_description": "An abstract wrapper class for an EventListener class\n which associates a set of additional parameters with the listener.\n Subclasses must provide the storage and accessor methods\n for the additional arguments or parameters. For example, a bean which supports named properties\n would have a two argument method signature for adding\n a PropertyChangeListener for a property: If the calling method is interested in retrieving the named property\n then it would have to test the element to see if it is a proxy class. ", "class_type": "class", "typealias": [], "interface_list": ["EventListener"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["listener"], "param_type": "T", "param_description": " the listener object"}], "class_name": "EventListenerProxy", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a proxy for the specified listener.\n", "method_declar": ""}, {"params": [], "class_name": "EventListenerProxy", "is_static": false, "return_value": {"return_name": [], "return_description": ["the listener associated with the proxy"], "return_type": ["T"]}, "method_name": "getListener", "method_description": "Returns the listener associated with the proxy.\n", "method_declar": ""}], "class_name": "EventListenerProxy", "Vars": null}