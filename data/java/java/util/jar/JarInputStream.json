{"package_name": "java.util.jar", "subclass_list": [], "class_description": "The JarInputStream class is used to read the contents of\n a JAR file from any input stream. It extends the class\n java.util.zip.ZipInputStream with support for reading\n an optional Manifest entry. The Manifest\n can be used to store meta-information about the JAR file and its entries. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["ZipInputStream"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " the actual input stream"}], "class_name": "JarInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new JarInputStream and reads the optional\n manifest. If a manifest is present, also attempts to verify\n the signatures if the JarInputStream is signed.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " the actual input stream"}, {"param_name": ["verify"], "param_type": "boolean", "param_description": " whether or not to verify the JarInputStream if\n it is signed."}], "class_name": "JarInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new JarInputStream and reads the optional\n manifest. If a manifest is present and verify is true, also attempts\n to verify the signatures if the JarInputStream is signed.\n", "method_declar": ""}, {"params": [], "class_name": "JarInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Manifest for this JAR file, or\n         null if none."], "return_type": ["Manifest"]}, "method_name": "getManifest", "method_description": "Returns the Manifest for this JAR file, or\n null if none.\n", "method_declar": ""}, {"params": [], "class_name": "JarInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next ZIP file entry, or null if there are no more entries"], "return_type": ["ZipEntry"]}, "method_name": "getNextEntry", "method_description": "Reads the next ZIP file entry and positions the stream at the\n beginning of the entry data. If verification has been enabled,\n any invalid signature detected while positioning the stream for\n the next entry will result in an exception.\n", "method_declar": ""}, {"params": [], "class_name": "JarInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next JAR file entry, or null if there are no more entries"], "return_type": ["JarEntry"]}, "method_name": "getNextJarEntry", "method_description": "Reads the next JAR file entry and positions the stream at the\n beginning of the entry data. If verification has been enabled,\n any invalid signature detected while positioning the stream for\n the next entry will result in an exception.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the destination array b"}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes to read"}], "class_name": "JarInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes read, or -1 if the end of the\n         entry is reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads from the current JAR file entry into an array of bytes.\n If len is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and 0 is returned.\n If verification has been enabled, any invalid signature\n on the current entry will be reported at some point before the\n end of the entry is reached.\n", "method_declar": ""}], "class_name": "JarInputStream", "Vars": null}