{"package_name": "java.util.stream", "subclass_list": [], "class_description": "A mutable reduction operation that\n accumulates input elements into a mutable result container, optionally transforming\n the accumulated result into a final representation after all input elements\n have been processed.  Reduction operations can be performed either sequentially\n or in parallel. Examples of mutable reduction operations include:\n accumulating elements into a Collection; concatenating\n strings using a StringBuilder; computing summary information about\n elements such as sum, min, max, or average; computing \"pivot table\" summaries\n such as \"maximum valued transaction by seller\", etc.  The class Collectors\n provides implementations of many common mutable reductions. A Collector is specified by four functions that work together to\n accumulate entries into a mutable result container, and optionally perform\n a final transform on the result.  They are: Collectors also have a set of characteristics, such as\n Characteristics#CONCURRENT, that provide hints that can be used by a\n reduction implementation to provide better performance. A sequential implementation of a reduction using a collector would\n create a single result container using the supplier function, and invoke the\n accumulator function once for each input element.  A parallel implementation\n would partition the input, create a result container for each partition,\n accumulate the contents of each partition into a subresult for that partition,\n and then use the combiner function to merge the subresults into a combined\n result. To ensure that sequential and parallel executions produce equivalent\n results, the collector functions must satisfy an identity and an\n associativity constraints. The identity constraint says that for any partially accumulated result,\n combining it with an empty result container must produce an equivalent\n result.  That is, for a partially accumulated result a that is the\n result of any series of accumulator and combiner invocations, a must\n be equivalent to combiner.apply(a, supplier.get()). The associativity constraint says that splitting the computation must\n produce an equivalent result.  That is, for any input elements t1\n and t2, the results r1 and r2 in the computation\n below must be equivalent: For collectors that do not have the UNORDERED characteristic,\n two accumulated results a1 and a2 are equivalent if\n finisher.apply(a1).equals(finisher.apply(a2)).  For unordered\n collectors, equivalence is relaxed to allow for non-equality related to\n differences in order.  (For example, an unordered collector that accumulated\n elements to a List would consider two lists equivalent if they\n contained the same elements, ignoring order.) Libraries that implement reduction based on Collector, such as\n Stream#collect(Collector), must adhere to the following constraints: In addition to the predefined implementations in Collectors, the\n static factory methods of(java.util.function.Supplier, java.util.function.BiConsumer, java.util.function.BinaryOperator, java.util.stream.Collector.Characteristics)\n can be used to construct collectors.  For example, you could create a collector\n that accumulates widgets into a TreeSet with: ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "Collector", "Vars": null}