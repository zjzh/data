{"package_name": "java.util.stream", "subclass_list": [], "class_description": "A sequence of elements supporting sequential and parallel aggregate\n operations.  The following example illustrates an aggregate operation using\n Stream and IntStream: In addition to Stream, which is a stream of object references,\n there are primitive specializations for IntStream, LongStream,\n and DoubleStream, all of which are referred to as \"streams\" and\n conform to the characteristics and restrictions described here. To perform a computation, stream\n operations are composed into a\n stream pipeline.  A stream pipeline consists of a source (which\n might be an array, a collection, a generator function, an I/O channel,\n etc), zero or more intermediate operations (which transform a\n stream into another stream, such as Stream#filter(Predicate)), and a\n terminal operation (which produces a result or side-effect, such\n as Stream#count() or Stream#forEach(Consumer)).\n Streams are lazy; computation on the source data is only performed when the\n terminal operation is initiated, and source elements are consumed only\n as needed. Collections and streams, while bearing some superficial similarities,\n have different goals.  Collections are primarily concerned with the efficient\n management of, and access to, their elements.  By contrast, streams do not\n provide a means to directly access or manipulate their elements, and are\n instead concerned with declaratively describing their source and the\n computational operations which will be performed in aggregate on that source.\n However, if the provided stream operations do not offer the desired\n functionality, the BaseStream.iterator() and BaseStream.spliterator() operations\n can be used to perform a controlled traversal. A stream pipeline, like the \"widgets\" example above, can be viewed as\n a query on the stream source.  Unless the source was explicitly\n designed for concurrent modification (such as a ConcurrentHashMap),\n unpredictable or erroneous behavior may result from modifying the stream\n source while it is being queried. Most stream operations accept parameters that describe user-specified\n behavior, such as the lambda expression w -> w.getWeight() passed to\n mapToInt in the example above.  To preserve correct behavior,\n these behavioral parameters: Such parameters are always instances of a\n functional interface such\n as Function, and are often lambda expressions or\n method references.  Unless otherwise specified these parameters must be\n non-null. A stream should be operated on (invoking an intermediate or terminal stream\n operation) only once.  This rules out, for example, \"forked\" streams, where\n the same source feeds two or more pipelines, or multiple traversals of the\n same stream.  A stream implementation may throw IllegalStateException\n if it detects that the stream is being reused. However, since some stream\n operations may return their receiver rather than a new stream object, it may\n not be possible to detect reuse in all cases. Streams have a BaseStream.close() method and implement AutoCloseable,\n but nearly all stream instances do not actually need to be closed after use.\n Generally, only streams whose source is an IO channel (such as those returned\n by Files#lines(Path, Charset)) will require closing.  Most streams\n are backed by collections, arrays, or generating functions, which require no\n special resource management.  (If a stream does require closing, it can be\n declared as a resource in a try-with-resources statement.) Stream pipelines may execute either sequentially or in\n parallel.  This\n execution mode is a property of the stream.  Streams are created\n with an initial choice of sequential or parallel execution.  (For example,\n Collection#stream() creates a sequential stream,\n and Collection#parallelStream() creates\n a parallel one.)  This choice of execution mode may be modified by the\n BaseStream.sequential() or BaseStream.parallel() methods, and may be queried with\n the BaseStream.isParallel() method. ", "class_type": "interface", "typealias": [], "interface_list": ["BaseStream<T", "\u00a0Stream>"], "class_inherit_list": [], "Methods": [], "class_name": "Stream", "Vars": null}