{"package_name": "java.util", "subclass_list": ["SecureRandom", "ThreadLocalRandom", "SecureRandom", "ThreadLocalRandom"], "class_description": "An instance of this class is used to generate a stream of\n pseudorandom numbers. The class uses a 48-bit seed, which is\n modified using a linear congruential formula. (See Donald Knuth,\n The Art of Computer Programming, Volume 2, Section 3.2.1.) If two instances of Random are created with the same\n seed, and the same sequence of method calls is made for each, they\n will generate and return identical sequences of numbers. In order to\n guarantee this property, particular algorithms are specified for the\n class Random. Java implementations must use all the algorithms\n shown here for the class Random, for the sake of absolute\n portability of Java code. However, subclasses of class Random\n are permitted to use other algorithms, so long as they adhere to the\n general contracts for all the methods. The algorithms implemented by class Random use a\n protected utility method that on each invocation can supply\n up to 32 pseudorandomly generated bits. Many applications will find the method Math#random simpler to use. Instances of java.util.Random are threadsafe.\n However, the concurrent use of the same java.util.Random\n instance across threads may encounter contention and consequent\n poor performance. Consider instead using\n ThreadLocalRandom in multithreaded\n designs. Instances of java.util.Random are not cryptographically\n secure.  Consider instead using SecureRandom to\n get a cryptographically secure pseudo-random number generator for use\n by security-sensitive applications. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new random number generator. This constructor sets\n the seed of the random number generator to a value very likely\n to be distinct from any other invocation of this constructor.\n", "method_declar": ""}, {"params": [{"param_name": ["seed"], "param_type": "long", "param_description": " the initial seed"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new random number generator using a single long seed.\n The seed is the initial value of the internal state of the pseudorandom\n number generator which is maintained by method next(int).\n\n \nThe invocation new Random(seed) is equivalent to:\n  \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["streamSize"], "param_type": "long", "param_description": " the number of values to generate"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of double values"], "return_type": ["DoubleStream"]}, "method_name": "doubles", "method_description": "Returns a stream producing the given streamSize number of\n pseudorandom double values, each between zero\n (inclusive) and one (exclusive).\n\n \nA pseudorandom double value is generated as if it's the result\n of calling the method nextDouble().\n", "method_declar": ""}, {"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom double values"], "return_type": ["DoubleStream"]}, "method_name": "doubles", "method_description": "Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one\n (exclusive).\n\n \nA pseudorandom double value is generated as if it's the result\n of calling the method nextDouble().\n", "method_declar": ""}, {"params": [{"param_name": ["randomNumberOrigin"], "param_type": "double", "param_description": " the origin (inclusive) of each random value"}, {"param_name": ["randomNumberBound"], "param_type": "double", "param_description": " the bound (exclusive) of each random value"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom double values,\n         each with the given origin (inclusive) and bound (exclusive)"], "return_type": ["DoubleStream"]}, "method_name": "doubles", "method_description": "Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound\n (exclusive).\n\n \nA pseudorandom double value is generated as if it's the result\n of calling the following method with the origin and bound:\n \n", "method_declar": ""}, {"params": [{"param_name": ["streamSize"], "param_type": "long", "param_description": " the number of values to generate"}, {"param_name": ["randomNumberOrigin"], "param_type": "double", "param_description": " the origin (inclusive) of each random value"}, {"param_name": ["randomNumberBound"], "param_type": "double", "param_description": " the bound (exclusive) of each random value"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom double values,\n         each with the given origin (inclusive) and bound (exclusive)"], "return_type": ["DoubleStream"]}, "method_name": "doubles", "method_description": "Returns a stream producing the given streamSize number of\n pseudorandom double values, each conforming to the given origin\n (inclusive) and bound (exclusive).\n\n \nA pseudorandom double value is generated as if it's the result\n of calling the following method with the origin and bound:\n \n", "method_declar": ""}, {"params": [{"param_name": ["streamSize"], "param_type": "long", "param_description": " the number of values to generate"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom int values"], "return_type": ["IntStream"]}, "method_name": "ints", "method_description": "Returns a stream producing the given streamSize number of\n pseudorandom int values.\n\n \nA pseudorandom int value is generated as if it's the result of\n calling the method nextInt().\n", "method_declar": ""}, {"params": [{"param_name": ["streamSize"], "param_type": "long", "param_description": " the number of values to generate"}, {"param_name": ["randomNumberOrigin"], "param_type": "int", "param_description": " the origin (inclusive) of each random value"}, {"param_name": ["randomNumberBound"], "param_type": "int", "param_description": " the bound (exclusive) of each random value"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom int values,\n         each with the given origin (inclusive) and bound (exclusive)"], "return_type": ["IntStream"]}, "method_name": "ints", "method_description": "Returns a stream producing the given streamSize number\n of pseudorandom int values, each conforming to the given\n origin (inclusive) and bound (exclusive).\n\n \nA pseudorandom int value is generated as if it's the result of\n calling the following method with the origin and bound:\n \n", "method_declar": ""}, {"params": [{"param_name": ["randomNumberOrigin"], "param_type": "int", "param_description": " the origin (inclusive) of each random value"}, {"param_name": ["randomNumberBound"], "param_type": "int", "param_description": " the bound (exclusive) of each random value"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom int values,\n         each with the given origin (inclusive) and bound (exclusive)"], "return_type": ["IntStream"]}, "method_name": "ints", "method_description": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound\n (exclusive).\n\n \nA pseudorandom int value is generated as if it's the result of\n calling the following method with the origin and bound:\n \n", "method_declar": ""}, {"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom int values"], "return_type": ["IntStream"]}, "method_name": "ints", "method_description": "Returns an effectively unlimited stream of pseudorandom int\n values.\n\n \nA pseudorandom int value is generated as if it's the result of\n calling the method nextInt().\n", "method_declar": ""}, {"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom long values"], "return_type": ["LongStream"]}, "method_name": "longs", "method_description": "Returns an effectively unlimited stream of pseudorandom long\n values.\n\n \nA pseudorandom long value is generated as if it's the result\n of calling the method nextLong().\n", "method_declar": ""}, {"params": [{"param_name": ["streamSize"], "param_type": "long", "param_description": " the number of values to generate"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom long values"], "return_type": ["LongStream"]}, "method_name": "longs", "method_description": "Returns a stream producing the given streamSize number of\n pseudorandom long values.\n\n \nA pseudorandom long value is generated as if it's the result\n of calling the method nextLong().\n", "method_declar": ""}, {"params": [{"param_name": ["randomNumberOrigin"], "param_type": "long", "param_description": " the origin (inclusive) of each random value"}, {"param_name": ["randomNumberBound"], "param_type": "long", "param_description": " the bound (exclusive) of each random value"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom long values,\n         each with the given origin (inclusive) and bound (exclusive)"], "return_type": ["LongStream"]}, "method_name": "longs", "method_description": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound\n (exclusive).\n\n \nA pseudorandom long value is generated as if it's the result\n of calling the following method with the origin and bound:\n \n", "method_declar": ""}, {"params": [{"param_name": ["streamSize"], "param_type": "long", "param_description": " the number of values to generate"}, {"param_name": ["randomNumberOrigin"], "param_type": "long", "param_description": " the origin (inclusive) of each random value"}, {"param_name": ["randomNumberBound"], "param_type": "long", "param_description": " the bound (exclusive) of each random value"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["a stream of pseudorandom long values,\n         each with the given origin (inclusive) and bound (exclusive)"], "return_type": ["LongStream"]}, "method_name": "longs", "method_description": "Returns a stream producing the given streamSize number of\n pseudorandom long, each conforming to the given origin\n (inclusive) and bound (exclusive).\n\n \nA pseudorandom long value is generated as if it's the result\n of calling the following method with the origin and bound:\n \n", "method_declar": ""}, {"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next pseudorandom, uniformly distributed\n         boolean value from this random number generator's\n         sequence"], "return_type": ["boolean"]}, "method_name": "nextBoolean", "method_description": "Returns the next pseudorandom, uniformly distributed\n boolean value from this random number generator's\n sequence. The general contract of nextBoolean is that one\n boolean value is pseudorandomly generated and returned.  The\n values true and false are produced with\n (approximately) equal probability.\n\n \nThe method nextBoolean is implemented by class Random\n as if by:\n  \n", "method_declar": ""}, {"params": [{"param_name": ["bytes"], "param_type": "byte[]", "param_description": " the byte array to fill with random bytes"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "nextBytes", "method_description": "Generates random bytes and places them into a user-supplied\n byte array.  The number of random bytes produced is equal to\n the length of the byte array.\n\n \nThe method nextBytes is implemented by class Random\n as if by:\n  \n", "method_declar": ""}, {"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next pseudorandom, uniformly distributed double\n         value between 0.0 and 1.0 from this\n         random number generator's sequence"], "return_type": ["double"]}, "method_name": "nextDouble", "method_description": "Returns the next pseudorandom, uniformly distributed\n double value between 0.0 and\n 1.0 from this random number generator's sequence.\n\n \nThe general contract of nextDouble is that one\n double value, chosen (approximately) uniformly from the\n range 0.0d (inclusive) to 1.0d (exclusive), is\n pseudorandomly generated and returned.\n\n \nThe method nextDouble is implemented by class Random\n as if by:\n  \nThe hedge \"approximately\" is used in the foregoing description only\n because the next method is only approximately an unbiased\n source of independently chosen bits. If it were a perfect source of\n randomly chosen bits, then the algorithm shown would choose\n double values from the stated range with perfect uniformity.\n \n[In early versions of Java, the result was incorrectly calculated as:\n  \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next pseudorandom, uniformly distributed float\n         value between 0.0 and 1.0 from this\n         random number generator's sequence"], "return_type": ["float"]}, "method_name": "nextFloat", "method_description": "Returns the next pseudorandom, uniformly distributed float\n value between 0.0 and 1.0 from this random\n number generator's sequence.\n\n \nThe general contract of nextFloat is that one\n float value, chosen (approximately) uniformly from the\n range 0.0f (inclusive) to 1.0f (exclusive), is\n pseudorandomly generated and returned. All 224 possible\n float values of the form m\u00a0x\u00a02-24,\n where m is a positive integer less than 224, are\n produced with (approximately) equal probability.\n\n \nThe method nextFloat is implemented by class Random\n as if by:\n  \nThe hedge \"approximately\" is used in the foregoing description only\n because the next method is only approximately an unbiased source of\n independently chosen bits. If it were a perfect source of randomly\n chosen bits, then the algorithm shown would choose float\n values from the stated range with perfect uniformity.\n\n [In early versions of Java, the result was incorrectly calculated as:\n  \n", "method_declar": ""}, {"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next pseudorandom, Gaussian (\"normally\") distributed\n         double value with mean 0.0 and\n         standard deviation 1.0 from this random number\n         generator's sequence"], "return_type": ["double"]}, "method_name": "nextGaussian", "method_description": "Returns the next pseudorandom, Gaussian (\"normally\") distributed\n double value with mean 0.0 and standard\n deviation 1.0 from this random number generator's sequence.\n \n\n The general contract of nextGaussian is that one\n double value, chosen from (approximately) the usual\n normal distribution with mean 0.0 and standard deviation\n 1.0, is pseudorandomly generated and returned.\n\n \nThe method nextGaussian is implemented by class\n Random as if by a threadsafe version of the following:\n  \n", "method_declar": ""}, {"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next pseudorandom, uniformly distributed int\n         value from this random number generator's sequence"], "return_type": ["int"]}, "method_name": "nextInt", "method_description": "Returns the next pseudorandom, uniformly distributed int\n value from this random number generator's sequence. The general\n contract of nextInt is that one int value is\n pseudorandomly generated and returned. All 232 possible\n int values are produced with (approximately) equal probability.\n\n \nThe method nextInt is implemented by class Random\n as if by:\n  \n", "method_declar": ""}, {"params": [{"param_name": ["bound"], "param_type": "int", "param_description": " the upper bound (exclusive).  Must be positive."}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next pseudorandom, uniformly distributed int\n         value between zero (inclusive) and bound (exclusive)\n         from this random number generator's sequence"], "return_type": ["int"]}, "method_name": "nextInt", "method_description": "Returns a pseudorandom, uniformly distributed int value\n between 0 (inclusive) and the specified value (exclusive), drawn from\n this random number generator's sequence.  The general contract of\n nextInt is that one int value in the specified range\n is pseudorandomly generated and returned.  All bound possible\n int values are produced with (approximately) equal\n probability.  The method nextInt(int bound) is implemented by\n class Random as if by:\n  \nThe hedge \"approximately\" is used in the foregoing description only\n because the next method is only approximately an unbiased source of\n independently chosen bits.  If it were a perfect source of randomly\n chosen bits, then the algorithm shown would choose int\n values from the stated range with perfect uniformity.\n \n\n The algorithm is slightly tricky.  It rejects values that would result\n in an uneven distribution (due to the fact that 2^31 is not divisible\n by n). The probability of a value being rejected depends on n.  The\n worst case is n=2^30+1, for which the probability of a reject is 1/2,\n and the expected number of iterations before the loop terminates is 2.\n \n\n The algorithm treats the case where n is a power of two specially: it\n returns the correct number of high-order bits from the underlying\n pseudo-random number generator.  In the absence of special treatment,\n the correct number of low-order bits would be returned.  Linear\n congruential pseudo-random number generators such as the one\n implemented by this class are known to have short periods in the\n sequence of values of their low-order bits.  Thus, this special case\n greatly increases the length of the sequence of values returned by\n successive calls to this method if n is a small power of two.\n", "method_declar": ""}, {"params": [], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next pseudorandom, uniformly distributed long\n         value from this random number generator's sequence"], "return_type": ["long"]}, "method_name": "nextLong", "method_description": "Returns the next pseudorandom, uniformly distributed long\n value from this random number generator's sequence. The general\n contract of nextLong is that one long value is\n pseudorandomly generated and returned.\n\n \nThe method nextLong is implemented by class Random\n as if by:\n  \n", "method_declar": ""}, {"params": [{"param_name": ["seed"], "param_type": "long", "param_description": " the initial seed"}], "class_name": "Random", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSeed", "method_description": "Sets the seed of this random number generator using a single\n long seed. The general contract of setSeed is\n that it alters the state of this random number generator object\n so as to be in exactly the same state as if it had just been\n created with the argument seed as a seed. The method\n setSeed is implemented by class Random by\n atomically updating the seed to\n  \nThe implementation of setSeed by class Random\n happens to use only 48 bits of the given seed. In general, however,\n an overriding method may use all 64 bits of the long\n argument as a seed value.\n", "method_declar": ""}], "class_name": "Random", "Vars": null}