{"package_name": "java.util", "subclass_list": [], "class_description": "A NavigableSet implementation based on a TreeMap.\n The elements are ordered using their Comparable, or by a Comparator provided at set creation\n time, depending on which constructor is used. This implementation provides guaranteed log(n) time cost for the basic\n operations (add, remove and contains). Note that the ordering maintained by a set (whether or not an explicit\n comparator is provided) must be consistent with equals if it is to\n correctly implement the Set interface.  (See Comparable\n or Comparator for a precise definition of consistent with\n equals.)  This is so because the Set interface is defined in\n terms of the equals operation, but a TreeSet instance\n performs all element comparisons using its compareTo (or\n compare) method, so two elements that are deemed equal by this method\n are, from the standpoint of the set, equal.  The behavior of a set\n is well-defined even if its ordering is inconsistent with equals; it\n just fails to obey the general contract of the Set interface. Note that this implementation is not synchronized.\n If multiple threads access a tree set concurrently, and at least one\n of the threads modifies the set, it must be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the set.\n If no such object exists, the set should be \"wrapped\" using the\n Collections#synchronizedSortedSet\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the set: The iterators returned by this class's iterator method are\n fail-fast: if the set is modified at any time after the iterator is\n created, in any way except through the iterator's own remove\n method, the iterator will throw a ConcurrentModificationException.\n Thus, in the face of concurrent modification, the iterator fails quickly\n and cleanly, rather than risking arbitrary, non-deterministic behavior at\n an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   the fail-fast behavior of iterators\n should be used only to detect bugs. This class is a member of the\n \n Java Collections Framework. ", "class_type": "class", "typealias": [], "interface_list": ["NavigableSet", "Cloneable", "Serializable"], "class_inherit_list": ["AbstractSet"], "Methods": [{"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty tree set, sorted according to the\n natural ordering of its elements.  All elements inserted into\n the set must implement the Comparable interface.\n Furthermore, all such elements must be mutually\n comparable: e1.compareTo(e2) must not throw a\n ClassCastException for any elements e1 and\n e2 in the set.  If the user attempts to add an element\n to the set that violates this constraint (for example, the user\n attempts to add a string element to a set whose elements are\n integers), the add call will throw a\n ClassCastException.\n", "method_declar": ""}, {"params": [{"param_name": ["comparator"], "param_type": "Comparator", "param_description": " the comparator that will be used to order this set.\n        If null, the Comparable of the elements will be used."}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty tree set, sorted according to the specified\n comparator.  All elements inserted into the set must be mutually\n comparable by the specified comparator: comparator.compare(e1,\n e2) must not throw a ClassCastException for any elements\n e1 and e2 in the set.  If the user attempts to add\n an element to the set that violates this constraint, the\n add call will throw a ClassCastException.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " collection whose elements will comprise the new set"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new tree set containing the elements in the specified\n collection, sorted according to the natural ordering of its\n elements.  All elements inserted into the set must implement the\n Comparable interface.  Furthermore, all such elements must be\n mutually comparable: e1.compareTo(e2) must not throw a\n ClassCastException for any elements e1 and\n e2 in the set.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "SortedSet", "param_description": " sorted set whose elements will comprise the new set"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new tree set containing the same elements and\n using the same ordering as the specified sorted set.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " element to be added to this set"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set did not already contain the specified\n         element"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Adds the specified element to this set if it is not already present.\n More formally, adds the specified element e to this set if\n the set contains no element e2 such that\n (e==null\u00a0?\u00a0e2==null\u00a0:\u00a0e.equals(e2)).\n If this set already contains the element, the call leaves the set\n unchanged and returns false.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " collection containing elements to be added to this set"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "addAll", "method_description": "Adds all of the elements in the specified collection to this set.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the value to match"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the least element greater than or equal to e,\n         or null if there is no such element"], "return_type": ["E"]}, "method_name": "ceiling", "method_description": "Returns the least element in this set greater than or equal to\n the given element, or null if there is no such element.\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the elements from this set.\n The set will be empty after this call returns.\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a shallow copy of this set"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Returns a shallow copy of this TreeSet instance. (The elements\n themselves are not cloned.)\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the comparator used to order the elements in this set,\n         or null if this set uses the natural ordering\n         of its elements"], "return_type": ["Comparator<?\u00a0super\u00a0E>"]}, "method_name": "comparator", "method_description": "Returns the comparator used to order the elements in this set,\n or null if this set uses the Comparable of its elements.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be checked for containment in this set"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this set contains the specified element.\n More formally, returns true if and only if this set\n contains an element e such that\n (o==null\u00a0?\u00a0e==null\u00a0:\u00a0o.equals(e)).\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this set in descending order"], "return_type": ["Iterator<E>"]}, "method_name": "descendingIterator", "method_description": "Returns an iterator over the elements in this set in descending order.\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reverse order view of this set"], "return_type": ["NavigableSet<E>"]}, "method_name": "descendingSet", "method_description": "Returns a reverse order view of the elements contained in this set.\n The descending set is backed by this set, so changes to the set are\n reflected in the descending set, and vice-versa.  If either set is\n modified while an iteration over either set is in progress (except\n through the iterator's own remove operation), the results of\n the iteration are undefined.\n\n \nThe returned set has an ordering equivalent to\n Collections#reverseOrder(Comparator)(comparator()).\n The expression s.descendingSet().descendingSet() returns a\n view of s essentially equivalent to s.\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first (lowest) element currently in this set"], "return_type": ["E"]}, "method_name": "first", "method_description": "Returns the first (lowest) element currently in this set.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the value to match"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the greatest element less than or equal to e,\n         or null if there is no such element"], "return_type": ["E"]}, "method_name": "floor", "method_description": "Returns the greatest element in this set less than or equal to\n the given element, or null if there is no such element.\n", "method_declar": ""}, {"params": [{"param_name": ["toElement"], "param_type": "E", "param_description": " high endpoint of the returned set"}, {"param_name": ["inclusive"], "param_type": "boolean", "param_description": " true if the high endpoint\n        is to be included in the returned view"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements are less than\n         (or equal to, if inclusive is true) toElement"], "return_type": ["NavigableSet<E>"]}, "method_name": "headSet", "method_description": "Returns a view of the portion of this set whose elements are less than\n (or equal to, if inclusive is true) toElement.  The\n returned set is backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set supports all\n optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["toElement"], "param_type": "E", "param_description": " high endpoint (exclusive) of the returned set"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements are strictly\n         less than toElement"], "return_type": ["SortedSet<E>"]}, "method_name": "headSet", "method_description": "Returns a view of the portion of this set whose elements are\n strictly less than toElement.  The returned set is\n backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set\n supports all optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n\n \nEquivalent to headSet(toElement, false).\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the value to match"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the least element greater than e,\n         or null if there is no such element"], "return_type": ["E"]}, "method_name": "higher", "method_description": "Returns the least element in this set strictly greater than the\n given element, or null if there is no such element.\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set contains no elements"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Returns true if this set contains no elements.\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this set in ascending order"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this set in ascending order.\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last (highest) element currently in this set"], "return_type": ["E"]}, "method_name": "last", "method_description": "Returns the last (highest) element currently in this set.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the value to match"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the greatest element less than e,\n         or null if there is no such element"], "return_type": ["E"]}, "method_name": "lower", "method_description": "Returns the greatest element in this set strictly less than the\n given element, or null if there is no such element.\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first element, or null if this set is empty"], "return_type": ["E"]}, "method_name": "pollFirst", "method_description": "Retrieves and removes the first (lowest) element,\n or returns null if this set is empty.\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last element, or null if this set is empty"], "return_type": ["E"]}, "method_name": "pollLast", "method_description": "Retrieves and removes the last (highest) element,\n or returns null if this set is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be removed from this set, if present"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this set contained the specified element"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the specified element from this set if it is present.\n More formally, removes an element e such that\n (o==null\u00a0?\u00a0e==null\u00a0:\u00a0o.equals(e)),\n if this set contains such an element.  Returns true if\n this set contained the element (or equivalently, if this set\n changed as a result of the call).  (This set will not contain the\n element once the call returns.)\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this set (its cardinality)"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this set (its cardinality).\n", "method_declar": ""}, {"params": [], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this set"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n set.\n\n \nThe Spliterator reports Spliterator#SIZED,\n Spliterator#DISTINCT, Spliterator#SORTED, and\n Spliterator#ORDERED.  Overriding implementations should document\n the reporting of additional characteristic values.\n\n \nThe spliterator's comparator (see\n Spliterator.getComparator()) is null if\n the tree set's comparator (see comparator()) is null.\n Otherwise, the spliterator's comparator is the same as or imposes the\n same total ordering as the tree set's comparator.\n", "method_declar": ""}, {"params": [{"param_name": ["fromElement"], "param_type": "E", "param_description": " low endpoint of the returned set"}, {"param_name": ["fromInclusive"], "param_type": "boolean", "param_description": " true if the low endpoint\n        is to be included in the returned view"}, {"param_name": ["toElement"], "param_type": "E", "param_description": " high endpoint of the returned set"}, {"param_name": ["toInclusive"], "param_type": "boolean", "param_description": " true if the high endpoint\n        is to be included in the returned view"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements range from\n         fromElement, inclusive, to toElement, exclusive"], "return_type": ["NavigableSet<E>"]}, "method_name": "subSet", "method_description": "Returns a view of the portion of this set whose elements range from\n fromElement to toElement.  If fromElement and\n toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true.  The returned set\n is backed by this set, so changes in the returned set are reflected in\n this set, and vice-versa.  The returned set supports all optional set\n operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["fromElement"], "param_type": "E", "param_description": " low endpoint (inclusive) of the returned set"}, {"param_name": ["toElement"], "param_type": "E", "param_description": " high endpoint (exclusive) of the returned set"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements range from\n         fromElement, inclusive, to toElement, exclusive"], "return_type": ["SortedSet<E>"]}, "method_name": "subSet", "method_description": "Returns a view of the portion of this set whose elements range\n from fromElement, inclusive, to toElement,\n exclusive.  (If fromElement and toElement are\n equal, the returned set is empty.)  The returned set is backed\n by this set, so changes in the returned set are reflected in\n this set, and vice-versa.  The returned set supports all\n optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n\n \nEquivalent to subSet(fromElement, true, toElement, false).\n", "method_declar": ""}, {"params": [{"param_name": ["fromElement"], "param_type": "E", "param_description": " low endpoint of the returned set"}, {"param_name": ["inclusive"], "param_type": "boolean", "param_description": " true if the low endpoint\n        is to be included in the returned view"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements are greater\n         than or equal to fromElement"], "return_type": ["NavigableSet<E>"]}, "method_name": "tailSet", "method_description": "Returns a view of the portion of this set whose elements are greater\n than (or equal to, if inclusive is true) fromElement.\n The returned set is backed by this set, so changes in the returned set\n are reflected in this set, and vice-versa.  The returned set supports\n all optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["fromElement"], "param_type": "E", "param_description": " low endpoint (inclusive) of the returned set"}], "class_name": "TreeSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this set whose elements are greater\n         than or equal to fromElement"], "return_type": ["SortedSet<E>"]}, "method_name": "tailSet", "method_description": "Returns a view of the portion of this set whose elements are\n greater than or equal to fromElement.  The returned\n set is backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set\n supports all optional set operations that this set supports.\n\n \nThe returned set will throw an IllegalArgumentException\n on an attempt to insert an element outside its range.\n\n \nEquivalent to tailSet(fromElement, true).\n", "method_declar": ""}], "class_name": "TreeSet", "Vars": null}