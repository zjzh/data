{"package_name": "java.util", "subclass_list": ["LinkedList", "LinkedList"], "class_description": "This class provides a skeletal implementation of the List\n interface to minimize the effort required to implement this interface\n backed by a \"sequential access\" data store (such as a linked list).  For\n random access data (such as an array), AbstractList should be used\n in preference to this class. This class is the opposite of the AbstractList class in the sense\n that it implements the \"random access\" methods (get(int index),\n set(int index, E element), add(int index, E element) and\n remove(int index)) on top of the list's list iterator, instead of\n the other way around. To implement a list the programmer needs only to extend this class and\n provide implementations for the listIterator and size\n methods.  For an unmodifiable list, the programmer need only implement the\n list iterator's hasNext, next, hasPrevious,\n previous and index methods. For a modifiable list the programmer should additionally implement the list\n iterator's set method.  For a variable-size list the programmer\n should additionally implement the list iterator's remove and\n add methods. The programmer should generally provide a void (no argument) and collection\n constructor, as per the recommendation in the Collection interface\n specification. This class is a member of the\n \n Java Collections Framework. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["AbstractList"], "Methods": [], "class_name": "AbstractSequentialList", "Vars": null}