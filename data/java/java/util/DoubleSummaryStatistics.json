{"package_name": "java.util", "subclass_list": [], "class_description": "A state object for collecting statistics such as count, min, max, sum, and\n average. This class is designed to work with (though does not require)\n streams. For example, you can compute\n summary statistics on a stream of doubles with: DoubleSummaryStatistics can be used as a\n reduction\n target for a stream. For example: ", "class_type": "class", "typealias": [], "interface_list": ["DoubleConsumer"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "DoubleSummaryStatistics", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct an empty instance with zero count, zero sum,\n Double.POSITIVE_INFINITY min, Double.NEGATIVE_INFINITY\n max and zero average.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "double", "param_description": " the input value"}], "class_name": "DoubleSummaryStatistics", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "accept", "method_description": "Records another value into the summary information.\n", "method_declar": ""}, {"params": [{"param_name": ["other"], "param_type": "DoubleSummaryStatistics", "param_description": " another DoubleSummaryStatistics"}], "class_name": "DoubleSummaryStatistics", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "combine", "method_description": "Combines the state of another DoubleSummaryStatistics into this\n one.\n", "method_declar": ""}, {"params": [], "class_name": "DoubleSummaryStatistics", "is_static": false, "return_value": {"return_name": [], "return_description": ["the arithmetic mean of values, or zero if none"], "return_type": ["double"]}, "method_name": "getAverage", "method_description": "Returns the arithmetic mean of values recorded, or zero if no\n values have been recorded.\n\n If any recorded value is a NaN or the sum is at any point a NaN\n then the average will be code NaN.\n\n \nThe average returned can vary depending upon the order in\n which values are recorded.\n\n This method may be implemented using compensated summation or\n other technique to reduce the error bound in the numerical sum used to compute the average.\n", "method_declar": ""}, {"params": [], "class_name": "DoubleSummaryStatistics", "is_static": false, "return_value": {"return_name": [], "return_description": ["the count of values"], "return_type": ["long"]}, "method_name": "getCount", "method_description": "Return the count of values recorded.\n", "method_declar": ""}, {"params": [], "class_name": "DoubleSummaryStatistics", "is_static": false, "return_value": {"return_name": [], "return_description": ["the maximum recorded value, Double.NaN if any recorded\n value was NaN or Double.NEGATIVE_INFINITY if no values were\n recorded"], "return_type": ["double"]}, "method_name": "getMax", "method_description": "Returns the maximum recorded value, Double.NaN if any recorded\n value was NaN or Double.NEGATIVE_INFINITY if no values were\n recorded. Unlike the numerical comparison operators, this method\n considers negative zero to be strictly smaller than positive zero.\n", "method_declar": ""}, {"params": [], "class_name": "DoubleSummaryStatistics", "is_static": false, "return_value": {"return_name": [], "return_description": ["the minimum recorded value, Double.NaN if any recorded\n value was NaN or Double.POSITIVE_INFINITY if no values were\n recorded"], "return_type": ["double"]}, "method_name": "getMin", "method_description": "Returns the minimum recorded value, Double.NaN if any recorded\n value was NaN or Double.POSITIVE_INFINITY if no values were\n recorded. Unlike the numerical comparison operators, this method\n considers negative zero to be strictly smaller than positive zero.\n", "method_declar": ""}, {"params": [], "class_name": "DoubleSummaryStatistics", "is_static": false, "return_value": {"return_name": [], "return_description": ["the sum of values, or zero if none"], "return_type": ["double"]}, "method_name": "getSum", "method_description": "Returns the sum of values recorded, or zero if no values have been\n recorded.\n\n If any recorded value is a NaN or the sum is at any point a NaN\n then the sum will be NaN.\n\n \n The value of a floating-point sum is a function both of the\n input values as well as the order of addition operations. The\n order of addition operations of this method is intentionally\n not defined to allow for implementation flexibility to improve\n the speed and accuracy of the computed result.\n\n In particular, this method may be implemented using compensated\n summation or other technique to reduce the error bound in the\n numerical sum compared to a simple summation of double\n values.\n", "method_declar": ""}, {"params": [], "class_name": "DoubleSummaryStatistics", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of the object. In general, the\n toString method returns a string that\n \"textually represents\" this object. The result should\n be a concise but informative representation that is easy for a\n person to read.\n It is recommended that all subclasses override this method.\n \n\n The toString method for class Object\n returns a string consisting of the name of the class of which the\n object is an instance, the at-sign character `@', and\n the unsigned hexadecimal representation of the hash code of the\n object. In other words, this method returns a string equal to the\n value of:\n \n", "method_declar": ""}], "class_name": "DoubleSummaryStatistics", "Vars": null}