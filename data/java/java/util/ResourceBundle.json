{"package_name": "java.util", "subclass_list": ["ListResourceBundle", "PropertyResourceBundle", "ListResourceBundle", "PropertyResourceBundle"], "class_description": "Resource bundles contain locale-specific objects.  When your program needs a\n locale-specific resource, a String for example, your program can\n load it from the resource bundle that is appropriate for the current user's\n locale. In this way, you can write program code that is largely independent\n of the user's locale isolating most, if not all, of the locale-specific\n information in resource bundles. This allows you to write programs that can: Resource bundles belong to families whose members share a common base\n name, but whose names also have additional components that identify\n their locales. For example, the base name of a family of resource\n bundles might be \"MyResources\". The family should have a default\n resource bundle which simply has the same name as its family -\n \"MyResources\" - and will be used as the bundle of last resort if a\n specific locale is not supported. The family can then provide as\n many locale-specific members as needed, for example a German one\n named \"MyResources_de\". Each resource bundle in a family contains the same items, but the items have\n been translated for the locale represented by that resource bundle.\n For example, both \"MyResources\" and \"MyResources_de\" may have a\n String that's used on a button for canceling operations.\n In \"MyResources\" the String may contain \"Cancel\" and in\n \"MyResources_de\" it may contain \"Abbrechen\". If there are different resources for different countries, you\n can make specializations: for example, \"MyResources_de_CH\" contains objects for\n the German language (de) in Switzerland (CH). If you want to only\n modify some of the resources\n in the specialization, you can do so. When your program needs a locale-specific object, it loads\n the ResourceBundle class using the\n getBundle\n method: Resource bundles contain key/value pairs. The keys uniquely\n identify a locale-specific object in the bundle. Here's an\n example of a ListResourceBundle that contains\n two key/value pairs: You retrieve an object from resource bundle using the appropriate\n getter method. Because \"OkKey\" and \"CancelKey\"\n are both strings, you would use getString to retrieve them: Besides getString, ResourceBundle also provides\n a method for getting string arrays, getStringArray,\n as well as a generic getObject method for any other\n type of object. When using getObject, you'll\n have to cast the result to the appropriate type. For example: The Java Platform provides two subclasses of ResourceBundle,\n ListResourceBundle and PropertyResourceBundle,\n that provide a fairly simple way to create resources.\n As you saw briefly in a previous example, ListResourceBundle\n manages its resource as a list of key/value pairs.\n PropertyResourceBundle uses a properties file to manage\n its resources. If ListResourceBundle or PropertyResourceBundle\n do not suit your needs, you can write your own ResourceBundle\n subclass.  Your subclasses must override two methods: handleGetObject\n and getKeys(). The implementation of a ResourceBundle subclass must be thread-safe\n if it's simultaneously used by multiple threads. The default implementations\n of the non-abstract methods in this class, and the methods in the direct\n known concrete subclasses ListResourceBundle and\n PropertyResourceBundle are thread-safe. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "ResourceBundle", "Vars": null}