{"package_name": "java.util", "subclass_list": ["ConcurrentSkipListSet", "NavigableSet", "TreeSet", "ConcurrentSkipListSet", "NavigableSet", "ConcurrentSkipListMap", "NavigableSet", "SortedSet", "TreeSet", "NavigableSet", "TreeMap"], "class_description": "A Set that further provides a total ordering on its elements.\n The elements are ordered using their Comparable, or by a Comparator typically provided at sorted\n set creation time.  The set's iterator will traverse the set in\n ascending element order. Several additional operations are provided\n to take advantage of the ordering.  (This interface is the set\n analogue of SortedMap.) All elements inserted into a sorted set must implement the Comparable\n interface (or be accepted by the specified comparator).  Furthermore, all\n such elements must be mutually comparable: e1.compareTo(e2)\n (or comparator.compare(e1, e2)) must not throw a\n ClassCastException for any elements e1 and e2 in\n the sorted set.  Attempts to violate this restriction will cause the\n offending method or constructor invocation to throw a\n ClassCastException. Note that the ordering maintained by a sorted set (whether or not an\n explicit comparator is provided) must be consistent with equals if\n the sorted set is to correctly implement the Set interface.  (See\n the Comparable interface or Comparator interface for a\n precise definition of consistent with equals.)  This is so because\n the Set interface is defined in terms of the equals\n operation, but a sorted set performs all element comparisons using its\n compareTo (or compare) method, so two elements that are\n deemed equal by this method are, from the standpoint of the sorted set,\n equal.  The behavior of a sorted set is well-defined even if its\n ordering is inconsistent with equals; it just fails to obey the general\n contract of the Set interface. All general-purpose sorted set implementation classes should\n provide four \"standard\" constructors: 1) A void (no arguments)\n constructor, which creates an empty sorted set sorted according to\n the natural ordering of its elements.  2) A constructor with a\n single argument of type Comparator, which creates an empty\n sorted set sorted according to the specified comparator.  3) A\n constructor with a single argument of type Collection,\n which creates a new sorted set with the same elements as its\n argument, sorted according to the natural ordering of the elements.\n 4) A constructor with a single argument of type SortedSet,\n which creates a new sorted set with the same elements and the same\n ordering as the input sorted set.  There is no way to enforce this\n recommendation, as interfaces cannot contain constructors. Note: several methods return subsets with restricted ranges.\n Such ranges are half-open, that is, they include their low\n endpoint but not their high endpoint (where applicable).\n If you need a closed range (which includes both endpoints), and\n the element type allows for calculation of the successor of a given\n value, merely request the subrange from lowEndpoint to\n successor(highEndpoint).  For example, suppose that s\n is a sorted set of strings.  The following idiom obtains a view\n containing all of the strings in s from low to\n high, inclusive: This interface is a member of the\n \n Java Collections Framework. ", "class_type": "interface", "typealias": [], "interface_list": ["Set"], "class_inherit_list": [], "Methods": [], "class_name": "SortedSet", "Vars": null}