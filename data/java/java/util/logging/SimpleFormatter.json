{"package_name": "java.util.logging", "subclass_list": [], "class_description": "Print a brief summary of the LogRecord in a human readable\n format.  The summary will typically be 1 or 2 lines. Configuration:\n The SimpleFormatter is initialized with the\n format string\n specified in the java.util.logging.SimpleFormatter.format\n property to format the log messages.\n This property can be defined\n in the LogManager#getProperty\n configuration file\n or as a system property.  If this property is set in both\n the logging properties and system properties,\n the format string specified in the system property will be used.\n If this property is not defined or the given format string\n is illegal,\n the default format is implementation-specific. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Formatter"], "Methods": [{"params": [], "class_name": "SimpleFormatter", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["record"], "param_type": "LogRecord", "param_description": " the log record to be formatted."}], "class_name": "SimpleFormatter", "is_static": false, "return_value": {"return_name": [], "return_description": ["a formatted log record"], "return_type": ["String"]}, "method_name": "format", "method_description": "Format the given LogRecord.\n \n\n The formatting can be customized by specifying the\n format string\n in the \njava.util.logging.SimpleFormatter.format property.\n The given LogRecord will be formatted as if by calling:\n \nSome example formats:\n\nThis prints 1 line with the log level (4$),\n     the log message (5$) and the timestamp (1$) in\n     a square bracket.\n     \nThis prints 2 lines where the first line includes\n     the timestamp (1$) and the source (2$);\n     the second line includes the log level (4$) and\n     the log message (5$) followed with the throwable\n     and its backtrace (6$), if any:\n     \nThis prints 2 lines similar to the example above\n         with a different date/time formatting and does not print\n         the throwable and its backtrace:\n     \nThis method can also be overridden in a subclass.\n It is recommended to use the Formatter#formatMessage\n convenience method to localize and format the message field.\n", "method_declar": ""}], "class_name": "SimpleFormatter", "Vars": null}