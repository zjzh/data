{"package_name": "java.util.logging", "subclass_list": ["ConsoleHandler", "FileHandler", "SocketHandler", "ConsoleHandler", "FileHandler", "SocketHandler"], "class_description": "Stream based logging Handler. This is primarily intended as a base class or support class to\n be used in implementing other logging Handlers. LogRecords are published to a given java.io.OutputStream. Configuration:\n By default each StreamHandler is initialized using the following\n LogManager configuration properties where <handler-name>\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used. For example, the properties for StreamHandler would be: For a custom handler, e.g. com.foo.MyHandler, the properties would be:  ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Handler"], "Methods": [{"params": [], "class_name": "StreamHandler", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a StreamHandler, with no current output stream.\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " the target output stream"}, {"param_name": ["formatter"], "param_type": "Formatter", "param_description": " Formatter to be used to format output"}], "class_name": "StreamHandler", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a StreamHandler with a given Formatter\n and output stream.\n \n\n", "method_declar": ""}, {"params": [], "class_name": "StreamHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Close the current output stream.\n \n\n The Formatter's \"tail\" string is written to the stream before it\n is closed.  In addition, if the Formatter's \"head\" string has not\n yet been written to the stream, it will be written before the\n \"tail\" string.\n", "method_declar": ""}, {"params": [], "class_name": "StreamHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "flush", "method_description": "Flush any buffered messages.\n", "method_declar": ""}, {"params": [{"param_name": ["record"], "param_type": "LogRecord", "param_description": " a LogRecord"}], "class_name": "StreamHandler", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the LogRecord would be logged."], "return_type": ["boolean"]}, "method_name": "isLoggable", "method_description": "Check if this Handler would actually log a given LogRecord.\n \n\n This method checks if the LogRecord has an appropriate level and\n whether it satisfies any Filter.  It will also return false if\n no output stream has been assigned yet or the LogRecord is null.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["record"], "param_type": "LogRecord", "param_description": " description of the log event. A null record is\n                 silently ignored and is not published"}], "class_name": "StreamHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "publish", "method_description": "Format and publish a LogRecord.\n \n\n The StreamHandler first checks if there is an OutputStream\n and if the given LogRecord has at least the required log level.\n If not it silently returns.  If so, it calls any associated\n Filter to check if the record should be published.  If so,\n it calls its Formatter to format the record and then writes\n the result to the current output stream.\n \n\n If this is the first LogRecord to be written to a given\n OutputStream, the Formatter's \"head\" string is\n written to the stream before the LogRecord is written.\n", "method_declar": ""}, {"params": [{"param_name": ["encoding"], "param_type": "String", "param_description": " The name of a supported character encoding.\n        May be null, to indicate the default platform encoding."}], "class_name": "StreamHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setEncoding", "method_description": "Set (or change) the character encoding used by this Handler.\n \n\n The encoding should be set before any LogRecords are written\n to the Handler.\n", "method_declar": ""}], "class_name": "StreamHandler", "Vars": null}