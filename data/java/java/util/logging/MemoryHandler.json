{"package_name": "java.util.logging", "subclass_list": [], "class_description": "Handler that buffers requests in a circular buffer in memory. Normally this Handler simply stores incoming LogRecords\n into its memory buffer and discards earlier records.  This buffering\n is very cheap and avoids formatting costs.  On certain trigger\n conditions, the MemoryHandler will push out its current buffer\n contents to a target Handler, which will typically publish\n them to the outside world. There are three main models for triggering a push of the buffer: Configuration:\n By default each MemoryHandler is initialized using the following\n LogManager configuration properties where <handler-name>\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used.\n If no default value is defined then a RuntimeException is thrown. For example, the properties for MemoryHandler would be: For a custom handler, e.g. com.foo.MyHandler, the properties would be:  ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Handler"], "Methods": [{"params": [], "class_name": "MemoryHandler", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a MemoryHandler and configure it based on\n LogManager configuration properties.\n", "method_declar": ""}, {"params": [{"param_name": ["target"], "param_type": "Handler", "param_description": " the Handler to which to publish output."}, {"param_name": ["size"], "param_type": "int", "param_description": " the number of log records to buffer (must be greater than zero)"}, {"param_name": ["pushLevel"], "param_type": "Level", "param_description": " message level to push on"}], "class_name": "MemoryHandler", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a MemoryHandler.\n \n\n The MemoryHandler is configured based on LogManager\n properties (or their default values) except that the given pushLevel\n argument and buffer size argument are used.\n", "method_declar": ""}, {"params": [], "class_name": "MemoryHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Close the Handler and free all associated resources.\n This will also close the target Handler.\n", "method_declar": ""}, {"params": [], "class_name": "MemoryHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "flush", "method_description": "Causes a flush on the target Handler.\n \n\n Note that the current contents of the MemoryHandler\n buffer are not written out.  That requires a \"push\".\n", "method_declar": ""}, {"params": [], "class_name": "MemoryHandler", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value of the pushLevel"], "return_type": ["Level"]}, "method_name": "getPushLevel", "method_description": "Get the pushLevel.\n", "method_declar": ""}, {"params": [{"param_name": ["record"], "param_type": "LogRecord", "param_description": " a LogRecord"}], "class_name": "MemoryHandler", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the LogRecord would be logged."], "return_type": ["boolean"]}, "method_name": "isLoggable", "method_description": "Check if this Handler would actually log a given\n LogRecord into its internal buffer.\n \n\n This method checks if the LogRecord has an appropriate level and\n whether it satisfies any Filter.  However it does not\n check whether the LogRecord would result in a \"push\" of the\n buffer contents. It will return false if the LogRecord is null.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["record"], "param_type": "LogRecord", "param_description": " description of the log event. A null record is\n                 silently ignored and is not published"}], "class_name": "MemoryHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "publish", "method_description": "Store a LogRecord in an internal buffer.\n \n\n If there is a Filter, its isLoggable\n method is called to check if the given log record is loggable.\n If not we return.  Otherwise the given record is copied into\n an internal circular buffer.  Then the record's level property is\n compared with the pushLevel. If the given level is\n greater than or equal to the pushLevel then push\n is called to write all buffered records to the target output\n Handler.\n", "method_declar": ""}, {"params": [], "class_name": "MemoryHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "push", "method_description": "Push any buffered output to the target Handler.\n \n\n The buffer is then cleared.\n", "method_declar": ""}, {"params": [{"param_name": ["newLevel"], "param_type": "Level", "param_description": " the new value of the pushLevel"}], "class_name": "MemoryHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPushLevel", "method_description": "Set the pushLevel.  After a LogRecord is copied\n into our internal buffer, if its level is greater than or equal to\n the pushLevel, then push will be called.\n", "method_declar": ""}], "class_name": "MemoryHandler", "Vars": null}