{"package_name": "java.util.logging", "subclass_list": [], "class_description": "There is a single global LogManager object that is used to\n maintain a set of shared state about Loggers and log services. This LogManager object: The global LogManager object can be retrieved using LogManager.getLogManager().\n The LogManager object is created during class initialization and\n cannot subsequently be changed. At startup the LogManager class is located using the\n java.util.logging.manager system property. The LogManager defines two optional system properties that allow control over\n the initial configuration: If the \"java.util.logging.config.class\" property is set, then the\n property value is treated as a class name.  The given class will be\n loaded, an object will be instantiated, and that object's constructor\n is responsible for reading in the initial configuration.  (That object\n may use other system properties to control its configuration.)  The\n alternate configuration class can use readConfiguration(InputStream)\n to define properties in the LogManager. If \"java.util.logging.config.class\" property is not set,\n then the \"java.util.logging.config.file\" system property can be used\n to specify a properties file (in java.util.Properties format). The\n initial logging configuration will be read from this file. If neither of these properties is defined then the LogManager uses its\n default configuration. The default configuration is typically loaded from the\n properties file \"lib/logging.properties\" in the Java installation\n directory. The properties for loggers and Handlers will have names starting\n with the dot-separated name for the handler or logger. The global logging properties may include: Note that all classes loaded during LogManager configuration are\n first searched on the system class path before any user class path.\n That includes the LogManager class, any config classes, and any\n handler classes. Loggers are organized into a naming hierarchy based on their\n dot separated names.  Thus \"a.b.c\" is a child of \"a.b\", but\n \"a.b1\" and a.b2\" are peers. All properties whose names end with \".level\" are assumed to define\n log levels for Loggers.  Thus \"foo.level\" defines a log level for\n the logger called \"foo\" and (recursively) for any of its children\n in the naming hierarchy.  Log Levels are applied in the order they\n are defined in the properties file.  Thus level settings for child\n nodes in the tree should come after settings for their parents.\n The property name \".level\" can be used to set the level for the\n root of the tree. All methods on the LogManager object are multi-thread safe. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "LogManager", "Vars": null}