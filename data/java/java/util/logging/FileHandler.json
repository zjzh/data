{"package_name": "java.util.logging", "subclass_list": [], "class_description": "Simple file logging Handler. The FileHandler can either write to a specified file,\n or it can write to a rotating set of files. For a rotating set of files, as each file reaches a given size\n limit, it is closed, rotated out, and a new file opened.\n Successively older files are named by adding \"0\", \"1\", \"2\",\n etc. into the base filename. By default buffering is enabled in the IO libraries but each log\n record is flushed out when it is complete. By default the XMLFormatter class is used for formatting. Configuration:\n By default each FileHandler is initialized using the following\n LogManager configuration properties where <handler-name>\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used. For example, the properties for FileHandler would be: For a custom handler, e.g. com.foo.MyHandler, the properties would be: A pattern consists of a string that includes the following special\n components that will be replaced at runtime: Thus for example a pattern of \"%t/java%g.log\" with a count of 2\n would typically cause log files to be written on Solaris to\n /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they\n would be typically written to C:\\TEMP\\java0.log and C:\\TEMP\\java1.log Generation numbers follow the sequence 0, 1, 2, etc. Normally the \"%u\" unique field is set to 0.  However, if the FileHandler\n tries to open the filename and finds the file is currently in use by\n another process it will increment the unique number field and try\n again.  This will be repeated until FileHandler finds a file name that\n is  not currently in use. If there is a conflict and no \"%u\" field has\n been specified, it will be added at the end of the filename after a dot.\n (This will be after any automatically added generation number.) Thus if three processes were all trying to log to fred%u.%g.txt then\n they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as\n the first file in their rotating sequences. Note that the use of unique ids to avoid conflicts is only guaranteed\n to work reliably when using a local disk file system. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["StreamHandler"], "Methods": [{"params": [], "class_name": "FileHandler", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a default FileHandler.  This will be configured\n entirely from LogManager properties (or their default values).\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " the name of the output file"}], "class_name": "FileHandler", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initialize a FileHandler to write to the given filename.\n \n\n The FileHandler is configured based on LogManager\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to no limit, and the file count is set to one.\n \n\n There is no limit on the amount of data that may be written,\n so use this with care.\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " the name of the output file"}, {"param_name": ["append"], "param_type": "boolean", "param_description": " specifies append mode"}], "class_name": "FileHandler", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initialize a FileHandler to write to the given filename,\n with optional append.\n \n\n The FileHandler is configured based on LogManager\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to no limit, the file count is set to one, and the append\n mode is set to the given append argument.\n \n\n There is no limit on the amount of data that may be written,\n so use this with care.\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " the pattern for naming the output file"}, {"param_name": ["limit"], "param_type": "int", "param_description": " the maximum number of bytes to write to any one file"}, {"param_name": ["count"], "param_type": "int", "param_description": " the number of files to use"}], "class_name": "FileHandler", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initialize a FileHandler to write to a set of files.  When\n (approximately) the given limit has been written to one file,\n another file will be opened.  The output will cycle through a set\n of count files.\n \n\n The FileHandler is configured based on LogManager\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to the limit argument, and the file count is set to the\n given count argument.\n \n\n The count must be at least 1.\n", "method_declar": ""}, {"params": [{"param_name": ["pattern"], "param_type": "String", "param_description": " the pattern for naming the output file"}, {"param_name": ["limit"], "param_type": "int", "param_description": " the maximum number of bytes to write to any one file"}, {"param_name": ["count"], "param_type": "int", "param_description": " the number of files to use"}, {"param_name": ["append"], "param_type": "boolean", "param_description": " specifies append mode"}], "class_name": "FileHandler", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initialize a FileHandler to write to a set of files\n with optional append.  When (approximately) the given limit has\n been written to one file, another file will be opened.  The\n output will cycle through a set of count files.\n \n\n The FileHandler is configured based on LogManager\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to the limit argument, and the file count is set to the\n given count argument, and the append mode is set to the given\n append argument.\n \n\n The count must be at least 1.\n", "method_declar": ""}, {"params": [], "class_name": "FileHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Close all the files.\n", "method_declar": ""}, {"params": [{"param_name": ["record"], "param_type": "LogRecord", "param_description": " description of the log event. A null record is\n                 silently ignored and is not published"}], "class_name": "FileHandler", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "publish", "method_description": "Format and publish a LogRecord.\n", "method_declar": ""}], "class_name": "FileHandler", "Vars": null}