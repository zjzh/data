{"package_name": "java.util", "subclass_list": ["ConcurrentSkipListSet", "TreeSet", "ConcurrentSkipListSet", "NavigableSet", "ConcurrentSkipListMap", "TreeSet", "NavigableSet", "TreeMap"], "class_description": "A SortedSet extended with navigation methods reporting\n closest matches for given search targets. Methods lower(E),\n floor(E), ceiling(E), and higher(E) return elements\n respectively less than, less than or equal, greater than or equal,\n and greater than a given element, returning null if there\n is no such element. A NavigableSet may be accessed and traversed in either\n ascending or descending order.  The descendingSet() method\n returns a view of the set with the senses of all relational and\n directional methods inverted. The performance of ascending\n operations and views is likely to be faster than that of descending\n ones.  This interface additionally defines methods pollFirst() and pollLast() that return and remove the lowest\n and highest element, if one exists, else returning null.\n Methods\n subSet(E, boolean, E, boolean),\n headSet(E, boolean), and\n tailSet(E, boolean)\n differ from the like-named SortedSet methods in accepting\n additional arguments describing whether lower and upper bounds are\n inclusive versus exclusive.  Subsets of any NavigableSet\n must implement the NavigableSet interface. The return values of navigation methods may be ambiguous in\n implementations that permit null elements. However, even\n in this case the result can be disambiguated by checking\n contains(null). To avoid such issues, implementations of\n this interface are encouraged to not permit insertion of\n null elements. (Note that sorted sets of Comparable elements intrinsically do not permit null.) Methods\n subSet(E, E),\n headSet(E), and\n tailSet(E)\n are specified to return SortedSet to allow existing\n implementations of SortedSet to be compatibly retrofitted to\n implement NavigableSet, but extensions and implementations\n of this interface are encouraged to override these methods to return\n NavigableSet. ", "class_type": "interface", "typealias": [], "interface_list": ["SortedSet"], "class_inherit_list": [], "Methods": [], "class_name": "NavigableSet", "Vars": null}