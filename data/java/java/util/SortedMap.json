{"package_name": "java.util", "subclass_list": ["ConcurrentNavigableMap", "ConcurrentSkipListMap", "NavigableMap", "TreeMap", "ConcurrentNavigableMap", "ConcurrentMap", "NavigableMap", "ConcurrentSkipListMap", "ConcurrentNavigableMap", "NavigableMap", "SortedMap", "TreeMap", "NavigableMap"], "class_description": "A Map that further provides a total ordering on its keys.\n The map is ordered according to the Comparable of its keys, or by a Comparator typically\n provided at sorted map creation time.  This order is reflected when\n iterating over the sorted map's collection views (returned by the\n entrySet, keySet and values methods).\n Several additional operations are provided to take advantage of the\n ordering.  (This interface is the map analogue of SortedSet.) All keys inserted into a sorted map must implement the Comparable\n interface (or be accepted by the specified comparator).  Furthermore, all\n such keys must be mutually comparable: k1.compareTo(k2) (or\n comparator.compare(k1, k2)) must not throw a\n ClassCastException for any keys k1 and k2 in\n the sorted map.  Attempts to violate this restriction will cause the\n offending method or constructor invocation to throw a\n ClassCastException. Note that the ordering maintained by a sorted map (whether or not an\n explicit comparator is provided) must be consistent with equals if\n the sorted map is to correctly implement the Map interface.  (See\n the Comparable interface or Comparator interface for a\n precise definition of consistent with equals.)  This is so because\n the Map interface is defined in terms of the equals\n operation, but a sorted map performs all key comparisons using its\n compareTo (or compare) method, so two keys that are\n deemed equal by this method are, from the standpoint of the sorted map,\n equal.  The behavior of a tree map is well-defined even if its\n ordering is inconsistent with equals; it just fails to obey the general\n contract of the Map interface. All general-purpose sorted map implementation classes should provide four\n \"standard\" constructors. It is not possible to enforce this recommendation\n though as required constructors cannot be specified by interfaces. The\n expected \"standard\" constructors for all sorted map implementations are: Note: several methods return submaps with restricted key\n ranges. Such ranges are half-open, that is, they include their low\n endpoint but not their high endpoint (where applicable).  If you need a\n closed range (which includes both endpoints), and the key type\n allows for calculation of the successor of a given key, merely request\n the subrange from lowEndpoint to\n successor(highEndpoint).  For example, suppose that m\n is a map whose keys are strings.  The following idiom obtains a view\n containing all of the key-value mappings in m whose keys are\n between low and high, inclusive: This interface is a member of the\n \n Java Collections Framework. ", "class_type": "interface", "typealias": [], "interface_list": ["Map<K", "\u00a0V>"], "class_inherit_list": [], "Methods": [], "class_name": "SortedMap", "Vars": null}