{"package_name": "java.util", "subclass_list": [], "class_description": " Hash table and linked list implementation of the Map interface,\n with predictable iteration order.  This implementation differs from\n HashMap in that it maintains a doubly-linked list running through\n all of its entries.  This linked list defines the iteration ordering,\n which is normally the order in which keys were inserted into the map\n (insertion-order).  Note that insertion order is not affected\n if a key is re-inserted into the map.  (A key k is\n reinserted into a map m if m.put(k, v) is invoked when\n m.containsKey(k) would return true immediately prior to\n the invocation.) This implementation spares its clients from the unspecified, generally\n chaotic ordering provided by HashMap (and Hashtable),\n without incurring the increased cost associated with TreeMap.  It\n can be used to produce a copy of a map that has the same order as the\n original, regardless of the original map's implementation: A special constructor is\n provided to create a linked hash map whose order of iteration is the order\n in which its entries were last accessed, from least-recently accessed to\n most-recently (access-order).  This kind of map is well-suited to\n building LRU caches.  Invoking the put, putIfAbsent,\n get, getOrDefault, compute, computeIfAbsent,\n computeIfPresent, or merge methods results\n in an access to the corresponding entry (assuming it exists after the\n invocation completes). The replace methods only result in an access\n of the entry if the value is replaced.  The putAll method generates one\n entry access for each mapping in the specified map, in the order that\n key-value mappings are provided by the specified map's entry set iterator.\n No other methods generate entry accesses.  In particular, operations\n on collection-views do not affect the order of iteration of the\n backing map. The removeEldestEntry(java.util.Map.Entry) method may be overridden to\n impose a policy for removing stale mappings automatically when new mappings\n are added to the map. This class provides all of the optional Map operations, and\n permits null elements.  Like HashMap, it provides constant-time\n performance for the basic operations (add, contains and\n remove), assuming the hash function disperses elements\n properly among the buckets.  Performance is likely to be just slightly\n below that of HashMap, due to the added expense of maintaining the\n linked list, with one exception: Iteration over the collection-views\n of a LinkedHashMap requires time proportional to the size\n of the map, regardless of its capacity.  Iteration over a HashMap\n is likely to be more expensive, requiring time proportional to its\n capacity. A linked hash map has two parameters that affect its performance:\n initial capacity and load factor.  They are defined precisely\n as for HashMap.  Note, however, that the penalty for choosing an\n excessively high value for initial capacity is less severe for this class\n than for HashMap, as iteration times for this class are unaffected\n by capacity. Note that this implementation is not synchronized.\n If multiple threads access a linked hash map concurrently, and at least\n one of the threads modifies the map structurally, it must be\n synchronized externally.  This is typically accomplished by\n synchronizing on some object that naturally encapsulates the map.\n\n If no such object exists, the map should be \"wrapped\" using the\n Collections#synchronizedMap\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map: The iterators returned by the iterator method of the collections\n returned by all of this class's collection view methods are\n fail-fast: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator's own\n remove method, the iterator will throw a ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   the fail-fast behavior of iterators\n should be used only to detect bugs. The spliterators returned by the spliterator method of the collections\n returned by all of this class's collection view methods are\n late-binding,\n fail-fast, and additionally report Spliterator#ORDERED.\n Note: The implementation of these spliterators in Android Nougat\n (API levels 24 and 25) uses the wrong order (inconsistent with the\n iterators, which use the correct order), despite reporting\n Spliterator#ORDERED. You may use the following code fragments\n to obtain a correctly ordered Spliterator on API level 24 and 25: This class is a member of the\n \n Java Collections Framework. ", "class_type": "class", "typealias": [], "interface_list": ["Map<K", "\u00a0V>"], "class_inherit_list": ["HashMap<K,\u00a0V>"], "Methods": [{"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity"}, {"param_name": ["loadFactor"], "param_type": "float", "param_description": " the load factor"}], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty insertion-ordered LinkedHashMap instance\n with the specified initial capacity and load factor.\n", "method_declar": ""}, {"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity"}], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty insertion-ordered LinkedHashMap instance\n with the specified initial capacity and a default load factor (0.75).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty insertion-ordered LinkedHashMap instance\n with the default initial capacity (16) and load factor (0.75).\n", "method_declar": ""}, {"params": [{"param_name": ["m"], "param_type": "Map", "param_description": " the map whose mappings are to be placed in this map"}], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an insertion-ordered LinkedHashMap instance with\n the same mappings as the specified map.  The LinkedHashMap\n instance is created with a default load factor (0.75) and an initial\n capacity sufficient to hold the mappings in the specified map.\n", "method_declar": ""}, {"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity"}, {"param_name": ["loadFactor"], "param_type": "float", "param_description": " the load factor"}, {"param_name": ["accessOrder"], "param_type": "boolean", "param_description": " the ordering mode - true for\n         access-order, false for insertion-order"}], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty LinkedHashMap instance with the\n specified initial capacity, load factor and ordering mode.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the mappings from this map.\n The map will be empty after this call returns.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "Object", "param_description": " value whose presence in this map is to be tested"}], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this map maps one or more keys to the\n         specified value"], "return_type": ["boolean"]}, "method_name": "containsValue", "method_description": "Returns true if this map maps one or more keys to the\n specified value.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a set view of the mappings contained in this map"], "return_type": ["Set<Entry<K,\u00a0V>>"]}, "method_name": "entrySet", "method_description": "Returns a Set view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation, or through the\n setValue operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Set.remove, removeAll, retainAll and\n clear operations.  It does not support the\n add or addAll operations.\n Its Spliterator typically provides faster sequential\n performance but much poorer parallel performance than that of\n HashMap.\n", "method_declar": ""}, {"params": [{"param_name": ["action"], "param_type": "BiConsumer", "param_description": " The action to be performed for each entry"}], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "forEach", "method_description": "Performs the given action for each entry in this map until all entries\n have been processed or the action throws an exception.   Unless\n otherwise specified by the implementing class, actions are performed in\n the order of entry set iteration (if an iteration order is specified.)\n Exceptions thrown by the action are relayed to the caller.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key whose associated value is to be returned"}], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value to which the specified key is mapped, or\n         null if this map contains no mapping for the key"], "return_type": ["V"]}, "method_name": "get", "method_description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n \nMore formally, if this map contains a mapping from a key\n k to a value v such that (key==null ? k==null :\n key.equals(k)), then this method returns v; otherwise\n it returns null.  (There can be at most one such mapping.)\n\n \nA return value of null does not necessarily\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to null.\n The containsKey operation may be used to\n distinguish these two cases.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key whose associated value is to be returned"}, {"param_name": ["defaultValue"], "param_type": "V", "param_description": " the default mapping of the key"}], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value to which the specified key is mapped, or\n defaultValue if this map contains no mapping for the key"], "return_type": ["V"]}, "method_name": "getOrDefault", "method_description": "Returns the value to which the specified key is mapped, or\n defaultValue if this map contains no mapping for the key.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a set view of the keys contained in this map"], "return_type": ["Set<K>"]}, "method_name": "keySet", "method_description": "Returns a Set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n Its Spliterator typically provides faster sequential\n performance but much poorer parallel performance than that of\n HashMap.\n", "method_declar": ""}, {"params": [{"param_name": ["function"], "param_type": "BiFunction", "param_description": " the function to apply to each entry"}], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "replaceAll", "method_description": "Replaces each entry's value with the result of invoking the given\n function on that entry until all entries have been processed or the\n function throws an exception.  Exceptions thrown by the function are\n relayed to the caller.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedHashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the values contained in this map"], "return_type": ["Collection<V>"]}, "method_name": "values", "method_description": "Returns a Collection view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations.\n Its Spliterator typically provides faster sequential\n performance but much poorer parallel performance than that of\n HashMap.\n", "method_declar": ""}], "class_name": "LinkedHashMap", "Vars": null}