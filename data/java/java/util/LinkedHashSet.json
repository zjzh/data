{"package_name": "java.util", "subclass_list": [], "class_description": " Hash table and linked list implementation of the Set interface,\n with predictable iteration order.  This implementation differs from\n HashSet in that it maintains a doubly-linked list running through\n all of its entries.  This linked list defines the iteration ordering,\n which is the order in which elements were inserted into the set\n (insertion-order).  Note that insertion order is not affected\n if an element is re-inserted into the set.  (An element e\n is reinserted into a set s if s.add(e) is invoked when\n s.contains(e) would return true immediately prior to\n the invocation.) This implementation spares its clients from the unspecified, generally\n chaotic ordering provided by HashSet, without incurring the\n increased cost associated with TreeSet.  It can be used to\n produce a copy of a set that has the same order as the original, regardless\n of the original set's implementation: This class provides all of the optional Set operations, and\n permits null elements.  Like HashSet, it provides constant-time\n performance for the basic operations (add, contains and\n remove), assuming the hash function disperses elements\n properly among the buckets.  Performance is likely to be just slightly\n below that of HashSet, due to the added expense of maintaining the\n linked list, with one exception: Iteration over a LinkedHashSet\n requires time proportional to the size of the set, regardless of\n its capacity.  Iteration over a HashSet is likely to be more\n expensive, requiring time proportional to its capacity. A linked hash set has two parameters that affect its performance:\n initial capacity and load factor.  They are defined precisely\n as for HashSet.  Note, however, that the penalty for choosing an\n excessively high value for initial capacity is less severe for this class\n than for HashSet, as iteration times for this class are unaffected\n by capacity. Note that this implementation is not synchronized.\n If multiple threads access a linked hash set concurrently, and at least\n one of the threads modifies the set, it must be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the set.\n\n If no such object exists, the set should be \"wrapped\" using the\n Collections#synchronizedSet\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the set: The iterators returned by this class's iterator method are\n fail-fast: if the set is modified at any time after the iterator\n is created, in any way except through the iterator's own remove\n method, the iterator will throw a ConcurrentModificationException.\n Thus, in the face of concurrent modification, the iterator fails quickly\n and cleanly, rather than risking arbitrary, non-deterministic behavior at\n an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   the fail-fast behavior of iterators\n should be used only to detect bugs. This class is a member of the\n \n Java Collections Framework. ", "class_type": "class", "typealias": [], "interface_list": ["Set", "Cloneable", "Serializable"], "class_inherit_list": ["HashSet"], "Methods": [{"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity of the linked hash set"}, {"param_name": ["loadFactor"], "param_type": "float", "param_description": " the load factor of the linked hash set"}], "class_name": "LinkedHashSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty linked hash set with the specified initial\n capacity and load factor.\n", "method_declar": ""}, {"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity of the LinkedHashSet"}], "class_name": "LinkedHashSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty linked hash set with the specified initial\n capacity and the default load factor (0.75).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedHashSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty linked hash set with the default initial\n capacity (16) and load factor (0.75).\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection whose elements are to be placed into\n           this set"}], "class_name": "LinkedHashSet", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new linked hash set with the same elements as the\n specified collection.  The linked hash set is created with an initial\n capacity sufficient to hold the elements in the specified collection\n and the default load factor (0.75).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedHashSet", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this set"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this set.\n\n \nThe Spliterator reports Spliterator#SIZED,\n Spliterator#DISTINCT, and ORDERED.  Implementations\n should document the reporting of additional characteristic values.\n", "method_declar": ""}], "class_name": "LinkedHashSet", "Vars": null}