{"package_name": "java.util", "subclass_list": [], "class_description": "Doubly-linked list implementation of the List and Deque\n interfaces.  Implements all optional list operations, and permits all\n elements (including null). All of the operations perform as could be expected for a doubly-linked\n list.  Operations that index into the list will traverse the list from\n the beginning or the end, whichever is closer to the specified index. Note that this implementation is not synchronized.\n If multiple threads access a linked list concurrently, and at least\n one of the threads modifies the list structurally, it must be\n synchronized externally.  (A structural modification is any operation\n that adds or deletes one or more elements; merely setting the value of\n an element is not a structural modification.)  This is typically\n accomplished by synchronizing on some object that naturally\n encapsulates the list.\n\n If no such object exists, the list should be \"wrapped\" using the\n Collections#synchronizedList\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the list: The iterators returned by this class's iterator and\n listIterator methods are fail-fast: if the list is\n structurally modified at any time after the iterator is created, in\n any way except through the Iterator's own remove or\n add methods, the iterator will throw a ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than\n risking arbitrary, non-deterministic behavior at an undetermined\n time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   the fail-fast behavior of iterators\n should be used only to detect bugs. This class is a member of the\n \n Java Collections Framework. ", "class_type": "class", "typealias": [], "interface_list": ["List", "Deque", "Cloneable", "Serializable"], "class_inherit_list": ["AbstractSequentialList"], "Methods": [{"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty list.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection whose elements are to be placed into this list"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a list containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " element to be appended to this list"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Appends the specified element to the end of this list.\n\n \nThis method is equivalent to addLast(E).\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index at which the specified element is to be inserted"}, {"param_name": ["element"], "param_type": "E", "param_description": " element to be inserted"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "add", "method_description": "Inserts the specified element at the specified position in this list.\n Shifts the element currently at that position (if any) and any\n subsequent elements to the right (adds one to their indices).\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " collection containing elements to be added to this list"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "addAll", "method_description": "Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the specified\n collection's iterator.  The behavior of this operation is undefined if\n the specified collection is modified while the operation is in\n progress.  (Note that this will occur if the specified collection is\n this list, and it's nonempty.)\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index at which to insert the first element\n              from the specified collection"}, {"param_name": ["c"], "param_type": "Collection", "param_description": " collection containing elements to be added to this list"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list changed as a result of the call"], "return_type": ["boolean"]}, "method_name": "addAll", "method_description": "Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in the list in the order that they are returned by the\n specified collection's iterator.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addFirst", "method_description": "Inserts the specified element at the beginning of this list.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addLast", "method_description": "Appends the specified element to the end of this list.\n\n \nThis method is equivalent to add(E).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the elements from this list.\n The list will be empty after this call returns.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["a shallow copy of this LinkedList instance"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Returns a shallow copy of this LinkedList. (The elements\n themselves are not cloned.)\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element whose presence in this list is to be tested"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this list contains the specified element.\n More formally, returns true if and only if this list contains\n at least one element e such that\n (o==null\u00a0?\u00a0e==null\u00a0:\u00a0o.equals(e)).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this deque in reverse\n sequence"], "return_type": ["Iterator<E>"]}, "method_name": "descendingIterator", "method_description": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this list"], "return_type": ["E"]}, "method_name": "element", "method_description": "Retrieves, but does not remove, the head (first element) of this list.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index of the element to return"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element at the specified position in this list"], "return_type": ["E"]}, "method_name": "get", "method_description": "Returns the element at the specified position in this list.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first element in this list"], "return_type": ["E"]}, "method_name": "getFirst", "method_description": "Returns the first element in this list.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last element in this list"], "return_type": ["E"]}, "method_name": "getLast", "method_description": "Returns the last element in this list.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to search for"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the first occurrence of the specified element in\n         this list, or -1 if this list does not contain the element"], "return_type": ["int"]}, "method_name": "indexOf", "method_description": "Returns the index of the first occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the lowest index i such that\n (o==null\u00a0?\u00a0get(i)==null\u00a0:\u00a0o.equals(get(i))),\n or -1 if there is no such index.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to search for"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index of the last occurrence of the specified element in\n         this list, or -1 if this list does not contain the element"], "return_type": ["int"]}, "method_name": "lastIndexOf", "method_description": "Returns the index of the last occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the highest index i such that\n (o==null\u00a0?\u00a0get(i)==null\u00a0:\u00a0o.equals(get(i))),\n or -1 if there is no such index.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index of the first element to be returned from the\n              list-iterator (by a call to next)"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["a ListIterator of the elements in this list (in proper\n         sequence), starting at the specified position in the list"], "return_type": ["ListIterator<E>"]}, "method_name": "listIterator", "method_description": "Returns a list-iterator of the elements in this list (in proper\n sequence), starting at the specified position in the list.\n Obeys the general contract of List.listIterator(int).\n\n\n The list-iterator is fail-fast: if the list is structurally\n modified at any time after the Iterator is created, in any way except\n through the list-iterator's own remove or add\n methods, the list-iterator will throw a\n ConcurrentModificationException.  Thus, in the face of\n concurrent modification, the iterator fails quickly and cleanly, rather\n than risking arbitrary, non-deterministic behavior at an undetermined\n time in the future.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Queue#offer)"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Adds the specified element as the tail (last element) of this list.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to insert"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Deque#offerFirst)"], "return_type": ["boolean"]}, "method_name": "offerFirst", "method_description": "Inserts the specified element at the front of this list.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to insert"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Deque#offerLast)"], "return_type": ["boolean"]}, "method_name": "offerLast", "method_description": "Inserts the specified element at the end of this list.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this list, or null if this list is empty"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Retrieves, but does not remove, the head (first element) of this list.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first element of this list, or null\n         if this list is empty"], "return_type": ["E"]}, "method_name": "peekFirst", "method_description": "Retrieves, but does not remove, the first element of this list,\n or returns null if this list is empty.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last element of this list, or null\n         if this list is empty"], "return_type": ["E"]}, "method_name": "peekLast", "method_description": "Retrieves, but does not remove, the last element of this list,\n or returns null if this list is empty.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this list, or null if this list is empty"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head (first element) of this list.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first element of this list, or null if\n     this list is empty"], "return_type": ["E"]}, "method_name": "pollFirst", "method_description": "Retrieves and removes the first element of this list,\n or returns null if this list is empty.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last element of this list, or null if\n     this list is empty"], "return_type": ["E"]}, "method_name": "pollLast", "method_description": "Retrieves and removes the last element of this list,\n or returns null if this list is empty.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element at the front of this list (which is the top\n         of the stack represented by this list)"], "return_type": ["E"]}, "method_name": "pop", "method_description": "Pops an element from the stack represented by this list.  In other\n words, removes and returns the first element of this list.\n\n \nThis method is equivalent to removeFirst().\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to push"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "push", "method_description": "Pushes an element onto the stack represented by this list.  In other\n words, inserts the element at the front of this list.\n\n \nThis method is equivalent to addFirst(E).\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index of the element to be removed"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element previously at the specified position"], "return_type": ["E"]}, "method_name": "remove", "method_description": "Removes the element at the specified position in this list.  Shifts any\n subsequent elements to the left (subtracts one from their indices).\n Returns the element that was removed from the list.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this list"], "return_type": ["E"]}, "method_name": "remove", "method_description": "Retrieves and removes the head (first element) of this list.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this list, if present"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this list contained the specified element"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the first occurrence of the specified element from this list,\n if it is present.  If this list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n i such that\n (o==null\u00a0?\u00a0get(i)==null\u00a0:\u00a0o.equals(get(i)))\n (if such an element exists).  Returns true if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first element from this list"], "return_type": ["E"]}, "method_name": "removeFirst", "method_description": "Removes and returns the first element from this list.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this list, if present"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the list contained the specified element"], "return_type": ["boolean"]}, "method_name": "removeFirstOccurrence", "method_description": "Removes the first occurrence of the specified element in this\n list (when traversing the list from head to tail).  If the list\n does not contain the element, it is unchanged.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last element from this list"], "return_type": ["E"]}, "method_name": "removeLast", "method_description": "Removes and returns the last element from this list.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this list, if present"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the list contained the specified element"], "return_type": ["boolean"]}, "method_name": "removeLastOccurrence", "method_description": "Removes the last occurrence of the specified element in this\n list (when traversing the list from head to tail).  If the list\n does not contain the element, it is unchanged.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " index of the element to replace"}, {"param_name": ["element"], "param_type": "E", "param_description": " element to be stored at the specified position"}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element previously at the specified position"], "return_type": ["E"]}, "method_name": "set", "method_description": "Replaces the element at the specified position in this list with the\n specified element.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this list"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this list.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this list"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n list.\n\n \nThe Spliterator reports Spliterator#SIZED and\n Spliterator#ORDERED.  Overriding implementations should document\n the reporting of additional characteristic values.\n", "method_declar": ""}, {"params": [], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this list\n         in proper sequence"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this list\n in proper sequence (from first to last element).\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this list.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the list are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose."}], "class_name": "LinkedList", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing the elements of the list"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this list in\n proper sequence (from first to last element); the runtime type of\n the returned array is that of the specified array.  If the list fits\n in the specified array, it is returned therein.  Otherwise, a new\n array is allocated with the runtime type of the specified array and\n the size of this list.\n\n \nIf the list fits in the specified array with room to spare (i.e.,\n the array has more elements than the list), the element in the array\n immediately following the end of the list is set to null.\n (This is useful in determining the length of the list only if\n the caller knows that the list does not contain any null elements.)\n\n \nLike the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \nSuppose x is a list known to contain only strings.\n The following code can be used to dump the list into a newly\n allocated array of String:\n\n \n", "method_declar": ""}], "class_name": "LinkedList", "Vars": null}