{"package_name": "java.util", "subclass_list": [], "class_description": "SimpleTimeZone is a concrete subclass of TimeZone\n that represents a time zone for use with a Gregorian calendar.\n The class holds an offset from GMT, called raw offset, and start\n and end rules for a daylight saving time schedule.  Since it only holds\n single values for each, it cannot handle historical changes in the offset\n from GMT and the daylight saving schedule, except that the setStartYear method can specify the year when the daylight\n saving time schedule starts in effect. To construct a SimpleTimeZone with a daylight saving time\n schedule, the schedule can be described with a set of rules,\n start-rule and end-rule. A day when daylight saving time\n starts or ends is specified by a combination of month,\n day-of-month, and day-of-week values. The month\n value is represented by a Calendar Calendar#MONTH field\n value, such as Calendar#MARCH. The day-of-week value is\n represented by a Calendar Calendar#DAY_OF_WEEK value,\n such as Calendar#SUNDAY. The meanings of value combinations\n are as follows. The following are examples of parameters for constructing time zone objects. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["TimeZone"], "Methods": [{"params": [{"param_name": ["rawOffset"], "param_type": "int", "param_description": " The base time zone offset in milliseconds to GMT."}, {"param_name": ["ID"], "param_type": "String", "param_description": " The time zone name that is given to this instance."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a SimpleTimeZone with the given base time zone offset from GMT\n and time zone ID with no daylight saving time schedule.\n", "method_declar": ""}, {"params": [{"param_name": ["rawOffset"], "param_type": "int", "param_description": " The given base time zone offset from GMT."}, {"param_name": ["ID"], "param_type": "String", "param_description": " The time zone ID which is given to this object."}, {"param_name": ["startMonth"], "param_type": "int", "param_description": " The daylight saving time starting month. Month is\n                        a Calendar#MONTH field value (0-based. e.g., 0\n                        for January)."}, {"param_name": ["startDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["startDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["startTime"], "param_type": "int", "param_description": " The daylight saving time starting time in local wall clock\n                        time (in milliseconds within the day), which is local\n                        standard time in this case."}, {"param_name": ["endMonth"], "param_type": "int", "param_description": " The daylight saving time ending month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 9 for October)."}, {"param_name": ["endDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["endDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["endTime"], "param_type": "int", "param_description": " The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n Both startTime and endTime are specified to be\n represented in the wall clock time. The amount of daylight saving is\n assumed to be 3600000 milliseconds (i.e., one hour). This constructor is\n equivalent to:\n \n", "method_declar": ""}, {"params": [{"param_name": ["rawOffset"], "param_type": "int", "param_description": " The given base time zone offset from GMT."}, {"param_name": ["ID"], "param_type": "String", "param_description": " The time zone ID which is given to this object."}, {"param_name": ["startMonth"], "param_type": "int", "param_description": " The daylight saving time starting month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 0 for January)."}, {"param_name": ["startDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["startDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["startTime"], "param_type": "int", "param_description": " The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case."}, {"param_name": ["endMonth"], "param_type": "int", "param_description": " The daylight saving time ending month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 9 for October)."}, {"param_name": ["endDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["endDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["endTime"], "param_type": "int", "param_description": " The daylight saving ending time in local wall clock time,\n                        which is local daylight time in this case."}, {"param_name": ["dstSavings"], "param_type": "int", "param_description": " The amount of time in milliseconds saved during\n                        daylight saving time."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n Both startTime and endTime are assumed to be\n represented in the wall clock time. This constructor is equivalent to:\n \n", "method_declar": ""}, {"params": [{"param_name": ["rawOffset"], "param_type": "int", "param_description": " The given base time zone offset from GMT."}, {"param_name": ["ID"], "param_type": "String", "param_description": " The time zone ID which is given to this object."}, {"param_name": ["startMonth"], "param_type": "int", "param_description": " The daylight saving time starting month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 0 for January)."}, {"param_name": ["startDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["startDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["startTime"], "param_type": "int", "param_description": " The daylight saving time starting time in the time mode\n                        specified by startTimeMode."}, {"param_name": ["startTimeMode"], "param_type": "int", "param_description": " The mode of the start time specified by startTime."}, {"param_name": ["endMonth"], "param_type": "int", "param_description": " The daylight saving time ending month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 9 for October)."}, {"param_name": ["endDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["endDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["endTime"], "param_type": "int", "param_description": " The daylight saving ending time in time time mode\n                        specified by endTimeMode."}, {"param_name": ["endTimeMode"], "param_type": "int", "param_description": " The mode of the end time specified by endTime"}, {"param_name": ["dstSavings"], "param_type": "int", "param_description": " The amount of time in milliseconds saved during\n                        daylight saving time."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n This constructor takes the full set of the start and end rules\n parameters, including modes of startTime and\n endTime. The mode specifies either wall\n time or standard time or UTC\n time.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this instance."], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Returns a clone of this SimpleTimeZone instance.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " The SimpleTimeZone object to be compared with."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["True if the given obj is the same as this\n             SimpleTimeZone object; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the equality of two SimpleTimeZone objects.\n", "method_declar": ""}, {"params": [], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of milliseconds the time is advanced with\n respect to standard time when the daylight saving rules are in\n effect, or 0 (zero) if this time zone doesn't observe daylight\n saving time."], "return_type": ["int"]}, "method_name": "getDSTSavings", "method_description": "Returns the amount of time in milliseconds that the clock is\n advanced during daylight saving time.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["date"], "param_type": "long", "param_description": " the time at which the time zone offset is found"}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the amount of time in milliseconds to add to UTC to get\n local time."], "return_type": ["int"]}, "method_name": "getOffset", "method_description": "Returns the offset of this time zone from UTC at the given\n time. If daylight saving time is in effect at the given time,\n the offset value is adjusted with the amount of daylight\n saving.\n", "method_declar": ""}, {"params": [{"param_name": ["era"], "param_type": "int", "param_description": " The era of the given date."}, {"param_name": ["year"], "param_type": "int", "param_description": " The year in the given date."}, {"param_name": ["month"], "param_type": "int", "param_description": " The month in the given date. Month is 0-based. e.g.,\n                  0 for January."}, {"param_name": ["day"], "param_type": "int", "param_description": " The day-in-month of the given date."}, {"param_name": ["dayOfWeek"], "param_type": "int", "param_description": " The day-of-week of the given date."}, {"param_name": ["millis"], "param_type": "int", "param_description": " The milliseconds in day in standard local time."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["The milliseconds to add to UTC to get local time."], "return_type": ["int"]}, "method_name": "getOffset", "method_description": "Returns the difference in milliseconds between local time and\n UTC, taking into account both the raw offset and the effect of\n daylight saving, for the specified date and time.  This method\n assumes that the start and end month are distinct.  It also\n uses a default GregorianCalendar object as its\n underlying calendar, such as for determining leap years.  Do\n not use the result of this method with a calendar other than a\n default GregorianCalendar.\n\n \nNote:  In general, clients should use\n Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)\n instead of calling this method.\n", "method_declar": ""}, {"params": [], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the GMT offset value in milliseconds"], "return_type": ["int"]}, "method_name": "getRawOffset", "method_description": "Gets the GMT offset for this time zone.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["other"], "param_type": "TimeZone", "param_description": " the TimeZone object to be compared with"}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the given zone is a SimpleTimeZone and has the\n same rules and offset as this one"], "return_type": ["boolean"]}, "method_name": "hasSameRules", "method_description": "Returns true if this zone has the same rules and offset as another zone.\n", "method_declar": ""}, {"params": [], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the hash code for this object"], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Generates the hash code for the SimpleDateFormat object.\n", "method_declar": ""}, {"params": [{"param_name": ["date"], "param_type": "Date", "param_description": " the given Date."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if daylight saving time is in effective at the\n given date; false otherwise."], "return_type": ["boolean"]}, "method_name": "inDaylightTime", "method_description": "Queries if the given date is in daylight saving time.\n", "method_declar": ""}, {"params": [], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this SimpleTimeZone observes\n Daylight Saving Time; false otherwise."], "return_type": ["boolean"]}, "method_name": "observesDaylightTime", "method_description": "Returns true if this SimpleTimeZone observes\n Daylight Saving Time. This method is equivalent to useDaylightTime().\n", "method_declar": ""}, {"params": [{"param_name": ["millisSavedDuringDST"], "param_type": "int", "param_description": " the number of milliseconds the time is\n advanced with respect to standard time when the daylight saving time rules\n are in effect. A positive number, typically one hour (3600000)."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDSTSavings", "method_description": "Sets the amount of time in milliseconds that the clock is advanced\n during daylight saving time.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["endMonth"], "param_type": "int", "param_description": " The daylight saving time ending month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 9 for October)."}, {"param_name": ["endDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time ends."}, {"param_name": ["endDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time ending day-of-week."}, {"param_name": ["endTime"], "param_type": "int", "param_description": " The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case."}, {"param_name": ["after"], "param_type": "boolean", "param_description": " If true, this rule selects the first endDayOfWeek on\n                        or after endDay.  If false, this rule\n                        selects the last endDayOfWeek on or before\n                        endDay of the month."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setEndRule", "method_description": "Sets the daylight saving time end rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th.\n", "method_declar": ""}, {"params": [{"param_name": ["endMonth"], "param_type": "int", "param_description": " The daylight saving time ending month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 9 for October)."}, {"param_name": ["endDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["endDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["endTime"], "param_type": "int", "param_description": " The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setEndRule", "method_description": "Sets the daylight saving time end rule. For example, if daylight saving time\n ends on the last Sunday in October at 2 am in wall clock time,\n you can set the end rule by calling:\n setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);\n", "method_declar": ""}, {"params": [{"param_name": ["endMonth"], "param_type": "int", "param_description": " The daylight saving time ending month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 9 for October)."}, {"param_name": ["endDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time ends."}, {"param_name": ["endTime"], "param_type": "int", "param_description": " The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setEndRule", "method_description": "Sets the daylight saving time end rule to a fixed date within a month.\n This method is equivalent to:\n \n", "method_declar": ""}, {"params": [{"param_name": ["offsetMillis"], "param_type": "int", "param_description": " the given base time zone offset to GMT."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setRawOffset", "method_description": "Sets the base time zone offset to GMT.\n This is the offset to add to UTC to get local time.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["startMonth"], "param_type": "int", "param_description": " The daylight saving time starting month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 0 for January)."}, {"param_name": ["startDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["startDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter."}, {"param_name": ["startTime"], "param_type": "int", "param_description": " The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setStartRule", "method_description": "Sets the daylight saving time start rule. For example, if daylight saving\n time starts on the first Sunday in April at 2 am in local wall clock\n time, you can set the start rule by calling:\n \n", "method_declar": ""}, {"params": [{"param_name": ["startMonth"], "param_type": "int", "param_description": " The daylight saving time starting month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 0 for January)."}, {"param_name": ["startDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time starts."}, {"param_name": ["startTime"], "param_type": "int", "param_description": " The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.\n                        See the class description for the special cases of this parameter."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setStartRule", "method_description": "Sets the daylight saving time start rule to a fixed date within a month.\n This method is equivalent to:\n \n", "method_declar": ""}, {"params": [{"param_name": ["startMonth"], "param_type": "int", "param_description": " The daylight saving time starting month. Month is\n                        a Calendar#MONTH field\n                        value (0-based. e.g., 0 for January)."}, {"param_name": ["startDay"], "param_type": "int", "param_description": " The day of the month on which the daylight saving time starts."}, {"param_name": ["startDayOfWeek"], "param_type": "int", "param_description": " The daylight saving time starting day-of-week."}, {"param_name": ["startTime"], "param_type": "int", "param_description": " The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case."}, {"param_name": ["after"], "param_type": "boolean", "param_description": " If true, this rule selects the first dayOfWeek on or\n                        after dayOfMonth.  If false, this rule\n                        selects the last dayOfWeek on or before\ndayOfMonth."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setStartRule", "method_description": "Sets the daylight saving time start rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th.\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " The daylight saving starting year."}], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setStartYear", "method_description": "Sets the daylight saving time starting year.\n", "method_declar": ""}, {"params": [], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this time zone."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this time zone.\n", "method_declar": ""}, {"params": [], "class_name": "SimpleTimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this time zone uses daylight saving time;\n false otherwise."], "return_type": ["boolean"]}, "method_name": "useDaylightTime", "method_description": "Queries if this time zone uses daylight saving time.\n", "method_declar": ""}], "class_name": "SimpleTimeZone", "Vars": null}