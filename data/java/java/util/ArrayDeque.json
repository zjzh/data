{"package_name": "java.util", "subclass_list": [], "class_description": "Resizable-array implementation of the Deque interface.  Array\n deques have no capacity restrictions; they grow as necessary to support\n usage.  They are not thread-safe; in the absence of external\n synchronization, they do not support concurrent access by multiple threads.\n Null elements are prohibited.  This class is likely to be faster than\n Stack when used as a stack, and faster than LinkedList\n when used as a queue. Most ArrayDeque operations run in amortized constant time.\n Exceptions include\n remove,\n removeFirstOccurrence,\n removeLastOccurrence,\n contains,\n iterator.remove(),\n and the bulk operations, all of which run in linear time. The iterators returned by this class's iterator\n method are fail-fast: If the deque is modified at any time after\n the iterator is created, in any way except through the iterator's own\n remove method, the iterator will generally throw a ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the\n future. Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: the fail-fast behavior of iterators\n should be used only to detect bugs. This class and its iterator implement all of the\n optional methods of the Collection and Iterator interfaces. ", "class_type": "class", "typealias": [], "interface_list": ["Deque", "Cloneable", "Serializable"], "class_inherit_list": ["AbstractCollection"], "Methods": [{"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty array deque with an initial capacity\n sufficient to hold 16 elements.\n", "method_declar": ""}, {"params": [{"param_name": ["numElements"], "param_type": "int", "param_description": " lower bound on initial capacity of the deque"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty array deque with an initial capacity\n sufficient to hold the specified number of elements.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Collection", "param_description": " the collection whose elements are to be placed into the deque"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a deque containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator.  (The first element returned by the collection's\n iterator becomes the first element, or front of the\n deque.)\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Collection#add)"], "return_type": ["boolean"]}, "method_name": "add", "method_description": "Inserts the specified element at the end of this deque.\n\n \nThis method is equivalent to addLast(E).\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addFirst", "method_description": "Inserts the specified element at the front of this deque.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addLast", "method_description": "Inserts the specified element at the end of this deque.\n\n \nThis method is equivalent to add(E).\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the elements from this deque.\n The deque will be empty after this call returns.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["a copy of this deque"], "return_type": ["ArrayDeque<E>"]}, "method_name": "clone", "method_description": "Returns a copy of this deque.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be checked for containment in this deque"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this deque contains the specified element"], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Returns true if this deque contains the specified element.\n More formally, returns true if and only if this deque contains\n at least one element e such that o.equals(e).\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this deque in reverse\n sequence"], "return_type": ["Iterator<E>"]}, "method_name": "descendingIterator", "method_description": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of the queue represented by this deque"], "return_type": ["E"]}, "method_name": "element", "method_description": "Retrieves, but does not remove, the head of the queue represented by\n this deque.  This method differs from peek only in\n that it throws an exception if this deque is empty.\n\n \nThis method is equivalent to getFirst().\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque"], "return_type": ["E"]}, "method_name": "getFirst", "method_description": "Retrieves, but does not remove, the first element of this deque.\n\n This method differs from peekFirst only in that it\n throws an exception if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque"], "return_type": ["E"]}, "method_name": "getLast", "method_description": "Retrieves, but does not remove, the last element of this deque.\n This method differs from peekLast only in that it\n throws an exception if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this deque contains no elements"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Returns true if this deque contains no elements.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an iterator over the elements in this deque"], "return_type": ["Iterator<E>"]}, "method_name": "iterator", "method_description": "Returns an iterator over the elements in this deque.  The elements\n will be ordered from first (head) to last (tail).  This is the same\n order that elements would be dequeued (via successive calls to\n remove() or popped (via successive calls to pop()).\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Queue#offer)"], "return_type": ["boolean"]}, "method_name": "offer", "method_description": "Inserts the specified element at the end of this deque.\n\n \nThis method is equivalent to offerLast(E).\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Deque#offerFirst)"], "return_type": ["boolean"]}, "method_name": "offerFirst", "method_description": "Inserts the specified element at the front of this deque.\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to add"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (as specified by Deque#offerLast)"], "return_type": ["boolean"]}, "method_name": "offerLast", "method_description": "Inserts the specified element at the end of this deque.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of the queue represented by this deque, or\n         null if this deque is empty"], "return_type": ["E"]}, "method_name": "peek", "method_description": "Retrieves, but does not remove, the head of the queue represented by\n this deque, or returns null if this deque is empty.\n\n \nThis method is equivalent to peekFirst().\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "peekFirst", "method_description": "Retrieves, but does not remove, the first element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "peekLast", "method_description": "Retrieves, but does not remove, the last element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of the queue represented by this deque, or\n         null if this deque is empty"], "return_type": ["E"]}, "method_name": "poll", "method_description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n null if this deque is empty.\n\n \nThis method is equivalent to pollFirst().\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "pollFirst", "method_description": "Retrieves and removes the first element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque, or null if this deque is empty"], "return_type": ["E"]}, "method_name": "pollLast", "method_description": "Retrieves and removes the last element of this deque,\n or returns null if this deque is empty.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the element at the front of this deque (which is the top\n         of the stack represented by this deque)"], "return_type": ["E"]}, "method_name": "pop", "method_description": "Pops an element from the stack represented by this deque.  In other\n words, removes and returns the first element of this deque.\n\n \nThis method is equivalent to removeFirst().\n", "method_declar": ""}, {"params": [{"param_name": ["e"], "param_type": "E", "param_description": " the element to push"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "push", "method_description": "Pushes an element onto the stack represented by this deque.  In other\n words, inserts the element at the front of this deque.\n\n \nThis method is equivalent to addFirst(E).\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of the queue represented by this deque"], "return_type": ["E"]}, "method_name": "remove", "method_description": "Retrieves and removes the head of the queue represented by this deque.\n\n This method differs from poll only in that it throws an\n exception if this deque is empty.\n\n \nThis method is equivalent to removeFirst().\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this deque, if present"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this deque contained the specified element"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes a single instance of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n \nThis method is equivalent to removeFirstOccurrence(java.lang.Object).\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the head of this deque"], "return_type": ["E"]}, "method_name": "removeFirst", "method_description": "Retrieves and removes the first element of this deque.  This method\n differs from pollFirst only in that it throws an\n exception if this deque is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this deque, if present"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the deque contained the specified element"], "return_type": ["boolean"]}, "method_name": "removeFirstOccurrence", "method_description": "Removes the first occurrence of the specified element in this\n deque (when traversing the deque from head to tail).\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the tail of this deque"], "return_type": ["E"]}, "method_name": "removeLast", "method_description": "Retrieves and removes the last element of this deque.  This method\n differs from pollLast only in that it throws an\n exception if this deque is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " element to be removed from this deque, if present"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the deque contained the specified element"], "return_type": ["boolean"]}, "method_name": "removeLastOccurrence", "method_description": "Removes the last occurrence of the specified element in this\n deque (when traversing the deque from head to tail).\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of elements in this deque"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of elements in this deque.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Spliterator over the elements in this deque"], "return_type": ["Spliterator<E>"]}, "method_name": "spliterator", "method_description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n deque.\n\n \nThe Spliterator reports Spliterator#SIZED,\n Spliterator#SUBSIZED, Spliterator#ORDERED, and\n Spliterator#NONNULL.  Overriding implementations should document\n the reporting of additional characteristic values.\n", "method_declar": ""}, {"params": [], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this deque"], "return_type": ["Object[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this deque\n in proper sequence (from first to last element).\n\n \nThe returned array will be \"safe\" in that no references to it are\n maintained by this deque.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n \nThis method acts as bridge between array-based and collection-based\n APIs.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "T[]", "param_description": " the array into which the elements of the deque are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose"}], "class_name": "ArrayDeque", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the elements in this deque"], "return_type": ["T[]"]}, "method_name": "toArray", "method_description": "Returns an array containing all of the elements in this deque in\n proper sequence (from first to last element); the runtime type of the\n returned array is that of the specified array.  If the deque fits in\n the specified array, it is returned therein.  Otherwise, a new array\n is allocated with the runtime type of the specified array and the\n size of this deque.\n\n \nIf this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n null.\n\n \nLike the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n \nSuppose x is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of String:\n\n \n", "method_declar": ""}], "class_name": "ArrayDeque", "Vars": null}