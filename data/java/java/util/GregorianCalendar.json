{"package_name": "java.util", "subclass_list": [], "class_description": "GregorianCalendar is a concrete subclass of\n Calendar and provides the standard calendar system\n used by most of the world. GregorianCalendar is a hybrid calendar that\n supports both the Julian and Gregorian calendar systems with the\n support of a single discontinuity, which corresponds by default to\n the Gregorian date when the Gregorian calendar was instituted\n (October 15, 1582 in some countries, later in others).  The cutover\n date may be changed by the caller by calling setGregorianChange(). Historically, in those countries which adopted the Gregorian calendar first,\n October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models\n this correctly.  Before the Gregorian cutover, GregorianCalendar\n implements the Julian calendar.  The only difference between the Gregorian\n and the Julian calendar is the leap year rule. The Julian calendar specifies\n leap years every four years, whereas the Gregorian calendar omits century\n years which are not divisible by 400. GregorianCalendar implements proleptic Gregorian and\n Julian calendars. That is, dates are computed by extrapolating the current\n rules indefinitely far backward and forward in time. As a result,\n GregorianCalendar may be used for all years to generate\n meaningful and consistent results. However, dates obtained using\n GregorianCalendar are historically accurate only from March 1, 4\n AD onward, when modern Julian calendar rules were adopted.  Before this date,\n leap year rules were applied irregularly, and before 45 BC the Julian\n calendar did not even exist. Prior to the institution of the Gregorian calendar, New Year's Day was\n March 25. To avoid confusion, this calendar always uses January 1. A manual\n adjustment may be made if desired for dates that are prior to the Gregorian\n changeover and which fall between January 1 and March 24. Values calculated for the Calendar#WEEK_OF_YEAR field range from 1 to 53. The first week of a\n calendar year is the earliest seven day period starting on Calendar#getFirstDayOfWeek() that contains at\n least Calendar#getMinimalDaysInFirstWeek() days from that year. It thus depends\n on the values of getMinimalDaysInFirstWeek(), getFirstDayOfWeek(), and the day of the week of January 1. Weeks\n between week 1 of one year and week 1 of the following year\n (exclusive) are numbered sequentially from 2 to 52 or 53 (except\n for year(s) involved in the Julian-Gregorian transition). The getFirstDayOfWeek() and getMinimalDaysInFirstWeek() values are initialized using\n locale-dependent resources when constructing a GregorianCalendar. The week\n determination is compatible with the ISO 8601 standard when getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4, which values are used in locales\n where the standard is preferred. These values can explicitly be set by\n calling Calendar#setFirstDayOfWeek(int) and\n Calendar#setMinimalDaysInFirstWeek(int). A week year is in sync with a\n WEEK_OF_YEAR cycle. All weeks between the first and last\n weeks (inclusive) have the same week year value.\n Therefore, the first and last days of a week year may have\n different calendar year values. For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n setting), then week 1 of 1998 starts on December 29, 1997, and ends\n on January 4, 1998. The week year is 1998 for the last three days\n of calendar year 1997. If, however, getFirstDayOfWeek() is\n SUNDAY, then week 1 of 1998 starts on January 4, 1998, and\n ends on January 10, 1998; the first three days of 1998 then are\n part of week 53 of 1997 and their week year is 1997. Values calculated for the WEEK_OF_MONTH field range from 0\n to 6.  Week 1 of a month (the days with WEEK_OF_MONTH =\n 1) is the earliest set of at least\n getMinimalDaysInFirstWeek() contiguous days in that month,\n ending on the day before getFirstDayOfWeek().  Unlike\n week 1 of a year, week 1 of a month may be shorter than 7 days, need\n not start on getFirstDayOfWeek(), and will not include days of\n the previous month.  Days of a month before week 1 have a\n WEEK_OF_MONTH of 0. For example, if getFirstDayOfWeek() is SUNDAY\n and getMinimalDaysInFirstWeek() is 4, then the first week of\n January 1998 is Sunday, January 4 through Saturday, January 10.  These days\n have a WEEK_OF_MONTH of 1.  Thursday, January 1 through\n Saturday, January 3 have a WEEK_OF_MONTH of 0.  If\n getMinimalDaysInFirstWeek() is changed to 3, then January 1\n through January 3 have a WEEK_OF_MONTH of 1. The clear method sets calendar field(s)\n undefined. GregorianCalendar uses the following\n default value for each calendar field if its value is undefined. Example: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Calendar"], "Methods": [{"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a default GregorianCalendar using the current time\n in the default time zone with the default\n Locale.Category#FORMAT locale.\n", "method_declar": ""}, {"params": [{"param_name": ["zone"], "param_type": "TimeZone", "param_description": " the given time zone."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a GregorianCalendar based on the current time\n in the given time zone with the default\n Locale.Category#FORMAT locale.\n", "method_declar": ""}, {"params": [{"param_name": ["aLocale"], "param_type": "Locale", "param_description": " the given locale."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a GregorianCalendar based on the current time\n in the default time zone with the given locale.\n", "method_declar": ""}, {"params": [{"param_name": ["zone"], "param_type": "TimeZone", "param_description": " the given time zone."}, {"param_name": ["aLocale"], "param_type": "Locale", "param_description": " the given locale."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a GregorianCalendar based on the current time\n in the given time zone with the given locale.\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the value used to set the YEAR calendar field in the calendar."}, {"param_name": ["month"], "param_type": "int", "param_description": " the value used to set the MONTH calendar field in the calendar.\n Month value is 0-based. e.g., 0 for January."}, {"param_name": ["dayOfMonth"], "param_type": "int", "param_description": " the value used to set the DAY_OF_MONTH calendar field in the calendar."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a GregorianCalendar with the given date set\n in the default time zone with the default locale.\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the value used to set the YEAR calendar field in the calendar."}, {"param_name": ["month"], "param_type": "int", "param_description": " the value used to set the MONTH calendar field in the calendar.\n Month value is 0-based. e.g., 0 for January."}, {"param_name": ["dayOfMonth"], "param_type": "int", "param_description": " the value used to set the DAY_OF_MONTH calendar field in the calendar."}, {"param_name": ["hourOfDay"], "param_type": "int", "param_description": " the value used to set the HOUR_OF_DAY calendar field\n in the calendar."}, {"param_name": ["minute"], "param_type": "int", "param_description": " the value used to set the MINUTE calendar field\n in the calendar."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a GregorianCalendar with the given date\n and time set for the default time zone with the default locale.\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the value used to set the YEAR calendar field in the calendar."}, {"param_name": ["month"], "param_type": "int", "param_description": " the value used to set the MONTH calendar field in the calendar.\n Month value is 0-based. e.g., 0 for January."}, {"param_name": ["dayOfMonth"], "param_type": "int", "param_description": " the value used to set the DAY_OF_MONTH calendar field in the calendar."}, {"param_name": ["hourOfDay"], "param_type": "int", "param_description": " the value used to set the HOUR_OF_DAY calendar field\n in the calendar."}, {"param_name": ["minute"], "param_type": "int", "param_description": " the value used to set the MINUTE calendar field\n in the calendar."}, {"param_name": ["second"], "param_type": "int", "param_description": " the value used to set the SECOND calendar field\n in the calendar."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a GregorianCalendar with the given date\n and time set for the default time zone with the default locale.\n", "method_declar": ""}, {"params": [{"param_name": ["field"], "param_type": "int", "param_description": " the calendar field."}, {"param_name": ["amount"], "param_type": "int", "param_description": " the amount of date or time to be added to the field."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "add", "method_description": "Adds the specified (signed) amount of time to the given calendar field,\n based on the calendar's rules.\n\n \nAdd rule 1. The value of field\n after the call minus the value of field before the\n call is amount, modulo any overflow that has occurred in\n field. Overflow occurs when a field value exceeds its\n range and, as a result, the next larger field is incremented or\n decremented and the field value is adjusted back into its range.\nAdd rule 2. If a smaller field is expected to be\n invariant, but it is impossible for it to be equal to its\n prior value because of changes in its minimum or maximum after\n field is changed, then its value is adjusted to be as close\n as possible to its expected value. A smaller field represents a\n smaller unit of time. HOUR is a smaller field than\n DAY_OF_MONTH. No adjustment is made to smaller fields\n that are not expected to be invariant. The calendar system\n determines what fields are expected to be invariant.\n", "method_declar": ""}, {"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["a copy of this object."], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Creates and returns a copy of this object.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to compare with."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this object is equal to obj;\n false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares this GregorianCalendar to the specified\n Object. The result is true if and\n only if the argument is a GregorianCalendar object\n that represents the same time value (millisecond offset from\n the Epoch) under the same\n Calendar parameters and Gregorian change date as\n this object.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["zdt"], "param_type": "ZonedDateTime", "param_description": " the zoned date-time object to convert"}], "class_name": "GregorianCalendar", "is_static": true, "return_value": {"return_name": [], "return_description": ["the gregorian calendar representing the same point on the\n  time-line as the zoned date-time provided"], "return_type": ["GregorianCalendar"]}, "method_name": "from", "method_description": "Obtains an instance of GregorianCalendar with the default locale\n from a ZonedDateTime object.\n \n\n Since ZonedDateTime does not support a Julian-Gregorian cutover\n date and uses ISO calendar system, the return GregorianCalendar is a pure\n Gregorian calendar and uses ISO 8601 standard for week definitions,\n which has MONDAY as the Calendar#getFirstDayOfWeek() and 4 as the value of the\n Calendar#getMinimalDaysInFirstWeek().\n \n\nZoneDateTime can store points on the time-line further in the\n future and further in the past than GregorianCalendar. In this\n scenario, this method will throw an IllegalArgumentException\n exception.\n", "method_declar": ""}, {"params": [{"param_name": ["field"], "param_type": "int", "param_description": " the calendar field"}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the maximum of the given field for the time value of\n this GregorianCalendar"], "return_type": ["int"]}, "method_name": "getActualMaximum", "method_description": "Returns the maximum value that this calendar field could have,\n taking into consideration the given time value and the current\n values of the\n Calendar#getFirstDayOfWeek(),\n Calendar#getMinimalDaysInFirstWeek(),\n getGregorianChange and\n Calendar#getTimeZone() methods.\n For example, if the date of this instance is February 1, 2004,\n the actual maximum value of the DAY_OF_MONTH field\n is 29 because 2004 is a leap year, and if the date of this\n instance is February 1, 2005, it's 28.\n\n \nThis method calculates the maximum value of Calendar#WEEK_OF_YEAR based on the Calendar#YEAR (calendar year) value, not the week year. Call getWeeksInWeekYear() to get the maximum value of WEEK_OF_YEAR in the week year of this GregorianCalendar.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["field"], "param_type": "int", "param_description": " the calendar field"}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the minimum of the given field for the time value of\n this GregorianCalendar"], "return_type": ["int"]}, "method_name": "getActualMinimum", "method_description": "Returns the minimum value that this calendar field could have,\n taking into consideration the given time value and the current\n values of the\n Calendar#getFirstDayOfWeek(),\n Calendar#getMinimalDaysInFirstWeek(),\n getGregorianChange and\n Calendar#getTimeZone() methods.\n\n \nFor example, if the Gregorian change date is January 10,\n 1970 and the date of this GregorianCalendar is\n January 20, 1970, the actual minimum value of the\n DAY_OF_MONTH field is 10 because the previous date\n of January 10, 1970 is December 27, 1996 (in the Julian\n calendar). Therefore, December 28, 1969 to January 9, 1970\n don't exist.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["\"gregory\""], "return_type": ["String"]}, "method_name": "getCalendarType", "method_description": "Returns \"gregory\" as the calendar type.\n", "method_declar": ""}, {"params": [{"param_name": ["field"], "param_type": "int", "param_description": " the calendar field."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the highest minimum value for the given calendar field."], "return_type": ["int"]}, "method_name": "getGreatestMinimum", "method_description": "Returns the highest minimum value for the given calendar field\n of this GregorianCalendar instance. The highest\n minimum value is defined as the largest value returned by\n getActualMinimum(int) for any possible time value,\n taking into consideration the current values of the\n Calendar#getFirstDayOfWeek(),\n Calendar#getMinimalDaysInFirstWeek(),\n getGregorianChange and\n Calendar#getTimeZone() methods.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Gregorian cutover date for this GregorianCalendar object."], "return_type": ["Date"]}, "method_name": "getGregorianChange", "method_description": "Gets the Gregorian Calendar change date.  This is the point when the\n switch from Julian dates to Gregorian dates occurred. Default is\n October 15, 1582 (Gregorian). Previous to this, dates will be in the Julian\n calendar.\n", "method_declar": ""}, {"params": [{"param_name": ["field"], "param_type": "int", "param_description": " the calendar field"}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the lowest maximum value for the given calendar field."], "return_type": ["int"]}, "method_name": "getLeastMaximum", "method_description": "Returns the lowest maximum value for the given calendar field\n of this GregorianCalendar instance. The lowest\n maximum value is defined as the smallest value returned by\n getActualMaximum(int) for any possible time value,\n taking into consideration the current values of the\n Calendar#getFirstDayOfWeek(),\n Calendar#getMinimalDaysInFirstWeek(),\n getGregorianChange and\n Calendar#getTimeZone() methods.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["field"], "param_type": "int", "param_description": " the calendar field."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the maximum value for the given calendar field."], "return_type": ["int"]}, "method_name": "getMaximum", "method_description": "Returns the maximum value for the given calendar field of this\n GregorianCalendar instance. The maximum value is\n defined as the largest value returned by the Calendar#get(int) method for any possible time value,\n taking into consideration the current values of the\n Calendar#getFirstDayOfWeek(),\n Calendar#getMinimalDaysInFirstWeek(),\n getGregorianChange and\n Calendar#getTimeZone() methods.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["field"], "param_type": "int", "param_description": " the calendar field."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the minimum value for the given calendar field."], "return_type": ["int"]}, "method_name": "getMinimum", "method_description": "Returns the minimum value for the given calendar field of this\n GregorianCalendar instance. The minimum value is\n defined as the smallest value returned by the Calendar#get(int) method for any possible time value,\n taking into consideration the current values of the\n Calendar#getFirstDayOfWeek(),\n Calendar#getMinimalDaysInFirstWeek(),\n getGregorianChange and\n Calendar#getTimeZone() methods.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the time zone object associated with this calendar."], "return_type": ["TimeZone"]}, "method_name": "getTimeZone", "method_description": "Gets the time zone.\n", "method_declar": ""}, {"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the week year represented by this GregorianCalendar.\n         If the Calendar#ERA value is BC, the year is\n         represented by 0 or a negative number: BC 1 is 0, BC 2\n         is -1, BC 3 is -2, and so on."], "return_type": ["int"]}, "method_name": "getWeekYear", "method_description": "Returns the week year represented by this\n GregorianCalendar. The dates in the weeks between 1 and the\n maximum week number of the week year have the same week year value\n that may be one year before or after the Calendar#YEAR\n (calendar year) value.\n\n \nThis method calls Calendar#complete() before\n calculating the week year.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of weeks in the week year."], "return_type": ["int"]}, "method_name": "getWeeksInWeekYear", "method_description": "Returns the number of weeks in the week year\n represented by this GregorianCalendar.\n\n \nFor example, if this GregorianCalendar's date is\n December 31, 2008 with the ISO\n 8601 compatible setting, this method will return 53 for the\n period: December 29, 2008 to January 3, 2010 while getActualMaximum(WEEK_OF_YEAR) will return\n 52 for the period: December 31, 2007 to December 28, 2008.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Generates the hash code for this GregorianCalendar object.\n", "method_declar": ""}, {"params": [{"param_name": ["year"], "param_type": "int", "param_description": " the given year."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the given year is a leap year; false otherwise."], "return_type": ["boolean"]}, "method_name": "isLeapYear", "method_description": "Determines if the given year is a leap year. Returns true if\n the given year is a leap year. To specify BC year numbers,\n 1 - year number must be given. For example, year BC 4 is\n specified as -3.\n", "method_declar": ""}, {"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["true (always)"], "return_type": ["boolean"]}, "method_name": "isWeekDateSupported", "method_description": "Returns true indicating this GregorianCalendar\n supports week dates.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["field"], "param_type": "int", "param_description": " the time field."}, {"param_name": ["up"], "param_type": "boolean", "param_description": " indicates if the value of the specified calendar field is to be\n rolled up or rolled down. Use true if rolling up, false otherwise."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "roll", "method_description": "Adds or subtracts (up/down) a single unit of time on the given time\n field without changing larger fields.\n \n\nExample: Consider a GregorianCalendar\n originally set to December 31, 1999. Calling roll(Calendar.MONTH, true)\n sets the calendar to January 31, 1999.  The YEAR field is unchanged\n because it is a larger field than MONTH.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["field"], "param_type": "int", "param_description": " the calendar field."}, {"param_name": ["amount"], "param_type": "int", "param_description": " the signed amount to add to field."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "roll", "method_description": "Adds a signed amount to the specified calendar field without changing larger fields.\n A negative roll amount means to subtract from field without changing\n larger fields. If the specified amount is 0, this method performs nothing.\n\n \nThis method calls Calendar.complete() before adding the\n amount so that all the calendar fields are normalized. If there\n is any calendar field having an out-of-range value in non-lenient mode, then an\n IllegalArgumentException is thrown.\n\n \n\nExample: Consider a GregorianCalendar\n originally set to August 31, 1999. Calling roll(Calendar.MONTH,\n 8) sets the calendar to April 30, 1999. Using a\n GregorianCalendar, the DAY_OF_MONTH field cannot\n be 31 in the month April. DAY_OF_MONTH is set to the closest possible\n value, 30. The YEAR field maintains the value of 1999 because it\n is a larger field than MONTH.\n \n\nExample: Consider a GregorianCalendar\n originally set to Sunday June 6, 1999. Calling\n roll(Calendar.WEEK_OF_MONTH, -1) sets the calendar to\n Tuesday June 1, 1999, whereas calling\n add(Calendar.WEEK_OF_MONTH, -1) sets the calendar to\n Sunday May 30, 1999. This is because the roll rule imposes an\n additional constraint: The MONTH must not change when the\n WEEK_OF_MONTH is rolled. Taken together with add rule 1,\n the resultant date must be between Tuesday June 1 and Saturday June\n 5. According to add rule 2, the DAY_OF_WEEK, an invariant\n when changing the WEEK_OF_MONTH, is set to Tuesday, the\n closest possible value to Sunday (where Sunday is the first day of the\n week).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["date"], "param_type": "Date", "param_description": " the given Gregorian cutover date."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setGregorianChange", "method_description": "Sets the GregorianCalendar change date. This is the point when the switch\n from Julian dates to Gregorian dates occurred. Default is October 15,\n 1582 (Gregorian). Previous to this, dates will be in the Julian calendar.\n \n\n To obtain a pure Julian calendar, set the change date to\n Date(Long.MAX_VALUE).  To obtain a pure Gregorian calendar,\n set the change date to Date(Long.MIN_VALUE).\n", "method_declar": ""}, {"params": [{"param_name": ["zone"], "param_type": "TimeZone", "param_description": " the given time zone."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTimeZone", "method_description": "Sets the time zone with the given time zone value.\n", "method_declar": ""}, {"params": [{"param_name": ["weekYear"], "param_type": "int", "param_description": " the week year"}, {"param_name": ["weekOfYear"], "param_type": "int", "param_description": " the week number based on weekYear"}, {"param_name": ["dayOfWeek"], "param_type": "int", "param_description": " the day of week value: one of the constants\n                    for the DAY_OF_WEEK field:\n                    Calendar#SUNDAY, ...,\n                    Calendar#SATURDAY."}], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setWeekDate", "method_description": "Sets this GregorianCalendar to the date given by the\n date specifiers - weekYear,\n weekOfYear, and dayOfWeek. weekOfYear\n follows the WEEK_OF_YEAR\n numbering.  The dayOfWeek value must be one of the\n Calendar#DAY_OF_WEEK values: Calendar#SUNDAY to Calendar#SATURDAY.\n\n \nNote that the numeric day-of-week representation differs from\n the ISO 8601 standard, and that the weekOfYear\n numbering is compatible with the standard when getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4.\n\n \nUnlike the set method, all of the calendar fields\n and the instant of time value are calculated upon return.\n\n \nIf weekOfYear is out of the valid week-of-year\n range in weekYear, the weekYear\n and weekOfYear values are adjusted in lenient\n mode, or an IllegalArgumentException is thrown in\n non-lenient mode.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "GregorianCalendar", "is_static": false, "return_value": {"return_name": [], "return_description": ["a zoned date-time representing the same point on the time-line\n  as this gregorian calendar"], "return_type": ["ZonedDateTime"]}, "method_name": "toZonedDateTime", "method_description": "Converts this object to a ZonedDateTime that represents\n the same point on the time-line as this GregorianCalendar.\n \n\n Since this object supports a Julian-Gregorian cutover date and\n ZonedDateTime does not, it is possible that the resulting year,\n month and day will have different values.  The result will represent the\n correct date in the ISO calendar system, which will also be the same value\n for Modified Julian Days.\n", "method_declar": ""}], "class_name": "GregorianCalendar", "Vars": null}