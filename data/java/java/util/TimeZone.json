{"package_name": "java.util", "subclass_list": ["SimpleTimeZone", "SimpleTimeZone"], "class_description": "TimeZone represents a time zone offset, and also figures out daylight\n savings. Typically, you get a TimeZone using getDefault\n which creates a TimeZone based on the time zone where the program\n is running. For example, for a program running in Japan, getDefault\n creates a TimeZone object based on Japanese Standard Time. You can also get a TimeZone using getTimeZone\n along with a time zone ID. For instance, the time zone ID for the\n U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a\n U.S. Pacific Time TimeZone object with: The format is locale independent and digits must be taken from the\n Basic Latin block of the Unicode standard. No daylight saving time\n transition schedule can be specified with a custom time zone ID. If\n the specified string doesn't match the syntax, \"GMT\"\n is used. When creating a TimeZone, the specified custom time\n zone ID is normalized in the following syntax: ", "class_type": "class", "typealias": [], "interface_list": ["Serializable", "Cloneable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)\n", "method_declar": ""}, {"params": [], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of this TimeZone"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Creates a copy of this TimeZone.\n", "method_declar": ""}, {"params": [], "class_name": "TimeZone", "is_static": true, "return_value": {"return_name": [], "return_description": ["an array of IDs."], "return_type": ["String[]"]}, "method_name": "getAvailableIDs", "method_description": "Gets all the available IDs supported.\n", "method_declar": ""}, {"params": [{"param_name": ["rawOffset"], "param_type": "int", "param_description": " the given time zone GMT offset in milliseconds."}], "class_name": "TimeZone", "is_static": true, "return_value": {"return_name": [], "return_description": ["an array of IDs, where the time zone for that ID has\n the specified GMT offset. For example, \"America/Phoenix\" and \"America/Denver\"\n both have GMT-07:00, but differ in daylight saving behavior."], "return_type": ["String[]"]}, "method_name": "getAvailableIDs", "method_description": "Gets the available IDs according to the given time zone offset in milliseconds.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the amount of saving time in milliseconds"], "return_type": ["int"]}, "method_name": "getDSTSavings", "method_description": "Returns the amount of time to be added to local standard time\n to get local wall clock time.\n\n \nThe default implementation returns 3600000 milliseconds\n (i.e., one hour) if a call to useDaylightTime()\n returns true. Otherwise, 0 (zero) is returned.\n\n \nIf an underlying TimeZone implementation subclass\n supports historical and future Daylight Saving Time schedule\n changes, this method returns the amount of saving time of the\n last known Daylight Saving Time rule that can be a future\n prediction.\n\n \nIf the amount of saving time at any given time stamp is\n required, construct a Calendar with this TimeZone and the time stamp, and call Calendar#get(int)(Calendar#DST_OFFSET).\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "TimeZone", "is_static": true, "return_value": {"return_name": [], "return_description": ["a default TimeZone."], "return_type": ["TimeZone"]}, "method_name": "getDefault", "method_description": "Gets the default TimeZone for this host.\n The source of the default TimeZone\n may vary with implementation.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["daylightTime"], "param_type": "boolean", "param_description": " true for daylight time, false for standard time."}, {"param_name": ["style"], "param_type": "int", "param_description": " either TimeZone#LONG or TimeZone#SHORT."}, {"param_name": ["locale"], "param_type": "Locale", "param_description": " the display locale."}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["String"]}, "method_name": "getDisplayName", "method_description": "Returns the short or long name of this time\n zone with either standard or daylight time, as written in locale.\n If the name is not available, the result is in the format\n GMT[+-]hh:mm.\n", "method_declar": ""}, {"params": [{"param_name": ["locale"], "param_type": "Locale", "param_description": " the locale in which to supply the display name."}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the human-readable name of this time zone in the given locale."], "return_type": ["String"]}, "method_name": "getDisplayName", "method_description": "Returns a long standard time name of this TimeZone suitable for\n presentation to the user in the specified locale.\n\n \nThis method is equivalent to:\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["daylight"], "param_type": "boolean", "param_description": " true specifying a Daylight Saving Time name, or\n                 false specifying a Standard Time name"}, {"param_name": ["style"], "param_type": "int", "param_description": " either LONG or SHORT"}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the human-readable name of this time zone in the default locale."], "return_type": ["String"]}, "method_name": "getDisplayName", "method_description": "Returns a name in the specified style of this TimeZone\n suitable for presentation to the user in the default locale. If the\n specified daylight is true, a Daylight Saving Time name\n is returned (even if this TimeZone doesn't observe Daylight Saving\n Time). Otherwise, a Standard Time name is returned.\n\n \nThis method is equivalent to:\n \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the human-readable name of this time zone in the default locale."], "return_type": ["String"]}, "method_name": "getDisplayName", "method_description": "Returns a long standard time name of this TimeZone suitable for\n presentation to the user in the default locale.\n\n \nThis method is equivalent to:\n \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the ID of this time zone."], "return_type": ["String"]}, "method_name": "getID", "method_description": "Gets the ID of this time zone.\n", "method_declar": ""}, {"params": [{"param_name": ["date"], "param_type": "long", "param_description": " the date represented in milliseconds since January 1, 1970 00:00:00 GMT"}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["the amount of time in milliseconds to add to UTC to get local time."], "return_type": ["int"]}, "method_name": "getOffset", "method_description": "Returns the offset of this time zone from UTC at the specified\n date. If Daylight Saving Time is in effect at the specified\n date, the offset value is adjusted with the amount of daylight\n saving.\n \n\n This method returns a historically correct offset value if an\n underlying TimeZone implementation subclass supports historical\n Daylight Saving Time schedule and GMT offset changes.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["id"], "param_type": "String", "param_description": " the ID for a TimeZone, either an abbreviation\n such as \"PST\", a full name such as \"America/Los_Angeles\", or a custom\n ID such as \"GMT-8:00\". Note that the support of abbreviations is\n for JDK 1.1.x compatibility only and full names should be used."}], "class_name": "TimeZone", "is_static": true, "return_value": {"return_name": [], "return_description": ["the specified TimeZone, or the GMT zone if the given ID\n cannot be understood."], "return_type": ["TimeZone"]}, "method_name": "getTimeZone", "method_description": "Gets the TimeZone for the given ID.\n", "method_declar": ""}, {"params": [{"param_name": ["zoneId"], "param_type": "ZoneId", "param_description": " a ZoneId from which the time zone ID is obtained"}], "class_name": "TimeZone", "is_static": true, "return_value": {"return_name": [], "return_description": ["the specified TimeZone, or the GMT zone if the given ID\n         cannot be understood."], "return_type": ["TimeZone"]}, "method_name": "getTimeZone", "method_description": "Gets the TimeZone for the given zoneId.\n", "method_declar": ""}, {"params": [{"param_name": ["other"], "param_type": "TimeZone", "param_description": " the TimeZone object to be compared with"}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the other zone is not null and is the same as this one,\n with the possible exception of the ID"], "return_type": ["boolean"]}, "method_name": "hasSameRules", "method_description": "Returns true if this zone has the same rule and offset as another zone.\n That is, if this zone differs only in ID, if at all.  Returns false\n if the other zone is null.\n", "method_declar": ""}, {"params": [], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this TimeZone is currently in\n Daylight Saving Time, or if a transition from Standard Time to\n Daylight Saving Time occurs at any future time; false\n otherwise."], "return_type": ["boolean"]}, "method_name": "observesDaylightTime", "method_description": "Returns true if this TimeZone is currently in\n Daylight Saving Time, or if a transition from Standard Time to\n Daylight Saving Time occurs at any future time.\n\n \nThe default implementation returns true if\n useDaylightTime() or inDaylightTime(new Date())\n returns true.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["timeZone"], "param_type": "TimeZone", "param_description": " the new default TimeZone, or null"}], "class_name": "TimeZone", "is_static": true, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDefault", "method_description": "Sets the TimeZone that is returned by the getDefault\n method. timeZone is cached. If timeZone is null, the cached\n default TimeZone is cleared. This method doesn't change the value\n of the user.timezone property.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["ID"], "param_type": "String", "param_description": " the new time zone ID."}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setID", "method_description": "Sets the time zone ID. This does not change any other data in\n the time zone object.\n", "method_declar": ""}, {"params": [], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["a ZoneId representing the same time zone as this\n         TimeZone"], "return_type": ["ZoneId"]}, "method_name": "toZoneId", "method_description": "Converts this TimeZone object to a ZoneId.\n", "method_declar": ""}], "class_name": "TimeZone", "Vars": null}