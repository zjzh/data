{"package_name": "java.util", "subclass_list": ["ApplicationInfo.DisplayNameComparator", "Collator", "PackageItemInfo.DisplayNameComparator", "ResolveInfo.DisplayNameComparator", "RuleBasedCollator", "ApplicationInfo.DisplayNameComparator", "Collator", "PackageItemInfo.DisplayNameComparator", "ResolveInfo.DisplayNameComparator", "RuleBasedCollator"], "class_description": "A comparison function, which imposes a total ordering on some\n collection of objects.  Comparators can be passed to a sort method (such\n as Collections#sort(List,Comparator) or Arrays#sort(Object[],Comparator)) to allow precise control\n over the sort order.  Comparators can also be used to control the order of\n certain data structures (such as SortedSet or SortedMap), or to provide an ordering for collections of\n objects that don't have a Comparable. The ordering imposed by a comparator c on a set of elements\n S is said to be consistent with equals if and only if\n c.compare(e1, e2)==0 has the same boolean value as\n e1.equals(e2) for every e1 and e2 in\n S. Caution should be exercised when using a comparator capable of imposing an\n ordering inconsistent with equals to order a sorted set (or sorted map).\n Suppose a sorted set (or sorted map) with an explicit comparator c\n is used with elements (or keys) drawn from a set S.  If the\n ordering imposed by c on S is inconsistent with equals,\n the sorted set (or sorted map) will behave \"strangely.\"  In particular the\n sorted set (or sorted map) will violate the general contract for set (or\n map), which is defined in terms of equals. For example, suppose one adds two elements a and b such that\n (a.equals(b) && c.compare(a, b) != 0)\n to an empty TreeSet with comparator c.\n The second add operation will return\n true (and the size of the tree set will increase) because a and\n b are not equivalent from the tree set's perspective, even though\n this is contrary to the specification of the\n Set#add method. Note: It is generally a good idea for comparators to also implement\n java.io.Serializable, as they may be used as ordering methods in\n serializable data structures (like TreeSet, TreeMap).  In\n order for the data structure to serialize successfully, the comparator (if\n provided) must implement Serializable. For the mathematically inclined, the relation that defines the\n imposed ordering that a given comparator c imposes on a\n given set of objects S is: Unlike Comparable, a comparator may optionally permit\n comparison of null arguments, while maintaining the requirements for\n an equivalence relation. This interface is a member of the\n \n Java Collections Framework. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "Comparator", "Vars": null}