{"package_name": "java.util", "subclass_list": ["ContentQueryMap", "ContentQueryMap"], "class_description": "This class represents an observable object, or \"data\"\n in the model-view paradigm. It can be subclassed to represent an\n object that the application wants to have observed. An observable object can have one or more observers. An observer\n may be any object that implements interface Observer. After an\n observable instance changes, an application calling the\n Observable's notifyObservers method\n causes all of its observers to be notified of the change by a call\n to their update method. The order in which notifications will be delivered is unspecified.\n The default implementation provided in the Observable class will\n notify Observers in the order in which they registered interest, but\n subclasses may change this order, use no guaranteed order, deliver\n notifications on separate threads, or may guarantee that their\n subclass follows this order, as they choose. Note that this notification mechanism has nothing to do with threads\n and is completely separate from the wait and notify\n mechanism of class Object. When an observable object is newly created, its set of observers is\n empty. Two observers are considered the same if and only if the\n equals method returns true for them. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Observable", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct an Observable with zero Observers.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Observer", "param_description": " an observer to be added."}], "class_name": "Observable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addObserver", "method_description": "Adds an observer to the set of observers for this object, provided\n that it is not the same as some observer already in the set.\n The order in which notifications will be delivered to multiple\n observers is not specified. See the class comment.\n", "method_declar": ""}, {"params": [], "class_name": "Observable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of observers of this object."], "return_type": ["int"]}, "method_name": "countObservers", "method_description": "Returns the number of observers of this Observable object.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Observer", "param_description": " the observer to be deleted."}], "class_name": "Observable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "deleteObserver", "method_description": "Deletes an observer from the set of observers of this object.\n Passing null to this method will have no effect.\n", "method_declar": ""}, {"params": [], "class_name": "Observable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "deleteObservers", "method_description": "Clears the observer list so that this object no longer has any observers.\n", "method_declar": ""}, {"params": [], "class_name": "Observable", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if the setChanged\n          method has been called more recently than the\n          clearChanged method on this object;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "hasChanged", "method_description": "Tests if this object has changed.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["arg"], "param_type": "Object", "param_description": " any object."}], "class_name": "Observable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "notifyObservers", "method_description": "If this object has changed, as indicated by the\n hasChanged method, then notify all of its observers\n and then call the clearChanged method to indicate\n that this object has no longer changed.\n \n\n Each observer has its update method called with two\n arguments: this observable object and the arg argument.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Observable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "notifyObservers", "method_description": "If this object has changed, as indicated by the\n hasChanged method, then notify all of its observers\n and then call the clearChanged method to\n indicate that this object has no longer changed.\n \n\n Each observer has its update method called with two\n arguments: this observable object and null. In other\n words, this method is equivalent to:\n \nSee also:\n", "method_declar": ""}], "class_name": "Observable", "Vars": null}