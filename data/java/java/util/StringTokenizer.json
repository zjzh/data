{"package_name": "java.util", "subclass_list": [], "class_description": "The string tokenizer class allows an application to break a\n string into tokens. The tokenization method is much simpler than\n the one used by the StreamTokenizer class. The\n StringTokenizer methods do not distinguish among\n identifiers, numbers, and quoted strings, nor do they recognize\n and skip comments. The set of delimiters (the characters that separate tokens) may\n be specified either at creation time or on a per-token basis. An instance of StringTokenizer behaves in one of two\n ways, depending on whether it was created with the\n returnDelims flag having the value true\n or false: A StringTokenizer object internally maintains a current\n position within the string to be tokenized. Some operations advance this\n current position past the characters processed. A token is returned by taking a substring of the string that was used to\n create the StringTokenizer object. The following is one example of the use of the tokenizer. The code: prints the following output: StringTokenizer is a legacy class that is retained for\n compatibility reasons although its use is discouraged in new code. It is\n recommended that anyone seeking this functionality use the split\n method of String or the java.util.regex package instead. The following example illustrates how the String.split\n method can be used to break up a string into its basic tokens: prints the following output: ", "class_type": "class", "typealias": [], "interface_list": ["Enumeration<Object>"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["str"], "param_type": "String", "param_description": " a string to be parsed."}, {"param_name": ["delim"], "param_type": "String", "param_description": " the delimiters."}, {"param_name": ["returnDelims"], "param_type": "boolean", "param_description": " flag indicating whether to return the delimiters\n                         as tokens."}], "class_name": "StringTokenizer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string tokenizer for the specified string. All\n characters in the delim argument are the delimiters\n for separating tokens.\n \n\n If the returnDelims flag is true, then\n the delimiter characters are also returned as tokens. Each\n delimiter is returned as a string of length one. If the flag is\n false, the delimiter characters are skipped and only\n serve as separators between tokens.\n \n\n Note that if delim is null, this constructor does\n not throw an exception. However, trying to invoke other methods on the\n resulting StringTokenizer may result in a\n NullPointerException.\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": " a string to be parsed."}, {"param_name": ["delim"], "param_type": "String", "param_description": " the delimiters."}], "class_name": "StringTokenizer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string tokenizer for the specified string. The\n characters in the delim argument are the delimiters\n for separating tokens. Delimiter characters themselves will not\n be treated as tokens.\n \n\n Note that if delim is null, this constructor does\n not throw an exception. However, trying to invoke other methods on the\n resulting StringTokenizer may result in a\n NullPointerException.\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": " a string to be parsed."}], "class_name": "StringTokenizer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string tokenizer for the specified string. The\n tokenizer uses the default delimiter set, which is\n \"\u00a0\\t\\n\\r\\f\": the space character,\n the tab character, the newline character, the carriage-return character,\n and the form-feed character. Delimiter characters themselves will\n not be treated as tokens.\n", "method_declar": ""}, {"params": [], "class_name": "StringTokenizer", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of tokens remaining in the string using the current\n          delimiter set."], "return_type": ["int"]}, "method_name": "countTokens", "method_description": "Calculates the number of times that this tokenizer's\n nextToken method can be called before it generates an\n exception. The current position is not advanced.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "StringTokenizer", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if there are more tokens;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "hasMoreElements", "method_description": "Returns the same value as the hasMoreTokens\n method. It exists so that this class can implement the\n Enumeration interface.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "StringTokenizer", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if there is at least one token\n          in the string after the current position; false\n          otherwise."], "return_type": ["boolean"]}, "method_name": "hasMoreTokens", "method_description": "Tests if there are more tokens available from this tokenizer's string.\n If this method returns true, then a subsequent call to\n nextToken with no argument will successfully return a token.\n", "method_declar": ""}, {"params": [], "class_name": "StringTokenizer", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next token in the string."], "return_type": ["Object"]}, "method_name": "nextElement", "method_description": "Returns the same value as the nextToken method,\n except that its declared return value is Object rather than\n String. It exists so that this class can implement the\n Enumeration interface.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["delim"], "param_type": "String", "param_description": " the new delimiters."}], "class_name": "StringTokenizer", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next token, after switching to the new delimiter set."], "return_type": ["String"]}, "method_name": "nextToken", "method_description": "Returns the next token in this string tokenizer's string. First,\n the set of characters considered to be delimiters by this\n StringTokenizer object is changed to be the characters in\n the string delim. Then the next token in the string\n after the current position is returned. The current position is\n advanced beyond the recognized token.  The new delimiter set\n remains the default after this call.\n", "method_declar": ""}, {"params": [], "class_name": "StringTokenizer", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next token from this string tokenizer."], "return_type": ["String"]}, "method_name": "nextToken", "method_description": "Returns the next token from this string tokenizer.\n", "method_declar": ""}], "class_name": "StringTokenizer", "Vars": null}