{"package_name": "java.util", "subclass_list": [], "class_description": "A Red-Black tree based NavigableMap implementation.\n The map is sorted according to the Comparable of its keys, or by a Comparator provided at map\n creation time, depending on which constructor is used. This implementation provides guaranteed log(n) time cost for the\n containsKey, get, put and remove\n operations.  Algorithms are adaptations of those in Cormen, Leiserson, and\n Rivest's Introduction to Algorithms. Note that the ordering maintained by a tree map, like any sorted map, and\n whether or not an explicit comparator is provided, must be consistent\n with equals if this sorted map is to correctly implement the\n Map interface.  (See Comparable or Comparator for a\n precise definition of consistent with equals.)  This is so because\n the Map interface is defined in terms of the equals\n operation, but a sorted map performs all key comparisons using its compareTo (or compare) method, so two keys that are deemed equal by\n this method are, from the standpoint of the sorted map, equal.  The behavior\n of a sorted map is well-defined even if its ordering is\n inconsistent with equals; it just fails to obey the general contract\n of the Map interface. Note that this implementation is not synchronized.\n If multiple threads access a map concurrently, and at least one of the\n threads modifies the map structurally, it must be synchronized\n externally.  (A structural modification is any operation that adds or\n deletes one or more mappings; merely changing the value associated\n with an existing key is not a structural modification.)  This is\n typically accomplished by synchronizing on some object that naturally\n encapsulates the map.\n If no such object exists, the map should be \"wrapped\" using the\n Collections#synchronizedSortedMap\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map: The iterators returned by the iterator method of the collections\n returned by all of this class's \"collection view methods\" are\n fail-fast: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator's own\n remove method, the iterator will throw a ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   the fail-fast behavior of iterators\n should be used only to detect bugs. All Map.Entry pairs returned by methods in this class\n and its views represent snapshots of mappings at the time they were\n produced. They do not support the Entry.setValue\n method. (Note however that it is possible to change mappings in the\n associated map using put.) This class is a member of the\n \n Java Collections Framework. ", "class_type": "class", "typealias": [], "interface_list": ["NavigableMap<K", "\u00a0V>", "Cloneable", "Serializable"], "class_inherit_list": ["AbstractMap<K,\u00a0V>"], "Methods": [{"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty tree map, using the natural ordering of its\n keys.  All keys inserted into the map must implement the Comparable interface.  Furthermore, all such keys must be\n mutually comparable: k1.compareTo(k2) must not throw\n a ClassCastException for any keys k1 and\n k2 in the map.  If the user attempts to put a key into the\n map that violates this constraint (for example, the user attempts to\n put a string key into a map whose keys are integers), the\n put(Object key, Object value) call will throw a\n ClassCastException.\n", "method_declar": ""}, {"params": [{"param_name": ["comparator"], "param_type": "Comparator", "param_description": " the comparator that will be used to order this map.\n        If null, the Comparable of the keys will be used."}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty tree map, ordered according to the given\n comparator.  All keys inserted into the map must be mutually\n comparable by the given comparator: comparator.compare(k1,\n k2) must not throw a ClassCastException for any keys\n k1 and k2 in the map.  If the user attempts to put\n a key into the map that violates this constraint, the put(Object\n key, Object value) call will throw a\n ClassCastException.\n", "method_declar": ""}, {"params": [{"param_name": ["m"], "param_type": "Map", "param_description": " the map whose mappings are to be placed in this map"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new tree map containing the same mappings as the given\n map, ordered according to the natural ordering of its keys.\n All keys inserted into the new map must implement the Comparable interface.  Furthermore, all such keys must be\n mutually comparable: k1.compareTo(k2) must not throw\n a ClassCastException for any keys k1 and\n k2 in the map.  This method runs in n*log(n) time.\n", "method_declar": ""}, {"params": [{"param_name": ["m"], "param_type": "SortedMap", "param_description": " the sorted map whose mappings are to be placed in this map,\n         and whose comparator is to be used to sort this map"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new tree map containing the same mappings and\n using the same ordering as the specified sorted map.  This\n method runs in linear time.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the least key greater than or equal to\n         key, or null if there is no such key"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "ceilingEntry", "method_description": "Returns a key-value mapping associated with the least key\n greater than or equal to the given key, or null if\n there is no such key.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the least key greater than or equal to key,\n         or null if there is no such key"], "return_type": ["K"]}, "method_name": "ceilingKey", "method_description": "Returns the least key greater than or equal to the given key,\n or null if there is no such key.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the mappings from this map.\n The map will be empty after this call returns.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a shallow copy of this map"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Returns a shallow copy of this TreeMap instance. (The keys and\n values themselves are not cloned.)\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the comparator used to order the keys in this map,\n         or null if this map uses the natural ordering\n         of its keys"], "return_type": ["Comparator<?\u00a0super\u00a0K>"]}, "method_name": "comparator", "method_description": "Returns the comparator used to order the keys in this map, or\n null if this map uses the Comparable of its keys.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " key whose presence in this map is to be tested"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this map contains a mapping for the\n         specified key"], "return_type": ["boolean"]}, "method_name": "containsKey", "method_description": "Returns true if this map contains a mapping for the specified\n key.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "Object", "param_description": " value whose presence in this map is to be tested"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if a mapping to value exists;\n         false otherwise"], "return_type": ["boolean"]}, "method_name": "containsValue", "method_description": "Returns true if this map maps one or more keys to the\n specified value.  More formally, returns true if and only if\n this map contains at least one mapping to a value v such\n that (value==null ? v==null : value.equals(v)).  This\n operation will probably require time linear in the map size for\n most implementations.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reverse order navigable set view of the keys in this map"], "return_type": ["NavigableSet<K>"]}, "method_name": "descendingKeySet", "method_description": "Returns a reverse order NavigableSet view of the keys contained in this map.\n The set's iterator returns the keys in descending order.\n The set is backed by the map, so changes to the map are reflected in\n the set, and vice-versa.  If the map is modified while an iteration\n over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined.  The\n set supports element removal, which removes the corresponding mapping\n from the map, via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear operations.\n It does not support the add or addAll operations.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reverse order view of this map"], "return_type": ["NavigableMap<K,\u00a0V>"]}, "method_name": "descendingMap", "method_description": "Returns a reverse order view of the mappings contained in this map.\n The descending map is backed by this map, so changes to the map are\n reflected in the descending map, and vice-versa.  If either map is\n modified while an iteration over a collection view of either map\n is in progress (except through the iterator's own remove\n operation), the results of the iteration are undefined.\n\n \nThe returned map has an ordering equivalent to\n Collections#reverseOrder(Comparator)(comparator()).\n The expression m.descendingMap().descendingMap() returns a\n view of m essentially equivalent to m.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a set view of the mappings contained in this map"], "return_type": ["Set<Entry<K,\u00a0V>>"]}, "method_name": "entrySet", "method_description": "Returns a Set view of the mappings contained in this map.\n\n \nThe set's iterator returns the entries in ascending key order. The\n sets's spliterator is\n late-binding,\n fail-fast, and additionally reports Spliterator#SORTED and\n Spliterator#ORDERED with an encounter order that is ascending key\n order.\n\n \nThe set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation, or through the\n setValue operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Set.remove, removeAll, retainAll and\n clear operations.  It does not support the\n add or addAll operations.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the least key,\n         or null if this map is empty"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "firstEntry", "method_description": "Returns a key-value mapping associated with the least\n key in this map, or null if the map is empty.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the first (lowest) key currently in this map"], "return_type": ["K"]}, "method_name": "firstKey", "method_description": "Returns the first (lowest) key currently in this map.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the greatest key less than or equal to\n         key, or null if there is no such key"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "floorEntry", "method_description": "Returns a key-value mapping associated with the greatest key\n less than or equal to the given key, or null if there\n is no such key.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the greatest key less than or equal to key,\n         or null if there is no such key"], "return_type": ["K"]}, "method_name": "floorKey", "method_description": "Returns the greatest key less than or equal to the given key,\n or null if there is no such key.\n", "method_declar": ""}, {"params": [{"param_name": ["action"], "param_type": "BiConsumer", "param_description": " The action to be performed for each entry"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "forEach", "method_description": "Performs the given action for each entry in this map until all entries\n have been processed or the action throws an exception.   Unless\n otherwise specified by the implementing class, actions are performed in\n the order of entry set iteration (if an iteration order is specified.)\n Exceptions thrown by the action are relayed to the caller.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key whose associated value is to be returned"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value to which the specified key is mapped, or\n         null if this map contains no mapping for the key"], "return_type": ["V"]}, "method_name": "get", "method_description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n \nMore formally, if this map contains a mapping from a key\n k to a value v such that key compares\n equal to k according to the map's ordering, then this\n method returns v; otherwise it returns null.\n (There can be at most one such mapping.)\n\n \nA return value of null does not necessarily\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to null.\n The containsKey operation may be used to\n distinguish these two cases.\n", "method_declar": ""}, {"params": [{"param_name": ["toKey"], "param_type": "K", "param_description": " high endpoint (exclusive) of the keys in the returned map"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys are strictly\n         less than toKey"], "return_type": ["SortedMap<K,\u00a0V>"]}, "method_name": "headMap", "method_description": "Returns a view of the portion of this map whose keys are\n strictly less than toKey.  The returned map is backed\n by this map, so changes in the returned map are reflected in\n this map, and vice-versa.  The returned map supports all\n optional map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n\n \nEquivalent to headMap(toKey, false).\n", "method_declar": ""}, {"params": [{"param_name": ["toKey"], "param_type": "K", "param_description": " high endpoint of the keys in the returned map"}, {"param_name": ["inclusive"], "param_type": "boolean", "param_description": " true if the high endpoint\n        is to be included in the returned view"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys are less than\n         (or equal to, if inclusive is true) toKey"], "return_type": ["NavigableMap<K,\u00a0V>"]}, "method_name": "headMap", "method_description": "Returns a view of the portion of this map whose keys are less than (or\n equal to, if inclusive is true) toKey.  The returned\n map is backed by this map, so changes in the returned map are reflected\n in this map, and vice-versa.  The returned map supports all optional\n map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the least key greater than key,\n         or null if there is no such key"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "higherEntry", "method_description": "Returns a key-value mapping associated with the least key\n strictly greater than the given key, or null if there\n is no such key.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the least key greater than key,\n         or null if there is no such key"], "return_type": ["K"]}, "method_name": "higherKey", "method_description": "Returns the least key strictly greater than the given key, or\n null if there is no such key.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a set view of the keys contained in this map"], "return_type": ["Set<K>"]}, "method_name": "keySet", "method_description": "Returns a Set view of the keys contained in this map.\n\n \nThe set's iterator returns the keys in ascending order.\n The set's spliterator is\n late-binding,\n fail-fast, and additionally reports Spliterator#SORTED\n and Spliterator#ORDERED with an encounter order that is ascending\n key order.  The spliterator's comparator (see\n Spliterator.getComparator()) is null if\n the tree map's comparator (see comparator()) is null.\n Otherwise, the spliterator's comparator is the same as or imposes the\n same total ordering as the tree map's comparator.\n\n \nThe set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the greatest key,\n         or null if this map is empty"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "lastEntry", "method_description": "Returns a key-value mapping associated with the greatest\n key in this map, or null if the map is empty.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the last (highest) key currently in this map"], "return_type": ["K"]}, "method_name": "lastKey", "method_description": "Returns the last (highest) key currently in this map.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["an entry with the greatest key less than key,\n         or null if there is no such key"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "lowerEntry", "method_description": "Returns a key-value mapping associated with the greatest key\n strictly less than the given key, or null if there is\n no such key.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the greatest key less than key,\n         or null if there is no such key"], "return_type": ["K"]}, "method_name": "lowerKey", "method_description": "Returns the greatest key strictly less than the given key, or\n null if there is no such key.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a navigable set view of the keys in this map"], "return_type": ["NavigableSet<K>"]}, "method_name": "navigableKeySet", "method_description": "Returns a NavigableSet view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are reflected in\n the set, and vice-versa.  If the map is modified while an iteration\n over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined.  The\n set supports element removal, which removes the corresponding mapping\n from the map, via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear operations.\n It does not support the add or addAll operations.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the removed first entry of this map,\n         or null if this map is empty"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "pollFirstEntry", "method_description": "Removes and returns a key-value mapping associated with\n the least key in this map, or null if the map is empty.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the removed last entry of this map,\n         or null if this map is empty"], "return_type": ["Entry<K,\u00a0V>"]}, "method_name": "pollLastEntry", "method_description": "Removes and returns a key-value mapping associated with\n the greatest key in this map, or null if the map is empty.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with key, or\n         null if there was no mapping for key.\n         (A null return can also indicate that the map\n         previously associated null with key.)"], "return_type": ["V"]}, "method_name": "put", "method_description": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced.\n", "method_declar": ""}, {"params": [{"param_name": ["map"], "param_type": "Map", "param_description": " mappings to be stored in this map"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "putAll", "method_description": "Copies all of the mappings from the specified map to this map.\n These mappings replace any mappings that this map had for any\n of the keys currently in the specified map.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " key for which mapping should be removed"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with key, or\n         null if there was no mapping for key.\n         (A null return can also indicate that the map\n         previously associated null with key.)"], "return_type": ["V"]}, "method_name": "remove", "method_description": "Removes the mapping for this key from this TreeMap if present.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is associated"}, {"param_name": ["oldValue"], "param_type": "V", "param_description": " value expected to be associated with the specified key"}, {"param_name": ["newValue"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value was replaced"], "return_type": ["boolean"]}, "method_name": "replace", "method_description": "Replaces the entry for the specified key only if currently\n mapped to the specified value.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with the specified key, or\n         null if there was no mapping for the key.\n         (A null return can also indicate that the map\n         previously associated null with the key,\n         if the implementation supports null values.)"], "return_type": ["V"]}, "method_name": "replace", "method_description": "Replaces the entry for the specified key only if it is\n currently mapped to some value.\n", "method_declar": ""}, {"params": [{"param_name": ["function"], "param_type": "BiFunction", "param_description": " the function to apply to each entry"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "replaceAll", "method_description": "Replaces each entry's value with the result of invoking the given\n function on that entry until all entries have been processed or the\n function throws an exception.  Exceptions thrown by the function are\n relayed to the caller.\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of key-value mappings in this map"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of key-value mappings in this map.\n", "method_declar": ""}, {"params": [{"param_name": ["fromKey"], "param_type": "K", "param_description": " low endpoint (inclusive) of the keys in the returned map"}, {"param_name": ["toKey"], "param_type": "K", "param_description": " high endpoint (exclusive) of the keys in the returned map"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys range from\n         fromKey, inclusive, to toKey, exclusive"], "return_type": ["SortedMap<K,\u00a0V>"]}, "method_name": "subMap", "method_description": "Returns a view of the portion of this map whose keys range from\n fromKey, inclusive, to toKey, exclusive.  (If\n fromKey and toKey are equal, the returned map\n is empty.)  The returned map is backed by this map, so changes\n in the returned map are reflected in this map, and vice-versa.\n The returned map supports all optional map operations that this\n map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n\n \nEquivalent to subMap(fromKey, true, toKey, false).\n", "method_declar": ""}, {"params": [{"param_name": ["fromKey"], "param_type": "K", "param_description": " low endpoint of the keys in the returned map"}, {"param_name": ["fromInclusive"], "param_type": "boolean", "param_description": " true if the low endpoint\n        is to be included in the returned view"}, {"param_name": ["toKey"], "param_type": "K", "param_description": " high endpoint of the keys in the returned map"}, {"param_name": ["toInclusive"], "param_type": "boolean", "param_description": " true if the high endpoint\n        is to be included in the returned view"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys range from\n         fromKey to toKey"], "return_type": ["NavigableMap<K,\u00a0V>"]}, "method_name": "subMap", "method_description": "Returns a view of the portion of this map whose keys range from\n fromKey to toKey.  If fromKey and\n toKey are equal, the returned map is empty unless\n fromInclusive and toInclusive are both true.  The\n returned map is backed by this map, so changes in the returned map are\n reflected in this map, and vice-versa.  The returned map supports all\n optional map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside of its range, or to construct a\n submap either of whose endpoints lie outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["fromKey"], "param_type": "K", "param_description": " low endpoint of the keys in the returned map"}, {"param_name": ["inclusive"], "param_type": "boolean", "param_description": " true if the low endpoint\n        is to be included in the returned view"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys are greater than\n         (or equal to, if inclusive is true) fromKey"], "return_type": ["NavigableMap<K,\u00a0V>"]}, "method_name": "tailMap", "method_description": "Returns a view of the portion of this map whose keys are greater than (or\n equal to, if inclusive is true) fromKey.  The returned\n map is backed by this map, so changes in the returned map are reflected\n in this map, and vice-versa.  The returned map supports all optional\n map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n", "method_declar": ""}, {"params": [{"param_name": ["fromKey"], "param_type": "K", "param_description": " low endpoint (inclusive) of the keys in the returned map"}], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the portion of this map whose keys are greater\n         than or equal to fromKey"], "return_type": ["SortedMap<K,\u00a0V>"]}, "method_name": "tailMap", "method_description": "Returns a view of the portion of this map whose keys are\n greater than or equal to fromKey.  The returned map is\n backed by this map, so changes in the returned map are\n reflected in this map, and vice-versa.  The returned map\n supports all optional map operations that this map supports.\n\n \nThe returned map will throw an IllegalArgumentException\n on an attempt to insert a key outside its range.\n\n \nEquivalent to tailMap(fromKey, true).\n", "method_declar": ""}, {"params": [], "class_name": "TreeMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a collection view of the values contained in this map"], "return_type": ["Collection<V>"]}, "method_name": "values", "method_description": "Returns a Collection view of the values contained in this map.\n\n \nThe collection's iterator returns the values in ascending order\n of the corresponding keys. The collection's spliterator is\n late-binding,\n fail-fast, and additionally reports Spliterator#ORDERED\n with an encounter order that is ascending order of the corresponding\n keys.\n\n \nThe collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations.\n", "method_declar": ""}], "class_name": "TreeMap", "Vars": null}