{"package_name": "java.util", "subclass_list": ["Properties", "Properties"], "class_description": "This class implements a hash table, which maps keys to values. Any\n non-null object can be used as a key or as a value. To successfully store and retrieve objects from a hashtable, the\n objects used as keys must implement the hashCode\n method and the equals method. An instance of Hashtable has two parameters that affect its\n performance: initial capacity and load factor.  The\n capacity is the number of buckets in the hash table, and the\n initial capacity is simply the capacity at the time the hash table\n is created.  Note that the hash table is open: in the case of a \"hash\n collision\", a single bucket stores multiple entries, which must be searched\n sequentially.  The load factor is a measure of how full the hash\n table is allowed to get before its capacity is automatically increased.\n The initial capacity and load factor parameters are merely hints to\n the implementation.  The exact details as to when and whether the rehash\n method is invoked are implementation-dependent. Generally, the default load factor (.75) offers a good tradeoff between\n time and space costs.  Higher values decrease the space overhead but\n increase the time cost to look up an entry (which is reflected in most\n Hashtable operations, including get and put). The initial capacity controls a tradeoff between wasted space and the\n need for rehash operations, which are time-consuming.\n No rehash operations will ever occur if the initial\n capacity is greater than the maximum number of entries the\n Hashtable will contain divided by its load factor.  However,\n setting the initial capacity too high can waste space. If many entries are to be made into a Hashtable,\n creating it with a sufficiently large capacity may allow the\n entries to be inserted more efficiently than letting it perform\n automatic rehashing as needed to grow the table. This example creates a hashtable of numbers. It uses the names of\n the numbers as keys: To retrieve a number, use the following code: The iterators returned by the iterator method of the collections\n returned by all of this class's \"collection view methods\" are\n fail-fast: if the Hashtable is structurally modified at any time\n after the iterator is created, in any way except through the iterator's own\n remove method, the iterator will throw a ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n The Enumerations returned by Hashtable's keys and elements methods are\n not fail-fast. Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: the fail-fast behavior of iterators\n should be used only to detect bugs. As of the Java 2 platform v1.2, this class was retrofitted to\n implement the Map interface, making it a member of the\n \n\n Java Collections Framework.  Unlike the new collection\n implementations, Hashtable is synchronized.  If a\n thread-safe implementation is not needed, it is recommended to use\n HashMap in place of Hashtable.  If a thread-safe\n highly-concurrent implementation is desired, then it is recommended\n to use ConcurrentHashMap in place of\n Hashtable. ", "class_type": "class", "typealias": [], "interface_list": ["Map<K", "\u00a0V>", "Cloneable", "Serializable"], "class_inherit_list": ["Dictionary<K,\u00a0V>"], "Methods": [{"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity of the hashtable."}, {"param_name": ["loadFactor"], "param_type": "float", "param_description": " the load factor of the hashtable."}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty hashtable with the specified initial\n capacity and the specified load factor.\n", "method_declar": ""}, {"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity of the hashtable."}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty hashtable with the specified initial capacity\n and default load factor (0.75).\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new, empty hashtable with a default initial capacity (11)\n and load factor (0.75).\n", "method_declar": ""}, {"params": [{"param_name": ["t"], "param_type": "Map", "param_description": " the map whose mappings are to be placed in this map."}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new hashtable with the same mappings as the given\n Map.  The hashtable is created with an initial capacity sufficient to\n hold the mappings in the given Map and a default load factor (0.75).\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Clears this hashtable so that it contains no keys.\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["a clone of the hashtable"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Creates a shallow copy of this hashtable. All the structure of the\n hashtable itself is copied, but the keys and values are not cloned.\n This is a relatively expensive operation.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["remappingFunction"], "param_type": "BiFunction", "param_description": " the remapping function to compute a value"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new value associated with the specified key, or null if none"], "return_type": ["V"]}, "method_name": "compute", "method_description": "Attempts to compute a mapping for the specified key and its current\n mapped value (or null if there is no current mapping). For\n example, to either create or append a String msg to a value\n mapping:\n\n \nIf the remapping function returns null, the mapping is removed\n (or remains absent if initially absent).  If the remapping function\n itself throws an (unchecked) exception, the exception is rethrown, and\n the current mapping is left unchanged.\n\n \nThe remapping function should not modify this map during computation.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["mappingFunction"], "param_type": "Function", "param_description": " the mapping function to compute a value"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current (existing or computed) value associated with\n         the specified key, or null if the computed value is null"], "return_type": ["V"]}, "method_name": "computeIfAbsent", "method_description": "If the specified key is not already associated with a value (or is mapped\n to null), attempts to compute its value using the given mapping\n function and enters it into this map unless null.\n\n \nIf the mapping function returns null, no mapping is recorded.\n If the mapping function itself throws an (unchecked) exception, the\n exception is rethrown, and no mapping is recorded.  The most\n common usage is to construct a new object serving as an initial\n mapped value or memoized result, as in:\n\n \nOr to implement a multi-value map, Map<K,Collection<V>>,\n supporting multiple values per key:\n\n \nThe mapping function should not modify this map during computation.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["remappingFunction"], "param_type": "BiFunction", "param_description": " the remapping function to compute a value"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new value associated with the specified key, or null if none"], "return_type": ["V"]}, "method_name": "computeIfPresent", "method_description": "If the value for the specified key is present and non-null, attempts to\n compute a new mapping given the key and its current mapped value.\n\n \nIf the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n \nThe remapping function should not modify this map during computation.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "Object", "param_description": " a value to search for"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if some key maps to the\n             value argument in this hashtable as\n             determined by the equals method;\n             false otherwise."], "return_type": ["boolean"]}, "method_name": "contains", "method_description": "Tests if some key maps into the specified value in this hashtable.\n This operation is more expensive than the containsKey method.\n\n \nNote that this method is identical in functionality to\n containsValue, (which is part of the\n Map interface in the collections framework).\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " possible key"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if and only if the specified object\n          is a key in this hashtable, as determined by the\n          equals method; false otherwise."], "return_type": ["boolean"]}, "method_name": "containsKey", "method_description": "Tests if the specified object is a key in this hashtable.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "Object", "param_description": " value whose presence in this hashtable is to be tested"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this map maps one or more keys to the\n         specified value"], "return_type": ["boolean"]}, "method_name": "containsValue", "method_description": "Returns true if this hashtable maps one or more keys to this value.\n\n \nNote that this method is identical in functionality to contains (which predates the Map interface).\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["an enumeration of the values in this hashtable."], "return_type": ["Enumeration<V>"]}, "method_name": "elements", "method_description": "Returns an enumeration of the values in this hashtable.\n Use the Enumeration methods on the returned object to fetch the elements\n sequentially.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["a set view of the mappings contained in this map"], "return_type": ["Set<Entry<K,\u00a0V>>"]}, "method_name": "entrySet", "method_description": "Returns a Set view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation, or through the\n setValue operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Set.remove, removeAll, retainAll and\n clear operations.  It does not support the\n add or addAll operations.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " object to be compared for equality with this hashtable"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the specified Object is equal to this Map"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the specified Object with this Map for equality,\n as per the definition in the Map interface.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["action"], "param_type": "BiConsumer", "param_description": " The action to be performed for each entry"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "forEach", "method_description": "Performs the given action for each entry in this map until all entries\n have been processed or the action throws an exception.   Unless\n otherwise specified by the implementing class, actions are performed in\n the order of entry set iteration (if an iteration order is specified.)\n Exceptions thrown by the action are relayed to the caller.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key whose associated value is to be returned"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value to which the specified key is mapped, or\n         null if this map contains no mapping for the key"], "return_type": ["V"]}, "method_name": "get", "method_description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n \nMore formally, if this map contains a mapping from a key\n k to a value v such that (key.equals(k)),\n then this method returns v; otherwise it returns\n null.  (There can be at most one such mapping.)\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key whose associated value is to be returned"}, {"param_name": ["defaultValue"], "param_type": "V", "param_description": " the default mapping of the key"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value to which the specified key is mapped, or\n defaultValue if this map contains no mapping for the key"], "return_type": ["V"]}, "method_name": "getOrDefault", "method_description": "Returns the value to which the specified key is mapped, or\n defaultValue if this map contains no mapping for the key.\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns the hash code value for this Map as per the definition in the\n Map interface.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this hashtable maps no keys to values;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Tests if this hashtable maps no keys to values.\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["a set view of the keys contained in this map"], "return_type": ["Set<K>"]}, "method_name": "keySet", "method_description": "Returns a Set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["an enumeration of the keys in this hashtable."], "return_type": ["Enumeration<K>"]}, "method_name": "keys", "method_description": "Returns an enumeration of the keys in this hashtable.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the resulting value is to be associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " the non-null value to be merged with the existing value\n        associated with the key or, if no existing value or a null value\n        is associated with the key, to be associated with the key"}, {"param_name": ["remappingFunction"], "param_type": "BiFunction", "param_description": " the remapping function to recompute a value if\n        present"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new value associated with the specified key, or null if no\n         value is associated with the key"], "return_type": ["V"]}, "method_name": "merge", "method_description": "If the specified key is not already associated with a value or is\n associated with null, associates it with the given non-null value.\n Otherwise, replaces the associated value with the results of the given\n remapping function, or removes if the result is null. This\n method may be of use when combining multiple mapped values for a key.\n For example, to either create or append a String msg to a\n value mapping:\n\n \nIf the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n \nThe remapping function should not modify this map during computation.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " the hashtable key"}, {"param_name": ["value"], "param_type": "V", "param_description": " the value"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value of the specified key in this hashtable,\n             or null if it did not have one"], "return_type": ["V"]}, "method_name": "put", "method_description": "Maps the specified key to the specified\n value in this hashtable. Neither the key nor the\n value can be null. \n\n\n The value can be retrieved by calling the get method\n with a key that is equal to the original key.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["t"], "param_type": "Map", "param_description": " mappings to be stored in this map"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "putAll", "method_description": "Copies all of the mappings from the specified map to this hashtable.\n These mappings will replace any mappings that this hashtable had for any\n of the keys currently in the specified map.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with the specified key, or\n         null if there was no mapping for the key.\n         (A null return can also indicate that the map\n         previously associated null with the key,\n         if the implementation supports null values.)"], "return_type": ["V"]}, "method_name": "putIfAbsent", "method_description": "If the specified key is not already associated with a value (or is mapped\n to null) associates it with the given value and returns\n null, else returns the current value.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " key with which the specified value is associated"}, {"param_name": ["value"], "param_type": "Object", "param_description": " value expected to be associated with the specified key"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value was removed"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the entry for the specified key only if it is currently\n mapped to the specified value.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key that needs to be removed"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value to which the key had been mapped in this hashtable,\n          or null if the key did not have a mapping"], "return_type": ["V"]}, "method_name": "remove", "method_description": "Removes the key (and its corresponding value) from this\n hashtable. This method does nothing if the key is not in the hashtable.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is associated"}, {"param_name": ["oldValue"], "param_type": "V", "param_description": " value expected to be associated with the specified key"}, {"param_name": ["newValue"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value was replaced"], "return_type": ["boolean"]}, "method_name": "replace", "method_description": "Replaces the entry for the specified key only if currently\n mapped to the specified value.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with the specified key, or\n         null if there was no mapping for the key.\n         (A null return can also indicate that the map\n         previously associated null with the key,\n         if the implementation supports null values.)"], "return_type": ["V"]}, "method_name": "replace", "method_description": "Replaces the entry for the specified key only if it is\n currently mapped to some value.\n", "method_declar": ""}, {"params": [{"param_name": ["function"], "param_type": "BiFunction", "param_description": " the function to apply to each entry"}], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "replaceAll", "method_description": "Replaces each entry's value with the result of invoking the given\n function on that entry until all entries have been processed or the\n function throws an exception.  Exceptions thrown by the function are\n relayed to the caller.\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of keys in this hashtable."], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of keys in this hashtable.\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this hashtable"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this Hashtable object\n in the form of a set of entries, enclosed in braces and separated\n by the ASCII characters \",\u00a0\" (comma and space). Each\n entry is rendered as the key, an equals sign =, and the\n associated element, where the toString method is used to\n convert the key and element to strings.\n", "method_declar": ""}, {"params": [], "class_name": "Hashtable", "is_static": false, "return_value": {"return_name": [], "return_description": ["a collection view of the values contained in this map"], "return_type": ["Collection<V>"]}, "method_name": "values", "method_description": "Returns a Collection view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations.\n", "method_declar": ""}], "class_name": "Hashtable", "Vars": null}