{"package_name": "java.util", "subclass_list": [], "class_description": "ResourceBundle.Control defines a set of callback methods\n that are invoked by the ResourceBundle#getBundle(String,\n Locale, ClassLoader, Control) factory\n methods during the bundle loading process. In other words, a\n ResourceBundle.Control collaborates with the factory\n methods for loading resource bundles. The default implementation of\n the callback methods provides the information necessary for the\n factory methods to perform the default behavior. In addition to the callback methods, the toBundleName and toResourceName methods are defined\n primarily for convenience in implementing the callback\n methods. However, the toBundleName method could be\n overridden to provide different conventions in the organization and\n packaging of localized resources.  The toResourceName\n method is final to avoid use of wrong resource and class\n name separators. Two factory methods, getControl(java.util.List) and getNoFallbackControl(java.util.List), provide\n ResourceBundle.Control instances that implement common\n variations of the default bundle loading process. The formats returned by the Control#getFormats(String) method and candidate locales returned by the ResourceBundle.Control#getCandidateLocales(String, Locale) method must be consistent in all\n ResourceBundle.getBundle invocations for the same base\n bundle. Otherwise, the ResourceBundle.getBundle methods\n may return unintended bundles. For example, if only\n \"java.class\" is returned by the getFormats\n method for the first call to ResourceBundle.getBundle\n and only \"java.properties\" for the second call, then the\n second call will return the class-based one that has been cached\n during the first call. A ResourceBundle.Control instance must be thread-safe\n if it's simultaneously used by multiple threads.\n ResourceBundle.getBundle does not synchronize to call\n the ResourceBundle.Control methods. The default\n implementations of the methods are thread-safe. Applications can specify ResourceBundle.Control\n instances returned by the getControl factory methods or\n created from a subclass of ResourceBundle.Control to\n customize the bundle loading process. The following are examples of\n changing the default bundle loading process. Example 1 The following code lets ResourceBundle.getBundle look\n up only properties-based resources. Example 2 The following is an example of loading XML-based bundles\n using Properties#loadFromXML(java.io.InputStream). ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "ResourceBundle.Control", "Vars": null}