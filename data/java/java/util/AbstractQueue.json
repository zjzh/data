{"package_name": "java.util", "subclass_list": ["ArrayBlockingQueue", "ConcurrentLinkedQueue", "DelayQueue", "Delayed", "LinkedBlockingDeque", "LinkedBlockingQueue", "LinkedTransferQueue", "PriorityBlockingQueue", "PriorityQueue", "SynchronousQueue", "ArrayBlockingQueue", "BlockingQueue", "ConcurrentLinkedQueue", "Queue", "DelayQueue", "Delayed", "BlockingQueue", "LinkedBlockingDeque", "BlockingDeque", "LinkedBlockingQueue", "BlockingQueue", "LinkedTransferQueue", "TransferQueue", "PriorityBlockingQueue", "BlockingQueue", "PriorityQueue", "PriorityQueue", "Queue", "SynchronousQueue", "BlockingQueue"], "class_description": "This class provides skeletal implementations of some Queue\n operations. The implementations in this class are appropriate when\n the base implementation does not allow null\n elements.  Methods add, remove, and\n element are based on offer, poll, and peek, respectively, but throw\n exceptions instead of indicating failure via false or\n null returns. A Queue implementation that extends this class must\n minimally define a method Queue#offer which does not permit\n insertion of null elements, along with methods Queue#peek, Queue#poll, Collection#size, and\n Collection#iterator.  Typically, additional methods will be\n overridden as well.  If these requirements cannot be met, consider\n instead subclassing AbstractCollection. ", "class_type": "class", "typealias": [], "interface_list": ["Queue"], "class_inherit_list": ["AbstractCollection"], "Methods": [], "class_name": "AbstractQueue", "Vars": null}