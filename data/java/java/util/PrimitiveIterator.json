{"package_name": "java.util", "subclass_list": ["PrimitiveIterator.OfDouble", "PrimitiveIterator.OfInt", "PrimitiveIterator.OfLong", "PrimitiveIterator.OfDouble", "PrimitiveIterator.OfInt", "PrimitiveIterator.OfLong"], "class_description": "A base type for primitive specializations of Iterator.  Specialized\n subtypes are provided for OfInt, OfLong, and\n OfDouble values. The specialized subtype default implementations of Iterator#next\n and Iterator#forEachRemaining(java.util.function.Consumer) box\n primitive values to instances of their corresponding wrapper class.  Such\n boxing may offset any advantages gained when using the primitive\n specializations.  To avoid boxing, the corresponding primitive-based methods\n should be used.  For example, PrimitiveIterator.OfInt#nextInt() and\n PrimitiveIterator.OfInt#forEachRemaining(java.util.function.IntConsumer)\n should be used in preference to PrimitiveIterator.OfInt#next() and\n PrimitiveIterator.OfInt#forEachRemaining(java.util.function.Consumer). Iteration of primitive values using boxing-based methods\n Iterator#next and\n Iterator#forEachRemaining(java.util.function.Consumer),\n does not affect the order in which the values, transformed to boxed values,\n are encountered. ", "class_type": "interface", "typealias": [], "interface_list": ["Iterator"], "class_inherit_list": [], "Methods": [], "class_name": "PrimitiveIterator", "Vars": null}