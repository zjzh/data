{"package_name": "java.util", "subclass_list": ["ArrayDeque", "BlockingDeque", "ConcurrentLinkedDeque", "LinkedBlockingDeque", "LinkedList", "ArrayDeque", "Deque", "BlockingDeque", "Deque", "ConcurrentLinkedDeque", "Deque", "LinkedBlockingDeque", "BlockingDeque", "LinkedList"], "class_description": "A linear collection that supports element insertion and removal at\n both ends.  The name deque is short for \"double ended queue\"\n and is usually pronounced \"deck\".  Most Deque\n implementations place no fixed limits on the number of elements\n they may contain, but this interface supports capacity-restricted\n deques as well as those with no fixed size limit. This interface defines methods to access the elements at both\n ends of the deque.  Methods are provided to insert, remove, and\n examine the element.  Each of these methods exists in two forms:\n one throws an exception if the operation fails, the other returns a\n special value (either null or false, depending on\n the operation).  The latter form of the insert operation is\n designed specifically for use with capacity-restricted\n Deque implementations; in most implementations, insert\n operations cannot fail. The twelve methods described above are summarized in the\n following table: This interface extends the Queue interface.  When a deque is\n used as a queue, FIFO (First-In-First-Out) behavior results.  Elements are\n added at the end of the deque and removed from the beginning.  The methods\n inherited from the Queue interface are precisely equivalent to\n Deque methods as indicated in the following table: Deques can also be used as LIFO (Last-In-First-Out) stacks.  This\n interface should be used in preference to the legacy Stack class.\n When a deque is used as a stack, elements are pushed and popped from the\n beginning of the deque.  Stack methods are precisely equivalent to\n Deque methods as indicated in the table below: Note that the peek method works equally well when\n a deque is used as a queue or a stack; in either case, elements are\n drawn from the beginning of the deque. This interface provides two methods to remove interior\n elements, removeFirstOccurrence and\n removeLastOccurrence. Unlike the List interface, this interface does not\n provide support for indexed access to elements. While Deque implementations are not strictly required\n to prohibit the insertion of null elements, they are strongly\n encouraged to do so.  Users of any Deque implementations\n that do allow null elements are strongly encouraged not to\n take advantage of the ability to insert nulls.  This is so because\n null is used as a special return value by various methods\n to indicated that the deque is empty. Deque implementations generally do not define\n element-based versions of the equals and hashCode\n methods, but instead inherit the identity-based versions from class\n Object. ", "class_type": "interface", "typealias": [], "interface_list": ["Queue"], "class_inherit_list": [], "Methods": [], "class_name": "Deque", "Vars": null}