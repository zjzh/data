{"package_name": "java.util", "subclass_list": ["DirectoryIteratorException", "DirectoryIteratorException"], "class_description": "This exception may be thrown by methods that have detected concurrent\n modification of an object when such modification is not permissible. For example, it is not generally permissible for one thread to modify a Collection\n while another thread is iterating over it.  In general, the results of the\n iteration are undefined under these circumstances.  Some Iterator\n implementations (including those of all the general purpose collection implementations\n provided by the JRE) may choose to throw this exception if this behavior is\n detected.  Iterators that do this are known as fail-fast iterators,\n as they fail quickly and cleanly, rather that risking arbitrary,\n non-deterministic behavior at an undetermined time in the future. Note that this exception does not always indicate that an object has\n been concurrently modified by a different thread.  If a single\n thread issues a sequence of method invocations that violates the\n contract of an object, the object may throw this exception.  For\n example, if a thread modifies a collection directly while it is\n iterating over the collection with a fail-fast iterator, the iterator\n will throw this exception. Note that fail-fast behavior cannot be guaranteed as it is, generally\n speaking, impossible to make any hard guarantees in the presence of\n unsynchronized concurrent modification.  Fail-fast operations\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: ConcurrentModificationException\n should be used only to detect bugs. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["RuntimeException"], "Methods": [{"params": [], "class_name": "ConcurrentModificationException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a ConcurrentModificationException with no\n detail message.\n", "method_declar": ""}, {"params": [{"param_name": ["message"], "param_type": "String", "param_description": " the detail message pertaining to this exception."}], "class_name": "ConcurrentModificationException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a ConcurrentModificationException with the\n specified detail message.\n", "method_declar": ""}, {"params": [{"param_name": ["cause"], "param_type": "Throwable", "param_description": " the cause (which is saved for later retrieval by the\n         Throwable#getCause() method).  (A null value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)"}], "class_name": "ConcurrentModificationException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new exception with the specified cause and a detail\n message of (cause==null ? null : cause.toString()) (which\n typically contains the class and detail message of cause.\n", "method_declar": ""}, {"params": [{"param_name": ["message"], "param_type": "String", "param_description": " the detail message (which is saved for later retrieval\n         by the Throwable#getMessage() method)."}, {"param_name": ["cause"], "param_type": "Throwable", "param_description": " the cause (which is saved for later retrieval by the\n         Throwable#getCause() method).  (A null value\n         is permitted, and indicates that the cause is nonexistent or\n         unknown.)"}], "class_name": "ConcurrentModificationException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new exception with the specified detail message and\n cause.\n\n \nNote that the detail message associated with cause is\n not automatically incorporated in this exception's detail\n message.\n", "method_declar": ""}], "class_name": "ConcurrentModificationException", "Vars": null}