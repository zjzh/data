{"package_name": "java.util", "subclass_list": ["LinkedHashMap", "LinkedHashMap"], "class_description": "Hash table based implementation of the Map interface.  This\n implementation provides all of the optional map operations, and permits\n null values and the null key.  (The HashMap\n class is roughly equivalent to Hashtable, except that it is\n unsynchronized and permits nulls.)  This class makes no guarantees as to\n the order of the map; in particular, it does not guarantee that the order\n will remain constant over time. This implementation provides constant-time performance for the basic\n operations (get and put), assuming the hash function\n disperses the elements properly among the buckets.  Iteration over\n collection views requires time proportional to the \"capacity\" of the\n HashMap instance (the number of buckets) plus its size (the number\n of key-value mappings).  Thus, it's very important not to set the initial\n capacity too high (or the load factor too low) if iteration performance is\n important. An instance of HashMap has two parameters that affect its\n performance: initial capacity and load factor.  The\n capacity is the number of buckets in the hash table, and the initial\n capacity is simply the capacity at the time the hash table is created.  The\n load factor is a measure of how full the hash table is allowed to\n get before its capacity is automatically increased.  When the number of\n entries in the hash table exceeds the product of the load factor and the\n current capacity, the hash table is rehashed (that is, internal data\n structures are rebuilt) so that the hash table has approximately twice the\n number of buckets. As a general rule, the default load factor (.75) offers a good\n tradeoff between time and space costs.  Higher values decrease the\n space overhead but increase the lookup cost (reflected in most of\n the operations of the HashMap class, including\n get and put).  The expected number of entries in\n the map and its load factor should be taken into account when\n setting its initial capacity, so as to minimize the number of\n rehash operations.  If the initial capacity is greater than the\n maximum number of entries divided by the load factor, no rehash\n operations will ever occur. If many mappings are to be stored in a HashMap\n instance, creating it with a sufficiently large capacity will allow\n the mappings to be stored more efficiently than letting it perform\n automatic rehashing as needed to grow the table.  Note that using\n many keys with the same hashCode() is a sure way to slow\n down performance of any hash table. To ameliorate impact, when keys\n are Comparable, this class may use comparison order among\n keys to help break ties. Note that this implementation is not synchronized.\n If multiple threads access a hash map concurrently, and at least one of\n the threads modifies the map structurally, it must be\n synchronized externally.  (A structural modification is any operation\n that adds or deletes one or more mappings; merely changing the value\n associated with a key that an instance already contains is not a\n structural modification.)  This is typically accomplished by\n synchronizing on some object that naturally encapsulates the map.\n\n If no such object exists, the map should be \"wrapped\" using the\n Collections#synchronizedMap\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map: The iterators returned by all of this class's \"collection view methods\"\n are fail-fast: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator's own\n remove method, the iterator will throw a\n ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the\n future. Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: the fail-fast behavior of iterators\n should be used only to detect bugs. This class is a member of the\n \n Java Collections Framework. ", "class_type": "class", "typealias": [], "interface_list": ["Map<K", "\u00a0V>", "Cloneable", "Serializable"], "class_inherit_list": ["AbstractMap<K,\u00a0V>"], "Methods": [{"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity"}, {"param_name": ["loadFactor"], "param_type": "float", "param_description": " the load factor"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty HashMap with the specified initial\n capacity and load factor.\n", "method_declar": ""}, {"params": [{"param_name": ["initialCapacity"], "param_type": "int", "param_description": " the initial capacity."}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty HashMap with the specified initial\n capacity and the default load factor (0.75).\n", "method_declar": ""}, {"params": [], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an empty HashMap with the default initial capacity\n (16) and the default load factor (0.75).\n", "method_declar": ""}, {"params": [{"param_name": ["m"], "param_type": "Map", "param_description": " the map whose mappings are to be placed in this map"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new HashMap with the same mappings as the\n specified Map.  The HashMap is created with\n default load factor (0.75) and an initial capacity sufficient to\n hold the mappings in the specified Map.\n", "method_declar": ""}, {"params": [], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "clear", "method_description": "Removes all of the mappings from this map.\n The map will be empty after this call returns.\n", "method_declar": ""}, {"params": [], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a shallow copy of this map"], "return_type": ["Object"]}, "method_name": "clone", "method_description": "Returns a shallow copy of this HashMap instance: the keys and\n values themselves are not cloned.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["remappingFunction"], "param_type": "BiFunction", "param_description": " the remapping function to compute a value"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new value associated with the specified key, or null if none"], "return_type": ["V"]}, "method_name": "compute", "method_description": "Attempts to compute a mapping for the specified key and its current\n mapped value (or null if there is no current mapping). For\n example, to either create or append a String msg to a value\n mapping:\n\n \nIf the remapping function returns null, the mapping is removed\n (or remains absent if initially absent).  If the remapping function\n itself throws an (unchecked) exception, the exception is rethrown, and\n the current mapping is left unchanged.\n\n \nThe remapping function should not modify this map during computation.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["mappingFunction"], "param_type": "Function", "param_description": " the mapping function to compute a value"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current (existing or computed) value associated with\n         the specified key, or null if the computed value is null"], "return_type": ["V"]}, "method_name": "computeIfAbsent", "method_description": "If the specified key is not already associated with a value (or is mapped\n to null), attempts to compute its value using the given mapping\n function and enters it into this map unless null.\n\n \nIf the mapping function returns null, no mapping is recorded.\n If the mapping function itself throws an (unchecked) exception, the\n exception is rethrown, and no mapping is recorded.  The most\n common usage is to construct a new object serving as an initial\n mapped value or memoized result, as in:\n\n \nOr to implement a multi-value map, Map<K,Collection<V>>,\n supporting multiple values per key:\n\n \nThe mapping function should not modify this map during computation.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["remappingFunction"], "param_type": "BiFunction", "param_description": " the remapping function to compute a value"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new value associated with the specified key, or null if none"], "return_type": ["V"]}, "method_name": "computeIfPresent", "method_description": "If the value for the specified key is present and non-null, attempts to\n compute a new mapping given the key and its current mapped value.\n\n \nIf the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n \nThe remapping function should not modify this map during computation.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " The key whose presence in this map is to be tested"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this map contains a mapping for the specified\n key."], "return_type": ["boolean"]}, "method_name": "containsKey", "method_description": "Returns true if this map contains a mapping for the\n specified key.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "Object", "param_description": " value whose presence in this map is to be tested"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this map maps one or more keys to the\n         specified value"], "return_type": ["boolean"]}, "method_name": "containsValue", "method_description": "Returns true if this map maps one or more keys to the\n specified value.\n", "method_declar": ""}, {"params": [], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a set view of the mappings contained in this map"], "return_type": ["Set<Entry<K,\u00a0V>>"]}, "method_name": "entrySet", "method_description": "Returns a Set view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation, or through the\n setValue operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Set.remove, removeAll, retainAll and\n clear operations.  It does not support the\n add or addAll operations.\n", "method_declar": ""}, {"params": [{"param_name": ["action"], "param_type": "BiConsumer", "param_description": " The action to be performed for each entry"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "forEach", "method_description": "Performs the given action for each entry in this map until all entries\n have been processed or the action throws an exception.   Unless\n otherwise specified by the implementing class, actions are performed in\n the order of entry set iteration (if an iteration order is specified.)\n Exceptions thrown by the action are relayed to the caller.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key whose associated value is to be returned"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value to which the specified key is mapped, or\n         null if this map contains no mapping for the key"], "return_type": ["V"]}, "method_name": "get", "method_description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n \nMore formally, if this map contains a mapping from a key\n k to a value v such that (key==null ? k==null :\n key.equals(k)), then this method returns v; otherwise\n it returns null.  (There can be at most one such mapping.)\n\n \nA return value of null does not necessarily\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to null.\n The containsKey operation may be used to\n distinguish these two cases.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " the key whose associated value is to be returned"}, {"param_name": ["defaultValue"], "param_type": "V", "param_description": " the default mapping of the key"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value to which the specified key is mapped, or\n defaultValue if this map contains no mapping for the key"], "return_type": ["V"]}, "method_name": "getOrDefault", "method_description": "Returns the value to which the specified key is mapped, or\n defaultValue if this map contains no mapping for the key.\n", "method_declar": ""}, {"params": [], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this map contains no key-value mappings"], "return_type": ["boolean"]}, "method_name": "isEmpty", "method_description": "Returns true if this map contains no key-value mappings.\n", "method_declar": ""}, {"params": [], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a set view of the keys contained in this map"], "return_type": ["Set<K>"]}, "method_name": "keySet", "method_description": "Returns a Set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the resulting value is to be associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " the non-null value to be merged with the existing value\n        associated with the key or, if no existing value or a null value\n        is associated with the key, to be associated with the key"}, {"param_name": ["remappingFunction"], "param_type": "BiFunction", "param_description": " the remapping function to recompute a value if\n        present"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the new value associated with the specified key, or null if no\n         value is associated with the key"], "return_type": ["V"]}, "method_name": "merge", "method_description": "If the specified key is not already associated with a value or is\n associated with null, associates it with the given non-null value.\n Otherwise, replaces the associated value with the results of the given\n remapping function, or removes if the result is null. This\n method may be of use when combining multiple mapped values for a key.\n For example, to either create or append a String msg to a\n value mapping:\n\n \nIf the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n \nThe remapping function should not modify this map during computation.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with key, or\n         null if there was no mapping for key.\n         (A null return can also indicate that the map\n         previously associated null with key.)"], "return_type": ["V"]}, "method_name": "put", "method_description": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced.\n", "method_declar": ""}, {"params": [{"param_name": ["m"], "param_type": "Map", "param_description": " mappings to be stored in this map"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "putAll", "method_description": "Copies all of the mappings from the specified map to this map.\n These mappings will replace any mappings that this map had for\n any of the keys currently in the specified map.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is to be associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with the specified key, or\n         null if there was no mapping for the key.\n         (A null return can also indicate that the map\n         previously associated null with the key,\n         if the implementation supports null values.)"], "return_type": ["V"]}, "method_name": "putIfAbsent", "method_description": "If the specified key is not already associated with a value (or is mapped\n to null) associates it with the given value and returns\n null, else returns the current value.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " key with which the specified value is associated"}, {"param_name": ["value"], "param_type": "Object", "param_description": " value expected to be associated with the specified key"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value was removed"], "return_type": ["boolean"]}, "method_name": "remove", "method_description": "Removes the entry for the specified key only if it is currently\n mapped to the specified value.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Object", "param_description": " key whose mapping is to be removed from the map"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with key, or\n         null if there was no mapping for key.\n         (A null return can also indicate that the map\n         previously associated null with key.)"], "return_type": ["V"]}, "method_name": "remove", "method_description": "Removes the mapping for the specified key from this map if present.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is associated"}, {"param_name": ["oldValue"], "param_type": "V", "param_description": " value expected to be associated with the specified key"}, {"param_name": ["newValue"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value was replaced"], "return_type": ["boolean"]}, "method_name": "replace", "method_description": "Replaces the entry for the specified key only if currently\n mapped to the specified value.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "K", "param_description": " key with which the specified value is associated"}, {"param_name": ["value"], "param_type": "V", "param_description": " value to be associated with the specified key"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the previous value associated with the specified key, or\n         null if there was no mapping for the key.\n         (A null return can also indicate that the map\n         previously associated null with the key,\n         if the implementation supports null values.)"], "return_type": ["V"]}, "method_name": "replace", "method_description": "Replaces the entry for the specified key only if it is\n currently mapped to some value.\n", "method_declar": ""}, {"params": [{"param_name": ["function"], "param_type": "BiFunction", "param_description": " the function to apply to each entry"}], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "replaceAll", "method_description": "Replaces each entry's value with the result of invoking the given\n function on that entry until all entries have been processed or the\n function throws an exception.  Exceptions thrown by the function are\n relayed to the caller.\n", "method_declar": ""}, {"params": [], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of key-value mappings in this map"], "return_type": ["int"]}, "method_name": "size", "method_description": "Returns the number of key-value mappings in this map.\n", "method_declar": ""}, {"params": [], "class_name": "HashMap", "is_static": false, "return_value": {"return_name": [], "return_description": ["a view of the values contained in this map"], "return_type": ["Collection<V>"]}, "method_name": "values", "method_description": "Returns a Collection view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations.\n", "method_declar": ""}], "class_name": "HashMap", "Vars": null}