{"package_name": "java.util.zip", "subclass_list": ["GZIPOutputStream", "ZipOutputStream", "GZIPOutputStream", "ZipOutputStream"], "class_description": "This class implements an output stream filter for compressing data in\n the \"deflate\" compression format. It is also used as the basis for other\n types of compression filters, such as GZIPOutputStream. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["FilterOutputStream"], "Methods": [{"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " the output stream"}, {"param_name": ["def"], "param_type": "Deflater", "param_description": " the compressor (\"deflater\")"}, {"param_name": ["size"], "param_type": "int", "param_description": " the output buffer size"}, {"param_name": ["syncFlush"], "param_type": "boolean", "param_description": " if true the flush() method of this\n        instance flushes the compressor with flush mode\n        Deflater#SYNC_FLUSH before flushing the output\n        stream, otherwise only flushes the output stream"}], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new output stream with the specified compressor,\n buffer size and flush mode.\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " the output stream"}, {"param_name": ["def"], "param_type": "Deflater", "param_description": " the compressor (\"deflater\")"}, {"param_name": ["size"], "param_type": "int", "param_description": " the output buffer size"}], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new output stream with the specified compressor and\n buffer size.\n\n \nThe new output stream instance is created as if by invoking\n the 4-argument constructor DeflaterOutputStream(out, def, size, false).\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " the output stream"}, {"param_name": ["def"], "param_type": "Deflater", "param_description": " the compressor (\"deflater\")"}, {"param_name": ["syncFlush"], "param_type": "boolean", "param_description": " if true the flush() method of this\n        instance flushes the compressor with flush mode\n        Deflater#SYNC_FLUSH before flushing the output\n        stream, otherwise only flushes the output stream"}], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new output stream with the specified compressor, flush\n mode and a default buffer size.\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " the output stream"}, {"param_name": ["def"], "param_type": "Deflater", "param_description": " the compressor (\"deflater\")"}], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new output stream with the specified compressor and\n a default buffer size.\n\n \nThe new output stream instance is created as if by invoking\n the 3-argument constructor DeflaterOutputStream(out, def, false).\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " the output stream"}, {"param_name": ["syncFlush"], "param_type": "boolean", "param_description": " if true the flush() method of this\n        instance flushes the compressor with flush mode\n        Deflater#SYNC_FLUSH before flushing the output\n        stream, otherwise only flushes the output stream"}], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new output stream with a default compressor, a default\n buffer size and the specified flush mode.\n", "method_declar": ""}, {"params": [{"param_name": ["out"], "param_type": "OutputStream", "param_description": " the output stream"}], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new output stream with a default compressor and buffer size.\n\n \nThe new output stream instance is created as if by invoking\n the 2-argument constructor DeflaterOutputStream(out, false).\n", "method_declar": ""}, {"params": [], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Writes remaining compressed data to the output stream and closes the\n underlying stream.\n", "method_declar": ""}, {"params": [], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "finish", "method_description": "Finishes writing compressed data to the output stream without closing\n the underlying stream. Use this method when applying multiple filters\n in succession to the same output stream.\n", "method_declar": ""}, {"params": [], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "flush", "method_description": "Flushes the compressed output stream.\n\n If syncFlush is true when this compressed output stream is\n constructed, this method first flushes the underlying compressor\n with the flush mode Deflater#SYNC_FLUSH to force\n all pending data to be flushed out to the output stream and then\n flushes the output stream. Otherwise this method only flushes the\n output stream without flushing the compressor.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the data to be written"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data"}, {"param_name": ["len"], "param_type": "int", "param_description": " the length of the data"}], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes an array of bytes to the compressed output stream. This\n method will block until all the bytes are written.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "int", "param_description": " the byte to be written"}], "class_name": "DeflaterOutputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "write", "method_description": "Writes a byte to the compressed output stream. This method will\n block until the byte can be written.\n", "method_declar": ""}], "class_name": "DeflaterOutputStream", "Vars": null}