{"package_name": "java.util.zip", "subclass_list": [], "class_description": "This class provides support for general purpose decompression using the\n popular ZLIB compression library. The ZLIB compression library was\n initially developed as part of the PNG graphics standard and is not\n protected by patents. It is fully described in the specifications at\n the java.util.zip\n package description. The following code fragment demonstrates a trivial compression\n and decompression of a string using Deflater and\n Inflater. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["nowrap"], "param_type": "boolean", "param_description": " if true then support GZIP compatible compression"}], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new decompressor. If the parameter 'nowrap' is true then\n the ZLIB header and checksum fields will not be used. This provides\n compatibility with the compression format used by both GZIP and PKZIP.\n \n\n Note: When using the 'nowrap' option it is also necessary to provide\n an extra \"dummy\" byte as input. This is required by the ZLIB native\n library in order to support certain optimizations.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new decompressor.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "end", "method_description": "Closes the decompressor and discards any unprocessed input.\n This method should be called when the decompressor is no longer\n being used, but will also be called automatically by the finalize()\n method. Once this method is called, the behavior of the Inflater\n object is undefined.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the end of the compressed data stream has been\n reached"], "return_type": ["boolean"]}, "method_name": "finished", "method_description": "Returns true if the end of the compressed data stream has been\n reached.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the ADLER-32 value of the uncompressed data"], "return_type": ["int"]}, "method_name": "getAdler", "method_description": "Returns the ADLER-32 value of the uncompressed data.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total (non-negative) number of compressed bytes input so far"], "return_type": ["long"]}, "method_name": "getBytesRead", "method_description": "Returns the total number of compressed bytes input so far.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total (non-negative) number of uncompressed bytes output so far"], "return_type": ["long"]}, "method_name": "getBytesWritten", "method_description": "Returns the total number of uncompressed bytes output so far.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes remaining in the input buffer"], "return_type": ["int"]}, "method_name": "getRemaining", "method_description": "Returns the total number of bytes remaining in the input buffer.\n This can be used to find out what bytes still remain in the input\n buffer after decompression has finished.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of compressed bytes input so far"], "return_type": ["int"]}, "method_name": "getTotalIn", "method_description": "Returns the total number of compressed bytes input so far.\n\n \nSince the number of bytes may be greater than\n Integer.MAX_VALUE, the getBytesRead() method is now\n the preferred means of obtaining this information.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of uncompressed bytes output so far"], "return_type": ["int"]}, "method_name": "getTotalOut", "method_description": "Returns the total number of uncompressed bytes output so far.\n\n \nSince the number of bytes may be greater than\n Integer.MAX_VALUE, the getBytesWritten() method is now\n the preferred means of obtaining this information.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer for the uncompressed data"}], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of uncompressed bytes"], "return_type": ["int"]}, "method_name": "inflate", "method_description": "Uncompresses bytes into specified buffer. Returns actual number\n of bytes uncompressed. A return value of 0 indicates that\n needsInput() or needsDictionary() should be called in order to\n determine if more input data or a preset dictionary is required.\n In the latter case, getAdler() can be used to get the Adler-32\n value of the dictionary required.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer for the uncompressed data"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data"}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of uncompressed bytes"}], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of uncompressed bytes"], "return_type": ["int"]}, "method_name": "inflate", "method_description": "Uncompresses bytes into specified buffer. Returns actual number\n of bytes uncompressed. A return value of 0 indicates that\n needsInput() or needsDictionary() should be called in order to\n determine if more input data or a preset dictionary is required.\n In the latter case, getAdler() can be used to get the Adler-32\n value of the dictionary required.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if a preset dictionary is needed for decompression"], "return_type": ["boolean"]}, "method_name": "needsDictionary", "method_description": "Returns true if a preset dictionary is needed for decompression.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if no data remains in the input buffer"], "return_type": ["boolean"]}, "method_name": "needsInput", "method_description": "Returns true if no data remains in the input buffer. This can\n be used to determine if #setInput should be called in order\n to provide more input.\n", "method_declar": ""}, {"params": [], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets inflater so that a new set of input data can be processed.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the dictionary data bytes"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data"}, {"param_name": ["len"], "param_type": "int", "param_description": " the length of the data"}], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDictionary", "method_description": "Sets the preset dictionary to the given array of bytes. Should be\n called when inflate() returns 0 and needsDictionary() returns true\n indicating that a preset dictionary is required. The method getAdler()\n can be used to get the Adler-32 value of the dictionary needed.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the dictionary data bytes"}], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDictionary", "method_description": "Sets the preset dictionary to the given array of bytes. Should be\n called when inflate() returns 0 and needsDictionary() returns true\n indicating that a preset dictionary is required. The method getAdler()\n can be used to get the Adler-32 value of the dictionary needed.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the input data bytes"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the input data"}, {"param_name": ["len"], "param_type": "int", "param_description": " the length of the input data"}], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setInput", "method_description": "Sets input data for decompression. Should be called whenever\n needsInput() returns true indicating that more input data is\n required.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the input data bytes"}], "class_name": "Inflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setInput", "method_description": "Sets input data for decompression. Should be called whenever\n needsInput() returns true indicating that more input data is\n required.\nSee also:\n", "method_declar": ""}], "class_name": "Inflater", "Vars": null}