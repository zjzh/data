{"package_name": "java.util.zip", "subclass_list": ["GZIPInputStream", "ZipInputStream", "GZIPInputStream", "ZipInputStream"], "class_description": "This class implements a stream filter for uncompressing data in the\n \"deflate\" compression format. It is also used as the basis for other\n decompression filters, such as GZIPInputStream. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["FilterInputStream"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " the input stream"}, {"param_name": ["inf"], "param_type": "Inflater", "param_description": " the decompressor (\"inflater\")"}, {"param_name": ["size"], "param_type": "int", "param_description": " the input buffer size"}], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new input stream with the specified decompressor and\n buffer size.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " the input stream"}, {"param_name": ["inf"], "param_type": "Inflater", "param_description": " the decompressor (\"inflater\")"}], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new input stream with the specified decompressor and a\n default buffer size.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " the input stream"}], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new input stream with a default decompressor and buffer size.\n", "method_declar": ""}, {"params": [], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["1 before EOF and 0 after EOF."], "return_type": ["int"]}, "method_name": "available", "method_description": "Returns 0 after EOF has been reached, otherwise always return 1.\n \n\n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking.\n", "method_declar": ""}, {"params": [], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this input stream and releases any system resources associated\n with the stream.\n", "method_declar": ""}, {"params": [{"param_name": ["readlimit"], "param_type": "int", "param_description": " the maximum limit of bytes that can be read before\n                      the mark position becomes invalid."}], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "Marks the current position in this input stream.\n\n \n The mark method of InflaterInputStream\n does nothing.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["a boolean indicating if this stream type supports\n          the mark and reset methods."], "return_type": ["boolean"]}, "method_name": "markSupported", "method_description": "Tests if this input stream supports the mark and\n reset methods. The markSupported\n method of InflaterInputStream returns\n false.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the byte read, or -1 if end of compressed input is reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads a byte of uncompressed data. This method will block until\n enough input is available for decompression.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the destination array b"}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes read"}], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes read, or -1 if the end of the\n         compressed input is reached or a preset dictionary is needed"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads uncompressed data into an array of bytes. If len is not\n zero, the method will block until some input can be decompressed; otherwise,\n no bytes are read and 0 is returned.\n", "method_declar": ""}, {"params": [], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Repositions this stream to the position at the time the\n mark method was last called on this input stream.\n\n \n The method reset for class\n InflaterInputStream does nothing except throw an\n IOException.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " the number of bytes to skip"}], "class_name": "InflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes skipped."], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skips specified number of bytes of uncompressed data.\n", "method_declar": ""}], "class_name": "InflaterInputStream", "Vars": null}