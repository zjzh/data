{"package_name": "java.util.zip", "subclass_list": [], "class_description": "This class provides support for general purpose compression using the\n popular ZLIB compression library. The ZLIB compression library was\n initially developed as part of the PNG graphics standard and is not\n protected by patents. It is fully described in the specifications at\n the java.util.zip\n package description. The following code fragment demonstrates a trivial compression\n and decompression of a string using Deflater and\n Inflater. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["level"], "param_type": "int", "param_description": " the compression level (0-9)"}, {"param_name": ["nowrap"], "param_type": "boolean", "param_description": " if true then use GZIP compatible compression"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new compressor using the specified compression level.\n If 'nowrap' is true then the ZLIB header and checksum fields will\n not be used in order to support the compression format used in\n both GZIP and PKZIP.\n", "method_declar": ""}, {"params": [{"param_name": ["level"], "param_type": "int", "param_description": " the compression level (0-9)"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new compressor using the specified compression level.\n Compressed data will be generated in ZLIB format.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new compressor with the default compression level.\n Compressed data will be generated in ZLIB format.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer for the compressed data"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data"}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes of compressed data"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes of compressed data written to the\n         output buffer"], "return_type": ["int"]}, "method_name": "deflate", "method_description": "Compresses the input data and fills specified buffer with compressed\n data. Returns actual number of bytes of compressed data. A return value\n of 0 indicates that needsInput should be called\n in order to determine if more input data is required.\n\n \nThis method uses NO_FLUSH as its compression flush mode.\n An invocation of this method of the form deflater.deflate(b, off, len)\n yields the same result as the invocation of\n deflater.deflate(b, off, len, Deflater.NO_FLUSH).\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer for the compressed data"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes of compressed data written to the\n         output buffer"], "return_type": ["int"]}, "method_name": "deflate", "method_description": "Compresses the input data and fills specified buffer with compressed\n data. Returns actual number of bytes of compressed data. A return value\n of 0 indicates that needsInput should be called\n in order to determine if more input data is required.\n\n \nThis method uses NO_FLUSH as its compression flush mode.\n An invocation of this method of the form deflater.deflate(b)\n yields the same result as the invocation of\n deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH).\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer for the compressed data"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data"}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes of compressed data"}, {"param_name": ["flush"], "param_type": "int", "param_description": " the compression flush mode"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes of compressed data written to\n         the output buffer"], "return_type": ["int"]}, "method_name": "deflate", "method_description": "Compresses the input data and fills the specified buffer with compressed\n data. Returns actual number of bytes of data compressed.\n\n \nCompression flush mode is one of the following three modes:\n\n \nIn the case of FULL_FLUSH or SYNC_FLUSH, if\n the return value is len, the space available in output\n buffer b, this method should be invoked again with the same\n flush parameter and more output space.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "end", "method_description": "Closes the compressor and discards any unprocessed input.\n This method should be called when the compressor is no longer\n being used, but will also be called automatically by the\n finalize() method. Once this method is called, the behavior\n of the Deflater object is undefined.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "finish", "method_description": "When called, indicates that compression should end with the current\n contents of the input buffer.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the end of the compressed data output stream has\n been reached"], "return_type": ["boolean"]}, "method_name": "finished", "method_description": "Returns true if the end of the compressed data output stream has\n been reached.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the ADLER-32 value of the uncompressed data"], "return_type": ["int"]}, "method_name": "getAdler", "method_description": "Returns the ADLER-32 value of the uncompressed data.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total (non-negative) number of uncompressed bytes input so far"], "return_type": ["long"]}, "method_name": "getBytesRead", "method_description": "Returns the total number of uncompressed bytes input so far.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total (non-negative) number of compressed bytes output so far"], "return_type": ["long"]}, "method_name": "getBytesWritten", "method_description": "Returns the total number of compressed bytes output so far.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of uncompressed bytes input so far"], "return_type": ["int"]}, "method_name": "getTotalIn", "method_description": "Returns the total number of uncompressed bytes input so far.\n\n \nSince the number of bytes may be greater than\n Integer.MAX_VALUE, the getBytesRead() method is now\n the preferred means of obtaining this information.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of compressed bytes output so far"], "return_type": ["int"]}, "method_name": "getTotalOut", "method_description": "Returns the total number of compressed bytes output so far.\n\n \nSince the number of bytes may be greater than\n Integer.MAX_VALUE, the getBytesWritten() method is now\n the preferred means of obtaining this information.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the input data buffer is empty and setInput()\n should be called in order to provide more input"], "return_type": ["boolean"]}, "method_name": "needsInput", "method_description": "Returns true if the input data buffer is empty and setInput()\n should be called in order to provide more input.\n", "method_declar": ""}, {"params": [], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "Resets deflater so that a new set of input data can be processed.\n Keeps current compression level and strategy settings.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the dictionary data bytes"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data"}, {"param_name": ["len"], "param_type": "int", "param_description": " the length of the data"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDictionary", "method_description": "Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the dictionary data bytes"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setDictionary", "method_description": "Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the input data bytes"}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset of the data"}, {"param_name": ["len"], "param_type": "int", "param_description": " the length of the data"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setInput", "method_description": "Sets input data for compression. This should be called whenever\n needsInput() returns true indicating that more input data is required.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the input data bytes"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setInput", "method_description": "Sets input data for compression. This should be called whenever\n needsInput() returns true indicating that more input data is required.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["level"], "param_type": "int", "param_description": " the new compression level (0-9)"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setLevel", "method_description": "Sets the compression level to the specified value.\n\n \n If the compression level is changed, the next invocation\n of deflate will compress the input available so far\n with the old level (and may be flushed); the new level will\n take effect only after that invocation.\n", "method_declar": ""}, {"params": [{"param_name": ["strategy"], "param_type": "int", "param_description": " the new compression strategy"}], "class_name": "Deflater", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setStrategy", "method_description": "Sets the compression strategy to the specified value.\n\n \n If the compression strategy is changed, the next invocation\n of deflate will compress the input available so far with\n the old strategy (and may be flushed); the new strategy will take\n effect only after that invocation.\n", "method_declar": ""}], "class_name": "Deflater", "Vars": null}