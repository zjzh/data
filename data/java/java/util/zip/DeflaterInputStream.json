{"package_name": "java.util.zip", "subclass_list": [], "class_description": "Implements an input stream filter for compressing data in the \"deflate\"\n compression format. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["FilterInputStream"], "Methods": [{"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " input stream to read the uncompressed data to"}], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new input stream with a default compressor and buffer\n size.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " input stream to read the uncompressed data to"}, {"param_name": ["defl"], "param_type": "Deflater", "param_description": " compressor (\"deflater\") for this stream"}], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new input stream with the specified compressor and a\n default buffer size.\n", "method_declar": ""}, {"params": [{"param_name": ["in"], "param_type": "InputStream", "param_description": " input stream to read the uncompressed data to"}, {"param_name": ["defl"], "param_type": "Deflater", "param_description": " compressor (\"deflater\") for this stream"}, {"param_name": ["bufLen"], "param_type": "int", "param_description": " compression buffer size"}], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new input stream with the specified compressor and buffer\n size.\n", "method_declar": ""}, {"params": [], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["zero after the end of the underlying input stream has been\n reached, otherwise always returns 1"], "return_type": ["int"]}, "method_name": "available", "method_description": "Returns 0 after EOF has been reached, otherwise always return 1.\n \n\n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking\n", "method_declar": ""}, {"params": [], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this input stream and its underlying input stream, discarding\n any pending uncompressed data.\n", "method_declar": ""}, {"params": [{"param_name": ["limit"], "param_type": "int", "param_description": " maximum bytes that can be read before invalidating the position marker"}], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "mark", "method_description": "This operation is not supported.\n", "method_declar": ""}, {"params": [], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["false, always"], "return_type": ["boolean"]}, "method_name": "markSupported", "method_description": "Always returns false because this input stream does not support\n the mark() and reset() methods.\n", "method_declar": ""}, {"params": [], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["a single byte of compressed data, or -1 if the end of the\n uncompressed input stream is reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads a single byte of compressed data from the input stream.\n This method will block until some input can be read and compressed.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " buffer into which the data is read"}, {"param_name": ["off"], "param_type": "int", "param_description": " starting offset of the data within b"}, {"param_name": ["len"], "param_type": "int", "param_description": " maximum number of compressed bytes to read into b"}], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes read, or -1 if the end of the\n uncompressed input stream is reached"], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads compressed data into a byte array.\n This method will block until some input can be read and compressed.\n", "method_declar": ""}, {"params": [], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "reset", "method_description": "This operation is not supported.\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " number of bytes to be skipped"}], "class_name": "DeflaterInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes skipped"], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skips over and discards data from the input stream.\n This method may block until the specified number of bytes are read and\n skipped. Note: While n is given as a long,\n the maximum number of bytes which can be skipped is\n Integer.MAX_VALUE.\n", "method_declar": ""}], "class_name": "DeflaterInputStream", "Vars": null}