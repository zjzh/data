{"package_name": "java.util.prefs", "subclass_list": ["AbstractPreferences", "AbstractPreferences", "Preferences"], "class_description": "A node in a hierarchical collection of preference data.  This class\n allows applications to store and retrieve user and system\n preference and configuration data.  This data is stored\n persistently in an implementation-dependent backing store.  Typical\n implementations include flat files, OS-specific registries,\n directory servers and SQL databases.  The user of this class needn't\n be concerned with details of the backing store. There are two separate trees of preference nodes, one for user\n preferences and one for system preferences.  Each user has a separate user\n preference tree, and all users in a given system share the same system\n preference tree.  The precise description of \"user\" and \"system\" will vary\n from implementation to implementation.  Typical information stored in the\n user preference tree might include font choice, color choice, or preferred\n window location and size for a particular application.  Typical information\n stored in the system preference tree might include installation\n configuration data for an application. Nodes in a preference tree are named in a similar fashion to\n directories in a hierarchical file system.   Every node in a preference\n tree has a node name (which is not necessarily unique),\n a unique absolute path name, and a path name relative to each\n ancestor including itself. The root node has a node name of the empty string (\"\").  Every other\n node has an arbitrary node name, specified at the time it is created.  The\n only restrictions on this name are that it cannot be the empty string, and\n it cannot contain the slash character ('/'). The root node has an absolute path name of \"/\".  Children of\n the root node have absolute path names of \"/\" + <node\n name>.  All other nodes have absolute path names of <parent's\n absolute path name> + \"/\" + <node name>.\n Note that all absolute path names begin with the slash character. A node n's path name relative to its ancestor a\n is simply the string that must be appended to a's absolute path name\n in order to form n's absolute path name, with the initial slash\n character (if present) removed.  Note that: Note finally that: All of the methods that modify preferences data are permitted to operate\n asynchronously; they may return immediately, and changes will eventually\n propagate to the persistent backing store with an implementation-dependent\n delay.  The flush method may be used to synchronously force\n updates to the backing store.  Normal termination of the Java Virtual\n Machine will not result in the loss of pending updates -- an explicit\n flush invocation is not required upon termination to ensure\n that pending updates are made persistent. All of the methods that read preferences from a Preferences\n object require the invoker to provide a default value.  The default value is\n returned if no value has been previously set or if the backing store is\n unavailable.  The intent is to allow applications to operate, albeit\n with slightly degraded functionality, even if the backing store becomes\n unavailable.  Several methods, like flush, have semantics that\n prevent them from operating if the backing store is unavailable.  Ordinary\n applications should have no need to invoke any of these methods, which can\n be identified by the fact that they are declared to throw BackingStoreException. The methods in this class may be invoked concurrently by multiple threads\n in a single JVM without the need for external synchronization, and the\n results will be equivalent to some serial execution.  If this class is used\n concurrently by multiple JVMs that store their preference data in\n the same backing store, the data store will not be corrupted, but no\n other guarantees are made concerning the consistency of the preference\n data. This class contains an export/import facility, allowing preferences\n to be \"exported\" to an XML document, and XML documents representing\n preferences to be \"imported\" back into the system.  This facility\n may be used to back up all or part of a preference tree, and\n subsequently restore from the backup. The XML document has the following DOCTYPE declaration: Implementation note: In Sun's JRE, the PreferencesFactory\n implementation is located as follows: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "Preferences", "Vars": null}