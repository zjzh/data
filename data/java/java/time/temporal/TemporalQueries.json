{"package_name": "java.time.temporal", "subclass_list": [], "class_description": "Common implementations of TemporalQuery. This class provides common implementations of TemporalQuery.\n These are defined here as they must be constants, and the definition\n of lambdas does not guarantee that. By assigning them once here,\n they become 'normal' Java constants. Queries are a key tool for extracting information from temporal objects.\n They exist to externalize the process of querying, permitting different\n approaches, as per the strategy design pattern.\n Examples might be a query that checks if the date is the day before February 29th\n in a leap year, or calculates the number of days to your next birthday. The TemporalField interface provides another mechanism for querying\n temporal objects. That interface is limited to returning a long.\n By contrast, queries can return any type. There are two equivalent ways of using a TemporalQuery.\n The first is to invoke the method on this interface directly.\n The second is to use TemporalAccessor#query(TemporalQuery): The most common implementations are method references, such as\n LocalDate::from and ZoneId::from.\n Additional common queries are provided to return: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "TemporalQueries", "Vars": null}