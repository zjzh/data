{"package_name": "java.time.temporal", "subclass_list": ["ChronoLocalDate", "ChronoLocalDateTime", "ChronoLocalDate", "ChronoZonedDateTime", "ChronoLocalDate", "HijrahDate", "Instant", "JapaneseDate", "LocalDate", "LocalDateTime", "LocalTime", "MinguoDate", "OffsetDateTime", "OffsetTime", "ThaiBuddhistDate", "Year", "YearMonth", "ZonedDateTime", "ChronoLocalDate", "ChronoLocalDateTime", "ChronoLocalDate", "ChronoZonedDateTime", "ChronoLocalDate", "HijrahDate", "Instant", "JapaneseDate", "LocalDate", "LocalDateTime", "LocalTime", "MinguoDate", "OffsetDateTime", "OffsetTime", "ThaiBuddhistDate", "Year", "YearMonth", "ZonedDateTime"], "class_description": "Framework-level interface defining read-write access to a temporal object,\n such as a date, time, offset or some combination of these. This is the base interface type for date, time and offset objects that\n are complete enough to be manipulated using plus and minus.\n It is implemented by those classes that can provide and manipulate information\n as TemporalField or TemporalQuery.\n See TemporalAccessor for the read-only version of this interface. Most date and time information can be represented as a number.\n These are modeled using TemporalField with the number held using\n a long to handle large values. Year, month and day-of-month are\n simple examples of fields, but they also include instant and offsets.\n See ChronoField for the standard set of fields. Two pieces of date/time information cannot be represented by numbers,\n the chronology and the\n time-zone.\n These can be accessed via queries using\n the static methods defined on TemporalQuery. This interface is a framework-level interface that should not be widely\n used in application code. Instead, applications should create and pass\n around instances of concrete types, such as LocalDate.\n There are many reasons for this, part of which is that implementations\n of this interface may be in calendar systems other than ISO.\n See ChronoLocalDate for a fuller discussion of the issues. A class should implement this interface if it meets three criteria: Four examples make this clear: ", "class_type": "interface", "typealias": [], "interface_list": ["TemporalAccessor"], "class_inherit_list": [], "Methods": [], "class_name": "Temporal", "Vars": null}