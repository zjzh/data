{"package_name": "java.time.temporal", "subclass_list": [], "class_description": "Strategy for querying a temporal object. Queries are a key tool for extracting information from temporal objects.\n They exist to externalize the process of querying, permitting different\n approaches, as per the strategy design pattern.\n Examples might be a query that checks if the date is the day before February 29th\n in a leap year, or calculates the number of days to your next birthday. The TemporalField interface provides another mechanism for querying\n temporal objects. That interface is limited to returning a long.\n By contrast, queries can return any type. There are two equivalent ways of using a TemporalQuery.\n The first is to invoke the method on this interface directly.\n The second is to use TemporalAccessor#query(TemporalQuery): The most common implementations are method references, such as\n LocalDate::from and ZoneId::from.\n Additional common queries are provided as static methods in TemporalQueries. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "TemporalQuery", "Vars": null}