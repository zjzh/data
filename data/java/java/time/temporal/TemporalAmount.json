{"package_name": "java.time.temporal", "subclass_list": ["ChronoPeriod", "Duration", "Period", "ChronoPeriod", "Duration", "Period"], "class_description": "Framework-level interface defining an amount of time, such as\n \"6 hours\", \"8 days\" or \"2 years and 3 months\". This is the base interface type for amounts of time.\n An amount is distinct from a date or time-of-day in that it is not tied\n to any specific point on the time-line. The amount can be thought of as a Map of TemporalUnit to\n long, exposed via getUnits() and get(java.time.temporal.TemporalUnit).\n A simple case might have a single unit-value pair, such as \"6 hours\".\n A more complex case may have multiple unit-value pairs, such as\n \"7 years, 3 months and 5 days\". There are two common implementations.\n Period is a date-based implementation, storing years, months and days.\n Duration is a time-based implementation, storing seconds and nanoseconds,\n but providing some access using other duration based units such as minutes,\n hours and fixed 24-hour days. This interface is a framework-level interface that should not be widely\n used in application code. Instead, applications should create and pass\n around instances of concrete types, such as Period and Duration. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "TemporalAmount", "Vars": null}