{"package_name": "java.time", "subclass_list": ["ZoneOffset", "ZoneOffset"], "class_description": "A time-zone ID, such as Europe/Paris. A ZoneId is used to identify the rules used to convert between\n an Instant and a LocalDateTime.\n There are two distinct types of ID: The actual rules, describing when and how the offset changes, are defined by ZoneRules.\n This class is simply an ID used to obtain the underlying rules.\n This approach is taken because rules are defined by governments and change\n frequently, whereas the ID is stable. The distinction has other effects. Serializing the ZoneId will only send\n the ID, whereas serializing the rules sends the entire data set.\n Similarly, a comparison of two IDs only examines the ID, whereas\n a comparison of two rules examines the entire data set. The simplest type of ID is that from ZoneOffset.\n This consists of 'Z' and IDs starting with '+' or '-'. The next type of ID are offset-style IDs with some form of prefix,\n such as 'GMT+2' or 'UTC+01:00'.\n The recognised prefixes are 'UTC', 'GMT' and 'UT'.\n The offset is the suffix and will be normalized during creation.\n These IDs can be normalized to a ZoneOffset using normalized(). The third type of ID are region-based IDs. A region-based ID must be of\n two or more characters, and not start with 'UTC', 'GMT', 'UT' '+' or '-'.\n Region-based IDs are defined by configuration.\n The configuration focuses on providing the lookup from the ID to the\n underlying ZoneRules. Time-zone rules are defined by governments and change frequently.\n There are a number of organizations, known here as groups, that monitor\n time-zone changes and collate them.\n The default group is the IANA Time Zone Database (TZDB).\n Other organizations include IATA (the airline industry body) and Microsoft. Each group defines its own format for the region ID it provides.\n The TZDB group defines IDs such as 'Europe/London' or 'America/New_York'.\n TZDB IDs take precedence over other groups. It is strongly recommended that the group name is included in all IDs supplied by\n groups other than TZDB to avoid conflicts. For example, IATA airline time-zone\n region IDs are typically the same as the three letter airport code.\n However, the airport of Utrecht has the code 'UTC', which is obviously a conflict.\n The recommended format for region IDs from groups other than TZDB is 'group~region'.\n Thus if IATA data were defined, Utrecht airport would be 'IATA~UTC'. A ZoneId can be deserialized in a Java Runtime where the ID is unknown.\n For example, if a server-side Java Runtime has been updated with a new zone ID, but\n the client-side Java Runtime has not been updated. In this case, the ZoneId\n object will exist, and can be queried using getId, equals,\n hashCode, toString, getDisplayName and normalized.\n However, any call to getRules will fail with ZoneRulesException.\n This approach is designed to allow a ZonedDateTime to be loaded and\n queried, but not modified, on a Java Runtime with incomplete time-zone information. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "ZoneId", "Vars": null}