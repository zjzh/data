{"package_name": "java.time", "subclass_list": [], "class_description": "A date-based amount of time in the ISO-8601 calendar system,\n such as '2 years, 3 months and 4 days'. This class models a quantity or amount of time in terms of years, months and days.\n See Duration for the time-based equivalent to this class. Durations and periods differ in their treatment of daylight savings time\n when added to ZonedDateTime. A Duration will add an exact\n number of seconds, thus a duration of one day is always exactly 24 hours.\n By contrast, a Period will add a conceptual day, trying to maintain\n the local time. For example, consider adding a period of one day and a duration of one day to\n 18:00 on the evening before a daylight savings gap. The Period will add\n the conceptual day and result in a ZonedDateTime at 18:00 the following day.\n By contrast, the Duration will add exactly 24 hours, resulting in a\n ZonedDateTime at 19:00 the following day (assuming a one hour DST gap). The supported units of a period are ChronoUnit#YEARS,\n ChronoUnit#MONTHS and ChronoUnit#DAYS.\n All three fields are always present, but may be set to zero. The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today's rules for leap years are applied for all time. The period is modeled as a directed amount of time, meaning that individual parts of the\n period may be negative. ", "class_type": "class", "typealias": [], "interface_list": ["ChronoPeriod", "Serializable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "Period", "Vars": null}