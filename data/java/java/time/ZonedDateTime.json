{"package_name": "java.time", "subclass_list": [], "class_description": "A date-time with a time-zone in the ISO-8601 calendar system,\n such as 2007-12-03T10:15:30+01:00 Europe/Paris. ZonedDateTime is an immutable representation of a date-time with a time-zone.\n This class stores all date and time fields, to a precision of nanoseconds,\n and a time-zone, with a zone offset used to handle ambiguous local date-times.\n For example, the value\n \"2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris time-zone\"\n can be stored in a ZonedDateTime. This class handles conversion from the local time-line of LocalDateTime\n to the instant time-line of Instant.\n The difference between the two time-lines is the offset from UTC/Greenwich,\n represented by a ZoneOffset. Converting between the two time-lines involves calculating the offset using the\n ZoneRules accessed from the ZoneId.\n Obtaining the offset for an instant is simple, as there is exactly one valid\n offset for each instant. By contrast, obtaining the offset for a local date-time\n is not straightforward. There are three cases: Any method that converts directly or implicitly from a local date-time to an\n instant by obtaining the offset has the potential to be complicated. For Gaps, the general strategy is that if the local date-time falls in the\n middle of a Gap, then the resulting zoned date-time will have a local date-time\n shifted forwards by the length of the Gap, resulting in a date-time in the later\n offset, typically \"summer\" time. For Overlaps, the general strategy is that if the local date-time falls in the\n middle of an Overlap, then the previous offset will be retained. If there is no\n previous offset, or the previous offset is invalid, then the earlier offset is\n used, typically \"summer\" time.. Two additional methods,\n withEarlierOffsetAtOverlap() and withLaterOffsetAtOverlap(),\n help manage the case of an overlap. In terms of design, this class should be viewed primarily as the combination\n of a LocalDateTime and a ZoneId. The ZoneOffset is\n a vital, but secondary, piece of information, used to ensure that the class\n represents an instant, especially during a daylight savings overlap. ", "class_type": "class", "typealias": [], "interface_list": ["Temporal", "ChronoZonedDateTime<LocalDate>", "Serializable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "ZonedDateTime", "Vars": null}