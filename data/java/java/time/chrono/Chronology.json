{"package_name": "java.time.chrono", "subclass_list": ["AbstractChronology", "HijrahChronology", "IsoChronology", "JapaneseChronology", "MinguoChronology", "ThaiBuddhistChronology", "AbstractChronology", "HijrahChronology", "IsoChronology", "JapaneseChronology", "MinguoChronology", "ThaiBuddhistChronology"], "class_description": "A calendar system, used to organize and identify dates. The main date and time API is built on the ISO calendar system.\n The chronology operates behind the scenes to represent the general concept of a calendar system.\n For example, the Japanese, Minguo, Thai Buddhist and others. Most other calendar systems also operate on the shared concepts of year, month and day,\n linked to the cycles of the Earth around the Sun, and the Moon around the Earth.\n These shared concepts are defined by ChronoField and are available\n for use by any Chronology implementation: While a Chronology object typically uses ChronoField and is based on\n an era, year-of-era, month-of-year, day-of-month model of a date, this is not required.\n A Chronology instance may represent a totally different kind of calendar system,\n such as the Mayan. In practical terms, the Chronology instance also acts as a factory.\n The of(java.lang.String) method allows an instance to be looked up by identifier,\n while the ofLocale(java.util.Locale) method allows lookup by locale. The Chronology instance provides a set of methods to create ChronoLocalDate instances.\n The date classes are used to manipulate specific dates. To permit the discovery of additional chronologies, the ServiceLoader\n is used. A file must be added to the META-INF/services directory with the\n name 'java.time.chrono.Chronology' listing the implementation classes.\n See the ServiceLoader for more details on service loading.\n For lookup by id or calendarType, the system provided calendars are found\n first followed by application provided calendars. Each chronology must define a chronology ID that is unique within the system.\n If the chronology represents a calendar system defined by the\n CLDR specification then the calendar type is the concatenation of the\n CLDR type and, if applicable, the CLDR variant, ", "class_type": "interface", "typealias": [], "interface_list": ["Comparable<Chronology>"], "class_inherit_list": [], "Methods": [], "class_name": "Chronology", "Vars": null}