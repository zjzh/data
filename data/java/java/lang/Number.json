{"package_name": "java.lang", "subclass_list": ["AtomicInteger", "AtomicLong", "BigDecimal", "BigInteger", "Byte", "Double", "DoubleAccumulator", "DoubleAdder", "Float", "Half", "Integer", "Long", "LongAccumulator", "LongAdder", "Rational", "Short", "AtomicInteger", "AtomicLong", "BigDecimal", "BigInteger", "Byte", "Double", "DoubleAccumulator", "DoubleAdder", "Float", "Half", "IEEE 754", "Integer", "Long", "LongAccumulator", "LongAdder", "Rational", "Short"], "class_description": "The abstract class Number is the superclass of platform\n classes representing numeric values that are convertible to the\n primitive types byte, double, float, int, long, and short.\n\n The specific semantics of the conversion from the numeric value of\n a particular Number implementation to a given primitive\n type is defined by the Number implementation in question.\n\n For platform classes, the conversion is often analogous to a\n narrowing primitive conversion or a widening primitive conversion\n as defining in The Java\u2122 Language Specification\n for converting between primitive types.  Therefore, conversions may\n lose information about the overall magnitude of a numeric value, may\n lose precision, and may even return a result of a different sign\n than the input.\n\n See the documentation of a given Number implementation for\n conversion details. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Number", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "Number", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type byte."], "return_type": ["byte"]}, "method_name": "byteValue", "method_description": "Returns the value of the specified number as a byte,\n which may involve rounding or truncation.\n\n \nThis implementation returns the result of intValue() cast\n to a byte.\n", "method_declar": ""}, {"params": [], "class_name": "Number", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type short."], "return_type": ["short"]}, "method_name": "shortValue", "method_description": "Returns the value of the specified number as a short,\n which may involve rounding or truncation.\n\n \nThis implementation returns the result of intValue() cast\n to a short.\n", "method_declar": ""}], "class_name": "Number", "Vars": null}