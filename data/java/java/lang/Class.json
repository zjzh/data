{"package_name": "java.lang", "subclass_list": [], "class_description": "Instances of the class Class represent classes and\n interfaces in a running Java application.  An enum is a kind of\n class and an annotation is a kind of interface.  Every array also\n belongs to a class that is reflected as a Class object\n that is shared by all arrays with the same element type and number\n of dimensions.  The primitive Java types (boolean,\n byte, char, short,\n int, long, float, and\n double), and the keyword void are also\n represented as Class objects. Class has no public constructor. Instead Class\n objects are constructed automatically by the Java Virtual Machine as classes\n are loaded and by calls to the defineClass method in the class\n loader. The following example uses a Class object to print the\n class name of an object: It is also possible to get the Class object for a named\n type (or for void) using a class literal.  See Section 15.8.2 of\n The Java\u2122 Language Specification.\n For example: ", "class_type": "class", "typealias": [], "interface_list": ["Serializable", "GenericDeclaration", "Type", "AnnotatedElement"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "Class", "Vars": null}