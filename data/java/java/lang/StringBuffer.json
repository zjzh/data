{"package_name": "java.lang", "subclass_list": [], "class_description": "A thread-safe, mutable sequence of characters.\n A string buffer is like a String, but can be modified. At any\n point in time it contains some particular sequence of characters, but\n the length and content of the sequence can be changed through certain\n method calls. String buffers are safe for use by multiple threads. The methods\n are synchronized where necessary so that all the operations on any\n particular instance behave as if they occur in some serial order\n that is consistent with the order of the method calls made by each of\n the individual threads involved. The principal operations on a StringBuffer are the\n append and insert methods, which are\n overloaded so as to accept data of any type. Each effectively\n converts a given datum to a string and then appends or inserts the\n characters of that string to the string buffer. The\n append method always adds these characters at the end\n of the buffer; the insert method adds the characters at\n a specified point. For example, if z refers to a string buffer object\n whose current contents are \"start\", then\n the method call z.append(\"le\") would cause the string\n buffer to contain \"startle\", whereas\n z.insert(4, \"le\") would alter the string buffer to\n contain \"starlet\". In general, if sb refers to an instance of a StringBuffer,\n then sb.append(x) has the same effect as\n sb.insert(sb.length(), x). Whenever an operation occurs involving a source sequence (such as\n appending or inserting from a source sequence), this class synchronizes\n only on the string buffer performing the operation, not on the source.\n Note that while StringBuffer is designed to be safe to use\n concurrently from multiple threads, if the constructor or the\n append or insert operation is passed a source sequence\n that is shared across threads, the calling code must ensure\n that the operation has a consistent and unchanging view of the source\n sequence for the duration of the operation.\n This could be satisfied by the caller holding a lock during the\n operation's call, by using an immutable source sequence, or by not\n sharing the source sequence across threads. Every string buffer has a capacity. As long as the length of the\n character sequence contained in the string buffer does not exceed\n the capacity, it is not necessary to allocate a new internal\n buffer array. If the internal buffer overflows, it is\n automatically made larger. Unless otherwise noted, passing a null argument to a constructor\n or method in this class will cause a NullPointerException to be\n thrown. As of  release JDK 5, this class has been supplemented with an equivalent\n class designed for use by a single thread, StringBuilder.  The\n StringBuilder class should generally be used in preference to\n this one, as it supports all of the same operations but it is faster, as\n it performs no synchronization. ", "class_type": "class", "typealias": [], "interface_list": ["Appendable", "CharSequence", "Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string buffer with no characters in it and an\n initial capacity of 16 characters.\n", "method_declar": ""}, {"params": [{"param_name": ["capacity"], "param_type": "int", "param_description": " the initial capacity."}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string buffer with no characters in it and\n the specified initial capacity.\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": " the initial contents of the buffer."}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string buffer initialized to the contents of the\n specified string. The initial capacity of the string buffer is\n 16 plus the length of the string argument.\n", "method_declar": ""}, {"params": [{"param_name": ["seq"], "param_type": "CharSequence", "param_description": " the sequence to copy."}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string buffer that contains the same characters\n as the specified CharSequence. The initial capacity of\n the string buffer is 16 plus the length of the\n CharSequence argument.\n \n\n If the length of the specified CharSequence is\n less than or equal to zero, then an empty buffer of capacity\n 16 is returned.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "boolean", "param_description": "\nboolean "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["lng"], "param_type": "long", "param_description": "\nlong "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "char", "param_description": " The character to append"}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": ["A reference to this Appendable"], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "Appends the specified character to this Appendable.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": "\nObject "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "char[]", "param_description": "\nchar "}, {"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["len"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": "\ndouble "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "char[]", "param_description": "\nchar "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["sb"], "param_type": "StringBuffer", "param_description": " the StringBuffer to append."}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reference to this object."], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "Appends the specified StringBuffer to this sequence.\n \n\n The characters of the StringBuffer argument are appended,\n in order, to the contents of this StringBuffer, increasing the\n length of this StringBuffer by the length of the argument.\n If sb is null, then the four characters\n \"null\" are appended to this StringBuffer.\n \n\n Let n be the length of the old character sequence, the one\n contained in the StringBuffer just prior to execution of the\n append method. Then the character at index k in\n the new character sequence is equal to the character at index k\n in the old character sequence, if k is less than n;\n otherwise, it is equal to the character at index k-n in the\n argument sb.\n \n\n This method synchronizes on this, the destination\n object, but does not synchronize on the source (sb).\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "float", "param_description": "\nfloat "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "CharSequence", "param_description": " The character sequence from which a subsequence will be\n         appended.  If csq is null, then characters\n         will be appended as if csq contained the four\n         characters \"null\"."}, {"param_name": ["start"], "param_type": "int", "param_description": " The index of the first character in the subsequence"}, {"param_name": ["end"], "param_type": "int", "param_description": " The index of the character following the last character in the\n         subsequence"}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": ["A reference to this Appendable"], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "Appends a subsequence of the specified character sequence to this\n Appendable.\n\n \n An invocation of this method of the form out.append(csq, start,\n end) when csq is not null, behaves in\n exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "CharSequence", "param_description": " the CharSequence to append."}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reference to this object."], "return_type": ["StringBuffer"]}, "method_name": "append", "method_description": "Appends the specified CharSequence to this\n sequence.\n \n\n The characters of the CharSequence argument are appended,\n in order, increasing the length of this sequence by the length of the\n argument.\n\n \nThe result of this method is exactly the same as if it were an\n invocation of this.append(s, 0, s.length());\n\n \nThis method synchronizes on this, the destination\n object, but does not synchronize on the source (s).\n\n \nIf s is null, then the four characters\n \"null\" are appended.\n", "method_declar": ""}, {"params": [{"param_name": ["codePoint"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "appendCodePoint", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "capacity", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index of the char value to be returned"}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": ["the specified char value"], "return_type": ["char"]}, "method_name": "charAt", "method_description": "Returns the char value at the specified index.  An index ranges from zero\n to length() - 1.  The first char value of the sequence is at\n index zero, the next at index one, and so on, as for array\n indexing.\n\n \nIf the char value specified by the index is a\n surrogate, the surrogate\n value is returned.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "codePointAt", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "codePointBefore", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["beginIndex"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["endIndex"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "codePointCount", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["end"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "delete", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "deleteCharAt", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["minimumCapacity"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "ensureCapacity", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["srcBegin"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["srcEnd"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["dst"], "param_type": "char[]", "param_description": "\nchar "}, {"param_name": ["dstBegin"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "getChars", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "indexOf", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}, {"param_name": ["fromIndex"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "indexOf", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["str"], "param_type": "char[]", "param_description": "\nchar "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["f"], "param_type": "float", "param_description": "\nfloat "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["dstOffset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["s"], "param_type": "CharSequence", "param_description": "\nCharSequence "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["c"], "param_type": "char", "param_description": "\nchar "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["l"], "param_type": "long", "param_description": "\nlong "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["str"], "param_type": "char[]", "param_description": "\nchar "}, {"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["len"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["i"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["d"], "param_type": "double", "param_description": "\ndouble "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["dstOffset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["s"], "param_type": "CharSequence", "param_description": "\nCharSequence "}, {"param_name": ["start"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["end"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["obj"], "param_type": "Object", "param_description": "\nObject "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["b"], "param_type": "boolean", "param_description": "\nboolean "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}, {"param_name": ["fromIndex"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "lastIndexOf", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "lastIndexOf", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of chars in this sequence"], "return_type": ["int"]}, "method_name": "length", "method_description": "Returns the length of this character sequence.  The length is the number\n of 16-bit chars in the sequence.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["codePointOffset"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "offsetByCodePoints", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["end"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "replace", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuffer"]}, "method_name": "reverse", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["ch"], "param_type": "char", "param_description": "\nchar "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setCharAt", "method_description": "\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newLength"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setLength", "method_description": "\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": " the start index, inclusive"}, {"param_name": ["end"], "param_type": "int", "param_description": " the end index, exclusive"}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": ["the specified subsequence"], "return_type": ["CharSequence"]}, "method_name": "subSequence", "method_description": "Returns a CharSequence that is a subsequence of this sequence.\n The subsequence starts with the char value at the specified index and\n ends with the char value at index end - 1.  The length\n (in chars) of the\n returned sequence is end - start, so if start == end\n then an empty sequence is returned.\n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["end"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["String"]}, "method_name": "substring", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["String"]}, "method_name": "substring", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of the object. In general, the\n toString method returns a string that\n \"textually represents\" this object. The result should\n be a concise but informative representation that is easy for a\n person to read.\n It is recommended that all subclasses override this method.\n \n\n The toString method for class Object\n returns a string consisting of the name of the class of which the\n object is an instance, the at-sign character `@', and\n the unsigned hexadecimal representation of the hash code of the\n object. In other words, this method returns a string equal to the\n value of:\n \n", "method_declar": ""}, {"params": [], "class_name": "StringBuffer", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "trimToSize", "method_description": "\n", "method_declar": ""}], "class_name": "StringBuffer", "Vars": null}