{"package_name": "java.lang", "subclass_list": [], "class_description": "The Short class wraps a value of primitive type short in an object.  An object of type Short contains a\n single field whose type is short. In addition, this class provides several methods for converting\n a short to a String and a String to a\n short, as well as other constants and methods useful when\n dealing with a short. ", "class_type": "class", "typealias": [], "interface_list": ["Comparable<Short>"], "class_inherit_list": ["Number"], "Methods": [{"params": [{"param_name": ["value"], "param_type": "short", "param_description": " the value to be represented by the\n                  Short."}], "class_name": "Short", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Short object that\n represents the specified short value.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the String to be converted to a\n          Short"}], "class_name": "Short", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Short object that\n represents the short value indicated by the\n String parameter. The string is converted to a\n short value in exactly the manner used by the\n parseShort method for radix 10.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type byte."], "return_type": ["byte"]}, "method_name": "byteValue", "method_description": "Returns the value of this Short as a byte after\n a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "short", "param_description": " the first short to compare"}, {"param_name": ["y"], "param_type": "short", "param_description": " the second short to compare"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value 0 if x == y;\n         a value less than 0 if x < y; and\n         a value greater than 0 if x > y"], "return_type": ["int"]}, "method_name": "compare", "method_description": "Compares two short values numerically.\n The value returned is identical to what would be returned by:\n \n", "method_declar": ""}, {"params": [{"param_name": ["anotherShort"], "param_type": "Short", "param_description": " the Short to be compared."}], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value 0 if this Short is\n          equal to the argument Short; a value less than\n          0 if this Short is numerically less\n          than the argument Short; and a value greater than\n           0 if this Short is numerically\n           greater than the argument Short (signed\n           comparison)."], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares two Short objects numerically.\n", "method_declar": ""}, {"params": [{"param_name": ["nm"], "param_type": "String", "param_description": " the String to decode."}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Short object holding the short\n            value represented by nm"], "return_type": ["Short"]}, "method_name": "decode", "method_description": "Decodes a String into a Short.\n Accepts decimal, hexadecimal, and octal numbers given by\n the following grammar:\n\n \nThe sequence of characters following an optional\n sign and/or radix specifier (\"0x\", \"0X\",\n \"#\", or leading zero) is parsed as by the Short.parseShort method with the indicated radix (10, 16, or\n 8).  This sequence of characters must represent a positive\n value or a NumberFormatException will be thrown.  The\n result is negated if first character of the specified String is the minus sign.  No whitespace characters are\n permitted in the String.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type double."], "return_type": ["double"]}, "method_name": "doubleValue", "method_description": "Returns the value of this Short as a double\n after a widening primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to compare with"}], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are the same;\n                  false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares this object to the specified object.  The result is\n true if and only if the argument is not\n null and is a Short object that\n contains the same short value as this object.\n", "method_declar": ""}, {"params": [], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type float."], "return_type": ["float"]}, "method_name": "floatValue", "method_description": "Returns the value of this Short as a float\n after a widening primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "short", "param_description": " the value to hash"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["a hash code value for a short value."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for a short value; compatible with\n Short.hashCode().\n", "method_declar": ""}, {"params": [], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this Short"], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for this Short; equal to the result\n of invoking intValue().\n", "method_declar": ""}, {"params": [], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type int."], "return_type": ["int"]}, "method_name": "intValue", "method_description": "Returns the value of this Short as an int after\n a widening primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type long."], "return_type": ["long"]}, "method_name": "longValue", "method_description": "Returns the value of this Short as a long after\n a widening primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a String containing the short\n          representation to be parsed"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["the short value represented by the\n          argument in decimal."], "return_type": ["short"]}, "method_name": "parseShort", "method_description": "Parses the string argument as a signed decimal short. The characters in the string must all be decimal\n digits, except that the first character may be an ASCII minus\n sign '-' ('\\u002D') to indicate a\n negative value or an ASCII plus sign '+'\n ('\\u002B') to indicate a positive value.  The\n resulting short value is returned, exactly as if the\n argument and the radix 10 were given as arguments to the parseShort(java.lang.String, int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the String containing the\n                  short representation to be parsed"}, {"param_name": ["radix"], "param_type": "int", "param_description": " the radix to be used while parsing s"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["the short represented by the string\n                  argument in the specified radix."], "return_type": ["short"]}, "method_name": "parseShort", "method_description": "Parses the string argument as a signed short in the\n radix specified by the second argument. The characters in the\n string must all be digits, of the specified radix (as\n determined by whether Character.digit(char, int) returns a nonnegative value) except that the first\n character may be an ASCII minus sign '-'\n ('\\u002D') to indicate a negative value or an\n ASCII plus sign '+' ('\\u002B') to\n indicate a positive value.  The resulting short value\n is returned.\n\n \nAn exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "short", "param_description": " the value whose bytes are to be reversed"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value obtained by reversing (or, equivalently, swapping)\n     the bytes in the specified short value."], "return_type": ["short"]}, "method_name": "reverseBytes", "method_description": "Returns the value obtained by reversing the order of the bytes in the\n two's complement representation of the specified short value.\n", "method_declar": ""}, {"params": [], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type short."], "return_type": ["short"]}, "method_name": "shortValue", "method_description": "Returns the value of this Short as a\n short.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "short", "param_description": " the short to be converted"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["the string representation of the specified short"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a new String object representing the\n specified short. The radix is assumed to be 10.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Short", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the value of this object in\n          base\u00a010."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a String object representing this\n Short's value.  The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the short value were given as an argument to the\n toString(short) method.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "short", "param_description": " the value to convert to an unsigned int"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["the argument converted to int by an unsigned\n         conversion"], "return_type": ["int"]}, "method_name": "toUnsignedInt", "method_description": "Converts the argument to an int by an unsigned\n conversion.  In an unsigned conversion to an int, the\n high-order 16 bits of the int are zero and the\n low-order 16 bits are equal to the bits of the short argument.\n\n Consequently, zero and positive short values are mapped\n to a numerically equal int value and negative short values are mapped to an int value equal to the\n input plus 216.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "short", "param_description": " the value to convert to an unsigned long"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["the argument converted to long by an unsigned\n         conversion"], "return_type": ["long"]}, "method_name": "toUnsignedLong", "method_description": "Converts the argument to a long by an unsigned\n conversion.  In an unsigned conversion to a long, the\n high-order 48 bits of the long are zero and the\n low-order 16 bits are equal to the bits of the short argument.\n\n Consequently, zero and positive short values are mapped\n to a numerically equal long value and negative short values are mapped to a long value equal to the\n input plus 216.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Short object holding the value\n          represented by the string argument"], "return_type": ["Short"]}, "method_name": "valueOf", "method_description": "Returns a Short object holding the\n value given by the specified String. The argument\n is interpreted as representing a signed decimal\n short, exactly as if the argument were given to\n the parseShort(java.lang.String) method. The result is\n a Short object that represents the\n short value specified by the string.\n\n \nIn other words, this method returns a Short object\n equal to the value of:\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "short", "param_description": " a short value."}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Short instance representing s."], "return_type": ["Short"]}, "method_name": "valueOf", "method_description": "Returns a Short instance representing the specified\n short value.\n If a new Short instance is not required, this method\n should generally be used in preference to the constructor\n Short(short), as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n\n This method will always cache values in the range -128 to 127,\n inclusive, and may cache other values outside of this range.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed"}, {"param_name": ["radix"], "param_type": "int", "param_description": " the radix to be used in interpreting s"}], "class_name": "Short", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Short object holding the value\n                  represented by the string argument in the\n                  specified radix."], "return_type": ["Short"]}, "method_name": "valueOf", "method_description": "Returns a Short object holding the value\n extracted from the specified String when parsed\n with the radix given by the second argument. The first argument\n is interpreted as representing a signed short in\n the radix specified by the second argument, exactly as if the\n argument were given to the parseShort(java.lang.String, int) method. The result is a Short object that\n represents the short value specified by the string.\n\n \nIn other words, this method returns a Short object\n equal to the value of:\n\n \n", "method_declar": ""}], "class_name": "Short", "Vars": null}