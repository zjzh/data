{"package_name": "java.lang", "subclass_list": ["AcceptPendingException", "AlreadyBoundException", "AlreadyConnectedException", "CancellationException", "CancelledKeyException", "ClosedDirectoryStreamException", "ClosedFileSystemException", "ClosedSelectorException", "ClosedWatchServiceException", "ConnectionPendingException", "FormatterClosedException", "IllegalBlockingModeException", "InvalidMarkException", "MediaCasStateException", "MediaCodec.CodecException", "AcceptPendingException", "AlreadyBoundException", "AlreadyConnectedException", "SocketChannel", "CancellationException", "FutureTask", "CancelledKeyException", "ClosedDirectoryStreamException", "ClosedFileSystemException", "ClosedSelectorException", "ClosedWatchServiceException", "ConnectionPendingException", "SocketChannel", "FormatterClosedException", "IllegalBlockingModeException", "InvalidMarkException", "MediaCasStateException", "MediaCodec.CodecException", "MediaDrm.MediaDrmStateException", "MediaDrmResetException", "NoConnectionPendingException", "SocketChannel#finishConnect", "SocketChannel", "SocketChannel#connect", "NonReadableChannelException", "NonWritableChannelException", "NotYetBoundException", "NotYetConnectedException", "OverlappingFileLockException", "ReadPendingException", "ShutdownChannelGroupException", "WritePendingException"], "class_description": "Signals that a method has been invoked at an illegal or\n inappropriate time.  In other words, the Java environment or\n Java application is not in an appropriate state for the requested\n operation. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["RuntimeException"], "Methods": [{"params": [], "class_name": "IllegalStateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an IllegalStateException with no detail message.\n A detail message is a String that describes this particular exception.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the String that contains a detailed message"}], "class_name": "IllegalStateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an IllegalStateException with the specified detail\n message.  A detail message is a String that describes this particular\n exception.\n", "method_declar": ""}, {"params": [{"param_name": ["message"], "param_type": "String", "param_description": " the detail message (which is saved for later retrieval\n         by the Throwable#getMessage() method)."}, {"param_name": ["cause"], "param_type": "Throwable", "param_description": " the cause (which is saved for later retrieval by the\n         Throwable#getCause() method).  (A null value\n         is permitted, and indicates that the cause is nonexistent or\n         unknown.)"}], "class_name": "IllegalStateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new exception with the specified detail message and\n cause.\n\n \nNote that the detail message associated with cause is\n not automatically incorporated in this exception's detail\n message.\n", "method_declar": ""}, {"params": [{"param_name": ["cause"], "param_type": "Throwable", "param_description": " the cause (which is saved for later retrieval by the\n         Throwable#getCause() method).  (A null value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)"}], "class_name": "IllegalStateException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new exception with the specified cause and a detail\n message of (cause==null ? null : cause.toString()) (which\n typically contains the class and detail message of cause).\n This constructor is useful for exceptions that are little more than\n wrappers for other throwables (for example, PrivilegedActionException).\n", "method_declar": ""}], "class_name": "IllegalStateException", "Vars": null}