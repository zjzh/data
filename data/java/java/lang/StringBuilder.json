{"package_name": "java.lang", "subclass_list": [], "class_description": "A mutable sequence of characters.  This class provides an API compatible\n with StringBuffer, but with no guarantee of synchronization.\n This class is designed for use as a drop-in replacement for\n StringBuffer in places where the string buffer was being\n used by a single thread (as is generally the case).   Where possible,\n it is recommended that this class be used in preference to\n StringBuffer as it will be faster under most implementations. The principal operations on a StringBuilder are the\n append and insert methods, which are\n overloaded so as to accept data of any type. Each effectively\n converts a given datum to a string and then appends or inserts the\n characters of that string to the string builder. The\n append method always adds these characters at the end\n of the builder; the insert method adds the characters at\n a specified point. For example, if z refers to a string builder object\n whose current contents are \"start\", then\n the method call z.append(\"le\") would cause the string\n builder to contain \"startle\", whereas\n z.insert(4, \"le\") would alter the string builder to\n contain \"starlet\". In general, if sb refers to an instance of a StringBuilder,\n then sb.append(x) has the same effect as\n sb.insert(sb.length(), x). Every string builder has a capacity. As long as the length of the\n character sequence contained in the string builder does not exceed\n the capacity, it is not necessary to allocate a new internal\n buffer. If the internal buffer overflows, it is automatically made larger. Instances of StringBuilder are not safe for\n use by multiple threads. If such synchronization is required then it is\n recommended that StringBuffer be used. Unless otherwise noted, passing a null argument to a constructor\n or method in this class will cause a NullPointerException to be\n thrown. ", "class_type": "class", "typealias": [], "interface_list": ["Appendable", "CharSequence", "Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string builder with no characters in it and an\n initial capacity of 16 characters.\n", "method_declar": ""}, {"params": [{"param_name": ["capacity"], "param_type": "int", "param_description": " the initial capacity."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string builder with no characters in it and an\n initial capacity specified by the capacity argument.\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": " the initial contents of the buffer."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string builder initialized to the contents of the\n specified string. The initial capacity of the string builder is\n 16 plus the length of the string argument.\n", "method_declar": ""}, {"params": [{"param_name": ["seq"], "param_type": "CharSequence", "param_description": " the sequence to copy."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a string builder that contains the same characters\n as the specified CharSequence. The initial capacity of\n the string builder is 16 plus the length of the\n CharSequence argument.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "boolean", "param_description": "\nboolean "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["lng"], "param_type": "long", "param_description": "\nlong "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "char", "param_description": " The character to append"}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["A reference to this Appendable"], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "Appends the specified character to this Appendable.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": "\nObject "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "char[]", "param_description": "\nchar "}, {"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["len"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": "\ndouble "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "char[]", "param_description": "\nchar "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["sb"], "param_type": "StringBuffer", "param_description": " the StringBuffer to append."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reference to this object."], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "Appends the specified StringBuffer to this sequence.\n \n\n The characters of the StringBuffer argument are appended,\n in order, to this sequence, increasing the\n length of this sequence by the length of the argument.\n If sb is null, then the four characters\n \"null\" are appended to this sequence.\n \n\n Let n be the length of this character sequence just prior to\n execution of the append method. Then the character at index\n k in the new character sequence is equal to the character at\n index k in the old character sequence, if k is less than\n n; otherwise, it is equal to the character at index k-n\n in the argument sb.\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "float", "param_description": "\nfloat "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "CharSequence", "param_description": " The character sequence from which a subsequence will be\n         appended.  If csq is null, then characters\n         will be appended as if csq contained the four\n         characters \"null\"."}, {"param_name": ["start"], "param_type": "int", "param_description": " The index of the first character in the subsequence"}, {"param_name": ["end"], "param_type": "int", "param_description": " The index of the character following the last character in the\n         subsequence"}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["A reference to this Appendable"], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "Appends a subsequence of the specified character sequence to this\n Appendable.\n\n \n An invocation of this method of the form out.append(csq, start,\n end) when csq is not null, behaves in\n exactly the same way as the invocation\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "CharSequence", "param_description": " The character sequence to append.  If csq is\n         null, then the four characters \"null\" are\n         appended to this Appendable."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["A reference to this Appendable"], "return_type": ["StringBuilder"]}, "method_name": "append", "method_description": "Appends the specified character sequence to this Appendable.\n\n \n Depending on which class implements the character sequence\n csq, the entire sequence may not be appended.  For\n instance, if csq is a CharBuffer then\n the subsequence to append is defined by the buffer's position and limit.\n", "method_declar": ""}, {"params": [{"param_name": ["codePoint"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "appendCodePoint", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current capacity"], "return_type": ["int"]}, "method_name": "capacity", "method_description": "Returns the current capacity. The capacity is the amount of storage\n available for newly inserted characters, beyond which an allocation\n will occur.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index of the desired char value."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the char value at the specified index."], "return_type": ["char"]}, "method_name": "charAt", "method_description": "Returns the char value in this sequence at the specified index.\n The first char value is at index 0, the next at index\n 1, and so on, as in array indexing.\n \n\n The index argument must be greater than or equal to\n 0, and less than the length of this sequence.\n\n \nIf the char value specified by the index is a\n surrogate, the surrogate\n value is returned.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index to the char values"}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the code point value of the character at the\n             index"], "return_type": ["int"]}, "method_name": "codePointAt", "method_description": "Returns the character (Unicode code point) at the specified\n index. The index refers to char values\n (Unicode code units) and ranges from 0 to\n length()- 1.\n\n \n If the char value specified at the given index\n is in the high-surrogate range, the following index is less\n than the length of this sequence, and the\n char value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at the given index is returned.\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index following the code point that should be returned"}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Unicode code point value before the given index."], "return_type": ["int"]}, "method_name": "codePointBefore", "method_description": "Returns the character (Unicode code point) before the specified\n index. The index refers to char values\n (Unicode code units) and ranges from 1 to length().\n\n \n If the char value at (index - 1)\n is in the low-surrogate range, (index - 2) is not\n negative, and the char value at (index -\n 2) is in the high-surrogate range, then the\n supplementary code point value of the surrogate pair is\n returned. If the char value at index -\n 1 is an unpaired low-surrogate or a high-surrogate, the\n surrogate value is returned.\n", "method_declar": ""}, {"params": [{"param_name": ["beginIndex"], "param_type": "int", "param_description": " the index to the first char of\n the text range."}, {"param_name": ["endIndex"], "param_type": "int", "param_description": " the index after the last char of\n the text range."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of Unicode code points in the specified text\n range"], "return_type": ["int"]}, "method_name": "codePointCount", "method_description": "Returns the number of Unicode code points in the specified text\n range of this sequence. The text range begins at the specified\n beginIndex and extends to the char at\n index endIndex - 1. Thus the length (in\n chars) of the text range is\n endIndex-beginIndex. Unpaired surrogates within\n this sequence count as one code point each.\n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["end"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "delete", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "deleteCharAt", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["minimumCapacity"], "param_type": "int", "param_description": " the minimum desired capacity.\n"}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "ensureCapacity", "method_description": "Ensures that the capacity is at least equal to the specified minimum.\n If the current capacity is less than the argument, then a new internal\n array is allocated with greater capacity. The new capacity is the\n larger of:\n \n", "method_declar": ""}, {"params": [{"param_name": ["srcBegin"], "param_type": "int", "param_description": " start copying at this offset."}, {"param_name": ["srcEnd"], "param_type": "int", "param_description": " stop copying at this offset."}, {"param_name": ["dst"], "param_type": "char[]", "param_description": " the array to copy the data into."}, {"param_name": ["dstBegin"], "param_type": "int", "param_description": " offset into dst."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "getChars", "method_description": "Characters are copied from this sequence into the\n destination character array dst. The first character to\n be copied is at index srcBegin; the last character to\n be copied is at index srcEnd-1. The total number of\n characters to be copied is srcEnd-srcBegin. The\n characters are copied into the subarray of dst starting\n at index dstBegin and ending at index:\n \n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "indexOf", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}, {"param_name": ["fromIndex"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "indexOf", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["str"], "param_type": "char[]", "param_description": "\nchar "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["f"], "param_type": "float", "param_description": "\nfloat "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["dstOffset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["s"], "param_type": "CharSequence", "param_description": "\nCharSequence "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["c"], "param_type": "char", "param_description": "\nchar "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["l"], "param_type": "long", "param_description": "\nlong "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["str"], "param_type": "char[]", "param_description": "\nchar "}, {"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["len"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["i"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["d"], "param_type": "double", "param_description": "\ndouble "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["dstOffset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["s"], "param_type": "CharSequence", "param_description": "\nCharSequence "}, {"param_name": ["start"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["end"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["obj"], "param_type": "Object", "param_description": "\nObject "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["offset"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["b"], "param_type": "boolean", "param_description": "\nboolean "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "insert", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}, {"param_name": ["fromIndex"], "param_type": "int", "param_description": "\nint "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "lastIndexOf", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["int"]}, "method_name": "lastIndexOf", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the length of the sequence of characters currently\n          represented by this object"], "return_type": ["int"]}, "method_name": "length", "method_description": "Returns the length (character count).\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index to be offset"}, {"param_name": ["codePointOffset"], "param_type": "int", "param_description": " the offset in code points"}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the index within this sequence"], "return_type": ["int"]}, "method_name": "offsetByCodePoints", "method_description": "Returns the index within this sequence that is offset from the\n given index by codePointOffset code\n points. Unpaired surrogates within the text range given by\n index and codePointOffset count as\n one code point each.\n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["end"], "param_type": "int", "param_description": "\nint "}, {"param_name": ["str"], "param_type": "String", "param_description": "\nString "}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "replace", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": ["StringBuilder"]}, "method_name": "reverse", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["index"], "param_type": "int", "param_description": " the index of the character to modify."}, {"param_name": ["ch"], "param_type": "char", "param_description": " the new character."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setCharAt", "method_description": "The character at the specified index is set to ch. This\n sequence is altered to represent a new character sequence that is\n identical to the old character sequence, except that it contains the\n character ch at position index.\n \n\n The index argument must be greater than or equal to\n 0, and less than the length of this sequence.\n", "method_declar": ""}, {"params": [{"param_name": ["newLength"], "param_type": "int", "param_description": " the new length"}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setLength", "method_description": "Sets the length of the character sequence.\n The sequence is changed to a new character sequence\n whose length is specified by the argument. For every nonnegative\n index k less than newLength, the character at\n index k in the new character sequence is the same as the\n character at index k in the old sequence if k is less\n than the length of the old character sequence; otherwise, it is the\n null character '\\u0000'.\n\n In other words, if the newLength argument is less than\n the current length, the length is changed to the specified length.\n \n\n If the newLength argument is greater than or equal\n to the current length, sufficient null characters\n ('\\u0000') are appended so that\n length becomes the newLength argument.\n \n\n The newLength argument must be greater than or equal\n to 0.\n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": " the start index, inclusive."}, {"param_name": ["end"], "param_type": "int", "param_description": " the end index, exclusive."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["the specified subsequence."], "return_type": ["CharSequence"]}, "method_name": "subSequence", "method_description": "Returns a new character sequence that is a subsequence of this sequence.\n\n \n An invocation of this method of the form\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": " The beginning index, inclusive."}, {"param_name": ["end"], "param_type": "int", "param_description": " The ending index, exclusive."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["The new string."], "return_type": ["String"]}, "method_name": "substring", "method_description": "Returns a new String that contains a subsequence of\n characters currently contained in this sequence. The\n substring begins at the specified start and\n extends to the character at index end - 1.\n", "method_declar": ""}, {"params": [{"param_name": ["start"], "param_type": "int", "param_description": " The beginning index, inclusive."}], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["The new string."], "return_type": ["String"]}, "method_name": "substring", "method_description": "Returns a new String that contains a subsequence of\n characters currently contained in this character sequence. The\n substring begins at the specified index and extends to the end of\n this sequence.\n", "method_declar": ""}, {"params": [], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of the object. In general, the\n toString method returns a string that\n \"textually represents\" this object. The result should\n be a concise but informative representation that is easy for a\n person to read.\n It is recommended that all subclasses override this method.\n \n\n The toString method for class Object\n returns a string consisting of the name of the class of which the\n object is an instance, the at-sign character `@', and\n the unsigned hexadecimal representation of the hash code of the\n object. In other words, this method returns a string equal to the\n value of:\n \n", "method_declar": ""}, {"params": [], "class_name": "StringBuilder", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "trimToSize", "method_description": "Attempts to reduce storage used for the character sequence.\n If the buffer is larger than necessary to hold its current sequence of\n characters, then it may be resized to become more space efficient.\n Calling this method may, but is not required to, affect the value\n returned by a subsequent call to the capacity() method.\n\n", "method_declar": ""}], "class_name": "StringBuilder", "Vars": null}