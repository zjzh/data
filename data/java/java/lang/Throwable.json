{"package_name": "java.lang", "subclass_list": ["Error", "Exception", "Violation", "Error", "Exception", "Violation"], "class_description": "The Throwable class is the superclass of all errors and\n exceptions in the Java language. Only objects that are instances of this\n class (or one of its subclasses) are thrown by the Java Virtual Machine or\n can be thrown by the Java throw statement. Similarly, only\n this class or one of its subclasses can be the argument type in a\n catch clause.\n\n For the purposes of compile-time checking of exceptions, Throwable and any subclass of Throwable that is not also a\n subclass of either RuntimeException or Error are\n regarded as checked exceptions. Instances of two subclasses, Error and\n Exception, are conventionally used to indicate\n that exceptional situations have occurred. Typically, these instances\n are freshly created in the context of the exceptional situation so\n as to include relevant information (such as stack trace data). A throwable contains a snapshot of the execution stack of its\n thread at the time it was created. It can also contain a message\n string that gives more information about the error. Over time, a\n throwable can Throwable#addSuppressed other\n throwables from being propagated.  Finally, the throwable can also\n contain a cause: another throwable that caused this\n throwable to be constructed.  The recording of this causal information\n is referred to as the chained exception facility, as the\n cause can, itself, have a cause, and so on, leading to a \"chain\" of\n exceptions, each caused by another. One reason that a throwable may have a cause is that the class that\n throws it is built atop a lower layered abstraction, and an operation on\n the upper layer fails due to a failure in the lower layer.  It would be bad\n design to let the throwable thrown by the lower layer propagate outward, as\n it is generally unrelated to the abstraction provided by the upper layer.\n Further, doing so would tie the API of the upper layer to the details of\n its implementation, assuming the lower layer's exception was a checked\n exception.  Throwing a \"wrapped exception\" (i.e., an exception containing a\n cause) allows the upper layer to communicate the details of the failure to\n its caller without incurring either of these shortcomings.  It preserves\n the flexibility to change the implementation of the upper layer without\n changing its API (in particular, the set of exceptions thrown by its\n methods). A second reason that a throwable may have a cause is that the method\n that throws it must conform to a general-purpose interface that does not\n permit the method to throw the cause directly.  For example, suppose\n a persistent collection conforms to the Collection interface, and that its persistence is implemented atop\n java.io.  Suppose the internals of the add method\n can throw an IOException.  The implementation\n can communicate the details of the IOException to its caller\n while conforming to the Collection interface by wrapping the\n IOException in an appropriate unchecked exception.  (The\n specification for the persistent collection should indicate that it is\n capable of throwing such exceptions.) A cause can be associated with a throwable in two ways: via a\n constructor that takes the cause as an argument, or via the\n initCause(java.lang.Throwable) method.  New throwable classes that\n wish to allow causes to be associated with them should provide constructors\n that take a cause and delegate (perhaps indirectly) to one of the\n Throwable constructors that takes a cause.\n\n Because the initCause method is public, it allows a cause to be\n associated with any throwable, even a \"legacy throwable\" whose\n implementation predates the addition of the exception chaining mechanism to\n Throwable. By convention, class Throwable and its subclasses have two\n constructors, one that takes no arguments and one that takes a\n String argument that can be used to produce a detail message.\n Further, those subclasses that might likely have a cause associated with\n them should have two more constructors, one that takes a\n Throwable (the cause), and one that takes a\n String (the detail message) and a Throwable (the\n cause). ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new throwable with null as its detail message.\n The cause is not initialized, and may subsequently be initialized by a\n call to initCause(Throwable).\n\n \nThe fillInStackTrace() method is called to initialize\n the stack trace data in the newly created throwable.\n", "method_declar": ""}, {"params": [{"param_name": ["message"], "param_type": "String", "param_description": " the detail message. The detail message is saved for\n          later retrieval by the getMessage() method."}], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new throwable with the specified detail message.  The\n cause is not initialized, and may subsequently be initialized by\n a call to initCause(Throwable).\n\n \nThe fillInStackTrace() method is called to initialize\n the stack trace data in the newly created throwable.\n", "method_declar": ""}, {"params": [{"param_name": ["message"], "param_type": "String", "param_description": " the detail message (which is saved for later retrieval\n         by the getMessage() method)."}, {"param_name": ["cause"], "param_type": "Throwable", "param_description": " the cause (which is saved for later retrieval by the\n         getCause() method).  (A null value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)"}], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new throwable with the specified detail message and\n cause.  \nNote that the detail message associated with\n cause is not automatically incorporated in\n this throwable's detail message.\n\n \nThe fillInStackTrace() method is called to initialize\n the stack trace data in the newly created throwable.\n", "method_declar": ""}, {"params": [{"param_name": ["cause"], "param_type": "Throwable", "param_description": " the cause (which is saved for later retrieval by the\n         getCause() method).  (A null value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)"}], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new throwable with the specified cause and a detail\n message of (cause==null ? null : cause.toString()) (which\n typically contains the class and detail message of cause).\n This constructor is useful for throwables that are little more than\n wrappers for other throwables (for example, PrivilegedActionException).\n\n \nThe fillInStackTrace() method is called to initialize\n the stack trace data in the newly created throwable.\n", "method_declar": ""}, {"params": [{"param_name": ["exception"], "param_type": "Throwable", "param_description": " the exception to be added to the list of\n        suppressed exceptions"}], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addSuppressed", "method_description": "Appends the specified exception to the exceptions that were\n suppressed in order to deliver this exception. This method is\n thread-safe and typically called (automatically and implicitly)\n by the try-with-resources statement.\n\n \nThe suppression behavior is enabled unless disabled\n via\n a constructor.  When suppression is disabled, this method does\n nothing other than to validate its argument.\n\n \nNote that when one exception causes another exception, the first\n exception is usually caught and then the second exception is\n thrown in response.  In other words, there is a causal\n connection between the two exceptions.\n\n In contrast, there are situations where two independent\n exceptions can be thrown in sibling code blocks, in particular\n in the try block of a try-with-resources\n statement and the compiler-generated finally block\n which closes the resource.\n\n In these situations, only one of the thrown exceptions can be\n propagated.  In the try-with-resources statement, when\n there are two such exceptions, the exception originating from\n the try block is propagated and the exception from the\n finally block is added to the list of exceptions\n suppressed by the exception from the try block.  As an\n exception unwinds the stack, it can accumulate multiple\n suppressed exceptions.\n\n \nAn exception may have suppressed exceptions while also being\n caused by another exception.  Whether or not an exception has a\n cause is semantically known at the time of its creation, unlike\n whether or not an exception will suppress other exceptions\n which is typically only determined after an exception is\n thrown.\n\n \nNote that programmer written code is also able to take\n advantage of calling this method in situations where there are\n multiple sibling exceptions and only one can be propagated.\n", "method_declar": ""}, {"params": [], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reference to this Throwable instance."], "return_type": ["Throwable"]}, "method_name": "fillInStackTrace", "method_description": "Fills in the execution stack trace. This method records within this\n Throwable object information about the current state of\n the stack frames for the current thread.\n\n \nIf the stack trace of this Throwable Throwable#Throwable(String, Throwable, boolean, boolean), calling this method has no effect.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the cause of this throwable or null if the\n          cause is nonexistent or unknown."], "return_type": ["Throwable"]}, "method_name": "getCause", "method_description": "Returns the cause of this throwable or null if the\n cause is nonexistent or unknown.  (The cause is the throwable that\n caused this throwable to get thrown.)\n\n \nThis implementation returns the cause that was supplied via one of\n the constructors requiring a Throwable, or that was set after\n creation with the initCause(java.lang.Throwable) method.  While it is\n typically unnecessary to override this method, a subclass can override\n it to return a cause set by some other means.  This is appropriate for\n a \"legacy chained throwable\" that predates the addition of chained\n exceptions to Throwable.  Note that it is not\n necessary to override any of the PrintStackTrace methods,\n all of which invoke the getCause method to determine the\n cause of a throwable.\n", "method_declar": ""}, {"params": [], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": ["The localized description of this throwable."], "return_type": ["String"]}, "method_name": "getLocalizedMessage", "method_description": "Creates a localized description of this throwable.\n Subclasses may override this method in order to produce a\n locale-specific message.  For subclasses that do not override this\n method, the default implementation returns the same result as\n getMessage().\n", "method_declar": ""}, {"params": [], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": ["the detail message string of this Throwable instance\n          (which may be null)."], "return_type": ["String"]}, "method_name": "getMessage", "method_description": "Returns the detail message string of this throwable.\n", "method_declar": ""}, {"params": [], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array of stack trace elements representing the stack trace\n         pertaining to this throwable."], "return_type": ["StackTraceElement[]"]}, "method_name": "getStackTrace", "method_description": "Provides programmatic access to the stack trace information printed by\n printStackTrace().  Returns an array of stack trace elements,\n each representing one stack frame.  The zeroth element of the array\n (assuming the array's length is non-zero) represents the top of the\n stack, which is the last method invocation in the sequence.  Typically,\n this is the point at which this throwable was created and thrown.\n The last element of the array (assuming the array's length is non-zero)\n represents the bottom of the stack, which is the first method invocation\n in the sequence.\n\n \nSome virtual machines may, under some circumstances, omit one\n or more stack frames from the stack trace.  In the extreme case,\n a virtual machine that has no stack trace information concerning\n this throwable is permitted to return a zero-length array from this\n method.  Generally speaking, the array returned by this method will\n contain one element for every frame that would be printed by\n printStackTrace.  Writes to the returned array do not\n affect future calls to this method.\n", "method_declar": ""}, {"params": [], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": ["an array containing all of the exceptions that were\n         suppressed to deliver this exception."], "return_type": ["Throwable[]"]}, "method_name": "getSuppressed", "method_description": "Returns an array containing all of the exceptions that were\n suppressed, typically by the try-with-resources\n statement, in order to deliver this exception.\n\n If no exceptions were suppressed or suppression is\n disabled, an empty array is returned.  This method is\n thread-safe.  Writes to the returned array do not affect future\n calls to this method.\n", "method_declar": ""}, {"params": [{"param_name": ["cause"], "param_type": "Throwable", "param_description": " the cause (which is saved for later retrieval by the\n         getCause() method).  (A null value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)"}], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": ["a reference to this Throwable instance."], "return_type": ["Throwable"]}, "method_name": "initCause", "method_description": "Initializes the cause of this throwable to the specified value.\n (The cause is the throwable that caused this throwable to get thrown.)\n\n \nThis method can be called at most once.  It is generally called from\n within the constructor, or immediately after creating the\n throwable.  If this throwable was created\n with Throwable(java.lang.Throwable) or\n Throwable(java.lang.String, java.lang.Throwable), this method cannot be called\n even once.\n\n \nAn example of using this method on a legacy throwable type\n without other support for setting the cause is:\n\n \n", "method_declar": ""}, {"params": [], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "printStackTrace", "method_description": "Prints this throwable and its backtrace to the\n standard error stream. This method prints a stack trace for this\n Throwable object on the error output stream that is\n the value of the field System.err. The first line of\n output contains the result of the toString() method for\n this object.  Remaining lines represent data previously recorded by\n the method fillInStackTrace(). The format of this\n information depends on the implementation, but the following\n example may be regarded as typical:\n \nAn exception can have both a cause and one or more suppressed\n exceptions:\n \n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "PrintWriter", "param_description": " PrintWriter to use for output"}], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "printStackTrace", "method_description": "Prints this throwable and its backtrace to the specified\n print writer.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "PrintStream", "param_description": " PrintStream to use for output"}], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "printStackTrace", "method_description": "Prints this throwable and its backtrace to the specified print stream.\n", "method_declar": ""}, {"params": [{"param_name": ["stackTrace"], "param_type": "StackTraceElement[]", "param_description": " the stack trace elements to be associated with\n this Throwable.  The specified array is copied by this\n call; changes in the specified array after the method invocation\n returns will have no affect on this Throwable's stack\n trace."}], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setStackTrace", "method_description": "Sets the stack trace elements that will be returned by\n getStackTrace() and printed by printStackTrace()\n and related methods.\n\n This method, which is designed for use by RPC frameworks and other\n advanced systems, allows the client to override the default\n stack trace that is either generated by fillInStackTrace()\n when a throwable is constructed or deserialized when a throwable is\n read from a serialization stream.\n\n \nIf the stack trace of this Throwable Throwable#Throwable(String, Throwable, boolean, boolean), calling this method has no effect other than\n validating its argument.\n", "method_declar": ""}, {"params": [], "class_name": "Throwable", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this throwable."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a short description of this throwable.\n The result is the concatenation of:\n \n", "method_declar": ""}], "class_name": "Throwable", "Vars": null}