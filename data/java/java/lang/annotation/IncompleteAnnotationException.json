{"package_name": "java.lang.annotation", "subclass_list": [], "class_description": "Thrown to indicate that a program has attempted to access an element of\n an annotation type that was added to the annotation type definition after\n the annotation was compiled (or serialized).  This exception will not be\n thrown if the new element has a default value.\n This exception can be thrown by the API used to read annotations\n reflectively. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["RuntimeException"], "Methods": [{"params": [{"param_name": ["annotationType"], "param_type": "Class", "param_description": " the Class object for the annotation type"}, {"param_name": ["elementName"], "param_type": "String", "param_description": " the name of the missing element"}], "class_name": "IncompleteAnnotationException", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs an IncompleteAnnotationException to indicate that\n the named element was missing from the specified annotation type.\n", "method_declar": ""}, {"params": [], "class_name": "IncompleteAnnotationException", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Class object for the annotation type with the\n     missing element"], "return_type": ["Class<?\u00a0extends\u00a0Annotation>"]}, "method_name": "annotationType", "method_description": "Returns the Class object for the annotation type with the\n missing element.\n", "method_declar": ""}, {"params": [], "class_name": "IncompleteAnnotationException", "is_static": false, "return_value": {"return_name": [], "return_description": ["the name of the missing element"], "return_type": ["String"]}, "method_name": "elementName", "method_description": "Returns the name of the missing element.\n", "method_declar": ""}], "class_name": "IncompleteAnnotationException", "Vars": null}