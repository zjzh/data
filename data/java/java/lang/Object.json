{"package_name": "java.lang", "subclass_list": [], "class_description": "Class Object is the root of the class hierarchy.\n Every class has Object as a superclass. All objects,\n including arrays, implement the methods of this class. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [{"params": [], "class_name": "Object", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the reference object with which to compare."}], "class_name": "Object", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this object is the same as the obj\n          argument; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Indicates whether some other object is \"equal to\" this one.\n \n\n The equals method implements an equivalence relation\n on non-null object references:\n \n\n The equals method for class Object implements\n the most discriminating possible equivalence relation on objects;\n that is, for any non-null reference values x and\n y, this method returns true if and only\n if x and y refer to the same object\n (x == y has the value true).\n \n\n Note that it is generally necessary to override the hashCode\n method whenever this method is overridden, so as to maintain the\n general contract for the hashCode method, which states\n that equal objects must have equal hash codes.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Object", "is_static": false, "return_value": {"return_name": [], "return_description": ["The Class object that represents the runtime\n         class of this object."], "return_type": ["Class<?>"]}, "method_name": "getClass", "method_description": "Returns the runtime class of this Object. The returned\n Class object is the object that is locked by static synchronized methods of the represented class.\n\n \nThe actual result type is Class<? extends |X|>\n where |X| is the erasure of the static type of the\n expression on which getClass is called. For\n example, no cast is required in this code fragment:\n\nNumber n = 0;                             \nClass<? extends Number> c = n.getClass(); \n\n", "method_declar": ""}, {"params": [], "class_name": "Object", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code value for the object. This method is\n supported for the benefit of hash tables such as those provided by\n HashMap.\n \n\n The general contract of hashCode is:\n \n\n As much as is reasonably practical, the hashCode method defined by\n class Object does return distinct integers for distinct\n objects. (This is typically implemented by converting the internal\n address of the object into an integer, but this implementation\n technique is not required by the\n Java\u2122 programming language.)\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Object", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "notify", "method_description": "Wakes up a single thread that is waiting on this object's\n monitor. If any threads are waiting on this object, one of them\n is chosen to be awakened. The choice is arbitrary and occurs at\n the discretion of the implementation. A thread waits on an object's\n monitor by calling one of the wait methods.\n \n\n The awakened thread will not be able to proceed until the current\n thread relinquishes the lock on this object. The awakened thread will\n compete in the usual manner with any other threads that might be\n actively competing to synchronize on this object; for example, the\n awakened thread enjoys no reliable privilege or disadvantage in being\n the next thread to lock this object.\n \n\n This method should only be called by a thread that is the owner\n of this object's monitor. A thread becomes the owner of the\n object's monitor in one of three ways:\n \n\n Only one thread at a time can own an object's monitor.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Object", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "notifyAll", "method_description": "Wakes up all threads that are waiting on this object's monitor. A\n thread waits on an object's monitor by calling one of the\n wait methods.\n \n\n The awakened threads will not be able to proceed until the current\n thread relinquishes the lock on this object. The awakened threads\n will compete in the usual manner with any other threads that might\n be actively competing to synchronize on this object; for example,\n the awakened threads enjoy no reliable privilege or disadvantage in\n being the next thread to lock this object.\n \n\n This method should only be called by a thread that is the owner\n of this object's monitor. See the notify method for a\n description of the ways in which a thread can become the owner of\n a monitor.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Object", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of the object. In general, the\n toString method returns a string that\n \"textually represents\" this object. The result should\n be a concise but informative representation that is easy for a\n person to read.\n It is recommended that all subclasses override this method.\n \n\n The toString method for class Object\n returns a string consisting of the name of the class of which the\n object is an instance, the at-sign character `@', and\n the unsigned hexadecimal representation of the hash code of the\n object. In other words, this method returns a string equal to the\n value of:\n \n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " the maximum time to wait in milliseconds."}, {"param_name": ["nanos"], "param_type": "int", "param_description": " additional time, in nanoseconds range\n                       0-999999."}], "class_name": "Object", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "wait", "method_description": "Causes the current thread to wait until another thread invokes the\n notify() method or the\n notifyAll() method for this object, or\n some other thread interrupts the current thread, or a certain\n amount of real time has elapsed.\n \n\n This method is similar to the wait method of one\n argument, but it allows finer control over the amount of time to\n wait for a notification before giving up. The amount of real time,\n measured in nanoseconds, is given by:\n \n\n In all other respects, this method does the same thing as the\n method wait(long) of one argument. In particular,\n wait(0, 0) means the same thing as wait(0).\n \n\n The current thread must own this object's monitor. The thread\n releases ownership of this monitor and waits until either of the\n following two conditions has occurred:\n \n\n The thread then waits until it can re-obtain ownership of the\n monitor and resumes execution.\n \n\n As in the one argument version, interrupts and spurious wakeups are\n possible, and this method should always be used in a loop:\n \n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " the maximum time to wait in milliseconds."}], "class_name": "Object", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "wait", "method_description": "Causes the current thread to wait until either another thread invokes the\n notify() method or the\n notifyAll() method for this object, or a\n specified amount of time has elapsed.\n \n\n The current thread must own this object's monitor.\n \n\n This method causes the current thread (call it T) to\n place itself in the wait set for this object and then to relinquish\n any and all synchronization claims on this object. Thread T\n becomes disabled for thread scheduling purposes and lies dormant\n until one of four things happens:\n \n\n A thread can also wake up without being notified, interrupted, or\n timing out, a so-called spurious wakeup.  While this will rarely\n occur in practice, applications must guard against it by testing for\n the condition that should have caused the thread to be awakened, and\n continuing to wait if the condition is not satisfied.  In other words,\n waits should always occur in loops, like this one:\n \nIf the current thread is interrupted by any thread before or while it is waiting, then an\n InterruptedException is thrown.  This exception is not\n thrown until the lock status of this object has been restored as\n described above.\n\n \n\n Note that the wait method, as it places the current thread\n into the wait set for this object, unlocks only this object; any\n other objects on which the current thread may be synchronized remain\n locked while the thread waits.\n \n\n This method should only be called by a thread that is the owner\n of this object's monitor. See the notify method for a\n description of the ways in which a thread can become the owner of\n a monitor.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Object", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "wait", "method_description": "Causes the current thread to wait until another thread invokes the\n notify() method or the\n notifyAll() method for this object.\n In other words, this method behaves exactly as if it simply\n performs the call wait(0).\n \n\n The current thread must own this object's monitor. The thread\n releases ownership of this monitor and waits until another thread\n notifies threads waiting on this object's monitor to wake up\n either through a call to the notify method or the\n notifyAll method. The thread then waits until it can\n re-obtain ownership of the monitor and resumes execution.\n \n\n As in the one argument version, interrupts and spurious wakeups are\n possible, and this method should always be used in a loop:\n \nSee also:\n", "method_declar": ""}], "class_name": "Object", "Vars": null}