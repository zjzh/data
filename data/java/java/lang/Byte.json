{"package_name": "java.lang", "subclass_list": [], "class_description": "The Byte class wraps a value of primitive type byte\n in an object.  An object of type Byte contains a single\n field whose type is byte. In addition, this class provides several methods for converting\n a byte to a String and a String to a byte, as well as other constants and methods useful when dealing\n with a byte. ", "class_type": "class", "typealias": [], "interface_list": ["Comparable<Byte>"], "class_inherit_list": ["Number"], "Methods": [{"params": [{"param_name": ["value"], "param_type": "byte", "param_description": " the value to be represented by the\n                  Byte."}], "class_name": "Byte", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Byte object that\n represents the specified byte value.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the String to be converted to a\n                  Byte"}], "class_name": "Byte", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Byte object that\n represents the byte value indicated by the\n String parameter. The string is converted to a\n byte value in exactly the manner used by the\n parseByte method for radix 10.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type byte."], "return_type": ["byte"]}, "method_name": "byteValue", "method_description": "Returns the value of this Byte as a\n byte.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "byte", "param_description": " the first byte to compare"}, {"param_name": ["y"], "param_type": "byte", "param_description": " the second byte to compare"}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value 0 if x == y;\n         a value less than 0 if x < y; and\n         a value greater than 0 if x > y"], "return_type": ["int"]}, "method_name": "compare", "method_description": "Compares two byte values numerically.\n The value returned is identical to what would be returned by:\n \n", "method_declar": ""}, {"params": [{"param_name": ["anotherByte"], "param_type": "Byte", "param_description": " the Byte to be compared."}], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value 0 if this Byte is\n          equal to the argument Byte; a value less than\n          0 if this Byte is numerically less\n          than the argument Byte; and a value greater than\n           0 if this Byte is numerically\n           greater than the argument Byte (signed\n           comparison)."], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares two Byte objects numerically.\n", "method_declar": ""}, {"params": [{"param_name": ["nm"], "param_type": "String", "param_description": " the String to decode."}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Byte object holding the byte\n          value represented by nm"], "return_type": ["Byte"]}, "method_name": "decode", "method_description": "Decodes a String into a Byte.\n Accepts decimal, hexadecimal, and octal numbers given by\n the following grammar:\n\n \nThe sequence of characters following an optional\n sign and/or radix specifier (\"0x\", \"0X\",\n \"#\", or leading zero) is parsed as by the Byte.parseByte method with the indicated radix (10, 16, or 8).\n This sequence of characters must represent a positive value or\n a NumberFormatException will be thrown.  The result is\n negated if first character of the specified String is\n the minus sign.  No whitespace characters are permitted in the\n String.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type double."], "return_type": ["double"]}, "method_name": "doubleValue", "method_description": "Returns the value of this Byte as a double\n after a widening primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to compare with"}], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are the same;\n                  false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares this object to the specified object.  The result is\n true if and only if the argument is not\n null and is a Byte object that\n contains the same byte value as this object.\n", "method_declar": ""}, {"params": [], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type float."], "return_type": ["float"]}, "method_name": "floatValue", "method_description": "Returns the value of this Byte as a float after\n a widening primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this Byte"], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for this Byte; equal to the result\n of invoking intValue().\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "byte", "param_description": " the value to hash"}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["a hash code value for a byte value."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for a byte value; compatible with\n Byte.hashCode().\n", "method_declar": ""}, {"params": [], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type int."], "return_type": ["int"]}, "method_name": "intValue", "method_description": "Returns the value of this Byte as an int after\n a widening primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type long."], "return_type": ["long"]}, "method_name": "longValue", "method_description": "Returns the value of this Byte as a long after\n a widening primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a String containing the\n                  byte representation to be parsed"}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["the byte value represented by the\n                  argument in decimal"], "return_type": ["byte"]}, "method_name": "parseByte", "method_description": "Parses the string argument as a signed decimal byte. The characters in the string must all be decimal digits,\n except that the first character may be an ASCII minus sign\n '-' ('\\u002D') to indicate a negative\n value or an ASCII plus sign '+'\n ('\\u002B') to indicate a positive value. The\n resulting byte value is returned, exactly as if the\n argument and the radix 10 were given as arguments to the parseByte(java.lang.String, int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the String containing the\n                  byte\n                  representation to be parsed"}, {"param_name": ["radix"], "param_type": "int", "param_description": " the radix to be used while parsing s"}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["the byte value represented by the string\n                   argument in the specified radix"], "return_type": ["byte"]}, "method_name": "parseByte", "method_description": "Parses the string argument as a signed byte in the\n radix specified by the second argument. The characters in the\n string must all be digits, of the specified radix (as\n determined by whether Character.digit(char, int) returns a nonnegative value) except that the first\n character may be an ASCII minus sign '-'\n ('\\u002D') to indicate a negative value or an\n ASCII plus sign '+' ('\\u002B') to\n indicate a positive value.  The resulting byte value is\n returned.\n\n \nAn exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \n", "method_declar": ""}, {"params": [], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type short."], "return_type": ["short"]}, "method_name": "shortValue", "method_description": "Returns the value of this Byte as a short after\n a widening primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "Byte", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the value of this object in\n          base\u00a010."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a String object representing this\n Byte's value.  The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the byte value were given as an argument to the\n toString(byte) method.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte", "param_description": " the byte to be converted"}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["the string representation of the specified byte"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a new String object representing the\n specified byte. The radix is assumed to be 10.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "byte", "param_description": " the value to convert to an unsigned int"}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["the argument converted to int by an unsigned\n         conversion"], "return_type": ["int"]}, "method_name": "toUnsignedInt", "method_description": "Converts the argument to an int by an unsigned\n conversion.  In an unsigned conversion to an int, the\n high-order 24 bits of the int are zero and the\n low-order 8 bits are equal to the bits of the byte argument.\n\n Consequently, zero and positive byte values are mapped\n to a numerically equal int value and negative byte values are mapped to an int value equal to the\n input plus 28.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "byte", "param_description": " the value to convert to an unsigned long"}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["the argument converted to long by an unsigned\n         conversion"], "return_type": ["long"]}, "method_name": "toUnsignedLong", "method_description": "Converts the argument to a long by an unsigned\n conversion.  In an unsigned conversion to a long, the\n high-order 56 bits of the long are zero and the\n low-order 8 bits are equal to the bits of the byte argument.\n\n Consequently, zero and positive byte values are mapped\n to a numerically equal long value and negative byte values are mapped to a long value equal to the\n input plus 28.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed"}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Byte object holding the value\n                  represented by the string argument"], "return_type": ["Byte"]}, "method_name": "valueOf", "method_description": "Returns a Byte object holding the value\n given by the specified String. The argument is\n interpreted as representing a signed decimal byte,\n exactly as if the argument were given to the parseByte(java.lang.String) method. The result is a\n Byte object that represents the byte\n value specified by the string.\n\n \n In other words, this method returns a Byte object\n equal to the value of:\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed"}, {"param_name": ["radix"], "param_type": "int", "param_description": " the radix to be used in interpreting s"}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Byte object holding the value\n                  represented by the string argument in the\n                  specified radix."], "return_type": ["Byte"]}, "method_name": "valueOf", "method_description": "Returns a Byte object holding the value\n extracted from the specified String when parsed\n with the radix given by the second argument. The first argument\n is interpreted as representing a signed byte in\n the radix specified by the second argument, exactly as if the\n argument were given to the parseByte(java.lang.String, int) method. The result is a Byte object that\n represents the byte value specified by the string.\n\n \n In other words, this method returns a Byte object\n equal to the value of:\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte", "param_description": " a byte value."}], "class_name": "Byte", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Byte instance representing b."], "return_type": ["Byte"]}, "method_name": "valueOf", "method_description": "Returns a Byte instance representing the specified\n byte value.\n If a new Byte instance is not required, this method\n should generally be used in preference to the constructor\n Byte(byte), as this method is likely to yield\n significantly better space and time performance since\n all byte values are cached.\n", "method_declar": ""}], "class_name": "Byte", "Vars": null}