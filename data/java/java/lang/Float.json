{"package_name": "java.lang", "subclass_list": [], "class_description": "The Float class wraps a value of primitive type\n float in an object. An object of type\n Float contains a single field whose type is\n float. In addition, this class provides several methods for converting a\n float to a String and a\n String to a float, as well as other\n constants and methods useful when dealing with a\n float. ", "class_type": "class", "typealias": [], "interface_list": ["Comparable<Float>"], "class_inherit_list": ["Number"], "Methods": [{"params": [{"param_name": ["value"], "param_type": "float", "param_description": " the value to be represented by the Float."}], "class_name": "Float", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Float object that\n represents the primitive float argument.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "double", "param_description": " the value to be represented by the Float."}], "class_name": "Float", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Float object that\n represents the argument converted to type float.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a string to be converted to a Float."}], "class_name": "Float", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Float object that\n represents the floating-point value of type float\n represented by the string. The string is converted to a\n float value as if by the valueOf method.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["the float value represented by this object\n          converted to type byte"], "return_type": ["byte"]}, "method_name": "byteValue", "method_description": "Returns the value of this Float as a byte after\n a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["f1"], "param_type": "float", "param_description": " the first float to compare."}, {"param_name": ["f2"], "param_type": "float", "param_description": " the second float to compare."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value 0 if f1 is\n          numerically equal to f2; a value less than\n          0 if f1 is numerically less than\n          f2; and a value greater than 0\n          if f1 is numerically greater than\n          f2."], "return_type": ["int"]}, "method_name": "compare", "method_description": "Compares the two specified float values. The sign\n of the integer value returned is the same as that of the\n integer that would be returned by the call:\n \n", "method_declar": ""}, {"params": [{"param_name": ["anotherFloat"], "param_type": "Float", "param_description": " the Float to be compared."}], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value 0 if anotherFloat is\n          numerically equal to this Float; a value\n          less than 0 if this Float\n          is numerically less than anotherFloat;\n          and a value greater than 0 if this\n          Float is numerically greater than\n          anotherFloat."], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares two Float objects numerically.  There are\n two ways in which comparisons performed by this method differ\n from those performed by the Java language numerical comparison\n operators (<, <=, ==, >=, >) when\n applied to primitive float values:\n\n \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["the float value represented by this\n         object converted to type double"], "return_type": ["double"]}, "method_name": "doubleValue", "method_description": "Returns the value of this Float as a double\n after a widening primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to be compared"}], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are the same;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares this object against the specified object.  The result\n is true if and only if the argument is not\n null and is a Float object that\n represents a float with the same value as the\n float represented by this object. For this\n purpose, two float values are considered to be the\n same if and only if the method floatToIntBits(float)\n returns the identical int value when applied to\n each.\n\n \nNote that in most cases, for two instances of class\n Float, f1 and f2, the value\n of f1.equals(f2) is true if and only if\n\n \nalso has the value true. However, there are two exceptions:\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "float", "param_description": " a floating-point number."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["the bits that represent the floating-point number."], "return_type": ["int"]}, "method_name": "floatToIntBits", "method_description": "Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point \"single format\" bit\n layout.\n\n \nBit 31 (the bit that is selected by the mask\n 0x80000000) represents the sign of the floating-point\n number.\n Bits 30-23 (the bits that are selected by the mask\n 0x7f800000) represent the exponent.\n Bits 22-0 (the bits that are selected by the mask\n 0x007fffff) represent the significand (sometimes called\n the mantissa) of the floating-point number.\n\n \nIf the argument is positive infinity, the result is\n 0x7f800000.\n\n \nIf the argument is negative infinity, the result is\n 0xff800000.\n\n \nIf the argument is NaN, the result is 0x7fc00000.\n\n \nIn all cases, the result is an integer that, when given to the\n intBitsToFloat(int) method, will produce a floating-point\n value the same as the argument to floatToIntBits\n (except all NaN values are collapsed to a single\n \"canonical\" NaN value).\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "float", "param_description": " a floating-point number."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["the bits that represent the floating-point number."], "return_type": ["int"]}, "method_name": "floatToRawIntBits", "method_description": "Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point \"single format\" bit\n layout, preserving Not-a-Number (NaN) values.\n\n \nBit 31 (the bit that is selected by the mask\n 0x80000000) represents the sign of the floating-point\n number.\n Bits 30-23 (the bits that are selected by the mask\n 0x7f800000) represent the exponent.\n Bits 22-0 (the bits that are selected by the mask\n 0x007fffff) represent the significand (sometimes called\n the mantissa) of the floating-point number.\n\n \nIf the argument is positive infinity, the result is\n 0x7f800000.\n\n \nIf the argument is negative infinity, the result is\n 0xff800000.\n\n \nIf the argument is NaN, the result is the integer representing\n the actual NaN value.  Unlike the floatToIntBits\n method, floatToRawIntBits does not collapse all the\n bit patterns encoding a NaN to a single \"canonical\"\n NaN value.\n\n \nIn all cases, the result is an integer that, when given to the\n intBitsToFloat(int) method, will produce a\n floating-point value the same as the argument to\n floatToRawIntBits.\n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["the float value represented by this object"], "return_type": ["float"]}, "method_name": "floatValue", "method_description": "Returns the float value of this Float object.\n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for this Float object. The\n result is the integer bit representation, exactly as produced\n by the method floatToIntBits(float), of the primitive\n float value represented by this Float\n object.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "float", "param_description": " the value to hash"}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["a hash code value for a float value."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for a float value; compatible with\n Float.hashCode().\n", "method_declar": ""}, {"params": [{"param_name": ["bits"], "param_type": "int", "param_description": " an integer."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["the float floating-point value with the same bit\n          pattern."], "return_type": ["float"]}, "method_name": "intBitsToFloat", "method_description": "Returns the float value corresponding to a given\n bit representation.\n The argument is considered to be a representation of a\n floating-point value according to the IEEE 754 floating-point\n \"single format\" bit layout.\n\n \nIf the argument is 0x7f800000, the result is positive\n infinity.\n\n \nIf the argument is 0xff800000, the result is negative\n infinity.\n\n \nIf the argument is any value in the range\n 0x7f800001 through 0x7fffffff or in\n the range 0xff800001 through\n 0xffffffff, the result is a NaN.  No IEEE 754\n floating-point operation provided by Java can distinguish\n between two NaN values of the same type with different bit\n patterns.  Distinct values of NaN are only distinguishable by\n use of the Float.floatToRawIntBits method.\n\n \nIn all other cases, let s, e, and m be three\n values that can be computed from the argument:\n\n \nNote that this method may not be able to return a\n float NaN with exactly same bit pattern as the\n int argument.  IEEE 754 distinguishes between two\n kinds of NaNs, quiet NaNs and signaling NaNs.  The\n differences between the two kinds of NaN are generally not\n visible in Java.  Arithmetic operations on signaling NaNs turn\n them into quiet NaNs with a different, but often similar, bit\n pattern.  However, on some processors merely copying a\n signaling NaN also performs that conversion.  In particular,\n copying a signaling NaN to return it to the calling method may\n perform this conversion.  So intBitsToFloat may\n not be able to return a float with a signaling NaN\n bit pattern.  Consequently, for some int values,\n floatToRawIntBits(intBitsToFloat(start)) may\n not equal start.  Moreover, which\n particular bit patterns represent signaling NaNs is platform\n dependent; although all NaN bit patterns, quiet or signaling,\n must be in the NaN range identified above.\n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["the float value represented by this object\n          converted to type int"], "return_type": ["int"]}, "method_name": "intValue", "method_description": "Returns the value of this Float as an int after\n a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "float", "param_description": " the float value to be tested"}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if the argument is a finite\n floating-point value, false otherwise."], "return_type": ["boolean"]}, "method_name": "isFinite", "method_description": "Returns true if the argument is a finite floating-point\n value; returns false otherwise (for NaN and infinity\n arguments).\n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value represented by this object is\n          positive infinity or negative infinity;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "isInfinite", "method_description": "Returns true if this Float value is\n infinitely large in magnitude, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "float", "param_description": " the value to be tested."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if the argument is positive infinity or\n          negative infinity; false otherwise."], "return_type": ["boolean"]}, "method_name": "isInfinite", "method_description": "Returns true if the specified number is infinitely\n large in magnitude, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "float", "param_description": " the value to be tested."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if the argument is NaN;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "isNaN", "method_description": "Returns true if the specified number is a\n Not-a-Number (NaN) value, false otherwise.\n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value represented by this object is\n          NaN; false otherwise."], "return_type": ["boolean"]}, "method_name": "isNaN", "method_description": "Returns true if this Float value is a\n Not-a-Number (NaN), false otherwise.\n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["the float value represented by this object\n          converted to type long"], "return_type": ["long"]}, "method_name": "longValue", "method_description": "Returns value of this Float as a long after a\n narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "float", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "float", "param_description": " the second operand"}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["the greater of a and b"], "return_type": ["float"]}, "method_name": "max", "method_description": "Returns the greater of two float values\n as if by calling Math#max(float, float).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "float", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "float", "param_description": " the second operand"}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["the smaller of a and b"], "return_type": ["float"]}, "method_name": "min", "method_description": "Returns the smaller of two float values\n as if by calling Math#min(float, float).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["the float value represented by the string\n         argument."], "return_type": ["float"]}, "method_name": "parseFloat", "method_description": "Returns a new float initialized to the value\n represented by the specified String, as performed\n by the valueOf method of class Float.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["the float value represented by this object\n          converted to type short"], "return_type": ["short"]}, "method_name": "shortValue", "method_description": "Returns the value of this Float as a short\n after a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "float", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "float", "param_description": " the second operand"}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["the sum of a and b"], "return_type": ["float"]}, "method_name": "sum", "method_description": "Adds two float values together as per the + operator.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "float", "param_description": " the float to be converted."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["a hex string representation of the argument."], "return_type": ["String"]}, "method_name": "toHexString", "method_description": "Returns a hexadecimal string representation of the\n float argument. All characters mentioned below are\n ASCII characters.\n\n \n", "method_declar": ""}, {"params": [], "class_name": "Float", "is_static": false, "return_value": {"return_name": [], "return_description": ["a String representation of this object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this Float object.\n The primitive float value represented by this object\n is converted to a String exactly as if by the method\n toString of one argument.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "float", "param_description": " the float to be converted."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["a string representation of the argument."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of the float\n argument. All characters mentioned below are ASCII characters.\n \nTo create localized string representations of a floating-point\n value, use subclasses of NumberFormat.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Float object holding the value\n          represented by the String argument."], "return_type": ["Float"]}, "method_name": "valueOf", "method_description": "Returns a Float object holding the\n float value represented by the argument string\n s.\n\n \nIf s is null, then a\n NullPointerException is thrown.\n\n \nLeading and trailing whitespace characters in s\n are ignored.  Whitespace is removed as if by the String#trim method; that is, both ASCII space and control\n characters are removed. The rest of s should\n constitute a FloatValue as described by the lexical\n syntax rules:\n\n \nTo interpret localized string representations of a\n floating-point value, use subclasses of NumberFormat.\n\n \nNote that trailing format specifiers, specifiers that\n determine the type of a floating-point literal\n (1.0f is a float value;\n 1.0d is a double value), do\n not influence the results of this method.  In other\n words, the numerical value of the input string is converted\n directly to the target floating-point type.  In general, the\n two-step sequence of conversions, string to double\n followed by double to float, is\n not equivalent to converting a string directly to\n float.  For example, if first converted to an\n intermediate double and then to\n float, the string\n\"1.00000017881393421514957253748434595763683319091796875001d\"\n results in the float value\n 1.0000002f; if the string is converted directly to\n float, 1.0000001f results.\n\n \nTo avoid calling this method on an invalid string and having\n a NumberFormatException be thrown, the documentation\n for Double#valueOf lists a regular\n expression which can be used to screen the input.\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "float", "param_description": " a float value."}], "class_name": "Float", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Float instance representing f."], "return_type": ["Float"]}, "method_name": "valueOf", "method_description": "Returns a Float instance representing the specified\n float value.\n If a new Float instance is not required, this method\n should generally be used in preference to the constructor\n Float(float), as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n", "method_declar": ""}], "class_name": "Float", "Vars": null}