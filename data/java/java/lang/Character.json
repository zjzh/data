{"package_name": "java.lang", "subclass_list": [], "class_description": "The Character class wraps a value of the primitive\n type char in an object. An object of type\n Character contains a single field whose type is\n char. In addition, this class provides several methods for determining\n a character's category (lowercase letter, digit, etc.) and for converting\n characters from uppercase to lowercase and vice versa. Character information is based on the Unicode Standard The methods and data of class Character are defined by\n the information in the UnicodeData file that is part of the\n Unicode Character Database maintained by the Unicode\n Consortium. This file specifies various properties including name\n and general category for every defined Unicode code point or\n character range. The file and its description are available from the Unicode Consortium at: The char data type (and therefore the value that a\n Character object encapsulates) are based on the\n original Unicode specification, which defined characters as\n fixed-width 16-bit entities. The Unicode Standard has since been\n changed to allow for characters whose representation requires more\n than 16 bits.  The range of legal code points is now\n U+0000 to U+10FFFF, known as Unicode scalar value.\n (Refer to the \n definition of the U+n notation in the Unicode\n Standard.) The set of characters from U+0000 to U+FFFF is\n sometimes referred to as the Basic Multilingual Plane (BMP).\n Characters whose code points are greater\n than U+FFFF are called supplementary characters.  The Java\n platform uses the UTF-16 representation in char arrays and\n in the String and StringBuffer classes. In\n this representation, supplementary characters are represented as a pair\n of char values, the first from the high-surrogates\n range, (\\uD800-\\uDBFF), the second from the\n low-surrogates range (\\uDC00-\\uDFFF). A char value, therefore, represents Basic\n Multilingual Plane (BMP) code points, including the surrogate\n code points, or code units of the UTF-16 encoding. An\n int value represents all Unicode code points,\n including supplementary code points. The lower (least significant)\n 21 bits of int are used to represent Unicode code\n points and the upper (most significant) 11 bits must be zero.\n Unless otherwise specified, the behavior with respect to\n supplementary characters and surrogate char values is\n as follows: In the Java SE API documentation, Unicode code point is\n used for character values in the range between U+0000 and U+10FFFF,\n and Unicode code unit is used for 16-bit\n char values that are code units of the UTF-16\n encoding. For more information on Unicode terminology, refer to the\n Unicode Glossary. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable", "Comparable<Character>"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "Character", "Vars": null}