{"package_name": "java.lang.reflect", "subclass_list": [], "class_description": "TypeVariable is the common superinterface for type variables of kinds.\n A type variable is created the first time it is needed by a reflective\n method, as specified in this package.  If a type variable t is referenced\n by a type (i.e, class, interface or annotation type) T, and T is declared\n by the nth enclosing class of T (see JLS 8.1.2), then the creation of t\n requires the resolution (see JVMS 5) of the ith enclosing class of T,\n for i = 0 to n, inclusive. Creating a type variable must not cause the\n creation of its bounds. Repeated creation of a type variable has no effect. Multiple objects may be instantiated at run-time to\n represent a given type variable. Even though a type variable is\n created only once, this does not imply any requirement to cache\n instances representing the type variable. However, all instances\n representing a type variable must be equal() to each other.\n As a consequence, users of type variables must not rely on the identity\n of instances of classes implementing this interface. ", "class_type": "interface", "typealias": [], "interface_list": ["Type"], "class_inherit_list": [], "Methods": [], "class_name": "TypeVariable", "Vars": null}