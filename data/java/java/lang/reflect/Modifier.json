{"package_name": "java.lang.reflect", "subclass_list": [], "class_description": "The Modifier class provides static methods and\n constants to decode class and member access modifiers.  The sets of\n modifiers are represented as integers with distinct bit positions\n representing different modifiers.  The values for the constants\n representing the modifiers are taken from the tables in sections 4.1, 4.4, 4.5, and 4.7 of\n The Java\u2122 Virtual Machine Specification. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Modifier", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["an int value OR-ing together the source language\n modifiers that can be applied to a class."], "return_type": ["int"]}, "method_name": "classModifiers", "method_description": "Return an int value OR-ing together the source language\n modifiers that can be applied to a class.\n", "method_declar": ""}, {"params": [], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["an int value OR-ing together the source language\n modifiers that can be applied to a constructor."], "return_type": ["int"]}, "method_name": "constructorModifiers", "method_description": "Return an int value OR-ing together the source language\n modifiers that can be applied to a constructor.\n", "method_declar": ""}, {"params": [], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["an int value OR-ing together the source language\n modifiers that can be applied to a field."], "return_type": ["int"]}, "method_name": "fieldModifiers", "method_description": "Return an int value OR-ing together the source language\n modifiers that can be applied to a field.\n", "method_declar": ""}, {"params": [], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["an int value OR-ing together the source language\n modifiers that can be applied to an interface."], "return_type": ["int"]}, "method_name": "interfaceModifiers", "method_description": "Return an int value OR-ing together the source language\n modifiers that can be applied to an interface.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n abstract modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isAbstract", "method_description": "Return true if the integer argument includes the\n abstract modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n final modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isFinal", "method_description": "Return true if the integer argument includes the\n final modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n interface modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isInterface", "method_description": "Return true if the integer argument includes the\n interface modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n native modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isNative", "method_description": "Return true if the integer argument includes the\n native modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n private modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isPrivate", "method_description": "Return true if the integer argument includes the\n private modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n protected modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isProtected", "method_description": "Return true if the integer argument includes the\n protected modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n public modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isPublic", "method_description": "Return true if the integer argument includes the\n public modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n static modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isStatic", "method_description": "Return true if the integer argument includes the\n static modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n strictfp modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isStrict", "method_description": "Return true if the integer argument includes the\n strictfp modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n synchronized modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isSynchronized", "method_description": "Return true if the integer argument includes the\n synchronized modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n transient modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isTransient", "method_description": "Return true if the integer argument includes the\n transient modifier, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if mod includes the\n volatile modifier; false otherwise."], "return_type": ["boolean"]}, "method_name": "isVolatile", "method_description": "Return true if the integer argument includes the\n volatile modifier, false otherwise.\n", "method_declar": ""}, {"params": [], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["an int value OR-ing together the source language\n modifiers that can be applied to a method."], "return_type": ["int"]}, "method_name": "methodModifiers", "method_description": "Return an int value OR-ing together the source language\n modifiers that can be applied to a method.\n", "method_declar": ""}, {"params": [], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["an int value OR-ing together the source language\n modifiers that can be applied to a parameter."], "return_type": ["int"]}, "method_name": "parameterModifiers", "method_description": "Return an int value OR-ing together the source language\n modifiers that can be applied to a parameter.\n", "method_declar": ""}, {"params": [{"param_name": ["mod"], "param_type": "int", "param_description": " a set of modifiers"}], "class_name": "Modifier", "is_static": true, "return_value": {"return_name": [], "return_description": ["a string representation of the set of modifiers\n represented by mod"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Return a string describing the access modifier flags in\n the specified modifier. For example:\n \n", "method_declar": ""}], "class_name": "Modifier", "Vars": null}