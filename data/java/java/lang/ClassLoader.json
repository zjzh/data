{"package_name": "java.lang", "subclass_list": ["BaseDexClassLoader", "SecureClassLoader", "BaseDexClassLoader", "ClassLoader", "SecureClassLoader"], "class_description": "A class loader is an object that is responsible for loading classes. The\n class ClassLoader is an abstract class.  Given the binary name of a class, a class loader should attempt to\n locate or generate data that constitutes a definition for the class.  A\n typical strategy is to transform the name into a file name and then read a\n \"class file\" of that name from a file system. Every Class object contains a Class#getClassLoader() to the ClassLoader that defined\n it. Class objects for array classes are not created by class\n loaders, but are created automatically as required by the Java runtime.\n The class loader for an array class, as returned by Class#getClassLoader() is the same as the class loader for its element\n type; if the element type is a primitive type, then the array class has no\n class loader. Applications implement subclasses of ClassLoader in order to\n extend the manner in which the Java virtual machine dynamically loads\n classes. Class loaders may typically be used by security managers to indicate\n security domains. The ClassLoader class uses a delegation model to search for\n classes and resources.  Each instance of ClassLoader has an\n associated parent class loader.  When requested to find a class or\n resource, a ClassLoader instance will delegate the search for the\n class or resource to its parent class loader before attempting to find the\n class or resource itself.  The virtual machine's built-in class loader,\n called the \"bootstrap class loader\", does not itself have a parent but may\n serve as the parent of a ClassLoader instance. Class loaders that support concurrent loading of classes are known as\n parallel capable class loaders and are required to register\n themselves at their class initialization time by invoking the\n ClassLoader.registerAsParallelCapable\n method. Note that the ClassLoader class is registered as parallel\n capable by default. However, its subclasses still need to register themselves\n if they are parallel capable. \n In environments in which the delegation model is not strictly\n hierarchical, class loaders need to be parallel capable, otherwise class\n loading can lead to deadlocks because the loader lock is held for the\n duration of the class loading process (see loadClass methods). Normally, the Java virtual machine loads classes from the local file\n system in a platform-dependent manner.  For example, on UNIX systems, the\n virtual machine loads classes from the directory defined by the\n CLASSPATH environment variable. However, some classes may not originate from a file; they may originate\n from other sources, such as the network, or they could be constructed by an\n application.  The method defineClass converts an array of bytes into an instance of class\n Class. Instances of this newly defined class can be created using\n Class#newInstance. The methods and constructors of objects created by a class loader may\n reference other classes.  To determine the class(es) referred to, the Java\n virtual machine invokes the loadClass method of\n the class loader that originally created the class. For example, an application could create a network class loader to\n download class files from a server.  Sample code might look like: The network class loader subclass must define the methods findClass and loadClassData to load a class\n from the network.  Once it has downloaded the bytes that make up the class,\n it should use the method defineClass to\n create a class instance.  A sample implementation is: Any class name provided as a String parameter to methods in\n ClassLoader must be a binary name as defined by\n The Java\u2122 Language Specification. Examples of valid class names include: ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "ClassLoader", "Vars": null}