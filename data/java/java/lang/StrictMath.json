{"package_name": "java.lang", "subclass_list": [], "class_description": "The class StrictMath contains methods for performing basic\n numeric operations such as the elementary exponential, logarithm,\n square root, and trigonometric functions. To help ensure portability of Java programs, the definitions of\n some of the numeric functions in this package require that they\n produce the same results as certain published algorithms. These\n algorithms are available from the well-known network library\n netlib as the package \"Freely Distributable Math\n Library,\" fdlibm. These\n algorithms, which are written in the C programming language, are\n then to be understood as executed with all floating-point\n operations following the rules of Java floating-point arithmetic. The Java math library is defined with respect to\n fdlibm version 5.3. Where fdlibm provides\n more than one definition for a function (such as\n acos), use the \"IEEE 754 core function\" version\n (residing in a file whose name begins with the letter\n e).  The methods which require fdlibm\n semantics are sin, cos, tan,\n asin, acos, atan,\n exp, log, log10,\n cbrt, atan2, pow,\n sinh, cosh, tanh,\n hypot, expm1, and log1p. The platform uses signed two's complement integer arithmetic with\n int and long primitive types.  The developer should choose\n the primitive type to ensure that arithmetic operations consistently\n produce correct results, which in some cases means the operations\n will not overflow the range of values of the computation.\n The best practice is to choose the primitive type and algorithm to avoid\n overflow. In cases where the size is int or long and\n overflow errors need to be detected, the methods addExact,\n subtractExact, multiplyExact, and toIntExact\n throw an ArithmeticException when the results overflow.\n For other arithmetic operations such as divide, absolute value,\n increment, decrement, and negation overflow occurs only with\n a specific minimum or maximum value and should be checked against\n the minimum or maximum as appropriate. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "StrictMath", "Vars": null}