{"package_name": "java.lang", "subclass_list": [], "class_description": "The ProcessBuilder#start() and\n Runtime#exec(String[],String[],File)\n methods create a native process and return an instance of a\n subclass of Process that can be used to control the process\n and obtain information about it.  The class Process\n provides methods for performing input from the process, performing\n output to the process, waiting for the process to complete,\n checking the exit status of the process, and destroying (killing)\n the process. The methods that create processes may not work well for special\n processes on certain native platforms, such as native windowing\n processes, daemon processes, Win16/DOS processes on Microsoft\n Windows, or shell scripts. By default, the created subprocess does not have its own terminal\n or console.  All its standard I/O (i.e. stdin, stdout, stderr)\n operations will be redirected to the parent process, where they can\n be accessed via the streams obtained using the methods\n getOutputStream(),\n getInputStream(), and\n getErrorStream().\n The parent process uses these streams to feed input to and get output\n from the subprocess.  Because some native platforms only provide\n limited buffer size for standard input and output streams, failure\n to promptly write the input stream or read the output stream of\n the subprocess may cause the subprocess to block, or even deadlock. Where desired, \n subprocess I/O can also be redirected\n using methods of the ProcessBuilder class. The subprocess is not killed when there are no more references to\n the Process object, but rather the subprocess\n continues executing asynchronously. There is no requirement that a process represented by a Process object execute asynchronously or concurrently with respect\n to the Java process that owns the Process object. As of 1.5, ProcessBuilder#start() is the preferred way\n to create a Process. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Process", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [], "class_name": "Process", "is_static": false, "return_value": {"return_name": [], "return_description": ["the Process object representing the\n         subprocess to be forcibly destroyed."], "return_type": ["Process"]}, "method_name": "destroyForcibly", "method_description": "Kills the subprocess. The subprocess represented by this\n Process object is forcibly terminated.\n\n \nThe default implementation of this method invokes destroy()\n and so may not forcibly terminate the process. Concrete implementations\n of this class are strongly encouraged to override this method with a\n compliant implementation.  Invoking this method on Process\n objects returned by ProcessBuilder#start and\n Runtime#exec will forcibly terminate the process.\n\n \nNote: The subprocess may not terminate immediately.\n i.e. isAlive() may return true for a brief period\n after destroyForcibly() is called. This method\n may be chained to waitFor() if needed.\n", "method_declar": ""}, {"params": [], "class_name": "Process", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the subprocess represented by this\n         Process object has not yet terminated."], "return_type": ["boolean"]}, "method_name": "isAlive", "method_description": "Tests whether the subprocess represented by this Process is\n alive.\n", "method_declar": ""}, {"params": [{"param_name": ["timeout"], "param_type": "long", "param_description": " the maximum time to wait"}, {"param_name": ["unit"], "param_type": "TimeUnit", "param_description": " the time unit of the timeout argument"}], "class_name": "Process", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the subprocess has exited and false if\n         the waiting time elapsed before the subprocess has exited."], "return_type": ["boolean"]}, "method_name": "waitFor", "method_description": "Causes the current thread to wait, if necessary, until the\n subprocess represented by this Process object has\n terminated, or the specified waiting time elapses.\n\n \nIf the subprocess has already terminated then this method returns\n immediately with the value true.  If the process has not\n terminated and the timeout value is less than, or equal to, zero, then\n this method returns immediately with the value false.\n\n \nThe default implementation of this methods polls the exitValue\n to check if the process has terminated. Concrete implementations of this\n class are strongly encouraged to override this method with a more\n efficient implementation.\n", "method_declar": ""}], "class_name": "Process", "Vars": null}