{"package_name": "java.lang.ref", "subclass_list": [], "class_description": "Phantom reference objects, which are enqueued after the collector\n determines that their referents may otherwise be reclaimed.  Phantom\n references are most often used for scheduling pre-mortem cleanup actions in\n a more flexible way than is possible with the Java finalization mechanism. If the garbage collector determines at a certain point in time that the\n referent of a phantom reference is phantom reachable, then at that\n time or at some later time it will enqueue the reference. In order to ensure that a reclaimable object remains so, the referent of\n a phantom reference may not be retrieved: The get method of a\n phantom reference always returns null. Unlike soft and weak references, phantom references are not\n automatically cleared by the garbage collector as they are enqueued.  An\n object that is reachable via phantom references will remain so until all\n such references are cleared or themselves become unreachable. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Reference"], "Methods": [{"params": [{"param_name": ["referent"], "param_type": "T", "param_description": " the object the new phantom reference will refer to"}, {"param_name": ["q"], "param_type": "ReferenceQueue", "param_description": " the queue with which the reference is to be registered,\n          or null if registration is not required"}], "class_name": "PhantomReference", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new phantom reference that refers to the given object and\n is registered with the given queue.\n\n \n It is possible to create a phantom reference with a null\n queue, but such a reference is completely useless: Its get\n method will always return null and, since it does not have a queue, it\n will never be enqueued.\n", "method_declar": ""}, {"params": [], "class_name": "PhantomReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["null"], "return_type": ["T"]}, "method_name": "get", "method_description": "Returns this reference object's referent.  Because the referent of a\n phantom reference is always inaccessible, this method always returns\n null.\n", "method_declar": ""}], "class_name": "PhantomReference", "Vars": null}