{"package_name": "java.lang.ref", "subclass_list": [], "class_description": "Soft reference objects, which are cleared at the discretion of the garbage\n collector in response to memory demand. Suppose that the garbage collector determines at a certain point in time\n that an object is softly\n reachable.  At that time it may choose to clear atomically all soft\n references to that object and all soft references to any other\n softly-reachable objects from which that object is reachable through a chain\n of strong references.  At the same time or at some later time it will\n enqueue those newly-cleared soft references that are registered with\n reference queues. All soft references to softly-reachable objects are guaranteed to have\n been cleared before the virtual machine throws an\n OutOfMemoryError.  Otherwise no constraints are placed upon the\n time at which a soft reference will be cleared or the order in which a set\n of such references to different objects will be cleared.  Virtual machine\n implementations are, however, encouraged to bias against clearing\n recently-created or recently-used soft references. The lack of information on the value to your application of each reference\n limits the usefulness of soft references. References that are cleared too\n early cause unnecessary work; those that are cleared too late waste memory. Most applications should use an android.util.LruCache instead of\n soft references. LruCache has an effective eviction policy and lets the user\n tune how much memory is allotted. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Reference"], "Methods": [{"params": [{"param_name": ["referent"], "param_type": "T", "param_description": " object the new soft reference will refer to"}], "class_name": "SoftReference", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new soft reference that refers to the given object.  The new\n reference is not registered with any queue.\n", "method_declar": ""}, {"params": [{"param_name": ["referent"], "param_type": "T", "param_description": " object the new soft reference will refer to"}, {"param_name": ["q"], "param_type": "ReferenceQueue", "param_description": " the queue with which the reference is to be registered,\n          or null if registration is not required"}], "class_name": "SoftReference", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new soft reference that refers to the given object and is\n registered with the given queue.\n", "method_declar": ""}, {"params": [], "class_name": "SoftReference", "is_static": false, "return_value": {"return_name": [], "return_description": ["The object to which this reference refers, or\n           null if this reference object has been cleared"], "return_type": ["T"]}, "method_name": "get", "method_description": "Returns this reference object's referent.  If this reference object has\n been cleared, either by the program or by the garbage collector, then\n this method returns null.\n", "method_declar": ""}], "class_name": "SoftReference", "Vars": null}