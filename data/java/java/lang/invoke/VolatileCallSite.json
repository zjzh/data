{"package_name": "java.lang.invoke", "subclass_list": [], "class_description": "A VolatileCallSite is a CallSite whose target acts like a volatile variable.\n An invokedynamic instruction linked to a VolatileCallSite sees updates\n to its call site target immediately, even if the update occurs in another thread.\n There may be a performance penalty for such tight coupling between threads. In other respects, a VolatileCallSite is interchangeable\n with MutableCallSite. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["CallSite"], "Methods": [{"params": [{"param_name": ["type"], "param_type": "MethodType", "param_description": " the method type that this call site will have"}], "class_name": "VolatileCallSite", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a call site with a volatile binding to its target.\n The initial target is set to a method handle\n of the given type which will throw an IllegalStateException if called.\n", "method_declar": ""}, {"params": [{"param_name": ["target"], "param_type": "MethodHandle", "param_description": " the method handle that will be the initial target of the call site"}], "class_name": "VolatileCallSite", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a call site with a volatile binding to its target.\n The target is set to the given value.\n", "method_declar": ""}, {"params": [], "class_name": "VolatileCallSite", "is_static": false, "return_value": {"return_name": [], "return_description": ["a method handle which always invokes this call site's current target"], "return_type": ["MethodHandle"]}, "method_name": "dynamicInvoker", "method_description": "Produces a method handle equivalent to an invokedynamic instruction\n which has been linked to this call site.\n \n\n This method is equivalent to the following code:\n \n", "method_declar": ""}, {"params": [], "class_name": "VolatileCallSite", "is_static": false, "return_value": {"return_name": [], "return_description": ["the linkage state of this call site, a method handle which can change over time"], "return_type": ["MethodHandle"]}, "method_name": "getTarget", "method_description": "Returns the target method of the call site, which behaves\n like a volatile field of the VolatileCallSite.\n \n\n The interactions of getTarget with memory are the same\n as of a read from a volatile field.\n \n\n In particular, the current thread is required to issue a fresh\n read of the target from memory, and must not fail to see\n a recent update to the target by another thread.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["newTarget"], "param_type": "MethodHandle", "param_description": " the new target"}], "class_name": "VolatileCallSite", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setTarget", "method_description": "Updates the target method of this call site, as a volatile variable.\n The type of the new target must agree with the type of the old target.\n \n\n The interactions with memory are the same as of a write to a volatile field.\n In particular, any threads is guaranteed to see the updated target\n the next time it calls getTarget.\nSee also:\n", "method_declar": ""}], "class_name": "VolatileCallSite", "Vars": null}