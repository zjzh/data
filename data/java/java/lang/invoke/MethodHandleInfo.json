{"package_name": "java.lang.invoke", "subclass_list": [], "class_description": "A symbolic reference obtained by cracking a direct method handle\n into its consitutent symbolic parts.\n To crack a direct method handle, call Lookup#revealDirect. If the underlying method is caller sensitive,\n the direct method handle will have been \"bound\" to a particular caller class, the\n lookup class\n of the lookup object used to create it.\n Cracking this method handle with a different lookup class will fail\n even if the underlying method is public (like Class.forName). The requirement of lookup object matching provides a \"fast fail\" behavior\n for programs which may otherwise trust erroneous revelation of a method\n handle with symbolic information (or caller binding) from an unexpected scope.\n Use MethodHandles.reflectAs(Class, MethodHandle) to override this limitation. ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "MethodHandleInfo", "Vars": null}