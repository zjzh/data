{"package_name": "java.lang.invoke", "subclass_list": [], "class_description": "A method type represents the arguments and return type accepted and\n returned by a method handle, or the arguments and return type passed\n and expected  by a method handle caller.  Method types must be properly\n matched between a method handle and all its callers,\n and the JVM's operations enforce this matching at, specifically\n during calls to MethodHandle#invokeExact\n and MethodHandle#invoke, and during execution\n of invokedynamic instructions. The structure is a return type accompanied by any number of parameter types.\n The types (primitive, void, and reference) are represented by Class objects.\n (For ease of exposition, we treat void as if it were a type.\n In fact, it denotes the absence of a return type.) All instances of MethodType are immutable.\n Two instances are completely interchangeable if they compare equal.\n Equality depends on pairwise correspondence of the return and parameter types and on nothing else. This type can be created only by factory methods.\n All factory methods may cache values, though caching is not guaranteed.\n Some factory methods are static, while others are virtual methods which\n modify precursor method types, e.g., by changing a selected parameter. Factory methods which operate on groups of parameter types\n are systematically presented in two versions, so that both Java arrays and\n Java lists can be used to work with groups of parameter types.\n The query methods parameterArray and parameterList\n also provide a choice between arrays and lists. MethodType objects are sometimes derived from bytecode instructions\n such as invokedynamic, specifically from the type descriptor strings associated\n with the instructions in a class file's constant pool. Like classes and strings, method types can also be represented directly\n in a class file's constant pool as constants.\n A method type may be loaded by an ldc instruction which refers\n to a suitable CONSTANT_MethodType constant pool entry.\n The entry refers to a CONSTANT_Utf8 spelling for the descriptor string.\n (For full details on method type constants,\n see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.) When the JVM materializes a MethodType from a descriptor string,\n all classes named in the descriptor must be accessible, and will be loaded.\n (But the classes need not be initialized, as is the case with a CONSTANT_Class.)\n This loading may occur at any time before the MethodType object is first derived. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "MethodType", "Vars": null}