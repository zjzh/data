{"package_name": "java.lang.invoke", "subclass_list": [], "class_description": "A lookup object is a factory for creating method handles,\n when the creation requires access checking.\n Method handles do not perform\n access checks when they are called, but rather when they are created.\n Therefore, method handle access\n restrictions must be enforced when a method handle is created.\n The caller class against which those restrictions are enforced\n is known as the lookup class. A lookup class which needs to create method handles will call\n MethodHandles.lookup to create a factory for itself.\n When the Lookup factory object is created, the identity of the lookup class is\n determined, and securely stored in the Lookup object.\n The lookup class (or its delegates) may then use factory methods\n on the Lookup object to create method handles for access-checked members.\n This includes all methods, constructors, and fields which are allowed to the lookup class,\n even private ones. In cases where the given member is of variable arity (i.e., a method or constructor)\n the returned method handle will also be of MethodHandle#asVarargsCollector.\n In all other cases, the returned method handle will be of fixed arity. Discussion:\n The equivalence between looked-up method handles and underlying\n class members and bytecode behaviors\n can break down in a few ways: All access checks start from a Lookup object, which\n compares its recorded lookup class against all requests to\n create method handles.\n A single Lookup object can be used to create any number\n of access-checked method handles, all checked against a single\n lookup class. A Lookup object can be shared with other trusted code,\n such as a metaobject protocol.\n A shared Lookup object delegates the capability\n to create method handles on private members of the lookup class.\n Even if privileged code uses the Lookup object,\n the access checking is confined to the privileges of the\n original lookup class. A lookup can fail, because\n the containing class is not accessible to the lookup class, or\n because the desired class member is missing, or because the\n desired class member is not accessible to the lookup class, or\n because the lookup object is not trusted enough to access the member.\n In any of these cases, a ReflectiveOperationException will be\n thrown from the attempted lookup.  The exact class will be one of\n the following: In general, the conditions under which a method handle may be\n looked up for a method M are no more restrictive than the conditions\n under which the lookup class could have compiled, verified, and resolved a call to M.\n Where the JVM would raise exceptions like NoSuchMethodError,\n a method handle lookup will generally raise a corresponding\n checked exception, such as NoSuchMethodException.\n And the effect of invoking the method handle resulting from the lookup\n is exactly equivalent\n to executing the compiled, verified, and resolved call to M.\n The same point is true of fields and constructors. Discussion:\n Access checks only apply to named and reflected methods,\n constructors, and fields.\n Other method handle creation methods, such as\n MethodHandle#asType,\n do not require any access checks, and are used\n independently of any Lookup object. If the desired member is protected, the usual JVM rules apply,\n including the requirement that the lookup class must be either be in the\n same package as the desired member, or must inherit that member.\n (See the Java Virtual Machine Specification, sections 4.9.2, 5.4.3.5, and 6.4.)\n In addition, if the desired member is a non-static field or method\n in a different package, the resulting method handle may only be applied\n to objects of the lookup class or one of its subclasses.\n This requirement is enforced by narrowing the type of the leading\n this parameter from C\n (which will necessarily be a superclass of the lookup class)\n to the lookup class itself. The JVM imposes a similar requirement on invokespecial instruction,\n that the receiver argument must match both the resolved method and\n the current class.  Again, this requirement is enforced by narrowing the\n type of the leading parameter to the resulting method handle.\n (See the Java Virtual Machine Specification, section 4.10.1.9.) The JVM represents constructors and static initializer blocks as internal methods\n with special names (\"<init>\" and \"<clinit>\").\n The internal syntax of invocation instructions allows them to refer to such internal\n methods as if they were normal methods, but the JVM bytecode verifier rejects them.\n A lookup of such an internal method will produce a NoSuchMethodException. In some cases, access between nested classes is obtained by the Java compiler by creating\n an wrapper method to access a private method of another class\n in the same top-level declaration.\n For example, a nested class C.D\n can access private members within other related classes such as\n C, C.D.E, or C.B,\n but the Java compiler may need to generate wrapper methods in\n those related classes.  In such cases, a Lookup object on\n C.E would be unable to those private members.\n A workaround for this limitation is the Lookup#in method,\n which can transform a lookup on C.E into one on any of those other\n classes, without special elevation of privilege. The accesses permitted to a given lookup object may be limited,\n according to its set of lookupModes,\n to a subset of members normally accessible to the lookup class.\n For example, the publicLookup\n method produces a lookup object which is only allowed to access\n public members in public classes.\n The caller sensitive method lookup\n produces a lookup object with full capabilities relative to\n its caller class, to emulate all supported bytecode behaviors.\n Also, the Lookup#in method may produce a lookup object\n with fewer access modes than the original lookup object. Discussion of private access:\n We say that a lookup has private access\n if its lookup modes\n include the possibility of accessing private members.\n As documented in the relevant methods elsewhere,\n only lookups with private access possess the following capabilities: Each of these permissions is a consequence of the fact that a lookup object\n with private access can be securely traced back to an originating class,\n whose bytecode behaviors and Java language access permissions\n can be reliably determined and emulated by method handles. If a security manager is present, member lookups are subject to\n additional checks.\n From one to three calls are made to the security manager.\n Any of these calls can refuse access by throwing a\n SecurityException.\n Define smgr as the security manager,\n lookc as the lookup class of the current lookup object,\n refc as the containing class in which the member\n is being sought, and defc as the class in which the\n member is actually defined.\n The value lookc is defined as not present\n if the current lookup object does not have\n private access.\n The calls are made according to the following rules: If a method handle for a caller-sensitive method is requested,\n the general rules for bytecode behaviors apply,\n but they take account of the lookup class in a special way.\n The resulting method handle behaves as if it were called\n from an instruction contained in the lookup class,\n so that the caller-sensitive method detects the lookup class.\n (By contrast, the invoker of the method handle is disregarded.)\n Thus, in the case of caller-sensitive methods,\n different lookup classes may give rise to\n differently behaving method handles. In cases where the lookup object is\n publicLookup(),\n or some other lookup object without\n private access,\n the lookup class is disregarded.\n In such cases, no caller-sensitive method handle can be created,\n access is forbidden, and the lookup fails with an\n IllegalAccessException. Discussion:\n For example, the caller-sensitive method\n Class.forName(x)\n can return varying classes or throw varying exceptions,\n depending on the class loader of the class that calls it.\n A public lookup of Class.forName will fail, because\n there is no reasonable way to determine its bytecode behavior. If an application caches method handles for broad sharing,\n it should use publicLookup() to create them.\n If there is a lookup of Class.forName, it will fail,\n and the application must take appropriate action in that case.\n It may be that a later lookup, perhaps during the invocation of a\n bootstrap method, can incorporate the specific identity\n of the caller, making the method accessible. The function MethodHandles.lookup is caller sensitive\n so that there can be a secure foundation for lookups.\n Nearly all other methods in the JSR 292 API rely on lookup\n objects to check access requests. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [], "class_name": "MethodHandles.Lookup", "Vars": null}