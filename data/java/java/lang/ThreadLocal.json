{"package_name": "java.lang", "subclass_list": ["InheritableThreadLocal", "InheritableThreadLocal"], "class_description": "This class provides thread-local variables.  These variables differ from\n their normal counterparts in that each thread that accesses one (via its\n get or set method) has its own, independently initialized\n copy of the variable.  ThreadLocal instances are typically private\n static fields in classes that wish to associate state with a thread (e.g.,\n a user ID or Transaction ID). For example, the class below generates unique identifiers local to each\n thread.\n A thread's id is assigned the first time it invokes ThreadId.get()\n and remains unchanged on subsequent calls. Each thread holds an implicit reference to its copy of a thread-local\n variable as long as the thread is alive and the ThreadLocal\n instance is accessible; after a thread goes away, all of its copies of\n thread-local instances are subject to garbage collection (unless other\n references to these copies exist). ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "ThreadLocal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a thread local variable.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "ThreadLocal", "is_static": false, "return_value": {"return_name": [], "return_description": ["the current thread's value of this thread-local"], "return_type": ["T"]}, "method_name": "get", "method_description": "Returns the value in the current thread's copy of this\n thread-local variable.  If the variable has no value for the\n current thread, it is first initialized to the value returned\n by an invocation of the initialValue() method.\n", "method_declar": ""}, {"params": [], "class_name": "ThreadLocal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "remove", "method_description": "Removes the current thread's value for this thread-local\n variable.  If this thread-local variable is subsequently\n read by the current thread, its value will be\n reinitialized by invoking its initialValue() method,\n unless its value is set by the current thread\n in the interim.  This may result in multiple invocations of the\n initialValue method in the current thread.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "T", "param_description": " the value to be stored in the current thread's copy of\n        this thread-local."}], "class_name": "ThreadLocal", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "set", "method_description": "Sets the current thread's copy of this thread-local variable\n to the specified value.  Most subclasses will have no need to\n override this method, relying solely on the initialValue()\n method to set the values of thread-locals.\n", "method_declar": ""}, {"params": [{"param_name": ["supplier"], "param_type": "Supplier", "param_description": " the supplier to be used to determine the initial value"}], "class_name": "ThreadLocal", "is_static": true, "return_value": {"return_name": [], "return_description": ["a new thread local variable"], "return_type": ["ThreadLocal<S>"]}, "method_name": "withInitial", "method_description": "Creates a thread local variable. The initial value of the variable is\n determined by invoking the get method on the Supplier.\n", "method_declar": ""}], "class_name": "ThreadLocal", "Vars": null}