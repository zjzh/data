{"package_name": "java.lang", "subclass_list": [], "class_description": "Package objects contain version information\n about the implementation and specification of a Java package.\n This versioning information is retrieved and made available\n by the ClassLoader instance that\n loaded the class(es).  Typically, it is stored in the manifest that is\n distributed with the classes. The set of classes that make up the package may implement a\n particular specification and if so the specification title, version number,\n and vendor strings identify that specification.\n An application can ask if the package is\n compatible with a particular version, see the isCompatibleWith\n method for details. Specification version numbers use a syntax that consists of nonnegative\n decimal integers separated by periods \".\", for example \"2.0\" or\n \"1.2.3.4.5.6.7\".  This allows an extensible number to be used to represent\n major, minor, micro, etc. versions.  The version specification is described\n by the following formal grammar: The implementation title, version, and vendor strings identify an\n implementation and are made available conveniently to enable accurate\n reporting of the packages involved when a problem occurs. The contents\n all three implementation strings are vendor specific. The\n implementation version strings have no specified syntax and should\n only be compared for equality with desired version identifiers. Within each ClassLoader instance all classes from the same\n java package have the same Package object.  The static methods allow a package\n to be found by name or the set of all packages known to the current class\n loader to be found. ", "class_type": "class", "typealias": [], "interface_list": ["AnnotatedElement"], "class_inherit_list": ["Object"], "Methods": [], "class_name": "Package", "Vars": null}