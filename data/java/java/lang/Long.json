{"package_name": "java.lang", "subclass_list": [], "class_description": "The Long class wraps a value of the primitive type long in an object. An object of type Long contains a\n single field whose type is long. In addition, this class provides several methods for converting\n a long to a String and a String to a long, as well as other constants and methods useful when dealing\n with a long. Implementation note: The implementations of the \"bit twiddling\"\n methods (such as highestOneBit and\n numberOfTrailingZeros) are\n based on material from Henry S. Warren, Jr.'s Hacker's\n Delight, (Addison Wesley, 2002). ", "class_type": "class", "typealias": [], "interface_list": ["Comparable<Long>"], "class_inherit_list": ["Number"], "Methods": [{"params": [{"param_name": ["value"], "param_type": "long", "param_description": " the value to be represented by the\n          Long object."}], "class_name": "Long", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Long object that\n represents the specified long argument.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the String to be converted to a\n             Long."}], "class_name": "Long", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Long object that\n represents the long value indicated by the\n String parameter. The string is converted to a\n long value in exactly the manner used by the\n parseLong method for radix 10.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value whose bits are to be counted"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the number of one-bits in the two's complement binary\n     representation of the specified long value."], "return_type": ["int"]}, "method_name": "bitCount", "method_description": "Returns the number of one-bits in the two's complement binary\n representation of the specified long value.  This function is\n sometimes referred to as the population count.\n", "method_declar": ""}, {"params": [], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type byte."], "return_type": ["byte"]}, "method_name": "byteValue", "method_description": "Returns the value of this Long as a byte after\n a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "long", "param_description": " the first long to compare"}, {"param_name": ["y"], "param_type": "long", "param_description": " the second long to compare"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value 0 if x == y;\n         a value less than 0 if x < y; and\n         a value greater than 0 if x > y"], "return_type": ["int"]}, "method_name": "compare", "method_description": "Compares two long values numerically.\n The value returned is identical to what would be returned by:\n \n", "method_declar": ""}, {"params": [{"param_name": ["anotherLong"], "param_type": "Long", "param_description": " the Long to be compared."}], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value 0 if this Long is\n          equal to the argument Long; a value less than\n          0 if this Long is numerically less\n          than the argument Long; and a value greater\n          than 0 if this Long is numerically\n           greater than the argument Long (signed\n           comparison)."], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares two Long objects numerically.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "long", "param_description": " the first long to compare"}, {"param_name": ["y"], "param_type": "long", "param_description": " the second long to compare"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value 0 if x == y; a value less\n         than 0 if x < y as unsigned values; and\n         a value greater than 0 if x > y as\n         unsigned values"], "return_type": ["int"]}, "method_name": "compareUnsigned", "method_description": "Compares two long values numerically treating the values\n as unsigned.\n", "method_declar": ""}, {"params": [{"param_name": ["nm"], "param_type": "String", "param_description": " the String to decode."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Long object holding the long\n            value represented by nm"], "return_type": ["Long"]}, "method_name": "decode", "method_description": "Decodes a String into a Long.\n Accepts decimal, hexadecimal, and octal numbers given by the\n following grammar:\n\n \nThe sequence of characters following an optional\n sign and/or radix specifier (\"0x\", \"0X\",\n \"#\", or leading zero) is parsed as by the Long.parseLong method with the indicated radix (10, 16, or 8).\n This sequence of characters must represent a positive value or\n a NumberFormatException will be thrown.  The result is\n negated if first character of the specified String is\n the minus sign.  No whitespace characters are permitted in the\n String.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["dividend"], "param_type": "long", "param_description": " the value to be divided"}, {"param_name": ["divisor"], "param_type": "long", "param_description": " the value doing the dividing"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the unsigned quotient of the first argument divided by\n the second argument"], "return_type": ["long"]}, "method_name": "divideUnsigned", "method_description": "Returns the unsigned quotient of dividing the first argument by\n the second where each argument and the result is interpreted as\n an unsigned value.\n\n \nNote that in two's complement arithmetic, the three other\n basic arithmetic operations of add, subtract, and multiply are\n bit-wise identical if the two operands are regarded as both\n being signed or both being unsigned.  Therefore separate addUnsigned, etc. methods are not provided.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type double."], "return_type": ["double"]}, "method_name": "doubleValue", "method_description": "Returns the value of this Long as a double\n after a widening primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to compare with."}], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are the same;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares this object to the specified object.  The result is\n true if and only if the argument is not\n null and is a Long object that\n contains the same long value as this object.\n", "method_declar": ""}, {"params": [], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type float."], "return_type": ["float"]}, "method_name": "floatValue", "method_description": "Returns the value of this Long as a float after\n a widening primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["nm"], "param_type": "String", "param_description": " property name."}, {"param_name": ["val"], "param_type": "Long", "param_description": " default value."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the Long value of the property."], "return_type": ["Long"]}, "method_name": "getLong", "method_description": "Returns the long value of the system property with\n the specified name.  The first argument is treated as the name\n of a system property.  System properties are accessible through\n the System.getProperty(java.lang.String)\n method. The string value of this property is then interpreted\n as a long value, as per the\n Long#decode method, and a Long object\n representing this value is returned; in summary:\n\n \nNote that, in every case, neither L\n ('\\u004C') nor l\n ('\\u006C') is permitted to appear at the end\n of the property value as a type indicator, as would be\n permitted in Java programming language source code.\n\n \nThe second argument is the default value. The default value is\n returned if there is no property of the specified name, if the\n property does not have the correct numeric format, or if the\n specified name is empty or null.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["nm"], "param_type": "String", "param_description": " property name."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the Long value of the property."], "return_type": ["Long"]}, "method_name": "getLong", "method_description": "Determines the long value of the system property\n with the specified name.\n\n \nThe first argument is treated as the name of a system\n property.  System properties are accessible through the System.getProperty(java.lang.String) method. The\n string value of this property is then interpreted as a long value using the grammar supported by Long#decode\n and a Long object representing this value is returned.\n\n \nIf there is no property with the specified name, if the\n specified name is empty or null, or if the property\n does not have the correct numeric format, then null is\n returned.\n\n \nIn other words, this method returns a Long object\n equal to the value of:\n\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["nm"], "param_type": "String", "param_description": " property name."}, {"param_name": ["val"], "param_type": "long", "param_description": " default value."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the Long value of the property."], "return_type": ["Long"]}, "method_name": "getLong", "method_description": "Determines the long value of the system property\n with the specified name.\n\n \nThe first argument is treated as the name of a system\n property.  System properties are accessible through the System.getProperty(java.lang.String) method. The\n string value of this property is then interpreted as a long value using the grammar supported by Long#decode\n and a Long object representing this value is returned.\n\n \nThe second argument is the default value. A Long object\n that represents the value of the second argument is returned if there\n is no property of the specified name, if the property does not have\n the correct numeric format, or if the specified name is empty or null.\n\n \nIn other words, this method returns a Long object equal\n to the value of:\n\n \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for this Long. The result is\n the exclusive OR of the two halves of the primitive\n long value held by this Long\n object. That is, the hashcode is the value of the expression:\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "long", "param_description": " the value to hash"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["a hash code value for a long value."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for a long value; compatible with\n Long.hashCode().\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value whose highest one bit is to be computed"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["a long value with a single one-bit, in the position\n     of the highest-order one-bit in the specified value, or zero if\n     the specified value is itself equal to zero."], "return_type": ["long"]}, "method_name": "highestOneBit", "method_description": "Returns a long value with at most a single one-bit, in the\n position of the highest-order (\"leftmost\") one-bit in the specified\n long value.  Returns zero if the specified value has no\n one-bits in its two's complement binary representation, that is, if it\n is equal to zero.\n", "method_declar": ""}, {"params": [], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type int."], "return_type": ["int"]}, "method_name": "intValue", "method_description": "Returns the value of this Long as an int after\n a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type long."], "return_type": ["long"]}, "method_name": "longValue", "method_description": "Returns the value of this Long as a\n long value.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value whose lowest one bit is to be computed"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["a long value with a single one-bit, in the position\n     of the lowest-order one-bit in the specified value, or zero if\n     the specified value is itself equal to zero."], "return_type": ["long"]}, "method_name": "lowestOneBit", "method_description": "Returns a long value with at most a single one-bit, in the\n position of the lowest-order (\"rightmost\") one-bit in the specified\n long value.  Returns zero if the specified value has no\n one-bits in its two's complement binary representation, that is, if it\n is equal to zero.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "long", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "long", "param_description": " the second operand"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the greater of a and b"], "return_type": ["long"]}, "method_name": "max", "method_description": "Returns the greater of two long values\n as if by calling Math#max(long, long).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "long", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "long", "param_description": " the second operand"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the smaller of a and b"], "return_type": ["long"]}, "method_name": "min", "method_description": "Returns the smaller of two long values\n as if by calling Math#min(long, long).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value whose number of leading zeros is to be computed"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the number of zero bits preceding the highest-order\n     (\"leftmost\") one-bit in the two's complement binary representation\n     of the specified long value, or 64 if the value\n     is equal to zero."], "return_type": ["int"]}, "method_name": "numberOfLeadingZeros", "method_description": "Returns the number of zero bits preceding the highest-order\n (\"leftmost\") one-bit in the two's complement binary representation\n of the specified long value.  Returns 64 if the\n specified value has no one-bits in its two's complement representation,\n in other words if it is equal to zero.\n\n \nNote that this method is closely related to the logarithm base 2.\n For all positive long values x:\n \n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value whose number of trailing zeros is to be computed"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the number of zero bits following the lowest-order (\"rightmost\")\n     one-bit in the two's complement binary representation of the\n     specified long value, or 64 if the value is equal\n     to zero."], "return_type": ["int"]}, "method_name": "numberOfTrailingZeros", "method_description": "Returns the number of zero bits following the lowest-order (\"rightmost\")\n one-bit in the two's complement binary representation of the specified\n long value.  Returns 64 if the specified value has no\n one-bits in its two's complement representation, in other words if it is\n equal to zero.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a String containing the long\n             representation to be parsed"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the long represented by the argument in\n             decimal."], "return_type": ["long"]}, "method_name": "parseLong", "method_description": "Parses the string argument as a signed decimal long.\n The characters in the string must all be decimal digits, except\n that the first character may be an ASCII minus sign '-'\n (\\u002D') to indicate a negative value or an\n ASCII plus sign '+' ('\\u002B') to\n indicate a positive value. The resulting long value is\n returned, exactly as if the argument and the radix 10\n were given as arguments to the parseLong(java.lang.String, int) method.\n\n \nNote that neither the character L\n ('\\u004C') nor l\n ('\\u006C') is permitted to appear at the end\n of the string as a type indicator, as would be permitted in\n Java programming language source code.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the String containing the\n                     long representation to be parsed."}, {"param_name": ["radix"], "param_type": "int", "param_description": " the radix to be used while parsing s."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the long represented by the string argument in\n             the specified radix."], "return_type": ["long"]}, "method_name": "parseLong", "method_description": "Parses the string argument as a signed long in the\n radix specified by the second argument. The characters in the\n string must all be digits of the specified radix (as determined\n by whether Character.digit(char, int) returns\n a nonnegative value), except that the first character may be an\n ASCII minus sign '-' ('\\u002D') to\n indicate a negative value or an ASCII plus sign '+'\n ('\\u002B') to indicate a positive value. The\n resulting long value is returned.\n\n \nNote that neither the character L\n ('\\u004C') nor l\n ('\\u006C') is permitted to appear at the end\n of the string as a type indicator, as would be permitted in\n Java programming language source code - except that either\n L or l may appear as a digit for a\n radix greater than or equal to 22.\n\n \nAn exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \nExamples:\n \n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a String containing the unsigned long\n            representation to be parsed"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the unsigned long value represented by the decimal string argument"], "return_type": ["long"]}, "method_name": "parseUnsignedLong", "method_description": "Parses the string argument as an unsigned decimal long. The\n characters in the string must all be decimal digits, except\n that the first character may be an an ASCII plus sign '+' ('\\u002B'). The resulting integer value\n is returned, exactly as if the argument and the radix 10 were\n given as arguments to the parseUnsignedLong(java.lang.String, int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the String containing the unsigned integer\n                  representation to be parsed"}, {"param_name": ["radix"], "param_type": "int", "param_description": " the radix to be used while parsing s."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the unsigned long represented by the string\n             argument in the specified radix."], "return_type": ["long"]}, "method_name": "parseUnsignedLong", "method_description": "Parses the string argument as an unsigned long in the\n radix specified by the second argument.  An unsigned integer\n maps the values usually associated with negative numbers to\n positive numbers larger than MAX_VALUE.\n\n The characters in the string must all be digits of the\n specified radix (as determined by whether Character.digit(char, int) returns a nonnegative\n value), except that the first character may be an ASCII plus\n sign '+' ('\\u002B'). The resulting\n integer value is returned.\n\n \nAn exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \n", "method_declar": ""}, {"params": [{"param_name": ["dividend"], "param_type": "long", "param_description": " the value to be divided"}, {"param_name": ["divisor"], "param_type": "long", "param_description": " the value doing the dividing"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the unsigned remainder of the first argument divided by\n the second argument"], "return_type": ["long"]}, "method_name": "remainderUnsigned", "method_description": "Returns the unsigned remainder from dividing the first argument\n by the second where each argument and the result is interpreted\n as an unsigned value.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value to be reversed"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value obtained by reversing order of the bits in the\n     specified long value."], "return_type": ["long"]}, "method_name": "reverse", "method_description": "Returns the value obtained by reversing the order of the bits in the\n two's complement binary representation of the specified long\n value.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value whose bytes are to be reversed"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value obtained by reversing the bytes in the specified\n     long value."], "return_type": ["long"]}, "method_name": "reverseBytes", "method_description": "Returns the value obtained by reversing the order of the bytes in the\n two's complement representation of the specified long value.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value whose bits are to be rotated left"}, {"param_name": ["distance"], "param_type": "int", "param_description": " the number of bit positions to rotate left"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value obtained by rotating the two's complement binary\n     representation of the specified long value left by the\n     specified number of bits."], "return_type": ["long"]}, "method_name": "rotateLeft", "method_description": "Returns the value obtained by rotating the two's complement binary\n representation of the specified long value left by the\n specified number of bits.  (Bits shifted out of the left hand, or\n high-order, side reenter on the right, or low-order.)\n\n \nNote that left rotation with a negative distance is equivalent to\n right rotation: rotateLeft(val, -distance) == rotateRight(val,\n distance).  Note also that rotation by any multiple of 64 is a\n no-op, so all but the last six bits of the rotation distance can be\n ignored, even if the distance is negative: rotateLeft(val,\n distance) == rotateLeft(val, distance & 0x3F).\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value whose bits are to be rotated right"}, {"param_name": ["distance"], "param_type": "int", "param_description": " the number of bit positions to rotate right"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value obtained by rotating the two's complement binary\n     representation of the specified long value right by the\n     specified number of bits."], "return_type": ["long"]}, "method_name": "rotateRight", "method_description": "Returns the value obtained by rotating the two's complement binary\n representation of the specified long value right by the\n specified number of bits.  (Bits shifted out of the right hand, or\n low-order, side reenter on the left, or high-order.)\n\n \nNote that right rotation with a negative distance is equivalent to\n left rotation: rotateRight(val, -distance) == rotateLeft(val,\n distance).  Note also that rotation by any multiple of 64 is a\n no-op, so all but the last six bits of the rotation distance can be\n ignored, even if the distance is negative: rotateRight(val,\n distance) == rotateRight(val, distance & 0x3F).\n", "method_declar": ""}, {"params": [], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["the numeric value represented by this object after conversion\n          to type short."], "return_type": ["short"]}, "method_name": "shortValue", "method_description": "Returns the value of this Long as a short after\n a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " the value whose signum is to be computed"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the signum function of the specified long value."], "return_type": ["int"]}, "method_name": "signum", "method_description": "Returns the signum function of the specified long value.  (The\n return value is -1 if the specified value is negative; 0 if the\n specified value is zero; and 1 if the specified value is positive.)\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "long", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "long", "param_description": " the second operand"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the sum of a and b"], "return_type": ["long"]}, "method_name": "sum", "method_description": "Adds two long values together as per the + operator.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " a long to be converted to a string."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the string representation of the unsigned long\n          value represented by the argument in binary (base\u00a02)."], "return_type": ["String"]}, "method_name": "toBinaryString", "method_description": "Returns a string representation of the long\n argument as an unsigned integer in base\u00a02.\n\n \nThe unsigned long value is the argument plus\n 264 if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in binary (base\u00a02) with no extra leading\n 0s.\n\n \nThe value of the argument can be recovered from the returned\n string s by calling Long#parseUnsignedLong(String, int).\n\n \nIf the unsigned magnitude is zero, it is represented by a\n single zero character '0' ('\\u0030');\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n characters '0' ('\\u0030') and '1' ('\\u0031') are used as binary digits.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " a long to be converted to a string."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the string representation of the unsigned long\n          value represented by the argument in hexadecimal\n          (base\u00a016)."], "return_type": ["String"]}, "method_name": "toHexString", "method_description": "Returns a string representation of the long\n argument as an unsigned integer in base\u00a016.\n\n \nThe unsigned long value is the argument plus\n 264 if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in hexadecimal (base\u00a016) with no extra\n leading 0s.\n\n \nThe value of the argument can be recovered from the returned\n string s by calling Long#parseUnsignedLong(String, int).\n\n \nIf the unsigned magnitude is zero, it is represented by a\n single zero character '0' ('\\u0030');\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as hexadecimal digits:\n\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " a long to be converted to a string."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["the string representation of the unsigned long\n          value represented by the argument in octal (base\u00a08)."], "return_type": ["String"]}, "method_name": "toOctalString", "method_description": "Returns a string representation of the long\n argument as an unsigned integer in base\u00a08.\n\n \nThe unsigned long value is the argument plus\n 264 if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in octal (base\u00a08) with no extra leading\n 0s.\n\n \nThe value of the argument can be recovered from the returned\n string s by calling Long#parseUnsignedLong(String, int).\n\n \nIf the unsigned magnitude is zero, it is represented by a\n single zero character '0' ('\\u0030');\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as octal digits:\n\n \nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " a long to be converted to a string."}, {"param_name": ["radix"], "param_type": "int", "param_description": " the radix to use in the string representation."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["a string representation of the argument in the specified radix."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of the first argument in the\n radix specified by the second argument.\n\n \nIf the radix is smaller than Character.MIN_RADIX\n or larger than Character.MAX_RADIX, then the radix\n 10 is used instead.\n\n \nIf the first argument is negative, the first element of the\n result is the ASCII minus sign '-'\n ('\\u002d'). If the first argument is not\n negative, no sign character appears in the result.\n\n \nThe remaining characters of the result represent the magnitude\n of the first argument. If the magnitude is zero, it is\n represented by a single zero character '0'\n ('\\u0030'); otherwise, the first character of\n the representation of the magnitude will not be the zero\n character.  The following ASCII characters are used as digits:\n\n \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Long", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the value of this object in\n          base\u00a010."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a String object representing this\n Long's value.  The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the long value were given as an argument to the\n toString(long) method.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " a long to be converted."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["a string representation of the argument in base\u00a010."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a String object representing the specified\n long.  The argument is converted to signed decimal\n representation and returned as a string, exactly as if the\n argument and the radix 10 were given as arguments to the toString(long, int) method.\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " an integer to be converted to an unsigned string."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["an unsigned string representation of the argument."], "return_type": ["String"]}, "method_name": "toUnsignedString", "method_description": "Returns a string representation of the argument as an unsigned\n decimal value.\n\n The argument is converted to unsigned decimal representation\n and returned as a string exactly as if the argument and radix\n 10 were given as arguments to the toUnsignedString(long, int) method.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["i"], "param_type": "long", "param_description": " an integer to be converted to an unsigned string."}, {"param_name": ["radix"], "param_type": "int", "param_description": " the radix to use in the string representation."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["an unsigned string representation of the argument in the specified radix."], "return_type": ["String"]}, "method_name": "toUnsignedString", "method_description": "Returns a string representation of the first argument as an\n unsigned integer value in the radix specified by the second\n argument.\n\n \nIf the radix is smaller than Character.MIN_RADIX\n or larger than Character.MAX_RADIX, then the radix\n 10 is used instead.\n\n \nNote that since the first argument is treated as an unsigned\n value, no leading sign character is printed.\n\n \nIf the magnitude is zero, it is represented by a single zero\n character '0' ('\\u0030'); otherwise,\n the first character of the representation of the magnitude will\n not be the zero character.\n\n \nThe behavior of radixes and the characters used as digits\n are the same as toString.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Long object holding the value\n             represented by the string argument."], "return_type": ["Long"]}, "method_name": "valueOf", "method_description": "Returns a Long object holding the value\n of the specified String. The argument is\n interpreted as representing a signed decimal long,\n exactly as if the argument were given to the parseLong(java.lang.String) method. The result is a\n Long object that represents the integer value\n specified by the string.\n\n \nIn other words, this method returns a Long object\n equal to the value of:\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed"}, {"param_name": ["radix"], "param_type": "int", "param_description": " the radix to be used in interpreting s"}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Long object holding the value\n             represented by the string argument in the specified\n             radix."], "return_type": ["Long"]}, "method_name": "valueOf", "method_description": "Returns a Long object holding the value\n extracted from the specified String when parsed\n with the radix given by the second argument.  The first\n argument is interpreted as representing a signed\n long in the radix specified by the second\n argument, exactly as if the arguments were given to the parseLong(java.lang.String, int) method. The result is a\n Long object that represents the long\n value specified by the string.\n\n \nIn other words, this method returns a Long object equal\n to the value of:\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["l"], "param_type": "long", "param_description": " a long value."}], "class_name": "Long", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Long instance representing l."], "return_type": ["Long"]}, "method_name": "valueOf", "method_description": "Returns a Long instance representing the specified\n long value.\n If a new Long instance is not required, this method\n should generally be used in preference to the constructor\n Long(long), as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n\n Note that unlike the Integer#valueOf(int) in the Integer class, this method\n is not required to cache values within a particular\n range.\n", "method_declar": ""}], "class_name": "Long", "Vars": null}