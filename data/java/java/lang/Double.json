{"package_name": "java.lang", "subclass_list": [], "class_description": "The Double class wraps a value of the primitive type\n double in an object. An object of type\n Double contains a single field whose type is\n double. In addition, this class provides several methods for converting a\n double to a String and a\n String to a double, as well as other\n constants and methods useful when dealing with a\n double. ", "class_type": "class", "typealias": [], "interface_list": ["Comparable<Double>"], "class_inherit_list": ["Number"], "Methods": [{"params": [{"param_name": ["value"], "param_type": "double", "param_description": " the value to be represented by the Double."}], "class_name": "Double", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Double object that\n represents the primitive double argument.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a string to be converted to a Double."}], "class_name": "Double", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a newly allocated Double object that\n represents the floating-point value of type double\n represented by the string. The string is converted to a\n double value as if by the valueOf method.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["the double value represented by this object\n          converted to type byte"], "return_type": ["byte"]}, "method_name": "byteValue", "method_description": "Returns the value of this Double as a byte\n after a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["d1"], "param_type": "double", "param_description": " the first double to compare"}, {"param_name": ["d2"], "param_type": "double", "param_description": " the second double to compare"}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value 0 if d1 is\n          numerically equal to d2; a value less than\n          0 if d1 is numerically less than\n          d2; and a value greater than 0\n          if d1 is numerically greater than\n          d2."], "return_type": ["int"]}, "method_name": "compare", "method_description": "Compares the two specified double values. The sign\n of the integer value returned is the same as that of the\n integer that would be returned by the call:\n \n", "method_declar": ""}, {"params": [{"param_name": ["anotherDouble"], "param_type": "Double", "param_description": " the Double to be compared."}], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["the value 0 if anotherDouble is\n          numerically equal to this Double; a value\n          less than 0 if this Double\n          is numerically less than anotherDouble;\n          and a value greater than 0 if this\n          Double is numerically greater than\n          anotherDouble."], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares two Double objects numerically.  There\n are two ways in which comparisons performed by this method\n differ from those performed by the Java language numerical\n comparison operators (<, <=, ==, >=, >)\n when applied to primitive double values:\n \n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "double", "param_description": " a double precision floating-point number."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["the bits that represent the floating-point number."], "return_type": ["long"]}, "method_name": "doubleToLongBits", "method_description": "Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point \"double\n format\" bit layout.\n\n \nBit 63 (the bit that is selected by the mask\n 0x8000000000000000L) represents the sign of the\n floating-point number. Bits\n 62-52 (the bits that are selected by the mask\n 0x7ff0000000000000L) represent the exponent. Bits 51-0\n (the bits that are selected by the mask\n 0x000fffffffffffffL) represent the significand\n (sometimes called the mantissa) of the floating-point number.\n\n \nIf the argument is positive infinity, the result is\n 0x7ff0000000000000L.\n\n \nIf the argument is negative infinity, the result is\n 0xfff0000000000000L.\n\n \nIf the argument is NaN, the result is\n 0x7ff8000000000000L.\n\n \nIn all cases, the result is a long integer that, when\n given to the longBitsToDouble(long) method, will produce a\n floating-point value the same as the argument to\n doubleToLongBits (except all NaN values are\n collapsed to a single \"canonical\" NaN value).\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "double", "param_description": " a double precision floating-point number."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["the bits that represent the floating-point number."], "return_type": ["long"]}, "method_name": "doubleToRawLongBits", "method_description": "Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point \"double\n format\" bit layout, preserving Not-a-Number (NaN) values.\n\n \nBit 63 (the bit that is selected by the mask\n 0x8000000000000000L) represents the sign of the\n floating-point number. Bits\n 62-52 (the bits that are selected by the mask\n 0x7ff0000000000000L) represent the exponent. Bits 51-0\n (the bits that are selected by the mask\n 0x000fffffffffffffL) represent the significand\n (sometimes called the mantissa) of the floating-point number.\n\n \nIf the argument is positive infinity, the result is\n 0x7ff0000000000000L.\n\n \nIf the argument is negative infinity, the result is\n 0xfff0000000000000L.\n\n \nIf the argument is NaN, the result is the long\n integer representing the actual NaN value.  Unlike the\n doubleToLongBits method,\n doubleToRawLongBits does not collapse all the bit\n patterns encoding a NaN to a single \"canonical\" NaN\n value.\n\n \nIn all cases, the result is a long integer that,\n when given to the longBitsToDouble(long) method, will\n produce a floating-point value the same as the argument to\n doubleToRawLongBits.\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["the double value represented by this object"], "return_type": ["double"]}, "method_name": "doubleValue", "method_description": "Returns the double value of this Double object.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to compare with."}], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are the same;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares this object against the specified object.  The result\n is true if and only if the argument is not\n null and is a Double object that\n represents a double that has the same value as the\n double represented by this object. For this\n purpose, two double values are considered to be\n the same if and only if the method doubleToLongBits(double) returns the identical\n long value when applied to each.\n\n \nNote that in most cases, for two instances of class\n Double, d1 and d2, the\n value of d1.equals(d2) is true if and\n only if\n\n \nalso has the value true. However, there are two\n exceptions:\n \nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["the double value represented by this object\n          converted to type float"], "return_type": ["float"]}, "method_name": "floatValue", "method_description": "Returns the value of this Double as a float\n after a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for this Double object. The\n result is the exclusive OR of the two halves of the\n long integer bit representation, exactly as\n produced by the method doubleToLongBits(double), of\n the primitive double value represented by this\n Double object. That is, the hash code is the value\n of the expression:\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "double", "param_description": " the value to hash"}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["a hash code value for a double value."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for a double value; compatible with\n Double.hashCode().\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["the double value represented by this object\n          converted to type int"], "return_type": ["int"]}, "method_name": "intValue", "method_description": "Returns the value of this Double as an int\n after a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": " the double value to be tested"}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if the argument is a finite\n floating-point value, false otherwise."], "return_type": ["boolean"]}, "method_name": "isFinite", "method_description": "Returns true if the argument is a finite floating-point\n value; returns false otherwise (for NaN and infinity\n arguments).\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value represented by this object is\n          positive infinity or negative infinity;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "isInfinite", "method_description": "Returns true if this Double value is\n infinitely large in magnitude, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "double", "param_description": " the value to be tested."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if the value of the argument is positive\n          infinity or negative infinity; false otherwise."], "return_type": ["boolean"]}, "method_name": "isInfinite", "method_description": "Returns true if the specified number is infinitely\n large in magnitude, false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["v"], "param_type": "double", "param_description": " the value to be tested."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["true if the value of the argument is NaN;\n          false otherwise."], "return_type": ["boolean"]}, "method_name": "isNaN", "method_description": "Returns true if the specified number is a\n Not-a-Number (NaN) value, false otherwise.\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the value represented by this object is\n          NaN; false otherwise."], "return_type": ["boolean"]}, "method_name": "isNaN", "method_description": "Returns true if this Double value is\n a Not-a-Number (NaN), false otherwise.\n", "method_declar": ""}, {"params": [{"param_name": ["bits"], "param_type": "long", "param_description": " any long integer."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["the double floating-point value with the same\n          bit pattern."], "return_type": ["double"]}, "method_name": "longBitsToDouble", "method_description": "Returns the double value corresponding to a given\n bit representation.\n The argument is considered to be a representation of a\n floating-point value according to the IEEE 754 floating-point\n \"double format\" bit layout.\n\n \nIf the argument is 0x7ff0000000000000L, the result\n is positive infinity.\n\n \nIf the argument is 0xfff0000000000000L, the result\n is negative infinity.\n\n \nIf the argument is any value in the range\n 0x7ff0000000000001L through\n 0x7fffffffffffffffL or in the range\n 0xfff0000000000001L through\n 0xffffffffffffffffL, the result is a NaN.  No IEEE\n 754 floating-point operation provided by Java can distinguish\n between two NaN values of the same type with different bit\n patterns.  Distinct values of NaN are only distinguishable by\n use of the Double.doubleToRawLongBits method.\n\n \nIn all other cases, let s, e, and m be three\n values that can be computed from the argument:\n\n \nNote that this method may not be able to return a\n double NaN with exactly same bit pattern as the\n long argument.  IEEE 754 distinguishes between two\n kinds of NaNs, quiet NaNs and signaling NaNs.  The\n differences between the two kinds of NaN are generally not\n visible in Java.  Arithmetic operations on signaling NaNs turn\n them into quiet NaNs with a different, but often similar, bit\n pattern.  However, on some processors merely copying a\n signaling NaN also performs that conversion.  In particular,\n copying a signaling NaN to return it to the calling method\n may perform this conversion.  So longBitsToDouble\n may not be able to return a double with a\n signaling NaN bit pattern.  Consequently, for some\n long values,\n doubleToRawLongBits(longBitsToDouble(start)) may\n not equal start.  Moreover, which\n particular bit patterns represent signaling NaNs is platform\n dependent; although all NaN bit patterns, quiet or signaling,\n must be in the NaN range identified above.\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["the double value represented by this object\n          converted to type long"], "return_type": ["long"]}, "method_name": "longValue", "method_description": "Returns the value of this Double as a long\n after a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "double", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "double", "param_description": " the second operand"}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["the greater of a and b"], "return_type": ["double"]}, "method_name": "max", "method_description": "Returns the greater of two double values\n as if by calling Math#max(double, double).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "double", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "double", "param_description": " the second operand"}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["the smaller of a and b."], "return_type": ["double"]}, "method_name": "min", "method_description": "Returns the smaller of two double values\n as if by calling Math#min(double, double).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["the double value represented by the string\n         argument."], "return_type": ["double"]}, "method_name": "parseDouble", "method_description": "Returns a new double initialized to the value\n represented by the specified String, as performed\n by the valueOf method of class\n Double.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["the double value represented by this object\n          converted to type short"], "return_type": ["short"]}, "method_name": "shortValue", "method_description": "Returns the value of this Double as a short\n after a narrowing primitive conversion.\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "double", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "double", "param_description": " the second operand"}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["the sum of a and b"], "return_type": ["double"]}, "method_name": "sum", "method_description": "Adds two double values together as per the + operator.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": " the double to be converted."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["a hex string representation of the argument."], "return_type": ["String"]}, "method_name": "toHexString", "method_description": "Returns a hexadecimal string representation of the\n double argument. All characters mentioned below\n are ASCII characters.\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": " the double to be converted."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["a string representation of the argument."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of the double\n argument. All characters mentioned below are ASCII characters.\n \nTo create localized string representations of a floating-point\n value, use subclasses of NumberFormat.\n", "method_declar": ""}, {"params": [], "class_name": "Double", "is_static": false, "return_value": {"return_name": [], "return_description": ["a String representation of this object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of this Double object.\n The primitive double value represented by this\n object is converted to a string exactly as if by the method\n toString of one argument.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be parsed."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Double object holding the value\n             represented by the String argument."], "return_type": ["Double"]}, "method_name": "valueOf", "method_description": "Returns a Double object holding the\n double value represented by the argument string\n s.\n\n \nIf s is null, then a\n NullPointerException is thrown.\n\n \nLeading and trailing whitespace characters in s\n are ignored.  Whitespace is removed as if by the String#trim method; that is, both ASCII space and control\n characters are removed. The rest of s should\n constitute a FloatValue as described by the lexical\n syntax rules:\n\n \n To interpret localized string representations of a\n floating-point value, use subclasses of NumberFormat.\n\n \nNote that trailing format specifiers, specifiers that\n determine the type of a floating-point literal\n (1.0f is a float value;\n 1.0d is a double value), do\n not influence the results of this method.  In other\n words, the numerical value of the input string is converted\n directly to the target floating-point type.  The two-step\n sequence of conversions, string to float followed\n by float to double, is not\n equivalent to converting a string directly to\n double. For example, the float\n literal 0.1f is equal to the double\n value 0.10000000149011612; the float\n literal 0.1f represents a different numerical\n value than the double literal\n 0.1. (The numerical value 0.1 cannot be exactly\n represented in a binary floating-point number.)\n\n \nTo avoid calling this method on an invalid string and having\n a NumberFormatException be thrown, the regular\n expression below can be used to screen the input string:\n\n \n", "method_declar": ""}, {"params": [{"param_name": ["d"], "param_type": "double", "param_description": " a double value."}], "class_name": "Double", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Double instance representing d."], "return_type": ["Double"]}, "method_name": "valueOf", "method_description": "Returns a Double instance representing the specified\n double value.\n If a new Double instance is not required, this method\n should generally be used in preference to the constructor\n Double(double), as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n", "method_declar": ""}], "class_name": "Double", "Vars": null}