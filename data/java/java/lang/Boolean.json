{"package_name": "java.lang", "subclass_list": [], "class_description": "The Boolean class wraps a value of the primitive type\n boolean in an object. An object of type\n Boolean contains a single field whose type is\n boolean. In addition, this class provides many methods for\n converting a boolean to a String and a\n String to a boolean, as well as other\n constants and methods useful when dealing with a\n boolean. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable", "Comparable<Boolean>"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["value"], "param_type": "boolean", "param_description": " the value of the Boolean."}], "class_name": "Boolean", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Allocates a Boolean object representing the\n value argument.\n\n \nNote: It is rarely appropriate to use this constructor.\n Unless a new instance is required, the static factory\n valueOf(boolean) is generally a better choice. It is\n likely to yield significantly better space and time performance.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the string to be converted to a Boolean."}], "class_name": "Boolean", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Allocates a Boolean object representing the value\n true if the string argument is not null\n and is equal, ignoring case, to the string \"true\".\n Otherwise, allocate a Boolean object representing the\n value false. Examples:\n\nnew Boolean(\"True\") produces a Boolean object\n that represents true.\nnew Boolean(\"yes\") produces a Boolean object\n that represents false.\n", "method_declar": ""}, {"params": [], "class_name": "Boolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["the primitive boolean value of this object."], "return_type": ["boolean"]}, "method_name": "booleanValue", "method_description": "Returns the value of this Boolean object as a boolean\n primitive.\n", "method_declar": ""}, {"params": [{"param_name": ["x"], "param_type": "boolean", "param_description": " the first boolean to compare"}, {"param_name": ["y"], "param_type": "boolean", "param_description": " the second boolean to compare"}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value 0 if x == y;\n         a value less than 0 if !x && y; and\n         a value greater than 0 if x && !y"], "return_type": ["int"]}, "method_name": "compare", "method_description": "Compares two boolean values.\n The value returned is identical to what would be returned by:\n \n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "Boolean", "param_description": " the Boolean instance to be compared"}], "class_name": "Boolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["zero if this object represents the same boolean value as the\n          argument; a positive value if this object represents true\n          and the argument represents false; and a negative value if\n          this object represents false and the argument represents true"], "return_type": ["int"]}, "method_name": "compareTo", "method_description": "Compares this Boolean instance with another.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to compare with."}], "class_name": "Boolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the Boolean objects represent the\n          same value; false otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Returns true if and only if the argument is not\n null and is a Boolean object that\n represents the same boolean value as this object.\n", "method_declar": ""}, {"params": [{"param_name": ["name"], "param_type": "String", "param_description": " the system property name."}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["the boolean value of the system property."], "return_type": ["boolean"]}, "method_name": "getBoolean", "method_description": "Returns true if and only if the system property\n named by the argument exists and is equal to the string\n \"true\". (Beginning with version 1.0.2 of the\n JavaTM platform, the test of\n this string is case insensitive.) A system property is accessible\n through getProperty, a method defined by the\n System class.\n \n\n If there is no property with the specified name, or if the specified\n name is empty or null, then false is returned.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Boolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["the integer 1231 if this object represents\n true; returns the integer 1237 if this\n object represents false."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for this Boolean object.\n", "method_declar": ""}, {"params": [{"param_name": ["value"], "param_type": "boolean", "param_description": " the value to hash"}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["a hash code value for a boolean value."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code for a boolean value; compatible with\n Boolean.hashCode().\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "boolean", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "boolean", "param_description": " the second operand"}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["the logical AND of a and b"], "return_type": ["boolean"]}, "method_name": "logicalAnd", "method_description": "Returns the result of applying the logical AND operator to the\n specified boolean operands.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "boolean", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "boolean", "param_description": " the second operand"}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["the logical OR of a and b"], "return_type": ["boolean"]}, "method_name": "logicalOr", "method_description": "Returns the result of applying the logical OR operator to the\n specified boolean operands.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["a"], "param_type": "boolean", "param_description": " the first operand"}, {"param_name": ["b"], "param_type": "boolean", "param_description": " the second operand"}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["the logical XOR of a and b"], "return_type": ["boolean"]}, "method_name": "logicalXor", "method_description": "Returns the result of applying the logical XOR operator to the\n specified boolean operands.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " the String containing the boolean\n                 representation to be parsed"}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["the boolean represented by the string argument"], "return_type": ["boolean"]}, "method_name": "parseBoolean", "method_description": "Parses the string argument as a boolean.  The boolean\n returned represents the value true if the string argument\n is not null and is equal, ignoring case, to the string\n \"true\". \n\n Example: Boolean.parseBoolean(\"True\") returns true.\n Example: Boolean.parseBoolean(\"yes\") returns false.\n", "method_declar": ""}, {"params": [], "class_name": "Boolean", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a String object representing this Boolean's\n value.  If this object represents the value true,\n a string equal to \"true\" is returned. Otherwise, a\n string equal to \"false\" is returned.\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "boolean", "param_description": " the boolean to be converted"}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["the string representation of the specified boolean"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a String object representing the specified\n boolean.  If the specified boolean is true, then\n the string \"true\" will be returned, otherwise the\n string \"false\" will be returned.\n", "method_declar": ""}, {"params": [{"param_name": ["s"], "param_type": "String", "param_description": " a string."}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["the Boolean value represented by the string."], "return_type": ["Boolean"]}, "method_name": "valueOf", "method_description": "Returns a Boolean with a value represented by the\n specified string.  The Boolean returned represents a\n true value if the string argument is not null\n and is equal, ignoring case, to the string \"true\".\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "boolean", "param_description": " a boolean value."}], "class_name": "Boolean", "is_static": true, "return_value": {"return_name": [], "return_description": ["a Boolean instance representing b."], "return_type": ["Boolean"]}, "method_name": "valueOf", "method_description": "Returns a Boolean instance representing the specified\n boolean value.  If the specified boolean value\n is true, this method returns Boolean.TRUE;\n if it is false, this method returns Boolean.FALSE.\n If a new Boolean instance is not required, this method\n should generally be used in preference to the constructor\n Boolean(boolean), as this method is likely to yield\n significantly better space and time performance.\n", "method_declar": ""}], "class_name": "Boolean", "Vars": null}