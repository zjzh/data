{"package_name": "javax.xml.namespace", "subclass_list": [], "class_description": " QName represents a qualified name\n as defined in the XML specifications: XML Schema Part2:\n Datatypes specification, Namespaces\n in XML, Namespaces\n in XML Errata. The value of a QName contains a Namespace\n URI, local part and\n prefix. The prefix is included in QName to retain lexical\n information when present in an XML input source. The prefix is\n NOT used in QName.equals(Object) or to compute the QName.hashCode().  Equality and the hash code are defined using\n only the Namespace URI and local part. If not specified, the Namespace URI is set to XMLConstants.NULL_NS_URI.\n If not specified, the prefix is set to XMLConstants.DEFAULT_NS_PREFIX. QName is immutable. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["namespaceURI"], "param_type": "String", "param_description": " Namespace URI of the QName"}, {"param_name": ["localPart"], "param_type": "String", "param_description": " local part of the QName"}], "class_name": "QName", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nQName constructor specifying the Namespace URI\n and local part.\nIf the Namespace URI is null, it is set to\n XMLConstants.NULL_NS_URI.  This value represents no\n explicitly defined Namespace as defined by the Namespaces\n in XML specification.  This action preserves compatible\n behavior with QName 1.0.  Explicitly providing the XMLConstants.NULL_NS_URI value is the preferred coding\n style.\nIf the local part is null an\n IllegalArgumentException is thrown.\n A local part of \"\" is allowed to preserve\n compatible behavior with QName 1.0. \nWhen using this constructor, the prefix is set to XMLConstants.DEFAULT_NS_PREFIX.\nThe Namespace URI is not validated as a\n URI reference.\n The local part is not validated as a\n NCName\n as specified in Namespaces\n in XML.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["namespaceURI"], "param_type": "String", "param_description": " Namespace URI of the QName"}, {"param_name": ["localPart"], "param_type": "String", "param_description": " local part of the QName"}, {"param_name": ["prefix"], "param_type": "String", "param_description": " prefix of the QName"}], "class_name": "QName", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nQName constructor specifying the Namespace URI,\n local part and prefix.\nIf the Namespace URI is null, it is set to\n XMLConstants.NULL_NS_URI.  This value represents no\n explicitly defined Namespace as defined by the Namespaces\n in XML specification.  This action preserves compatible\n behavior with QName 1.0.  Explicitly providing the XMLConstants.NULL_NS_URI value is the preferred coding\n style.\nIf the local part is null an\n IllegalArgumentException is thrown.\n A local part of \"\" is allowed to preserve\n compatible behavior with QName 1.0. \nIf the prefix is null, an\n IllegalArgumentException is thrown.  Use XMLConstants.DEFAULT_NS_PREFIX to explicitly indicate that no\n prefix is present or the prefix is not relevant.\nThe Namespace URI is not validated as a\n URI reference.\n The local part and prefix are not validated as a\n NCName\n as specified in Namespaces\n in XML.\n", "method_declar": ""}, {"params": [{"param_name": ["localPart"], "param_type": "String", "param_description": " local part of the QName"}], "class_name": "QName", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nQName constructor specifying the local part.\nIf the local part is null an\n IllegalArgumentException is thrown.\n A local part of \"\" is allowed to preserve\n compatible behavior with QName 1.0. \nWhen using this constructor, the Namespace URI is set to\n XMLConstants.NULL_NS_URI and the prefix is set to XMLConstants.DEFAULT_NS_PREFIX.\nIn an XML context, all Element and Attribute names exist\n in the context of a Namespace.  Making this explicit during the\n construction of a QName helps prevent hard to\n diagnosis XML validity errors.  The constructors QName(String\n namespaceURI, String localPart) and\n QName(java.lang.String, java.lang.String, java.lang.String)\n are preferred.\nThe local part is not validated as a\n NCName\n as specified in Namespaces\n in XML.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["objectToTest"], "param_type": "Object", "param_description": " the Object to test for\n equality with this QName"}], "class_name": "QName", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the given Object is\n equal to this QName else false"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "\nTest this QName for equality with another\n Object.\nIf the Object to be tested is not a\n QName or is null, then this method\n returns false.\nTwo QNames are considered equal if and only if\n both the Namespace URI and local part are equal. This method\n uses String.equals() to check equality of the\n Namespace URI and local part. The prefix is\n NOT used to determine equality.\nThis method satisfies the general contract of Object.equals(Object)\n", "method_declar": ""}, {"params": [], "class_name": "QName", "is_static": false, "return_value": {"return_name": [], "return_description": ["local part of this QName"], "return_type": ["String"]}, "method_name": "getLocalPart", "method_description": "\nGet the local part of this QName.\n", "method_declar": ""}, {"params": [], "class_name": "QName", "is_static": false, "return_value": {"return_name": [], "return_description": ["Namespace URI of this QName"], "return_type": ["String"]}, "method_name": "getNamespaceURI", "method_description": "\nGet the Namespace URI of this QName.\n", "method_declar": ""}, {"params": [], "class_name": "QName", "is_static": false, "return_value": {"return_name": [], "return_description": ["prefix of this QName"], "return_type": ["String"]}, "method_name": "getPrefix", "method_description": "\nGet the prefix of this QName.\nThe prefix assigned to a QName might\n NOT be valid in a different\n context. For example, a QName may be assigned a\n prefix in the context of parsing a document but that prefix may\n be invalid in the context of a different document.\n", "method_declar": ""}, {"params": [], "class_name": "QName", "is_static": false, "return_value": {"return_name": [], "return_description": ["hash code for this QName Object"], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "\nGenerate the hash code for this QName.\nThe hash code is calculated using both the Namespace URI and\n the local part of the QName.  The prefix is\n NOT used to calculate the hash\n code.\nThis method satisfies the general contract of Object.hashCode().\n", "method_declar": ""}, {"params": [], "class_name": "QName", "is_static": false, "return_value": {"return_name": [], "return_description": ["String representation of this QName"], "return_type": ["String"]}, "method_name": "toString", "method_description": "\nString representation of this\n QName.\nThe commonly accepted way of representing a QName\n as a String was defined\n by James Clark.  Although this is not a standard\n specification, it is in common use,  e.g. Transformer.setParameter(String, Object).\n This implementation represents a QName as:\n \"{\" + Namespace URI + \"}\" + local part.  If the Namespace URI\n .equals(XMLConstants.NULL_NS_URI), only the\n local part is returned.  An appropriate use of this method is\n for debugging or logging for human consumption.\nNote the prefix value is NOT\n returned as part of the String representation.\nThis method satisfies the general contract of Object.toString().\n", "method_declar": ""}, {"params": [{"param_name": ["qNameAsString"], "param_type": "String", "param_description": " String representation\n of the QName"}], "class_name": "QName", "is_static": true, "return_value": {"return_name": [], "return_description": ["QName corresponding to the given String"], "return_type": ["QName"]}, "method_name": "valueOf", "method_description": "\nQName derived from parsing the formatted\n String.\nIf the String is null or does not conform to\n QName.toString() formatting, an\n IllegalArgumentException is thrown.\nThe String MUST be in the\n form returned by QName.toString().\nThe commonly accepted way of representing a QName\n as a String was defined\n by James Clark.  Although this is not a standard\n specification, it is in common use,  e.g. Transformer.setParameter(String, Object).\n This implementation parses a String formatted\n as: \"{\" + Namespace URI + \"}\" + local part.  If the Namespace\n URI .equals(XMLConstants.NULL_NS_URI), only the\n local part should be provided.\nThe prefix value CANNOT be\n represented in the String and will be set to\n XMLConstants.DEFAULT_NS_PREFIX.\nThis method does not do full validation of the resulting\n QName.\n \nThe Namespace URI is not validated as a\n URI reference.\n The local part is not validated as a\n NCName\n as specified in\n Namespaces in XML.\nSee also:\n", "method_declar": ""}], "class_name": "QName", "Vars": null}