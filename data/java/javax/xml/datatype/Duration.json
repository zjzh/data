{"package_name": "javax.xml.datatype", "subclass_list": [], "class_description": " Immutable representation of a time span as defined in\n the W3C XML Schema 1.0 specification. A Duration object represents a period of Gregorian time,\n which consists of six fields (years, months, days, hours,\n minutes, and seconds) plus a sign (+/-) field. The first five fields have non-negative (>=0) integers or null\n (which represents that the field is not set),\n and the seconds field has a non-negative decimal or null.\n A negative sign indicates a negative duration. This class provides a number of methods that make it easy\n to use for the duration datatype of XML Schema 1.0 with\n the errata. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Duration", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}, {"params": [{"param_name": ["date"], "param_type": "Date", "param_description": " A date object whose value will be modified."}], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "addTo", "method_description": "Adds this duration to a Date object.\n\n \n\n The given date is first converted into\n a GregorianCalendar, then the duration\n is added exactly like the addTo(java.util.Calendar) method.\n\n \n\n The updated time instant is then converted back into a\n Date object and used to update the given Date object.\n\n \n\n This somewhat redundant computation is necessary to unambiguously\n determine the duration of months and years.\n", "method_declar": ""}, {"params": [{"param_name": ["duration"], "param_type": "Object", "param_description": " A non-null valid Duration object."}], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this duration is the same length as\n         duration.\n      false if duration is not a\n         Duration object, is null,\n         or its length is different from this duration."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "\nChecks if this duration object has the same duration\n as another Duration object.\nFor example, \"P1D\" (1 day) is equal to \"PT24H\" (24 hours).\nDuration X is equal to Y if and only if time instant\n t+X and t+Y are the same for all the test time instants\n specified in the section 3.2.6.2 of the XML Schema 1.0\n specification.\nNote that there are cases where two Durations are\n \"incomparable\" to each other, like one month and 30 days.\n For example,\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["Days of this Duration."], "return_type": ["int"]}, "method_name": "getDays", "method_description": "Obtains the value of the DAYS field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the DAYS field.\n", "method_declar": ""}, {"params": [], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["Hours of this Duration."], "return_type": ["int"]}, "method_name": "getHours", "method_description": "Obtains the value of the HOURS field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the HOURS field.\n", "method_declar": ""}, {"params": [], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["Minutes of this Duration."], "return_type": ["int"]}, "method_name": "getMinutes", "method_description": "Obtains the value of the MINUTES field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the MINUTES field.\n", "method_declar": ""}, {"params": [], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["Months of this Duration."], "return_type": ["int"]}, "method_name": "getMonths", "method_description": "Obtains the value of the MONTHS field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the MONTHS field.\n", "method_declar": ""}, {"params": [], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["seconds in the integer value. The fraction of seconds\n   will be discarded (for example, if the actual value is 2.5,\n   this method returns 2)"], "return_type": ["int"]}, "method_name": "getSeconds", "method_description": "Obtains the value of the SECONDS field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the SECONDS field.\n", "method_declar": ""}, {"params": [{"param_name": ["startInstant"], "param_type": "Calendar", "param_description": " The length of a month/year varies. The startInstant is\n      used to disambiguate this variance. Specifically, this method\n      returns the difference between startInstant and\n      startInstant+duration"}], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["milliseconds between startInstant and\n   startInstant plus this Duration"], "return_type": ["long"]}, "method_name": "getTimeInMillis", "method_description": "\nReturns the length of the duration in milliseconds.\nIf the seconds field carries more digits than millisecond order,\n those will be simply discarded (or in other words, rounded to zero.)\n For example, for any Calendar value x,\n\n Note that this method uses the addTo(java.util.Calendar) method,\n which may work incorrectly with Duration objects with\n very large values in its fields. See the addTo(java.util.Calendar)\n method for details.\n", "method_declar": ""}, {"params": [{"param_name": ["startInstant"], "param_type": "Date", "param_description": " The length of a month/year varies. The startInstant is\n      used to disambiguate this variance. Specifically, this method\n      returns the difference between startInstant and\n      startInstant+duration."}], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["milliseconds between startInstant and\n   startInstant plus this Duration"], "return_type": ["long"]}, "method_name": "getTimeInMillis", "method_description": "\nReturns the length of the duration in milliseconds.\nIf the seconds field carries more digits than millisecond order,\n those will be simply discarded (or in other words, rounded to zero.)\n For example, for any Date value x,\n\n Note that this method uses the addTo(java.util.Date) method,\n which may work incorrectly with Duration objects with\n very large values in its fields. See the addTo(java.util.Date)\n method for details.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["one of the following constants:\n   DatatypeConstants#DURATION,\n   DatatypeConstants#DURATION_DAYTIME or\n   DatatypeConstants#DURATION_YEARMONTH."], "return_type": ["QName"]}, "method_name": "getXMLSchemaType", "method_description": "\nReturn the name of the XML Schema date/time type that this instance\n maps to. Type is computed based on fields that are set,\n i.e. isSet(javax.xml.datatype.DatatypeConstants.Field) == true.\n", "method_declar": ""}, {"params": [], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["If the years field is present, return its value as an int, else return 0."], "return_type": ["int"]}, "method_name": "getYears", "method_description": "\nGet the years value of this Duration as an int or 0 if not present.\ngetYears() is a convenience method for\n getField(DatatypeConstants.YEARS).\nAs the return value is an int, an incorrect value will be returned for Durations\n with years that go beyond the range of an int.\n Use getField(DatatypeConstants.YEARS) to avoid possible loss of precision.\n", "method_declar": ""}, {"params": [{"param_name": ["duration"], "param_type": "Duration", "param_description": " Duration to test this Duration against."}], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the duration represented by this object\n      is longer than the given duration. false otherwise."], "return_type": ["boolean"]}, "method_name": "isLongerThan", "method_description": "\nChecks if this duration object is strictly longer than\n another Duration object.\nDuration X is \"longer\" than Y if and only if X>Y\n as defined in the section 3.2.6.2 of the XML Schema 1.0\n specification.\nFor example, \"P1D\" (one day) > \"PT12H\" (12 hours) and\n \"P2Y\" (two years) > \"P23M\" (23 months).\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["duration"], "param_type": "Duration", "param_description": " Duration to test this Duration against."}], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if duration parameter is shorter than this Duration,\n   else false."], "return_type": ["boolean"]}, "method_name": "isShorterThan", "method_description": "\nChecks if this duration object is strictly shorter than\n another Duration object.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["factor"], "param_type": "int", "param_description": " Factor times longer of new Duration to create."}], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["New Duration that is factortimes longer than this Duration."], "return_type": ["Duration"]}, "method_name": "multiply", "method_description": "\nComputes a new duration whose value is factor times\n longer than the value of this duration.\nThis method is provided for the convenience.\n It is functionally equivalent to the following code:\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["rhs"], "param_type": "Duration", "param_description": " Duration to subtract from this Duration."}], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["New Duration created from subtracting rhs from this Duration."], "return_type": ["Duration"]}, "method_name": "subtract", "method_description": "\nComputes a new duration whose value is this-rhs.\nFor example:\nSince there's no way to meaningfully subtract 1 day from 1 month,\n there are cases where the operation fails in IllegalStateException.\nFormally the computation is defined as follows.\n First, we can assume that two Durations are both positive\n without losing generality.  (i.e.,\n (-X)-Y=-(X+Y), X-(-Y)=X+Y,\n (-X)-(-Y)=-(X-Y))\nThen two durations are subtracted field by field.\n If the sign of any non-zero field F is different from\n the sign of the most significant field,\n 1 (if F is negative) or -1 (otherwise)\n will be borrowed from the next bigger unit of F.\nThis process is repeated until all the non-zero fields have\n the same sign.\nIf a borrow occurs in the days field (in other words, if\n the computation needs to borrow 1 or -1 month to compensate\n days), then the computation fails by throwing an\n IllegalStateException.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "Duration", "is_static": false, "return_value": {"return_name": [], "return_description": ["A non-null valid String representation of this Duration."], "return_type": ["String"]}, "method_name": "toString", "method_description": "\nReturns a String representation of this Duration Object.\nThe result is formatted according to the XML Schema 1.0 specification and can be always parsed back later into the\n equivalent Duration Object by DatatypeFactory#newDuration(String  lexicalRepresentation).\nFormally, the following holds for any Duration\nObject x:\n", "method_declar": ""}], "class_name": "Duration", "Vars": null}