{"package_name": "javax.xml.transform.sax", "subclass_list": [], "class_description": " Acts as an holder for SAX-style Source. Note that XSLT requires namespace support. Attempting to transform an\n input source that is not\n generated with a namespace-aware parser may result in errors.\n Parsers can be made namespace aware by calling the\n SAXParserFactory.setNamespaceAware(boolean) method. ", "class_type": "class", "typealias": [], "interface_list": ["Source"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "SAXSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nZero-argument default constructor.  If this constructor is used, and\n no SAX source is set using\n setInputSource(org.xml.sax.InputSource) , then the\n Transformer will\n create an empty source InputSource using\n new InputSource().\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["reader"], "param_type": "XMLReader", "param_description": " An XMLReader to be used for the parse."}, {"param_name": ["inputSource"], "param_type": "InputSource", "param_description": " A SAX input source reference that must be non-null\n and that will be passed to the reader parse method."}], "class_name": "SAXSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a SAXSource, using an XMLReader\n and a SAX InputSource. The Transformer\n or SAXTransformerFactory will set itself\n to be the reader's ContentHandler, and then will call\n reader.parse(inputSource).\n", "method_declar": ""}, {"params": [{"param_name": ["inputSource"], "param_type": "InputSource", "param_description": " An input source reference that must be non-null\n and that will be passed to the parse method of the reader."}], "class_name": "SAXSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a SAXSource, using a SAX InputSource.\n The Transformer or\n SAXTransformerFactory creates a\n reader via XMLReaderFactory\n (if setXMLReader is not used), sets itself as\n the reader's ContentHandler, and calls\n reader.parse(inputSource).\n", "method_declar": ""}, {"params": [], "class_name": "SAXSource", "is_static": false, "return_value": {"return_name": [], "return_description": ["A valid InputSource reference, or null."], "return_type": ["InputSource"]}, "method_name": "getInputSource", "method_description": "Get the SAX InputSource to be used for the Source.\n", "method_declar": ""}, {"params": [], "class_name": "SAXSource", "is_static": false, "return_value": {"return_name": [], "return_description": ["Base URL for the Source, or null."], "return_type": ["String"]}, "method_name": "getSystemId", "method_description": "\nGet the base ID (URI or system ID) from where URIs\n will be resolved.\n", "method_declar": ""}, {"params": [], "class_name": "SAXSource", "is_static": false, "return_value": {"return_name": [], "return_description": ["A valid XMLReader or XMLFilter reference, or null."], "return_type": ["XMLReader"]}, "method_name": "getXMLReader", "method_description": "Get the XMLReader to be used for the Source.\n", "method_declar": ""}, {"params": [{"param_name": ["inputSource"], "param_type": "InputSource", "param_description": " A valid InputSource reference."}], "class_name": "SAXSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setInputSource", "method_description": "Set the SAX InputSource to be used for the Source.\n", "method_declar": ""}, {"params": [{"param_name": ["systemId"], "param_type": "String", "param_description": " The system identifier as a URI string."}], "class_name": "SAXSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSystemId", "method_description": "Set the system identifier for this Source.  If an input source\n has already been set, it will set the system ID or that\n input source, otherwise it will create a new input source.\n\n \nThe system identifier is optional if there is a byte stream\n or a character stream, but it is still useful to provide one,\n since the application can use it to resolve relative URIs\n and can include it in error messages and warnings (the parser\n will attempt to open a connection to the URI only if\n no byte stream or character stream is specified).\n", "method_declar": ""}, {"params": [{"param_name": ["reader"], "param_type": "XMLReader", "param_description": " A valid XMLReader or XMLFilter reference."}], "class_name": "SAXSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setXMLReader", "method_description": "Set the XMLReader to be used for the Source.\n", "method_declar": ""}, {"params": [{"param_name": ["source"], "param_type": "Source", "param_description": " Must be a non-null Source reference."}], "class_name": "SAXSource", "is_static": true, "return_value": {"return_name": [], "return_description": ["An InputSource, or null if Source can not be converted."], "return_type": ["InputSource"]}, "method_name": "sourceToInputSource", "method_description": "Attempt to obtain a SAX InputSource object from a Source\n object.\n", "method_declar": ""}], "class_name": "SAXSource", "Vars": null}