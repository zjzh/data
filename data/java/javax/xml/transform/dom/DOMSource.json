{"package_name": "javax.xml.transform.dom", "subclass_list": [], "class_description": " Acts as a holder for a transformation Source tree in the\n form of a Document Object Model (DOM) tree. Note that XSLT requires namespace support. Attempting to transform a DOM\n that was not contructed with a namespace-aware parser may result in errors.\n Parsers can be made namespace aware by calling\n DocumentBuilderFactory.setNamespaceAware(boolean). ", "class_type": "class", "typealias": [], "interface_list": ["Source"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "DOMSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nZero-argument default constructor.  If this constructor is used, and\n no DOM source is set using setNode(org.w3c.dom.Node) , then the\n Transformer will\n create an empty source Document using\n DocumentBuilder.newDocument().\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "Node", "param_description": " The DOM node that will contain the Source tree."}], "class_name": "DOMSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a new input source with a DOM node.  The operation\n will be applied to the subtree rooted at this node.  In XSLT,\n a \"/\" pattern still means the root of the tree (not the subtree),\n and the evaluation of global variables and parameters is done\n from the root node also.\n", "method_declar": ""}, {"params": [{"param_name": ["node"], "param_type": "Node", "param_description": " The DOM node that will contain the Source tree."}, {"param_name": ["systemID"], "param_type": "String", "param_description": " Specifies the base URI associated with node."}], "class_name": "DOMSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a new input source with a DOM node, and with the\n system ID also passed in as the base URI.\n", "method_declar": ""}, {"params": [], "class_name": "DOMSource", "is_static": false, "return_value": {"return_name": [], "return_description": ["The node that is to be transformed."], "return_type": ["Node"]}, "method_name": "getNode", "method_description": "Get the node that represents a Source DOM tree.\n", "method_declar": ""}, {"params": [], "class_name": "DOMSource", "is_static": false, "return_value": {"return_name": [], "return_description": ["Base URL for this DOM tree."], "return_type": ["String"]}, "method_name": "getSystemId", "method_description": "Get the base ID (URL or system ID) from where URLs\n will be resolved.\n", "method_declar": ""}, {"params": [{"param_name": ["node"], "param_type": "Node", "param_description": " The node that is to be transformed."}], "class_name": "DOMSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setNode", "method_description": "Set the node that will represents a Source DOM tree.\n", "method_declar": ""}, {"params": [{"param_name": ["systemID"], "param_type": "String", "param_description": " Base URL for this DOM tree."}], "class_name": "DOMSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSystemId", "method_description": "Set the base ID (URL or system ID) from where URLs\n will be resolved.\n", "method_declar": ""}], "class_name": "DOMSource", "Vars": null}