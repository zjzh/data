{"package_name": "javax.xml.transform.dom", "subclass_list": [], "class_description": " Acts as a holder for a transformation result tree in the form of a Document Object Model (DOM) tree. If no output DOM source is set, the transformation will create a Document node as the holder for the result of the transformation,\n which may be retrieved with getNode(). ", "class_type": "class", "typealias": [], "interface_list": ["Result"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nZero-argument default constructor.\nnode,\n siblingNode and\n systemId\n will be set to null.\n", "method_declar": ""}, {"params": [{"param_name": ["node"], "param_type": "Node", "param_description": " The DOM node that will contain the result tree."}], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nUse a DOM node to create a new output target.\nIn practice, the node should be\n a Document node,\n a DocumentFragment node, or\n a Element node.\n In other words, a node that accepts children.\nsiblingNode and\n systemId\n will be set to null.\n", "method_declar": ""}, {"params": [{"param_name": ["node"], "param_type": "Node", "param_description": " The DOM node that will contain the result tree."}, {"param_name": ["systemId"], "param_type": "String", "param_description": " The system identifier which may be used in association with this node."}], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nUse a DOM node to create a new output target with the specified System ID.\n\n\nIn practice, the node should be\n a Document node,\n a DocumentFragment node, or\n a Element node.\n In other words, a node that accepts children.\nsiblingNode will be set to null.\n", "method_declar": ""}, {"params": [{"param_name": ["node"], "param_type": "Node", "param_description": " The DOM node that will contain the result tree."}, {"param_name": ["nextSibling"], "param_type": "Node", "param_description": " The child node where the result nodes should be inserted before."}], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nUse a DOM node to create a new output target specifying the child node where the result nodes should be inserted before.\nIn practice, node and nextSibling should be\n a Document node,\n a DocumentFragment node, or\n a Element node.\n In other words, a node that accepts children.\nUse nextSibling to specify the child node\n where the result nodes should be inserted before.\n If nextSibling is not a sibling of node,\n then an IllegalArgumentException is thrown.\n If node is null and nextSibling is not null,\n then an IllegalArgumentException is thrown.\n If nextSibling is null,\n then the behavior is the same as calling DOMResult(org.w3c.dom.Node),\n i.e. append the result nodes as the last child of the specified node.\nsystemId will be set to null.\n", "method_declar": ""}, {"params": [{"param_name": ["node"], "param_type": "Node", "param_description": " The DOM node that will contain the result tree."}, {"param_name": ["nextSibling"], "param_type": "Node", "param_description": " The child node where the result nodes should be inserted before."}, {"param_name": ["systemId"], "param_type": "String", "param_description": " The system identifier which may be used in association with this node."}], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nUse a DOM node to create a new output target specifying the child node where the result nodes should be inserted before and\n the specified System ID.\nIn practice, node and nextSibling should be\n a Document node,\n a DocumentFragment node, or a\n Element node.\n In other words, a node that accepts children.\nUse nextSibling to specify the child node\n where the result nodes should be inserted before.\n If nextSibling is not a sibling of node,\n then an IllegalArgumentException is thrown.\n If node is null and nextSibling is not null,\n then an IllegalArgumentException is thrown.\n If nextSibling is null,\n then the behavior is the same as calling DOMResult(org.w3c.dom.Node, java.lang.String),\n i.e. append the result nodes as the last child of the specified node and use the specified System ID.\n", "method_declar": ""}, {"params": [], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": [], "return_description": ["The child node before which the result nodes will be inserted."], "return_type": ["Node"]}, "method_name": "getNextSibling", "method_description": "\nGet the child node before which the result nodes will be inserted.\nIf no node was set via\n DOMResult(org.w3c.dom.Node, org.w3c.dom.Node),\n DOMResult(org.w3c.dom.Node, org.w3c.dom.Node, java.lang.String) or\n setNextSibling(org.w3c.dom.Node),\n then null will be returned.\n", "method_declar": ""}, {"params": [], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": [], "return_description": ["The node to which the transformation will be appended."], "return_type": ["Node"]}, "method_name": "getNode", "method_description": "\nGet the node that will contain the result DOM tree.\nIf no node was set via\n DOMResult(org.w3c.dom.Node),\n DOMResult(org.w3c.dom.Node, java.lang.String),\n DOMResult(org.w3c.dom.Node, org.w3c.dom.Node),\n DOMResult(org.w3c.dom.Node, org.w3c.dom.Node, java.lang.String) or\n setNode(org.w3c.dom.Node),\n then the node will be set by the transformation, and may be obtained from this method once the transformation is complete.\n Calling this method before the transformation will return null.\n", "method_declar": ""}, {"params": [], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": [], "return_description": ["The system identifier."], "return_type": ["String"]}, "method_name": "getSystemId", "method_description": "\nGet the System Identifier.\nIf no System ID was set via\n DOMResult(org.w3c.dom.Node, java.lang.String),\n DOMResult(org.w3c.dom.Node, org.w3c.dom.Node, java.lang.String) or\n setSystemId(java.lang.String),\n then null will be returned.\n", "method_declar": ""}, {"params": [{"param_name": ["nextSibling"], "param_type": "Node", "param_description": " The child node before which the result nodes will be inserted."}], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setNextSibling", "method_description": "\nSet the child node before which the result nodes will be inserted.\nUse nextSibling to specify the child node\n before which the result nodes should be inserted.\n If nextSibling is not a descendant of node,\n then an IllegalArgumentException is thrown.\n If node is null and nextSibling is not null,\n then an IllegalStateException is thrown.\n If nextSibling is null,\n then the behavior is the same as calling DOMResult(org.w3c.dom.Node),\n i.e. append the result nodes as the last child of the specified node.\n", "method_declar": ""}, {"params": [{"param_name": ["node"], "param_type": "Node", "param_description": " The node to which the transformation will be appended."}], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setNode", "method_description": "\nSet the node that will contain the result DOM tree.\n\n\nIn practice, the node should be\n a Document node,\n a DocumentFragment node, or\n a Element node.\n In other words, a node that accepts children.\nAn IllegalStateException is thrown if nextSibling is not null and\n node is not a parent of nextSibling.\n An IllegalStateException is thrown if node is null and\n nextSibling is not null.\n", "method_declar": ""}, {"params": [{"param_name": ["systemId"], "param_type": "String", "param_description": " The system identifier as a URI string."}], "class_name": "DOMResult", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSystemId", "method_description": "\nSet the systemId that may be used in association with the node.\n", "method_declar": ""}], "class_name": "DOMResult", "Vars": null}