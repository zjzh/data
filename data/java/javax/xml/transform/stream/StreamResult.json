{"package_name": "javax.xml.transform.stream", "subclass_list": [], "class_description": " Acts as an holder for a transformation result,\n which may be XML, plain Text, HTML, or some other form of markup. ", "class_type": "class", "typealias": [], "interface_list": ["Result"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Zero-argument default constructor.\n", "method_declar": ""}, {"params": [{"param_name": ["outputStream"], "param_type": "OutputStream", "param_description": " A valid OutputStream reference."}], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamResult from a byte stream.  Normally,\n a stream should be used rather than a reader, so that\n the transformer may use instructions contained in the\n transformation instructions to control the encoding.\n", "method_declar": ""}, {"params": [{"param_name": ["writer"], "param_type": "Writer", "param_description": " A valid Writer reference."}], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamResult from a character stream.  Normally,\n a stream should be used rather than a reader, so that\n the transformer may use instructions contained in the\n transformation instructions to control the encoding.  However,\n there are times when it is useful to write to a character\n stream, such as when using a StringWriter.\n", "method_declar": ""}, {"params": [{"param_name": ["systemId"], "param_type": "String", "param_description": " Must be a String that conforms to the URI syntax."}], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamResult from a URL.\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "File", "param_description": " Must a non-null File reference."}], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamResult from a File.\n", "method_declar": ""}, {"params": [], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": [], "return_description": ["The byte stream that was set with setOutputStream, or null\n if setOutputStream or the ByteStream constructor was not called."], "return_type": ["OutputStream"]}, "method_name": "getOutputStream", "method_description": "Get the byte stream that was set with setOutputStream.\n", "method_declar": ""}, {"params": [], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": [], "return_description": ["The system identifier that was set with setSystemId, or null\n if setSystemId was not called."], "return_type": ["String"]}, "method_name": "getSystemId", "method_description": "Get the system identifier that was set with setSystemId.\n", "method_declar": ""}, {"params": [], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": [], "return_description": ["The character stream that was set with setWriter, or null\n if setWriter or the Writer constructor was not called."], "return_type": ["Writer"]}, "method_name": "getWriter", "method_description": "Get the character stream that was set with setWriter.\n", "method_declar": ""}, {"params": [{"param_name": ["outputStream"], "param_type": "OutputStream", "param_description": " A valid OutputStream reference."}], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setOutputStream", "method_description": "Set the ByteStream that is to be written to.  Normally,\n a stream should be used rather than a reader, so that\n the transformer may use instructions contained in the\n transformation instructions to control the encoding.\n", "method_declar": ""}, {"params": [{"param_name": ["systemId"], "param_type": "String", "param_description": " The system identifier as a URI string."}], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSystemId", "method_description": "Set the systemID that may be used in association\n with the byte or character stream, or, if neither is set, use\n this value as a writeable URI (probably a file name).\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "File", "param_description": " Must a non-null File reference."}], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSystemId", "method_description": "\nSet the system ID from a File reference.\nNote the use of File#toURI() and File#toURL().\n toURI() is preferred and used if possible.\n To allow JAXP 1.3 to run on J2SE 1.3, toURL()\n is used if a NoSuchMethodException is thrown by the attempt\n to use toURI().\n", "method_declar": ""}, {"params": [{"param_name": ["writer"], "param_type": "Writer", "param_description": " A valid Writer reference."}], "class_name": "StreamResult", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setWriter", "method_description": "Set the writer that is to receive the result.  Normally,\n a stream should be used rather than a writer, so that\n the transformer may use instructions contained in the\n transformation instructions to control the encoding.  However,\n there are times when it is useful to write to a writer,\n such as when using a StringWriter.\n", "method_declar": ""}], "class_name": "StreamResult", "Vars": null}