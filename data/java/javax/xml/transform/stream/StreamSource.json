{"package_name": "javax.xml.transform.stream", "subclass_list": [], "class_description": " Acts as an holder for a transformation Source in the form\n of a stream of XML markup. Note: Due to their internal use of either a Reader or InputStream instance,\n StreamSource instances may only be used once. ", "class_type": "class", "typealias": [], "interface_list": ["Source"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\nZero-argument default constructor.  If this constructor is used, and\n no Stream source is set using\n setInputStream(java.io.InputStream) or\n setReader(java.io.Reader), then the\n Transformer will\n create an empty source InputStream using\n new InputStream().\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["inputStream"], "param_type": "InputStream", "param_description": " A valid InputStream reference to an XML stream."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamSource from a byte stream.  Normally,\n a stream should be used rather than a reader, so\n the XML parser can resolve character encoding specified\n by the XML declaration.\n\n \nIf this constructor is used to process a stylesheet, normally\n setSystemId should also be called, so that relative URI references\n can be resolved.\n", "method_declar": ""}, {"params": [{"param_name": ["inputStream"], "param_type": "InputStream", "param_description": " A valid InputStream reference to an XML stream."}, {"param_name": ["systemId"], "param_type": "String", "param_description": " Must be a String that conforms to the URI syntax."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamSource from a byte stream.  Normally,\n a stream should be used rather than a reader, so that\n the XML parser can resolve character encoding specified\n by the XML declaration.\n\n \nThis constructor allows the systemID to be set in addition\n to the input stream, which allows relative URIs\n to be processed.\n", "method_declar": ""}, {"params": [{"param_name": ["reader"], "param_type": "Reader", "param_description": " A valid Reader reference to an XML character stream."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamSource from a character reader.  Normally,\n a stream should be used rather than a reader, so that\n the XML parser can resolve character encoding specified\n by the XML declaration.  However, in many cases the encoding\n of the input stream is already resolved, as in the case of\n reading XML from a StringReader.\n", "method_declar": ""}, {"params": [{"param_name": ["reader"], "param_type": "Reader", "param_description": " A valid Reader reference to an XML character stream."}, {"param_name": ["systemId"], "param_type": "String", "param_description": " Must be a String that conforms to the URI syntax."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamSource from a character reader.  Normally,\n a stream should be used rather than a reader, so that\n the XML parser may resolve character encoding specified\n by the XML declaration.  However, in many cases the encoding\n of the input stream is already resolved, as in the case of\n reading XML from a StringReader.\n", "method_declar": ""}, {"params": [{"param_name": ["systemId"], "param_type": "String", "param_description": " Must be a String that conforms to the URI syntax."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamSource from a URL.\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "File", "param_description": " Must a non-null File reference."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Construct a StreamSource from a File.\n", "method_declar": ""}, {"params": [], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": [], "return_description": ["The byte stream that was set with setByteStream, or null\n if setByteStream or the ByteStream constructor was not called."], "return_type": ["InputStream"]}, "method_name": "getInputStream", "method_description": "Get the byte stream that was set with setByteStream.\n", "method_declar": ""}, {"params": [], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": [], "return_description": ["The public identifier that was set with setPublicId, or null\n if setPublicId was not called."], "return_type": ["String"]}, "method_name": "getPublicId", "method_description": "Get the public identifier that was set with setPublicId.\n", "method_declar": ""}, {"params": [], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": [], "return_description": ["The character stream that was set with setReader, or null\n if setReader or the Reader constructor was not called."], "return_type": ["Reader"]}, "method_name": "getReader", "method_description": "Get the character stream that was set with setReader.\n", "method_declar": ""}, {"params": [], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": [], "return_description": ["The system identifier that was set with setSystemId, or null\n if setSystemId was not called."], "return_type": ["String"]}, "method_name": "getSystemId", "method_description": "Get the system identifier that was set with setSystemId.\n", "method_declar": ""}, {"params": [{"param_name": ["inputStream"], "param_type": "InputStream", "param_description": " A valid InputStream reference to an XML stream."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setInputStream", "method_description": "Set the byte stream to be used as input.  Normally,\n a stream should be used rather than a reader, so that\n the XML parser can resolve character encoding specified\n by the XML declaration.\n\n \nIf this Source object is used to process a stylesheet, normally\n setSystemId should also be called, so that relative URL references\n can be resolved.\n", "method_declar": ""}, {"params": [{"param_name": ["publicId"], "param_type": "String", "param_description": " The public identifier as a string."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setPublicId", "method_description": "Set the public identifier for this Source.\n\n \nThe public identifier is always optional: if the application\n writer includes one, it will be provided as part of the\n location information.\n", "method_declar": ""}, {"params": [{"param_name": ["reader"], "param_type": "Reader", "param_description": " A valid Reader reference to an XML CharacterStream."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setReader", "method_description": "Set the input to be a character reader.  Normally,\n a stream should be used rather than a reader, so that\n the XML parser can resolve character encoding specified\n by the XML declaration.  However, in many cases the encoding\n of the input stream is already resolved, as in the case of\n reading XML from a StringReader.\n", "method_declar": ""}, {"params": [{"param_name": ["systemId"], "param_type": "String", "param_description": " The system identifier as a URL string."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSystemId", "method_description": "Set the system identifier for this Source.\n\n \nThe system identifier is optional if there is a byte stream\n or a character stream, but it is still useful to provide one,\n since the application can use it to resolve relative URIs\n and can include it in error messages and warnings (the parser\n will attempt to open a connection to the URI only if\n there is no byte stream or character stream specified).\n", "method_declar": ""}, {"params": [{"param_name": ["f"], "param_type": "File", "param_description": " Must a non-null File reference."}], "class_name": "StreamSource", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSystemId", "method_description": "Set the system ID from a File reference.\n", "method_declar": ""}], "class_name": "StreamSource", "Vars": null}