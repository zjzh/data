{"package_name": "javax.sql", "subclass_list": [], "class_description": "An object that provides hooks for connection pool management.\n A PooledConnection object\n represents a physical connection to a data source.  The connection\n can be recycled rather than being closed when an application is\n finished with it, thus reducing the number of connections that\n need to be made. An application programmer does not use the PooledConnection\n interface directly; rather, it is used by a middle tier infrastructure\n that manages the pooling of connections. When an application calls the method DataSource.getConnection,\n it gets back a Connection object.  If connection pooling is\n being done, that Connection object is actually a handle to\n a PooledConnection object, which is a physical connection. The connection pool manager, typically the application server, maintains\n a pool of PooledConnection objects.  If there is a\n PooledConnection object available in the pool, the\n connection pool manager returns a Connection object that\n is a handle to that physical connection.\n If no PooledConnection object is available, the\n connection pool manager calls the ConnectionPoolDataSource\n method getPoolConnection to create a new physical connection.  The\n  JDBC driver implementing ConnectionPoolDataSource creates a\n  new PooledConnection object and returns a handle to it. When an application closes a connection, it calls the Connection\n method close. When connection pooling is being done,\n the connection pool manager is notified because it has registered itself as\n a ConnectionEventListener object using the\n ConnectionPool method addConnectionEventListener.\n The connection pool manager deactivates the handle to\n the PooledConnection object and  returns the\n PooledConnection object to the pool of connections so that\n it can be used again.  Thus, when an application closes its connection,\n the underlying physical connection is recycled rather than being closed. The physical connection is not closed until the connection pool manager\n calls the PooledConnection method close.\n This method is generally called to have an orderly shutdown of the server or\n if a fatal error has made the connection unusable. A connection pool manager is often also a statement pool manager, maintining\n  a pool of PreparedStatement objects.\n  When an application closes a prepared statement, it calls the\n  PreparedStatement\n method close. When Statement pooling is being done,\n the pool manager is notified because it has registered itself as\n a StatementEventListener object using the\n ConnectionPool method addStatementEventListener.\n  Thus, when an application closes its  PreparedStatement,\n the underlying prepared statement is recycled rather than being closed.  ", "class_type": "interface", "typealias": [], "interface_list": [""], "class_inherit_list": [], "Methods": [], "class_name": "PooledConnection", "Vars": null}