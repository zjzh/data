{"package_name": "javax.sql", "subclass_list": [], "class_description": " A factory for connections to the physical data source that this\n DataSource object represents.  An alternative to the\n DriverManager facility, a DataSource object\n is the preferred means of getting a connection. An object that implements\n the DataSource interface will typically be\n registered with a naming service based on the\n JavaTM Naming and Directory (JNDI) API. The DataSource interface is implemented by a driver vendor.\n There are three types of implementations: A DataSource object has properties that can be modified\n when necessary.  For example, if the data source is moved to a different\n server, the property for the server can be changed.  The benefit is that\n because the data source's properties can be changed, any code accessing\n that data source does not need to be changed. A driver that is accessed via a DataSource object does not\n register itself with the DriverManager.  Rather, a\n DataSource object is retrieved though a lookup operation\n and then used to create a Connection object.  With a basic\n implementation, the connection obtained through a DataSource\n object is identical to a connection obtained through the\n DriverManager facility. ", "class_type": "interface", "typealias": [], "interface_list": ["CommonDataSource", "Wrapper"], "class_inherit_list": [], "Methods": [], "class_name": "DataSource", "Vars": null}