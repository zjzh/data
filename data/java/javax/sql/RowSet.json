{"package_name": "javax.sql", "subclass_list": [], "class_description": "The interface that adds support to the JDBC API for the\n JavaBeansTM component model.\n A rowset, which can be used as a JavaBeans component in\n a visual Bean development environment, can be created and\n configured at design time and executed at run time. The RowSet\n interface provides a set of JavaBeans properties that allow a RowSet\n instance to be configured to connect to a JDBC data source and read\n some data from the data source.  A group of setter methods (setInt,\n setBytes, setString, and so on)\n provide a way to pass input parameters to a rowset's command property.\n This command is the SQL query the rowset uses when it gets its data from\n a relational database, which is generally the case. The RowSet\n interface supports JavaBeans events, allowing other components in an\n application to be notified when an event occurs on a rowset,\n such as a change in its value. The RowSet interface is unique in that it is intended to be\n implemented using the rest of the JDBC API.  In other words, a\n RowSet implementation is a layer of software that executes \"on top\"\n of a JDBC driver.  Implementations of the RowSet interface can\n be provided by anyone, including JDBC driver vendors who want to\n provide a RowSet implementation as part of their JDBC products. A RowSet object may make a connection with a data source and\n maintain that connection throughout its life cycle, in which case it is\n called a connected rowset.  A rowset may also make a connection with\n a data source, get data from it, and then close the connection. Such a rowset\n is called a disconnected rowset.  A disconnected rowset may make\n changes to its data while it is disconnected and then send the changes back\n to the original source of the data, but it must reestablish a connection to do so. A disconnected rowset may have a reader (a RowSetReader object)\n and a writer (a RowSetWriter object) associated with it.\n The reader may be implemented in many different ways to populate a rowset\n with data, including getting data from a non-relational data source. The\n writer can also be implemented in many different ways to propagate changes\n made to the rowset's data back to the underlying data source. Rowsets are easy to use.  The RowSet interface extends the standard\n java.sql.ResultSet interface.  The RowSetMetaData\n interface extends the java.sql.ResultSetMetaData interface.\n Thus, developers familiar\n with the JDBC API will have to learn a minimal number of new APIs to\n use rowsets.  In addition, third-party software tools that work with\n JDBC ResultSet objects will also easily be made to work with rowsets. ", "class_type": "interface", "typealias": [], "interface_list": ["ResultSet"], "class_inherit_list": [], "Methods": [], "class_name": "RowSet", "Vars": null}