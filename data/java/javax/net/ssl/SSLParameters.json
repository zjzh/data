{"package_name": "javax.net.ssl", "subclass_list": [], "class_description": "Encapsulates parameters for an SSL/TLS connection. The parameters\n are the list of ciphersuites to be accepted in an SSL/TLS handshake,\n the list of protocols to be allowed, the endpoint identification\n algorithm during SSL/TLS handshaking, the Server Name Indication (SNI),\n the algorithm constraints and whether SSL/TLS servers should request\n or require client authentication, etc. SSLParameters can be created via the constructors in this class.\n Objects can also be obtained using the getSSLParameters()\n methods in\n SSLSocket#getSSLParameters and\n SSLServerSocket#getSSLParameters and\n SSLEngine#getSSLParameters or the\n SSLContext#getDefaultSSLParameters and\n SSLContext#getSupportedSSLParameters\n methods in SSLContext. SSLParameters can be applied to a connection via the methods\n SSLSocket#setSSLParameters and\n SSLServerSocket#setSSLParameters\n and SSLEngine#setSSLParameters. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs SSLParameters.\n \n\n The values of cipherSuites, protocols, cryptographic algorithm\n constraints, endpoint identification algorithm, server names and\n server name matchers are set to null, useCipherSuitesOrder,\n wantClientAuth and needClientAuth are set to false.\n", "method_declar": ""}, {"params": [{"param_name": ["cipherSuites"], "param_type": "String[]", "param_description": " the array of ciphersuites (or null)"}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs SSLParameters from the specified array of ciphersuites.\n \n\n Calling this constructor is equivalent to calling the no-args\n constructor followed by\n setCipherSuites(cipherSuites);.\n", "method_declar": ""}, {"params": [{"param_name": ["cipherSuites"], "param_type": "String[]", "param_description": " the array of ciphersuites (or null)"}, {"param_name": ["protocols"], "param_type": "String[]", "param_description": " the array of protocols (or null)"}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs SSLParameters from the specified array of ciphersuites\n and protocols.\n \n\n Calling this constructor is equivalent to calling the no-args\n constructor followed by\n setCipherSuites(cipherSuites); setProtocols(protocols);.\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["the cryptographic algorithm constraints, or null if the\n     constraints have not been set"], "return_type": ["AlgorithmConstraints"]}, "method_name": "getAlgorithmConstraints", "method_description": "Returns the cryptographic algorithm constraints.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["a non-null, possibly zero-length array of application protocol\n         Strings.  The array is ordered based on protocol\n         preference, with protocols[0] being the most preferred."], "return_type": ["String[]"]}, "method_name": "getApplicationProtocols", "method_description": "Returns a prioritized array of application-layer protocol names that\n can be negotiated over the SSL/TLS protocols.\n \n\n The array could be empty (zero-length), in which case protocol\n indications will not be used.\n \n\n This method will return a new array each time it is invoked.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["a copy of the array of ciphersuites or null if none\n have been set."], "return_type": ["String[]"]}, "method_name": "getCipherSuites", "method_description": "Returns a copy of the array of ciphersuites or null if none\n have been set.\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["the endpoint identification algorithm, or null if none\n has been set."], "return_type": ["String"]}, "method_name": "getEndpointIdentificationAlgorithm", "method_description": "Gets the endpoint identification algorithm.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["whether client authentication should be required."], "return_type": ["boolean"]}, "method_name": "getNeedClientAuth", "method_description": "Returns whether client authentication should be required.\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["a copy of the array of protocols or null if none\n have been set."], "return_type": ["String[]"]}, "method_name": "getProtocols", "method_description": "Returns a copy of the array of protocols or null if none\n have been set.\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["null or an immutable collection of non-null SNIMatchers"], "return_type": ["Collection<SNIMatcher>"]}, "method_name": "getSNIMatchers", "method_description": "Returns a Collection containing all SNIMatchers of the\n Server Name Indication (SNI) parameter, or null if none has been set.\n \n\n This method is only useful to SSLSockets or SSLEngines\n operating in server mode.\n \n\n For better interoperability, providers generally will not define\n default matchers so that by default servers will ignore the SNI\n extension and continue the handshake.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["null or an immutable list of non-null SNIServerNames"], "return_type": ["List<SNIServerName>"]}, "method_name": "getServerNames", "method_description": "Returns a List containing all SNIServerNames of the\n Server Name Indication (SNI) parameter, or null if none has been set.\n \n\n This method is only useful to SSLSockets or SSLEngines\n operating in client mode.\n \n\n For SSL/TLS connections, the underlying SSL/TLS provider\n may specify a default value for a certain server name type.  In\n client mode, it is recommended that, by default, providers should\n include the server name indication whenever the server can be located\n by a supported server name type.\n \n\n It is recommended that providers initialize default Server Name\n Indications when creating SSLSocket/SSLEngines.\n In the following examples, the server name could be represented by an\n instance of SNIHostName which has been initialized with the\n hostname \"www.example.com\" and type\n StandardConstants#SNI_HOST_NAME.\n\n \n\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["whether local cipher suites order in #getCipherSuites\n         should be honored during SSL/TLS handshaking."], "return_type": ["boolean"]}, "method_name": "getUseCipherSuitesOrder", "method_description": "Returns whether the local cipher suites preference should be honored.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": ["whether client authentication should be requested."], "return_type": ["boolean"]}, "method_name": "getWantClientAuth", "method_description": "Returns whether client authentication should be requested.\n", "method_declar": ""}, {"params": [{"param_name": ["constraints"], "param_type": "AlgorithmConstraints", "param_description": " the algorithm constraints (or null)"}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setAlgorithmConstraints", "method_description": "Sets the cryptographic algorithm constraints, which will be used\n in addition to any configured by the runtime environment.\n \n\n If the constraints parameter is non-null, every\n cryptographic algorithm, key and algorithm parameters used in the\n SSL/TLS handshake must be permitted by the constraints.\n", "method_declar": ""}, {"params": [{"param_name": ["protocols"], "param_type": "String[]", "param_description": " an ordered array of application protocols,\n                    with protocols[0] being the most preferred.\n                    If the array is empty (zero-length), protocol\n                    indications will not be used."}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setApplicationProtocols", "method_description": "Sets the prioritized array of application-layer protocol names that\n can be negotiated over the SSL/TLS protocols.\n \n\n If application-layer protocols are supported by the underlying\n SSL/TLS implementation, this method configures which values can\n be negotiated by protocols such as  RFC 7301 , the\n Application Layer Protocol Negotiation (ALPN).\n \n\n If this end of the connection is expected to offer application protocol\n values, all protocols configured by this method will be sent to the\n peer.\n \n\n If this end of the connection is expected to select the application\n protocol value, the protocols configured by this method are\n compared with those sent by the peer.  The first matched value becomes\n the negotiated value.  If none of the protocols were actually\n requested by the peer, the underlying protocol will determine what\n action to take.  (For example, ALPN will send a\n \"no_application_protocol\" alert and terminate the connection.)\n \n\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["cipherSuites"], "param_type": "String[]", "param_description": " the array of ciphersuites (or null)"}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setCipherSuites", "method_description": "Sets the array of ciphersuites.\n", "method_declar": ""}, {"params": [{"param_name": ["algorithm"], "param_type": "String", "param_description": " The standard string name of the endpoint\n     identification algorithm (or null).  See Appendix A in the \n     Java Cryptography Architecture API Specification & Reference \n     for information about standard algorithm names."}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setEndpointIdentificationAlgorithm", "method_description": "Sets the endpoint identification algorithm.\n \n\n If the algorithm parameter is non-null or non-empty, the\n endpoint identification/verification procedures must be handled during\n SSL/TLS handshaking.  This is to prevent man-in-the-middle attacks.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["needClientAuth"], "param_type": "boolean", "param_description": " whether client authentication should be required"}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setNeedClientAuth", "method_description": "Sets whether client authentication should be required. Calling\n this method clears the wantClientAuth flag.\n", "method_declar": ""}, {"params": [{"param_name": ["protocols"], "param_type": "String[]", "param_description": " the array of protocols (or null)"}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setProtocols", "method_description": "Sets the array of protocols.\n", "method_declar": ""}, {"params": [{"param_name": ["matchers"], "param_type": "Collection", "param_description": " the collection of SNIMatchers (or null)"}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setSNIMatchers", "method_description": "Sets the SNIMatchers of the Server Name Indication (SNI)\n parameter.\n \n\n This method is only useful to SSLSockets or SSLEngines\n operating in server mode.\n \n\n Note that the matchers collection is cloned to protect\n against subsequent modification.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["serverNames"], "param_type": "List", "param_description": " the list of desired SNIServerNames (or null)"}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setServerNames", "method_description": "Sets the desired SNIServerNames of the Server Name\n Indication (SNI) parameter.\n \n\n This method is only useful to SSLSockets or SSLEngines\n operating in client mode.\n \n\n Note that the serverNames list is cloned\n to protect against subsequent modification.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["honorOrder"], "param_type": "boolean", "param_description": " whether local cipher suites order in\n        #getCipherSuites should be honored during\n        SSL/TLS handshaking."}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setUseCipherSuitesOrder", "method_description": "Sets whether the local cipher suites preference should be honored.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["wantClientAuth"], "param_type": "boolean", "param_description": " whether client authentication should be requested"}], "class_name": "SSLParameters", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setWantClientAuth", "method_description": "Sets whether client authentication should be requested. Calling\n this method clears the needClientAuth flag.\n", "method_declar": ""}], "class_name": "SSLParameters", "Vars": null}