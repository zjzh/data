{"package_name": "javax.net.ssl", "subclass_list": [], "class_description": "This event indicates that an SSL handshake completed on a given\n SSL connection.  All of the core information about that handshake's\n result is captured through an \"SSLSession\" object.  As a convenience,\n this event class provides direct access to some important session\n attributes. The source of this event is the SSLSocket on which handshaking\n just completed. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["EventObject"], "Methods": [{"params": [{"param_name": ["sock"], "param_type": "SSLSocket", "param_description": " the SSLSocket acting as the source of the event"}, {"param_name": ["s"], "param_type": "SSLSession", "param_description": " the SSLSession this event is associated with"}], "class_name": "HandshakeCompletedEvent", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a new HandshakeCompletedEvent.\n", "method_declar": ""}, {"params": [], "class_name": "HandshakeCompletedEvent", "is_static": false, "return_value": {"return_name": [], "return_description": ["the name of the cipher suite negotiated during this session."], "return_type": ["String"]}, "method_name": "getCipherSuite", "method_description": "Returns the cipher suite in use by the session which was produced\n by the handshake.  (This is a convenience method for\n getting the ciphersuite from the SSLsession.)\n", "method_declar": ""}, {"params": [], "class_name": "HandshakeCompletedEvent", "is_static": false, "return_value": {"return_name": [], "return_description": ["an ordered array of certificates, with the local\n          certificate first followed by any\n          certificate authorities.  If no certificates were sent,\n          then null is returned."], "return_type": ["Certificate[]"]}, "method_name": "getLocalCertificates", "method_description": "Returns the certificate(s) that were sent to the peer during\n handshaking.\n Note: This method is useful only when using certificate-based\n cipher suites.\n\n When multiple certificates are available for use in a\n handshake, the implementation chooses what it considers the\n \"best\" certificate chain available, and transmits that to\n the other side.  This method allows the caller to know\n which certificate chain was actually used.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "HandshakeCompletedEvent", "is_static": false, "return_value": {"return_name": [], "return_description": ["the principal sent to the peer. Returns an X500Principal\n of the end-entity certificate for X509-based cipher suites, and\n KerberosPrincipal for Kerberos cipher suites. If no principal was\n sent, then null is returned."], "return_type": ["Principal"]}, "method_name": "getLocalPrincipal", "method_description": "Returns the principal that was sent to the peer during handshaking.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "HandshakeCompletedEvent", "is_static": false, "return_value": {"return_name": [], "return_description": ["an ordered array of peer X.509 certificates,\n          with the peer's own certificate first followed by any\n          certificate authorities.  (The certificates are in\n          the original JSSE\n          X509Certificate format)."], "return_type": ["X509Certificate[]"]}, "method_name": "getPeerCertificateChain", "method_description": "Returns the identity of the peer which was identified as part\n of defining the session.\n Note: This method can be used only when using certificate-based\n cipher suites; using it with non-certificate-based cipher suites,\n such as Kerberos, will throw an SSLPeerUnverifiedException.\n\n \nNote: this method exists for compatibility with previous\n releases. New applications should use\n getPeerCertificates() instead.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "HandshakeCompletedEvent", "is_static": false, "return_value": {"return_name": [], "return_description": ["an ordered array of the peer certificates,\n          with the peer's own certificate first followed by\n          any certificate authorities."], "return_type": ["Certificate[]"]}, "method_name": "getPeerCertificates", "method_description": "Returns the identity of the peer which was established as part\n of defining the session.\n Note: This method can be used only when using certificate-based\n cipher suites; using it with non-certificate-based cipher suites,\n such as Kerberos, will throw an SSLPeerUnverifiedException.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "HandshakeCompletedEvent", "is_static": false, "return_value": {"return_name": [], "return_description": ["the peer's principal. Returns an X500Principal of the\n end-entity certiticate for X509-based cipher suites, and\n KerberosPrincipal for Kerberos cipher suites."], "return_type": ["Principal"]}, "method_name": "getPeerPrincipal", "method_description": "Returns the identity of the peer which was established as part of\n defining the session.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "HandshakeCompletedEvent", "is_static": false, "return_value": {"return_name": [], "return_description": ["the SSLSession for this handshake"], "return_type": ["SSLSession"]}, "method_name": "getSession", "method_description": "Returns the session that triggered this event.\n", "method_declar": ""}, {"params": [], "class_name": "HandshakeCompletedEvent", "is_static": false, "return_value": {"return_name": [], "return_description": ["the socket on which the connection was made."], "return_type": ["SSLSocket"]}, "method_name": "getSocket", "method_description": "Returns the socket which is the source of this event.\n (This is a convenience function, to let applications\n write code without type casts.)\n", "method_declar": ""}], "class_name": "HandshakeCompletedEvent", "Vars": null}