{"package_name": "javax.net.ssl", "subclass_list": [], "class_description": "Instances of this class represent a server name of type\n StandardConstants#SNI_HOST_NAME in a Server Name\n Indication (SNI) extension. As described in section 3, \"Server Name Indication\", of\n TLS Extensions (RFC 6066),\n \"HostName\" contains the fully qualified DNS hostname of the server, as\n understood by the client.  The encoded server name value of a hostname is\n represented as a byte string using ASCII encoding without a trailing dot.\n This allows the support of Internationalized Domain Names (IDN) through\n the use of A-labels (the ASCII-Compatible Encoding (ACE) form of a valid\n string of Internationalized Domain Names for Applications (IDNA)) defined\n in RFC 5890. Note that SNIHostName objects are immutable. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["SNIServerName"], "Methods": [{"params": [{"param_name": ["hostname"], "param_type": "String", "param_description": " the hostname of this server name"}], "class_name": "SNIHostName", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an SNIHostName using the specified hostname.\n \n\n Note that per RFC 6066,\n the encoded server name value of a hostname is\n StandardCharsets#US_ASCII-compliant.  In this method,\n hostname can be a user-friendly Internationalized Domain Name\n (IDN).  IDN#toASCII(String, int) is used to enforce the\n restrictions on ASCII characters in hostnames (see\n RFC 3490,\n RFC 1122,\n RFC 1123) and\n translate the hostname into ASCII Compatible Encoding (ACE), as:\n \n\n The hostname argument is illegal if it:\n \n", "method_declar": ""}, {"params": [{"param_name": ["encoded"], "param_type": "byte[]", "param_description": " the encoded hostname of this server name"}], "class_name": "SNIHostName", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an SNIHostName using the specified encoded value.\n \n\n This method is normally used to parse the encoded name value in a\n requested SNI extension.\n \n\n Per RFC 6066,\n the encoded name value of a hostname is\n StandardCharsets#US_ASCII-compliant.  However, in the previous\n version of the SNI extension (\n RFC 4366),\n the encoded hostname is represented as a byte string using UTF-8\n encoding.  For the purpose of version tolerance, this method allows\n that the charset of encoded argument can be\n StandardCharsets#UTF_8, as well as\n StandardCharsets#US_ASCII.  IDN#toASCII(String) is used\n to translate the encoded argument into ASCII Compatible\n Encoding (ACE) hostname.\n \n\n It is strongly recommended that this constructor is only used to parse\n the encoded name value in a requested SNI extension.  Otherwise, to\n comply with RFC 6066,\n please always use StandardCharsets#US_ASCII-compliant charset\n and enforce the restrictions on ASCII characters in hostnames (see\n RFC 3490,\n RFC 1122,\n RFC 1123)\n for encoded argument, or use\n SNIHostName#SNIHostName(String) instead.\n \n\n The encoded argument is illegal if it:\n \n\n Note that the encoded byte array is cloned\n to protect against subsequent modification.\n", "method_declar": ""}, {"params": [{"param_name": ["regex"], "param_type": "String", "param_description": " the \n         regular expression pattern\n         representing the hostname(s) to match"}], "class_name": "SNIHostName", "is_static": true, "return_value": {"return_name": [], "return_description": ["a SNIMatcher object for SNIHostNames"], "return_type": ["SNIMatcher"]}, "method_name": "createSNIMatcher", "method_description": "Creates an SNIMatcher object for SNIHostNames.\n \n\n This method can be used by a server to verify the acceptable\n SNIHostNames.  For example,\n \n", "method_declar": ""}, {"params": [{"param_name": ["other"], "param_type": "Object", "param_description": " the other server name object to compare with."}], "class_name": "SNIHostName", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if, and only if, the other is considered\n         equal to this instance"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares this server name to the specified object.\n \n\n Per RFC 6066, DNS\n hostnames are case-insensitive.  Two server hostnames are equal if,\n and only if, they have the same name type, and the hostnames are\n equal in a case-independent comparison.\n", "method_declar": ""}, {"params": [], "class_name": "SNIHostName", "is_static": false, "return_value": {"return_name": [], "return_description": ["the StandardCharsets#US_ASCII-compliant hostname\n         of this SNIHostName object"], "return_type": ["String"]}, "method_name": "getAsciiName", "method_description": "Returns the StandardCharsets#US_ASCII-compliant hostname of\n this SNIHostName object.\n \n\n Note that, per\n RFC 6066, the\n returned hostname may be an internationalized domain name that\n contains A-labels. See\n RFC 5890\n for more information about the detailed A-label specification.\n", "method_declar": ""}, {"params": [], "class_name": "SNIHostName", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this SNIHostName."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hash code value for this SNIHostName.\n \n\n The hash code value is generated using the case-insensitive hostname\n of this SNIHostName.\n", "method_declar": ""}, {"params": [], "class_name": "SNIHostName", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of the object."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Returns a string representation of the object, including the DNS\n hostname in this SNIHostName object.\n \n\n The exact details of the representation are unspecified and subject\n to change, but the following may be regarded as typical:\n \n\n Please NOTE that the exact details of the representation are unspecified\n and subject to change.\n", "method_declar": ""}], "class_name": "SNIHostName", "Vars": null}