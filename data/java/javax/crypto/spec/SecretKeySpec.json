{"package_name": "javax.crypto.spec", "subclass_list": [], "class_description": "This class specifies a secret key in a provider-independent fashion. It can be used to construct a SecretKey from a byte array,\n without having to go through a (provider-based)\n SecretKeyFactory. This class is only useful for raw secret keys that can be represented as\n a byte array and have no key parameters associated with them, e.g., DES or\n Triple DES keys. ", "class_type": "class", "typealias": [], "interface_list": ["KeySpec", "SecretKey"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["key"], "param_type": "byte[]", "param_description": " the key material of the secret key. The contents of\n the array are copied to protect against subsequent modification."}, {"param_name": ["algorithm"], "param_type": "String", "param_description": " the name of the secret-key algorithm to be associated\n with the given key material.\n See Appendix A in the \n Java Cryptography Architecture Reference Guide\n for information about standard algorithm names."}], "class_name": "SecretKeySpec", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a secret key from the given byte array.\n\n \nThis constructor does not check if the given bytes indeed specify a\n secret key of the specified algorithm. For example, if the algorithm is\n DES, this constructor does not check if key is 8 bytes\n long, and also does not check for weak or semi-weak keys.\n In order for those checks to be performed, an algorithm-specific\n key specification class (in this case:\n DESKeySpec)\n should be used.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "byte[]", "param_description": " the key material of the secret key. The first\n len bytes of the array beginning at\n offset inclusive are copied to protect\n against subsequent modification."}, {"param_name": ["offset"], "param_type": "int", "param_description": " the offset in key where the key material\n starts."}, {"param_name": ["len"], "param_type": "int", "param_description": " the length of the key material."}, {"param_name": ["algorithm"], "param_type": "String", "param_description": " the name of the secret-key algorithm to be associated\n with the given key material.\n See Appendix A in the \n Java Cryptography Architecture Reference Guide\n for information about standard algorithm names."}], "class_name": "SecretKeySpec", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a secret key from the given byte array, using the first\n len bytes of key, starting at\n offset inclusive.\n\n \n The bytes that constitute the secret key are\n those between key[offset] and\n key[offset+len-1] inclusive.\n\n \nThis constructor does not check if the given bytes indeed specify a\n secret key of the specified algorithm. For example, if the algorithm is\n DES, this constructor does not check if key is 8 bytes\n long, and also does not check for weak or semi-weak keys.\n In order for those checks to be performed, an algorithm-specific key\n specification class (in this case:\n DESKeySpec)\n must be used.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to test for equality with this object."}], "class_name": "SecretKeySpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are considered equal, false if\n obj is null or otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Tests for equality between the specified object and this\n object. Two SecretKeySpec objects are considered equal if\n they are both SecretKey instances which have the\n same case-insensitive algorithm name and key encoding.\n", "method_declar": ""}, {"params": [], "class_name": "SecretKeySpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["the secret key algorithm."], "return_type": ["String"]}, "method_name": "getAlgorithm", "method_description": "Returns the name of the algorithm associated with this secret key.\n", "method_declar": ""}, {"params": [], "class_name": "SecretKeySpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["the key material. Returns a new array\n each time this method is called."], "return_type": ["byte[]"]}, "method_name": "getEncoded", "method_description": "Returns the key material of this secret key.\n", "method_declar": ""}, {"params": [], "class_name": "SecretKeySpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["the string \"RAW\"."], "return_type": ["String"]}, "method_name": "getFormat", "method_description": "Returns the name of the encoding format for this secret key.\n", "method_declar": ""}, {"params": [], "class_name": "SecretKeySpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Calculates a hash code value for the object.\n Objects that are equal will also have the same hashcode.\n", "method_declar": ""}], "class_name": "SecretKeySpec", "Vars": null}