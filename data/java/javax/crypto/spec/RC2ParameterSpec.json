{"package_name": "javax.crypto.spec", "subclass_list": [], "class_description": "This class specifies the parameters used with the\n RC2\n algorithm. The parameters consist of an effective key size and optionally\n an 8-byte initialization vector (IV) (only in feedback mode). This class can be used to initialize a Cipher object that\n implements the RC2 algorithm. ", "class_type": "class", "typealias": [], "interface_list": ["AlgorithmParameterSpec"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["effectiveKeyBits"], "param_type": "int", "param_description": " the effective key size in bits."}], "class_name": "RC2ParameterSpec", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a parameter set for RC2 from the given effective key size\n (in bits).\n", "method_declar": ""}, {"params": [{"param_name": ["effectiveKeyBits"], "param_type": "int", "param_description": " the effective key size in bits."}, {"param_name": ["iv"], "param_type": "byte[]", "param_description": " the buffer with the 8-byte IV. The first 8 bytes of\n the buffer are copied to protect against subsequent modification."}], "class_name": "RC2ParameterSpec", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a parameter set for RC2 from the given effective key size\n (in bits) and an 8-byte IV.\n\n \n The bytes that constitute the IV are those between\n iv[0] and iv[7] inclusive.\n", "method_declar": ""}, {"params": [{"param_name": ["effectiveKeyBits"], "param_type": "int", "param_description": " the effective key size in bits."}, {"param_name": ["iv"], "param_type": "byte[]", "param_description": " the buffer with the IV. The first 8 bytes\n of the buffer beginning at offset inclusive\n are copied to protect against subsequent modification."}, {"param_name": ["offset"], "param_type": "int", "param_description": " the offset in iv where the 8-byte IV\n starts."}], "class_name": "RC2ParameterSpec", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a parameter set for RC2 from the given effective key size\n (in bits) and IV.\n\n \n The IV is taken from iv, starting at\n offset inclusive.\n The bytes that constitute the IV are those between\n iv[offset] and iv[offset+7] inclusive.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to test for equality with this object."}], "class_name": "RC2ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are considered equal, false if\n obj is null or otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Tests for equality between the specified object and this\n object. Two RC2ParameterSpec objects are considered equal if their\n effective key sizes and IVs are equal.\n (Two IV references are considered equal if both are null.)\n", "method_declar": ""}, {"params": [], "class_name": "RC2ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["the effective key size in bits."], "return_type": ["int"]}, "method_name": "getEffectiveKeyBits", "method_description": "Returns the effective key size in bits.\n", "method_declar": ""}, {"params": [], "class_name": "RC2ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["the IV or null if this parameter set does not contain an IV.\n Returns a new array each time this method is called."], "return_type": ["byte[]"]}, "method_name": "getIV", "method_description": "Returns the IV or null if this parameter set does not contain an IV.\n", "method_declar": ""}, {"params": [], "class_name": "RC2ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Calculates a hash code value for the object.\n Objects that are equal will also have the same hashcode.\n", "method_declar": ""}], "class_name": "RC2ParameterSpec", "Vars": null}