{"package_name": "javax.crypto.spec", "subclass_list": [], "class_description": "This class specifies the parameters used with the\n RC5\n algorithm. The parameters consist of a version number, a rounds count, a word\n size, and optionally an initialization vector (IV) (only in feedback mode). This class can be used to initialize a Cipher object that\n implements the RC5 algorithm as supplied by\n RSA Security Inc.,\n or any parties authorized by RSA Security. ", "class_type": "class", "typealias": [], "interface_list": ["AlgorithmParameterSpec"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["version"], "param_type": "int", "param_description": " the version."}, {"param_name": ["rounds"], "param_type": "int", "param_description": " the number of rounds."}, {"param_name": ["wordSize"], "param_type": "int", "param_description": " the word size in bits."}], "class_name": "RC5ParameterSpec", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a parameter set for RC5 from the given version, number of\n rounds and word size (in bits).\n", "method_declar": ""}, {"params": [{"param_name": ["version"], "param_type": "int", "param_description": " the version."}, {"param_name": ["rounds"], "param_type": "int", "param_description": " the number of rounds."}, {"param_name": ["wordSize"], "param_type": "int", "param_description": " the word size in bits."}, {"param_name": ["iv"], "param_type": "byte[]", "param_description": " the buffer with the IV. The first 2*(wordSize/8)\n  bytes of the buffer are copied to protect against subsequent\n modification."}], "class_name": "RC5ParameterSpec", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a parameter set for RC5 from the given version, number of\n rounds, word size (in bits), and IV.\n\n \n Note that the size of the IV (block size) must be twice the word\n size. The bytes that constitute the IV are those between\n iv[0] and iv[2*(wordSize/8)-1] inclusive.\n", "method_declar": ""}, {"params": [{"param_name": ["version"], "param_type": "int", "param_description": " the version."}, {"param_name": ["rounds"], "param_type": "int", "param_description": " the number of rounds."}, {"param_name": ["wordSize"], "param_type": "int", "param_description": " the word size in bits."}, {"param_name": ["iv"], "param_type": "byte[]", "param_description": " the buffer with the IV. The first 2*(wordSize/8)\n  bytes of the buffer beginning at offset\n inclusive are copied to protect against subsequent modification."}, {"param_name": ["offset"], "param_type": "int", "param_description": " the offset in iv where the IV starts."}], "class_name": "RC5ParameterSpec", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a parameter set for RC5 from the given version, number of\n rounds, word size (in bits), and IV.\n\n \n The IV is taken from iv, starting at\n offset inclusive.\n Note that the size of the IV (block size), starting at\n offset inclusive, must be twice the word size.\n The bytes that constitute the IV are those between\n iv[offset] and iv[offset+2*(wordSize/8)-1]\n inclusive.\n", "method_declar": ""}, {"params": [{"param_name": ["obj"], "param_type": "Object", "param_description": " the object to test for equality with this object."}], "class_name": "RC5ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the objects are considered equal, false if\n obj is null or otherwise."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Tests for equality between the specified object and this\n object. Two RC5ParameterSpec objects are considered equal if their\n version numbers, number of rounds, word sizes, and IVs are equal.\n (Two IV references are considered equal if both are null.)\n", "method_declar": ""}, {"params": [], "class_name": "RC5ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["the IV or null if this parameter set does not contain an IV.\n Returns a new array each time this method is called."], "return_type": ["byte[]"]}, "method_name": "getIV", "method_description": "Returns the IV or null if this parameter set does not contain an IV.\n", "method_declar": ""}, {"params": [], "class_name": "RC5ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of rounds."], "return_type": ["int"]}, "method_name": "getRounds", "method_description": "Returns the number of rounds.\n", "method_declar": ""}, {"params": [], "class_name": "RC5ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["the version."], "return_type": ["int"]}, "method_name": "getVersion", "method_description": "Returns the version.\n", "method_declar": ""}, {"params": [], "class_name": "RC5ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["the word size in bits."], "return_type": ["int"]}, "method_name": "getWordSize", "method_description": "Returns the word size in bits.\n", "method_declar": ""}, {"params": [], "class_name": "RC5ParameterSpec", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code value for this object."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Calculates a hash code value for the object.\n Objects that are equal will also have the same hashcode.\n", "method_declar": ""}], "class_name": "RC5ParameterSpec", "Vars": null}