{"package_name": "javax.crypto", "subclass_list": [], "class_description": "This class enables a programmer to create an object and protect its\n confidentiality with a cryptographic algorithm. Given any Serializable object, one can create a SealedObject\n that encapsulates the original object, in serialized\n format (i.e., a \"deep copy\"), and seals (encrypts) its serialized contents,\n using a cryptographic algorithm such as DES, to protect its\n confidentiality.  The encrypted content can later be decrypted (with\n the corresponding algorithm using the correct decryption key) and\n de-serialized, yielding the original object. Note that the Cipher object must be fully initialized with the\n correct algorithm, key, padding scheme, etc., before being applied\n to a SealedObject. The original object that was sealed can be recovered in two different\n ways: ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["object"], "param_type": "Serializable", "param_description": " the object to be sealed; can be null."}, {"param_name": ["c"], "param_type": "Cipher", "param_description": " the cipher used to seal the object."}], "class_name": "SealedObject", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a SealedObject from any Serializable object.\n\n \nThe given object is serialized, and its serialized contents are\n encrypted using the given Cipher, which must be fully initialized.\n\n \nAny algorithm parameters that may be used in the encryption\n operation are stored inside of the new SealedObject.\n", "method_declar": ""}, {"params": [], "class_name": "SealedObject", "is_static": false, "return_value": {"return_name": [], "return_description": ["the algorithm that was used to seal this object."], "return_type": ["String"]}, "method_name": "getAlgorithm", "method_description": "Returns the algorithm that was used to seal this object.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Key", "param_description": " the key used to unseal the object."}, {"param_name": ["provider"], "param_type": "String", "param_description": " the name of the provider of the algorithm to unseal\n the object."}], "class_name": "SealedObject", "is_static": false, "return_value": {"return_name": [], "return_description": ["the original object."], "return_type": ["Object"]}, "method_name": "getObject", "method_description": "Retrieves the original (encapsulated) object.\n\n \nThis method creates a cipher for the algorithm that had been used in\n the sealing operation, using an implementation of that algorithm from\n the given provider.\n The Cipher object is initialized for decryption, using the given\n key and the parameters (if any) that had been used in the\n sealing operation.\n\n \nThe encapsulated object is unsealed and de-serialized, before it is\n returned.\n", "method_declar": ""}, {"params": [{"param_name": ["key"], "param_type": "Key", "param_description": " the key used to unseal the object."}], "class_name": "SealedObject", "is_static": false, "return_value": {"return_name": [], "return_description": ["the original object."], "return_type": ["Object"]}, "method_name": "getObject", "method_description": "Retrieves the original (encapsulated) object.\n\n \nThis method creates a cipher for the algorithm that had been used in\n the sealing operation.\n If the default provider package provides an implementation of that\n algorithm, an instance of Cipher containing that implementation is used.\n If the algorithm is not available in the default package, other\n packages are searched.\n The Cipher object is initialized for decryption, using the given\n key and the parameters (if any) that had been used in the\n sealing operation.\n\n \nThe encapsulated object is unsealed and de-serialized, before it is\n returned.\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Cipher", "param_description": " the cipher used to unseal the object"}], "class_name": "SealedObject", "is_static": false, "return_value": {"return_name": [], "return_description": ["the original object."], "return_type": ["Object"]}, "method_name": "getObject", "method_description": "Retrieves the original (encapsulated) object.\n\n \nThe encapsulated object is unsealed (using the given Cipher,\n assuming that the Cipher is already properly initialized) and\n de-serialized, before it is returned.\n", "method_declar": ""}], "class_name": "SealedObject", "Vars": null}