{"package_name": "javax.crypto", "subclass_list": [], "class_description": "A CipherInputStream is composed of an InputStream and a Cipher so\n that read() methods return data that are read in from the\n underlying InputStream but have been additionally processed by the\n Cipher.  The Cipher must be fully initialized before being used by\n a CipherInputStream. For example, if the Cipher is initialized for decryption, the\n CipherInputStream will attempt to read in data and decrypt them,\n before returning the decrypted data. This class adheres strictly to the semantics, especially the\n failure semantics, of its ancestor classes\n java.io.FilterInputStream and java.io.InputStream.  This class has\n exactly those methods specified in its ancestor classes, and\n overrides them all.  Moreover, this class catches all exceptions\n that are not thrown by its ancestor classes.  In particular, the\n skip method skips, and the available\n method counts only data that have been processed by the encapsulated Cipher. It is crucial for a programmer using this class not to use\n methods that are not defined or overriden in this class (such as a\n new method or constructor that is later added to one of the super\n classes), because the design and implementation of those methods\n are unlikely to have considered security impact with regard to\n CipherInputStream. ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["FilterInputStream"], "Methods": [{"params": [{"param_name": ["is"], "param_type": "InputStream", "param_description": " the to-be-processed input stream"}, {"param_name": ["c"], "param_type": "Cipher", "param_description": " an initialized Cipher object"}], "class_name": "CipherInputStream", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Constructs a CipherInputStream from an InputStream and a\n Cipher.\n Note: if the specified input stream or cipher is\n null, a NullPointerException may be thrown later when\n they are used.\n", "method_declar": ""}, {"params": [], "class_name": "CipherInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the number of bytes that can be read from this input stream\n             without blocking."], "return_type": ["int"]}, "method_name": "available", "method_description": "Returns the number of bytes that can be read from this input\n stream without blocking. The available method of\n InputStream returns 0. This method\n should be overridden by subclasses.\n", "method_declar": ""}, {"params": [], "class_name": "CipherInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "close", "method_description": "Closes this input stream and releases any system resources\n associated with the stream.\n \n\n The close method of CipherInputStream\n calls the close method of its underlying input\n stream.\n", "method_declar": ""}, {"params": [], "class_name": "CipherInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["false, since this class does not support the\n          mark and reset methods."], "return_type": ["boolean"]}, "method_name": "markSupported", "method_description": "Tests if this input stream supports the mark\n and reset methods, which it does not.\nSee also:\n", "method_declar": ""}, {"params": [], "class_name": "CipherInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the next byte of data, or -1 if the end of the\n          stream is reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads the next byte of data from this input stream. The value\n byte is returned as an int in the range\n 0 to 255. If no byte is available\n because the end of the stream has been reached, the value\n -1 is returned. This method blocks until input data\n is available, the end of the stream is detected, or an exception\n is thrown.\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}, {"param_name": ["off"], "param_type": "int", "param_description": " the start offset in the destination array\n                   buf"}, {"param_name": ["len"], "param_type": "int", "param_description": " the maximum number of bytes read."}], "class_name": "CipherInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to len bytes of data from this input stream\n into an array of bytes. This method blocks until some input is\n available. If the first argument is null, up to\n len bytes are read and discarded.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["b"], "param_type": "byte[]", "param_description": " the buffer into which the data is read."}], "class_name": "CipherInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the total number of bytes read into the buffer, or\n             -1 is there is no more data because the end of\n             the stream has been reached."], "return_type": ["int"]}, "method_name": "read", "method_description": "Reads up to b.length bytes of data from this input\n stream into an array of bytes.\n \n\n The read method of InputStream calls\n the read method of three arguments with the arguments\n b, 0, and b.length.\nSee also:\n", "method_declar": ""}, {"params": [{"param_name": ["n"], "param_type": "long", "param_description": " the number of bytes to be skipped."}], "class_name": "CipherInputStream", "is_static": false, "return_value": {"return_name": [], "return_description": ["the actual number of bytes skipped."], "return_type": ["long"]}, "method_name": "skip", "method_description": "Skips n bytes of input from the bytes that can be read\n from this input stream without blocking.\n\n \nFewer bytes than requested might be skipped.\n The actual number of bytes skipped is equal to n or\n the result of a call to\n available,\n whichever is smaller.\n If n is less than zero, no bytes are skipped.\n\n \nThe actual number of bytes skipped is returned.\n", "method_declar": ""}], "class_name": "CipherInputStream", "Vars": null}