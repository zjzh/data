{"package_name": "javax.crypto", "subclass_list": [], "class_description": "This class defines the Service Provider Interface (SPI)\n for the Cipher class.\n All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a particular cipher algorithm. In order to create an instance of Cipher, which\n encapsulates an instance of this CipherSpi class, an\n application calls one of the\n Cipher#getInstance(java.lang.String)\n factory methods of the\n Cipher engine class and specifies the requested\n transformation.\n Optionally, the application may also specify the name of a provider. A transformation is a string that describes the operation (or\n set of operations) to be performed on the given input, to produce some\n output. A transformation always includes the name of a cryptographic\n algorithm (e.g., DES), and may be followed by a feedback mode and\n padding scheme. A transformation is of the form: (in the latter case,\n provider-specific default values for the mode and padding scheme are used).\n For example, the following is a valid transformation: A provider may supply a separate class for each combination\n of algorithm/mode/padding, or may decide to provide more generic\n classes representing sub-transformations corresponding to\n algorithm or algorithm/mode or algorithm//padding\n (note the double slashes),\n in which case the requested mode and/or padding are set automatically by\n the getInstance methods of Cipher, which invoke\n the engineSetMode and\n engineSetPadding\n methods of the provider's subclass of CipherSpi. A Cipher property in a provider master class may have one of\n the following formats: For example, a provider may supply a subclass of CipherSpi\n that implements DES/ECB/PKCS5Padding, one that implements\n DES/CBC/PKCS5Padding, one that implements\n DES/CFB/PKCS5Padding, and yet another one that implements\n DES/OFB/PKCS5Padding. That provider would have the following\n Cipher properties in its master class: Another provider may implement a class for each of the above modes\n (i.e., one class for ECB, one for CBC, one for CFB,\n and one for OFB), one class for PKCS5Padding,\n and a generic DES class that subclasses from CipherSpi.\n That provider would have the following\n Cipher properties in its master class: The getInstance factory method of the Cipher\n engine class follows these rules in order to instantiate a provider's\n implementation of CipherSpi for a\n transformation of the form \"algorithm\": The getInstance factory method of the Cipher\n engine class follows these rules in order to instantiate a provider's\n implementation of CipherSpi for a\n transformation of the form \"algorithm/mode/padding\": ", "class_type": "class", "typealias": [], "interface_list": [""], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "CipherSpi", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "\n", "method_declar": ""}], "class_name": "CipherSpi", "Vars": null}