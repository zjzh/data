{"package_name": "javax.security.auth", "subclass_list": [], "class_description": " A Subject represents a grouping of related information\n for a single entity, such as a person.\n Such information includes the Subject's identities as well as\n its security-related attributes\n (passwords and cryptographic keys, for example). Subjects may potentially have multiple identities.\n Each identity is represented as a Principal\n within the Subject.  Principals simply bind names to a\n Subject.  For example, a Subject that happens\n to be a person, Alice, might have two Principals:\n one which binds \"Alice Bar\", the name on her driver license,\n to the Subject, and another which binds,\n \"999-99-9999\", the number on her student identification card,\n to the Subject.  Both Principals refer to the same\n Subject even though each has a different name. A Subject may also own security-related attributes,\n which are referred to as credentials.\n Sensitive credentials that require special protection, such as\n private cryptographic keys, are stored within a private credential\n Set.  Credentials intended to be shared, such as\n public key certificates or Kerberos server tickets are stored\n within a public credential Set.  Different permissions\n are required to access and modify the different credential Sets. To retrieve all the Principals associated with a Subject,\n invoke the getPrincipals method.  To retrieve\n all the public or private credentials belonging to a Subject,\n invoke the getPublicCredentials method or\n getPrivateCredentials method, respectively.\n To modify the returned Set of Principals and credentials,\n use the methods defined in the Set class.\n For example: This Subject class implements Serializable.\n While the Principals associated with the Subject are serialized,\n the credentials associated with the Subject are not.\n Note that the java.security.Principal class\n does not implement Serializable.  Therefore all concrete\n Principal implementations associated with Subjects\n must implement Serializable. ", "class_type": "class", "typealias": [], "interface_list": ["Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [], "class_name": "Subject", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create an instance of a Subject\n with an empty Set of Principals and empty\n Sets of public and private credentials.\n\n \n The newly constructed Sets check whether this Subject\n has been set read-only before permitting subsequent modifications.\n The newly created Sets also prevent illegal modifications\n by ensuring that callers have sufficient permissions.\n\n \n To modify the Principals Set, the caller must have\n AuthPermission(\"modifyPrincipals\").\n To modify the public credential Set, the caller must have\n AuthPermission(\"modifyPublicCredentials\").\n To modify the private credential Set, the caller must have\n AuthPermission(\"modifyPrivateCredentials\").\n", "method_declar": ""}, {"params": [{"param_name": ["readOnly"], "param_type": "boolean", "param_description": " true if the Subject is to be read-only,\n          and false otherwise. "}, {"param_name": ["principals"], "param_type": "Set", "param_description": " the Set of Principals\n          to be associated with this Subject. "}, {"param_name": ["pubCredentials"], "param_type": "Set", "param_description": " the Set of public credentials\n          to be associated with this Subject. "}, {"param_name": ["privCredentials"], "param_type": "Set", "param_description": " the Set of private credentials\n          to be associated with this Subject."}], "class_name": "Subject", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create an instance of a Subject with\n Principals and credentials.\n\n \n The Principals and credentials from the specified Sets\n are copied into newly constructed Sets.\n These newly created Sets check whether this Subject\n has been set read-only before permitting subsequent modifications.\n The newly created Sets also prevent illegal modifications\n by ensuring that callers have sufficient permissions.\n\n \n To modify the Principals Set, the caller must have\n AuthPermission(\"modifyPrincipals\").\n To modify the public credential Set, the caller must have\n AuthPermission(\"modifyPublicCredentials\").\n To modify the private credential Set, the caller must have\n AuthPermission(\"modifyPrivateCredentials\").\n \n\n\n\n\n", "method_declar": ""}, {"params": [{"param_name": ["subject"], "param_type": "Subject", "param_description": " the Subject that the specified\n                  action will run as.  This parameter\n                  may be null. "}, {"param_name": ["action"], "param_type": "PrivilegedExceptionAction", "param_description": " the code to be run as the specified\n                  Subject. "}], "class_name": "Subject", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value returned by the\n                  PrivilegedExceptionAction's run method."], "return_type": ["T"]}, "method_name": "doAs", "method_description": "Perform work as a particular Subject.\n\n \n This method first retrieves the current Thread's\n AccessControlContext via\n AccessController.getContext,\n and then instantiates a new AccessControlContext\n using the retrieved context along with a new\n SubjectDomainCombiner (constructed using\n the provided Subject).\n Finally, this method invokes AccessController.doPrivileged,\n passing it the provided PrivilegedExceptionAction,\n as well as the newly constructed AccessControlContext.\n\n \n\n\n\n\n\n", "method_declar": ""}, {"params": [{"param_name": ["subject"], "param_type": "Subject", "param_description": " the Subject that the specified\n                  action will run as.  This parameter\n                  may be null. "}, {"param_name": ["action"], "param_type": "PrivilegedAction", "param_description": " the code to be run as the specified\n                  Subject. "}], "class_name": "Subject", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value returned by the PrivilegedAction's\n                  run method."], "return_type": ["T"]}, "method_name": "doAs", "method_description": "Perform work as a particular Subject.\n\n \n This method first retrieves the current Thread's\n AccessControlContext via\n AccessController.getContext,\n and then instantiates a new AccessControlContext\n using the retrieved context along with a new\n SubjectDomainCombiner (constructed using\n the provided Subject).\n Finally, this method invokes AccessController.doPrivileged,\n passing it the provided PrivilegedAction,\n as well as the newly constructed AccessControlContext.\n\n \n\n\n\n\n", "method_declar": ""}, {"params": [{"param_name": ["subject"], "param_type": "Subject", "param_description": " the Subject that the specified\n                  action will run as.  This parameter\n                  may be null. "}, {"param_name": ["action"], "param_type": "PrivilegedExceptionAction", "param_description": " the code to be run as the specified\n                  Subject. "}, {"param_name": ["acc"], "param_type": "AccessControlContext", "param_description": " the AccessControlContext to be tied to the\n                  specified subject and action. "}], "class_name": "Subject", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value returned by the\n                  PrivilegedExceptionAction's run method."], "return_type": ["T"]}, "method_name": "doAsPrivileged", "method_description": "Perform privileged work as a particular Subject.\n\n \n This method behaves exactly as Subject.doAs,\n except that instead of retrieving the current Thread's\n AccessControlContext, it uses the provided\n AccessControlContext.  If the provided\n AccessControlContext is null,\n this method instantiates a new AccessControlContext\n with an empty collection of ProtectionDomains.\n\n \n\n\n\n\n\n\n", "method_declar": ""}, {"params": [{"param_name": ["subject"], "param_type": "Subject", "param_description": " the Subject that the specified\n                  action will run as.  This parameter\n                  may be null. "}, {"param_name": ["action"], "param_type": "PrivilegedAction", "param_description": " the code to be run as the specified\n                  Subject. "}, {"param_name": ["acc"], "param_type": "AccessControlContext", "param_description": " the AccessControlContext to be tied to the\n                  specified subject and action. "}], "class_name": "Subject", "is_static": true, "return_value": {"return_name": [], "return_description": ["the value returned by the PrivilegedAction's\n                  run method."], "return_type": ["T"]}, "method_name": "doAsPrivileged", "method_description": "Perform privileged work as a particular Subject.\n\n \n This method behaves exactly as Subject.doAs,\n except that instead of retrieving the current Thread's\n AccessControlContext, it uses the provided\n AccessControlContext.  If the provided\n AccessControlContext is null,\n this method instantiates a new AccessControlContext\n with an empty collection of ProtectionDomains.\n\n \n\n\n\n\n\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " Object to be compared for equality with this\n          Subject."}], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the specified Object is equal to this\n          Subject."], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the specified Object with this Subject\n for equality.  Returns true if the given object is also a Subject\n and the two Subject instances are equivalent.\n More formally, two Subject instances are\n equal if their Principal and Credential\n Sets are equal.\n\n \n\n", "method_declar": ""}, {"params": [], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["The Set of Principals associated with this\n          Subject."], "return_type": ["Set<Principal>"]}, "method_name": "getPrincipals", "method_description": "Return the Set of Principals associated with this\n Subject.  Each Principal represents\n an identity for this Subject.\n\n \n The returned Set is backed by this Subject's\n internal Principal Set.  Any modification\n to the returned Set affects the internal\n Principal Set as well.\n\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Class", "param_description": " the returned Set of Principals will all be\n          instances of this class."}], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Set of Principals that are instances of the\n          specified Class."], "return_type": ["Set<T>"]}, "method_name": "getPrincipals", "method_description": "Return a Set of Principals associated with this\n Subject that are instances or subclasses of the specified\n Class.\n\n \n The returned Set is not backed by this Subject's\n internal Principal Set.  A new\n Set is created and returned for each method invocation.\n Modifications to the returned Set\n will not affect the internal Principal Set.\n\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Class", "param_description": " the returned Set of private credentials will all be\n          instances of this class."}], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Set of private credentials that are instances\n          of the  specified Class."], "return_type": ["Set<T>"]}, "method_name": "getPrivateCredentials", "method_description": "Return a Set of private credentials associated with this\n Subject that are instances or subclasses of the specified\n Class.\n\n \n The caller must have permission to access all of the\n requested Credentials, or a SecurityException\n will be thrown.\n\n \n The returned Set is not backed by this Subject's\n internal private Credential Set.  A new\n Set is created and returned for each method invocation.\n Modifications to the returned Set\n will not affect the internal private Credential Set.\n\n \n\n", "method_declar": ""}, {"params": [], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["A Set of private credentials held by this\n          Subject."], "return_type": ["Set<Object>"]}, "method_name": "getPrivateCredentials", "method_description": "Return the Set of private credentials held by this\n Subject.\n\n \n The returned Set is backed by this Subject's\n internal private Credential Set.  Any modification\n to the returned Set affects the internal private\n Credential Set as well.\n\n \n A caller requires permissions to access the Credentials\n in the returned Set, or to modify the\n Set itself.  A SecurityException\n is thrown if the caller does not have the proper permissions.\n\n \n While iterating through the Set,\n a SecurityException is thrown\n if the caller does not have permission to access a\n particular Credential.  The Iterator\n is nevertheless advanced to next element in the Set.\n\n \n\n", "method_declar": ""}, {"params": [], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["A Set of public credentials held by this\n          Subject."], "return_type": ["Set<Object>"]}, "method_name": "getPublicCredentials", "method_description": "Return the Set of public credentials held by this\n Subject.\n\n \n The returned Set is backed by this Subject's\n internal public Credential Set.  Any modification\n to the returned Set affects the internal public\n Credential Set as well.\n\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["c"], "param_type": "Class", "param_description": " the returned Set of public credentials will all be\n          instances of this class."}], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["a Set of public credentials that are instances\n          of the  specified Class."], "return_type": ["Set<T>"]}, "method_name": "getPublicCredentials", "method_description": "Return a Set of public credentials associated with this\n Subject that are instances or subclasses of the specified\n Class.\n\n \n The returned Set is not backed by this Subject's\n internal public Credential Set.  A new\n Set is created and returned for each method invocation.\n Modifications to the returned Set\n will not affect the internal public Credential Set.\n\n \n\n", "method_declar": ""}, {"params": [{"param_name": ["acc"], "param_type": "AccessControlContext", "param_description": " the AccessControlContext from which to retrieve\n          the Subject."}], "class_name": "Subject", "is_static": true, "return_value": {"return_name": [], "return_description": ["the Subject associated with the provided\n          AccessControlContext, or null\n          if no Subject is associated\n          with the provided AccessControlContext."], "return_type": ["Subject"]}, "method_name": "getSubject", "method_description": "Get the Subject associated with the provided\n AccessControlContext.\n\n \n The AccessControlContext may contain many\n Subjects (from nested doAs calls).\n In this situation, the most recent Subject associated\n with the AccessControlContext is returned.\n\n \n\n\n", "method_declar": ""}, {"params": [], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hashcode for this Subject."], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Returns a hashcode for this Subject.\n\n \n\n", "method_declar": ""}, {"params": [], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this Subject is read-only, false otherwise."], "return_type": ["boolean"]}, "method_name": "isReadOnly", "method_description": "Query whether this Subject is read-only.\n\n \n\n", "method_declar": ""}, {"params": [], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": [""], "return_type": []}, "method_name": "setReadOnly", "method_description": "Set this Subject to be read-only.\n\n \n Modifications (additions and removals) to this Subject's\n Principal Set and\n credential Sets will be disallowed.\n The destroy operation on this Subject's credentials will\n still be permitted.\n\n \n Subsequent attempts to modify the Subject's Principal\n and credential Sets will result in an\n IllegalStateException being thrown.\n Also, once a Subject is read-only,\n it can not be reset to being writable again.\n\n \n\n", "method_declar": ""}, {"params": [], "class_name": "Subject", "is_static": false, "return_value": {"return_name": [], "return_description": ["the String representation of this Subject."], "return_type": ["String"]}, "method_name": "toString", "method_description": "Return the String representation of this Subject.\n\n \n\n", "method_declar": ""}], "class_name": "Subject", "Vars": null}