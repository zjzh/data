{"package_name": "javax.security.auth.x500", "subclass_list": [], "class_description": " This class represents an X.500 Principal.\n X500Principals are represented by distinguished names such as\n \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\". This class can be instantiated by using a string representation\n of the distinguished name, or by using the ASN.1 DER encoded byte\n representation of the distinguished name.  The current specification\n for the string representation of a distinguished name is defined in\n RFC 2253: Lightweight\n Directory Access Protocol (v3): UTF-8 String Representation of\n Distinguished Names. This class, however, accepts string formats from\n both RFC 2253 and RFC 1779:\n A String Representation of Distinguished Names, and also recognizes\n attribute type keywords whose OIDs (Object Identifiers) are defined in\n RFC 3280: Internet X.509\n Public Key Infrastructure Certificate and CRL Profile. The string representation for this X500Principal\n can be obtained by calling the getName methods. Note that the getSubjectX500Principal and\n getIssuerX500Principal methods of\n X509Certificate return X500Principals representing the\n issuer and subject fields of the certificate. ", "class_type": "class", "typealias": [], "interface_list": ["Principal", "Serializable"], "class_inherit_list": ["Object"], "Methods": [{"params": [{"param_name": ["name"], "param_type": "String", "param_description": " an X.500 distinguished name in RFC 1779 or RFC 2253 format"}], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an X500Principal from a string representation of\n an X.500 distinguished name (ex:\n \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\").\n The distinguished name must be specified using the grammar defined in\n RFC 1779 or RFC 2253 (either format is acceptable).\n\n \nThis constructor recognizes the attribute type keywords\n defined in RFC 1779 and RFC 2253\n (and listed in getName(String format)),\n as well as the T, DNQ or DNQUALIFIER, SURNAME, GIVENNAME, INITIALS,\n GENERATION, EMAILADDRESS, and SERIALNUMBER keywords whose Object\n Identifiers (OIDs) are defined in RFC 3280 and its successor.\n Any other attribute type must be specified as an OID.\n\n \nThis implementation enforces a more restrictive OID syntax than\n defined in RFC 1779 and 2253. It uses the more correct syntax defined in\n RFC 4512, which\n specifies that OIDs contain at least 2 digits:\n\n \nnumericoid = number 1*( DOT number ) \n", "method_declar": ""}, {"params": [{"param_name": ["name"], "param_type": "String", "param_description": " an X.500 distinguished name in RFC 1779 or RFC 2253 format"}, {"param_name": ["keywordMap"], "param_type": "Map", "param_description": " an attribute type keyword map, where each key is a\n   keyword String that maps to a corresponding object identifier in String\n   form (a sequence of nonnegative integers separated by periods). The map\n   may be empty but never null."}], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an X500Principal from a string representation of\n an X.500 distinguished name (ex:\n \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\").\n The distinguished name must be specified using the grammar defined in\n RFC 1779 or RFC 2253 (either format is acceptable).\n\n \n This constructor recognizes the attribute type keywords specified\n in X500Principal(java.lang.String) and also recognizes additional\n keywords that have entries in the keywordMap parameter.\n Keyword entries in the keywordMap take precedence over the default\n keywords recognized by X500Principal(String). Keywords\n MUST be specified in all upper-case, otherwise they will be ignored.\n Improperly specified keywords are ignored; however if a keyword in the\n name maps to an improperly specified Object Identifier (OID), an\n IllegalArgumentException is thrown. It is permissible to\n have 2 different keywords that map to the same OID.\n\n \nThis implementation enforces a more restrictive OID syntax than\n defined in RFC 1779 and 2253. It uses the more correct syntax defined in\n RFC 4512, which\n specifies that OIDs contain at least 2 digits:\n\n \nnumericoid = number 1*( DOT number ) \n", "method_declar": ""}, {"params": [{"param_name": ["name"], "param_type": "byte[]", "param_description": " a byte array containing the distinguished name in ASN.1\n DER encoded form"}], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an X500Principal from a distinguished name in\n ASN.1 DER encoded form. The ASN.1 notation for this structure is as\n follows.\n \n", "method_declar": ""}, {"params": [{"param_name": ["is"], "param_type": "InputStream", "param_description": " an InputStream containing the distinguished\n          name in ASN.1 DER encoded form"}], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": "", "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an X500Principal from an InputStream\n containing the distinguished name in ASN.1 DER encoded form.\n The ASN.1 notation for this structure is supplied in the\n documentation for\n X500Principal(byte[] name).\n\n \n The read position of the input stream is positioned\n to the next available byte after the encoded distinguished name.\n", "method_declar": ""}, {"params": [{"param_name": ["o"], "param_type": "Object", "param_description": " Object to be compared for equality with this\n          X500Principal"}], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the specified Object is equal\n          to this X500Principal, false otherwise"], "return_type": ["boolean"]}, "method_name": "equals", "method_description": "Compares the specified Object with this\n X500Principal for equality.\n\n \n Specifically, this method returns true if\n the Object o is an X500Principal\n and if the respective canonical string representations\n (obtained via the getName(X500Principal.CANONICAL) method)\n of this object and o are equal.\n\n \n This implementation is compliant with the requirements of RFC 3280.\n", "method_declar": ""}, {"params": [], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a byte array containing the distinguished name in ASN.1 DER\n encoded form"], "return_type": ["byte[]"]}, "method_name": "getEncoded", "method_description": "Returns the distinguished name in ASN.1 DER encoded form. The ASN.1\n notation for this structure is supplied in the documentation for\n X500Principal(byte[] name).\n\n \nNote that the byte array returned is cloned to protect against\n subsequent modifications.\n", "method_declar": ""}, {"params": [{"param_name": ["format"], "param_type": "String", "param_description": " the format to use"}], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this X500Principal\n          using the specified format"], "return_type": ["String"]}, "method_name": "getName", "method_description": "Returns a string representation of the X.500 distinguished name\n using the specified format. Valid values for the format are\n \"RFC1779\", \"RFC2253\", and \"CANONICAL\" (case insensitive).\n\n \n If \"RFC1779\" is specified as the format,\n this method emits the attribute type keywords defined in\n RFC 1779 (CN, L, ST, O, OU, C, STREET).\n Any other attribute type is emitted as an OID.\n\n \n If \"RFC2253\" is specified as the format,\n this method emits the attribute type keywords defined in\n RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID).\n Any other attribute type is emitted as an OID.\n Under a strict reading, RFC 2253 only specifies a UTF-8 string\n representation. The String returned by this method is the\n Unicode string achieved by decoding this UTF-8 representation.\n\n \n If \"CANONICAL\" is specified as the format,\n this method returns an RFC 2253 conformant string representation\n with the following additional canonicalizations:\n\n \n Additional standard formats may be introduced in the future.\n", "method_declar": ""}, {"params": [], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": [], "return_description": ["the distinguished name of this X500Principal"], "return_type": ["String"]}, "method_name": "getName", "method_description": "Returns a string representation of the X.500 distinguished name using\n the format defined in RFC 2253.\n\n \nThis method is equivalent to calling\n getName(X500Principal.RFC2253).\n", "method_declar": ""}, {"params": [{"param_name": ["format"], "param_type": "String", "param_description": " the format to use"}, {"param_name": ["oidMap"], "param_type": "Map", "param_description": " an OID map, where each key is an object identifier in\n  String form (a sequence of nonnegative integers separated by periods)\n  that maps to a corresponding attribute type keyword String.\n  The map may be empty but never null."}], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this X500Principal\n          using the specified format"], "return_type": ["String"]}, "method_name": "getName", "method_description": "Returns a string representation of the X.500 distinguished name\n using the specified format. Valid values for the format are\n \"RFC1779\" and \"RFC2253\" (case insensitive). \"CANONICAL\" is not\n permitted and an IllegalArgumentException will be thrown.\n\n \nThis method returns Strings in the format as specified in\n getName(java.lang.String) and also emits additional attribute type\n keywords for OIDs that have entries in the oidMap\n parameter. OID entries in the oidMap take precedence over the default\n OIDs recognized by getName(String).\n Improperly specified OIDs are ignored; however if an OID\n in the name maps to an improperly specified keyword, an\n IllegalArgumentException is thrown.\n\n \n Additional standard formats may be introduced in the future.\n\n \n Warning: additional attribute type keywords may not be recognized\n by other implementations; therefore do not use this method if\n you are unsure if these keywords will be recognized by other\n implementations.\n", "method_declar": ""}, {"params": [], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a hash code for this X500Principal"], "return_type": ["int"]}, "method_name": "hashCode", "method_description": "Return a hash code for this X500Principal.\n\n \n The hash code is calculated via:\n getName(X500Principal.CANONICAL).hashCode()\n", "method_declar": ""}, {"params": [], "class_name": "X500Principal", "is_static": false, "return_value": {"return_name": [], "return_description": ["a string representation of this X500Principal"], "return_type": ["String"]}, "method_name": "toString", "method_description": "Return a user-friendly string representation of this\n X500Principal.\n", "method_declar": ""}], "class_name": "X500Principal", "Vars": null}