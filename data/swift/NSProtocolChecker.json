{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSProxy"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Initializes a newly allocated NSProtocolChecker instance that will forward any messages in aProtocol to anObject, the protocol checker\u2019s target.", "is_static": false, "method_name": "init", "class_name": "NSProtocolChecker", "method_declar": "init(target anObject: NSObject, protocol aProtocol: Protocol)", "params": [{"param_type": "NSObject", "param_description": "", "param_name": ["target", "anObject"]}, {"param_type": "Protocol", "param_description": "", "param_name": ["protocol", "aProtocol"]}]}], "class_type": "class", "class_name": "NSProtocolChecker", "Vars": [{"var_name": "`protocol`", "var_type": "Protocol", "var_description": "Returns the protocol object the receiver uses.", "is_static": false}, {"var_name": "target", "var_type": "NSObject", "var_description": "Returns the target of the receiver.", "is_static": false}], "interface_list": [], "class_description": "A NSProtocolChecker object can be particularly useful when an object with many methods, only a few of which ought to be remotely accessible, is made available using the distributed objects system.\nA protocol checker acts as a kind of proxy; when it receives a message that is in its designated protocol, it forwards the message to its target and consequently appears to be the target object itself. However, when it receives a message not in its protocol, it raises an invalidArgumentException to indicate that the message isn\u2019t allowed, whether or not the target object implements the method.\nTypically, an object that is to be distributed (yet must restrict messages) creates an NSProtocolChecker for itself and returns the checker rather than returning itself in response to any messages. The object might also register the checker as the root object of an NSConnection.\nThe object should be careful about vending references to self\u2014the protocol checker will convert a return value of self to indicate the checker rather than the object for any messages forwarded by the checker, but direct references to the object (bypassing the checker) could be passed around by other objects.\n", "package_name": "foundation"}