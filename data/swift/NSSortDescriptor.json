{"package_name": "foundation", "subclass_list": [], "class_description": "You construct instances of NSSortDescriptor by specifying the key path of the property to be compared and the order of the sort (ascending or descending). Optionally, you can also specify a selector to use to perform the comparison, which allows you to specify other comparison selectors such as localizedStandardCompare(_:) and localizedCaseInsensitiveCompare(_:). Sorting raises an exception if the objects to be sorted do not respond to the sort descriptor\u2019s comparison selector. \nYou can use sort descriptors to, for example:\nSorting an array (an instance of NSArray or NSMutableArray\u2014see sortedArray(using:) and sort(using:))\nComparing two objects directly (see compare(_:to:))\nSpecifying the order of objects returned from a Core Data fetch request (see sortDescriptors)\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["key"], "param_type": "String", "param_description": ""}, {"param_name": ["ascending"], "param_type": "Bool", "param_description": "true if the receiver specifies sorting in ascending order, otherwise false."}], "class_name": "NSSortDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["A sort descriptor initialized with the specified key path and sort order, and the default comparison selector (compare)."], "return_type": []}, "method_name": "init", "method_description": "Initializes a sort descriptor a given key path and sort order.", "method_declar": "init(key: String?, ascending: Bool)"}, {"params": [{"param_name": ["key"], "param_type": "String", "param_description": "The key path to use when performing a comparison.For information about key paths, see Key-Value Coding Programming Guide."}, {"param_name": ["ascending"], "param_type": "Bool", "param_description": "true if the receiver specifies sorting in ascending order, otherwise false."}, {"param_name": ["selector"], "param_type": "Selector", "param_description": "The method to use when comparing the properties of objects, for example localizedStandardCompare(_:). The selector must specify a method implemented by the value of the property identified by the key path. The selector used for the comparison is passed a single parameter, the object to compare against, and must return the appropriate ComparisonResult constant."}], "class_name": "NSSortDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["A sort descriptor initialized with the specified key path, sort order, and comparison selector."], "return_type": []}, "method_name": "init", "method_description": "Initializes a sort descriptor with a given key path, ordering, and comparison selector.", "method_declar": "init(key: String?, ascending: Bool, selector: Selector?)"}, {"params": [{"param_name": ["key"], "param_type": "String", "param_description": "The property key to use when performing a comparison.For information about key paths, see Key-Value Coding Programming Guide."}, {"param_name": ["ascending"], "param_type": "Bool", "param_description": "true if the receiver specifies sorting in ascending order, otherwise false."}, {"param_name": ["comparator", "cmptr"], "param_type": "@escaping Comparator", "param_description": "A comparator block. "}], "class_name": "NSSortDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["A sort descriptor initialized with the specified key, ordering, and comparator."], "return_type": []}, "method_name": "init", "method_description": "Initializes a sort descriptor with a given key path and ordering, and a comparator block.", "method_declar": "init(key: String?, ascending: Bool, comparator cmptr: @escaping Comparator)"}, {"params": [{"param_name": ["object1"], "param_type": "Any", "param_description": "The object to compare with object2. This object must have a property accessible using the key-path specified by key."}, {"param_name": ["to", "object2"], "param_type": "Any", "param_description": "The object to compare with object1. This object must have a property accessible using the key-path specified by key."}], "class_name": "NSSortDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["ComparisonResult.orderedAscending if object1 is less than object2, ComparisonResult.orderedDescending if object1 is greater than object2, or ComparisonResult.orderedSame if object1 is equal to object2."], "return_type": ["ComparisonResul"]}, "method_name": "compare", "method_description": "Returns a comparison result value that indicates the sort order of two objects.", "method_declar": "func compare(_ object1: Any, to object2: Any) -> ComparisonResult"}, {"params": [], "class_name": "NSSortDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "allowEvaluation", "method_description": "Forces a sort descriptor that was securely decoded to allow evaluation.", "method_declar": "func allowEvaluation()"}, {"params": [{"param_name": ["coder"], "param_type": "NSCoder", "param_description": ""}], "class_name": "NSSortDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init?(coder: NSCoder)"}, {"params": [{"param_name": ["keyPath"], "param_type": "KeyPath<Root, Value>", "param_description": ""}, {"param_name": ["ascending"], "param_type": "Bool", "param_description": ""}], "class_name": "NSSortDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "convenience init<Root, Value>(keyPath: KeyPath<Root, Value>, ascending: Bool)"}, {"params": [{"param_name": ["keyPath"], "param_type": "KeyPath<Root, Value>", "param_description": ""}, {"param_name": ["ascending"], "param_type": "Bool", "param_description": ""}, {"param_name": ["comparator", "cmptr"], "param_type": "@escaping Comparator", "param_description": ""}], "class_name": "NSSortDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "convenience init<Root, Value>(keyPath: KeyPath<Root, Value>, ascending: Bool, comparator cmptr: @escaping Comparator)"}], "class_name": "NSSortDescriptor", "Vars": [{"var_description": "A Boolean value that indicates whether the receiver specifies sorting in ascending order.", "var_type": "Bool", "is_static": false, "var_name": "ascending"}, {"var_description": "The key that specifies the property to be compared during sorting.", "var_type": "String", "is_static": false, "var_name": "key"}, {"var_description": "The key path that specifies the property to be compared during sorting.", "var_type": "AnyKeyPath", "is_static": false, "var_name": "keyPath"}, {"var_description": "The selector used when comparing objects.", "var_type": "Selector", "is_static": false, "var_name": "selector"}, {"var_description": "The comparator for the sort descriptor.", "var_type": "Comparator", "is_static": false, "var_name": "comparator"}, {"var_description": "Returns a sort descriptor with the sort order reversed.", "var_type": "Any", "is_static": false, "var_name": "reversedSortDescriptor"}]}