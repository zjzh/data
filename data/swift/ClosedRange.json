{"Methods": [], "Vars": [], "class_name": "ClosedRange", "interface_list": ["BidirectionalCollection", "Collection", "CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "Hashable", "RandomAccessCollection", "RangeExpression", "Sequence"], "class_description": "You create a ClosedRange instance by using the closed range operator (...).\nA ClosedRange instance contains both its lower bound and its upper bound.\nBecause a closed range includes its upper bound, a closed range whose lower bound is equal to the upper bound contains that value. Therefore, a ClosedRange instance cannot represent an empty range.\nWhen a closed range uses integers as its lower and upper bounds, or any other type that conforms to the Strideable protocol with an integer stride, you can use that range in a for-in loop or with any sequence or collection method. The elements of the range are the consecutive values from its lower bound up to, and including, its upper bound.\nBecause floating-point types such as Float and Double are their own Stride types, they cannot be used as the bounds of a countable range. If you need to iterate over consecutive floating-point values, see the stride(from:through:by:) function.\n", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}