{"subclass_list": [], "typealias": [], "class_inherit_list": ["Port"], "Methods": [{"return_value": {"return_name": [""], "return_description": ["An NSMachPort object that uses machPort to send or receive messages."], "return_type": ["Por"]}, "method_description": "Creates and returns a port object configured with the given Mach port.", "is_static": false, "method_name": "port", "class_name": "NSMachPort", "method_declar": "class func port(withMachPort machPort: UInt32) -> Port", "params": [{"param_type": "UInt32", "param_description": "The Mach port for the new port. This parameter should originally be of type mach_port_t. ", "param_name": ["withMachPort", "machPort"]}]}, {"return_value": {"return_name": [""], "return_description": ["An NSMachPort object that uses machPort to send or receive messages."], "return_type": ["Por"]}, "method_description": "Creates and returns a port object configured with the specified options and the given Mach port.  ", "is_static": false, "method_name": "port", "class_name": "NSMachPort", "method_declar": "class func port(withMachPort machPort: UInt32, options f: NSMachPort.Options = []) -> Port", "params": [{"param_type": "UInt32", "param_description": "The Mach port for the new port. This parameter should originally be of type mach_port_t. ", "param_name": ["withMachPort", "machPort"]}, {"param_type": "NSMachPort.Options = []", "param_description": "Specifies options for what to do with the underlying port rights when the NSMachPort object is invalidated or destroyed. For a list of constants, see Mach Port Rights. ", "param_name": ["options", "f"]}]}, {"return_value": {"return_name": [], "return_description": ["Returns an initialized NSMachPort object that uses machPort to send or receive messages. The returned object might be different than the original receiver"], "return_type": []}, "method_description": "Initializes a newly allocated NSMachPort object with a given Mach port.", "is_static": false, "method_name": "init", "class_name": "NSMachPort", "method_declar": "init(machPort: UInt32)", "params": [{"param_type": "UInt32", "param_description": "The Mach port for the new port. This parameter should originally be of type mach_port_t. ", "param_name": ["machPort"]}]}, {"return_value": {"return_name": [], "return_description": ["Returns an initialized NSMachPort object that uses machPort to send or receive messages. The returned object might be different than the original receiver"], "return_type": []}, "method_description": "Initializes a newly allocated NSMachPort object with a given Mach port and the specified options. ", "is_static": false, "method_name": "init", "class_name": "NSMachPort", "method_declar": "init(machPort: UInt32, options f: NSMachPort.Options = [])", "params": [{"param_type": "UInt32", "param_description": "The Mach port for the new port. This parameter should originally be of type mach_port_t. ", "param_name": ["machPort"]}, {"param_type": "NSMachPort.Options = []", "param_description": "Specifies options for what to do with the underlying port rights when the NSMachPort object is invalidated or destroyed. For a list of constants, see Mach Port Rights. ", "param_name": ["options", "f"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the receiver from the run loop mode mode of runLoop.", "is_static": false, "method_name": "remove", "class_name": "NSMachPort", "method_declar": "func remove(from runLoop: RunLoop, forMode mode: RunLoop.Mode)", "params": [{"param_type": "RunLoop", "param_description": "The run loop from which to remove the receiver.", "param_name": ["from", "runLoop"]}, {"param_type": "RunLoop.Mode", "param_description": "The run loop mode from which to remove the receiver.", "param_name": ["forMode", "mode"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Schedules the receiver into the run loop mode mode of runLoop.", "is_static": false, "method_name": "schedule", "class_name": "NSMachPort", "method_declar": "func schedule(in runLoop: RunLoop, forMode mode: RunLoop.Mode)", "params": [{"param_type": "RunLoop", "param_description": "The run loop to which to add the receiver.", "param_name": ["in", "runLoop"]}, {"param_type": "RunLoop.Mode", "param_description": "The run loop mode in which to add the receiver.", "param_name": ["forMode", "mode"]}]}, {"return_value": {"return_name": [""], "return_description": ["The receiver\u2019s delegate."], "return_type": ["NSMachPortDelegat"]}, "method_description": "Returns the receiver\u2019s delegate.", "is_static": false, "method_name": "delegate", "class_name": "NSMachPort", "method_declar": "func delegate() -> NSMachPortDelegate?", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the receiver\u2019s delegate to a given object.", "is_static": false, "method_name": "setDelegate", "class_name": "NSMachPort", "method_declar": "func setDelegate(_ anObject: NSMachPortDelegate?)", "params": [{"param_type": "NSMachPortDelegate", "param_description": "The delegate for the receiver.", "param_name": ["anObject"]}]}], "class_type": "class", "class_name": "NSMachPort", "Vars": [{"var_name": "machPort", "var_type": "UInt32", "var_description": "The Mach port used by the receiver, represented as an integer.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "NSMachPort is a subclass of Port that wraps a Mach port, the fundamental communication port in macOS. NSMachPort allows for local (on the same machine) communication only. A companion class, SocketPort, allows for both local and remote distributed object communication, but may be more expensive than NSMachPort for the local case.\nTo use NSMachPort effectively, you should be familiar with Mach ports, port access rights, and Mach messages. See the Mach\u00a0OS documentation for more information.\nNote\nNSMachPort conforms to the NSCoding protocol, but only supports coding by an NSPortCoder. Port and its subclasses do not support archiving.\n", "package_name": "foundation"}