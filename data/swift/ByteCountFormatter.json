{"package_name": "foundation", "subclass_list": [], "class_description": "", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["Formatter"], "Methods": [{"params": [{"param_name": ["fromByteCount", "byteCount"], "param_type": "Int64", "param_description": "The byte count."}, {"param_name": ["countStyle"], "param_type": "ByteCountFormatter.CountStyle", "param_description": "The formatter style. See ByteCountFormatter.CountStyle for possible values."}], "class_name": "ByteCountFormatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string containing the formatted byteCount value."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Converts a byte count into the specified string format without creating an NSNumber object.", "method_declar": "class func string(fromByteCount byteCount: Int64, countStyle: ByteCountFormatter.CountStyle) -> String"}, {"params": [{"param_name": ["fromByteCount", "byteCount"], "param_type": "Int64", "param_description": "The byte count."}], "class_name": "ByteCountFormatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string containing the formatted byteCount value."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Converts a byte count into a string without creating an NSNumber object.", "method_declar": "func string(fromByteCount byteCount: Int64) -> String"}], "class_name": "ByteCountFormatter", "Vars": [{"var_description": "Specify the formatting context for the formatted string.", "var_type": "Formatter.Context", "is_static": false, "var_name": "formattingContext"}, {"var_description": "Specify the number of bytes to be used for kilobytes.", "var_type": "ByteCountFormatter.CountStyle", "is_static": false, "var_name": "countStyle"}, {"var_description": "Determines whether to allow more natural display of some values.", "var_type": "Bool", "is_static": false, "var_name": "allowsNonnumericFormatting"}, {"var_description": "Determines whether to include the number of bytes after the formatted string.", "var_type": "Bool", "is_static": false, "var_name": "includesActualByteCount"}, {"var_description": "Determines the display style of the size representation.", "var_type": "Bool", "is_static": false, "var_name": "isAdaptive"}, {"var_description": "Specify the units that can be used in the output.", "var_type": "ByteCountFormatter.Units", "is_static": false, "var_name": "allowedUnits"}, {"var_description": "Determines whether to include the count in the resulting formatted string.", "var_type": "Bool", "is_static": false, "var_name": "includesCount"}, {"var_description": "Determines whether to include the units in the resulting formatted string.", "var_type": "Bool", "is_static": false, "var_name": "includesUnit"}, {"var_description": "Determines whether to zero pad fraction digits so a consistent number of characters is displayed in a representation.", "var_type": "Bool", "is_static": false, "var_name": "zeroPadsFractionDigits"}]}