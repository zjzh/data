{"class_description": "NSMutableOrderedSet objects are not like C arrays. That is, even though you may specify a size when you create a mutable ordered set, the specified size is regarded as a \u201chint\u201d; the actual size of the set is still 0. This means that you cannot insert an object at an index greater than the current count of an set. For example, if a set contains two objects, its size is 2, so you can add objects at indices 0, 1, or 2. Index 3 is illegal and out of bounds; if you try to add an object at index 3 (when the size of the array is 2), NSMutableOrderedSet raises an exception.\n", "Methods": [{"method_description": "Returns an initialized mutable ordered set with a given initial capacity.", "method_name": "init", "params": [{"param_type": "Int", "param_description": "The initial capacity of the new ordered set.", "param_name": ["capacity", "numItems"]}], "class_name": "NSMutableOrderedSet", "method_declar": "init(capacity numItems: Int)", "return_value": {"return_description": ["An initialized mutable ordered set with initial capacity to hold numItems members."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated mutable ordered set.", "method_name": "init", "params": [], "class_name": "NSMutableOrderedSet", "method_declar": "init()", "return_value": {"return_description": ["A mutable ordered set."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends a given object to the end of the mutable ordered set, if it is not already a member.", "method_name": "add", "params": [{"param_type": "Any", "param_description": "The object to add to the set.", "param_name": ["object"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func add(_ object: Any)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends the given number of objects from a given C array to the end of the mutable ordered set.", "method_name": "add", "params": [{"param_type": "UnsafePointer<AnyObject>", "param_description": "A C array of objects.", "param_name": ["objects"]}, {"param_type": "Int", "param_description": "The number of values from the objects C array to append to the mutable ordered set. This number will be the count of the new array\u2014it must not be negative or greater than the number of elements in objects.", "param_name": ["count"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func add(_ objects: UnsafePointer<AnyObject>?, count: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends to the end of the mutable ordered set each object contained in a given array that is not already a member.", "method_name": "addObjects", "params": [{"param_type": "[Any]", "param_description": "An array of objects to add to the set.", "param_name": ["from", "array"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func addObjects(from array: [Any])", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Inserts the given object at the specified index of the mutable ordered set, if it is not already a member.", "method_name": "insert", "params": [{"param_type": "Any", "param_description": "The object to insert into the set\u2019s content.", "param_name": ["object"]}, {"param_type": "Int", "param_description": "The index in the mutable ordered set at which to insert object. This value must not be greater than the count of elements in the array.ImportantImportant: Raises an rangeException if idx is greater than the number of elements in the mutable ordered set.", "param_name": ["at", "idx"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func insert(_ object: Any, at idx: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Inserts the objects in the array at the specified indexes.", "method_name": "insert", "params": [{"param_type": "[Any]", "param_description": "An array of objects to insert into the mutable ordered set.", "param_name": ["objects"]}, {"param_type": "IndexSet", "param_description": "The indexes at which the objects in objects should be inserted. The count of locations in indexes must equal the count of objects.", "param_name": ["at", "indexes"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func insert(_ objects: [Any], at indexes: IndexSet)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes a given object from the mutable ordered set.", "method_name": "remove", "params": [{"param_type": "Any", "param_description": "The object to remove from the mutable ordered set.", "param_name": ["object"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func remove(_ object: Any)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes a the object at the specified index from the mutable ordered set.", "method_name": "removeObject", "params": [{"param_type": "Int", "param_description": "The index of the object to remove from the mutable ordered set. The value must not exceed the bounds of the set.ImportantRaises an rangeException if index is beyond the end of the mutable ordered set.", "param_name": ["at", "idx"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func removeObject(at idx: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the objects at the specified indexes from the mutable ordered set.", "method_name": "removeObjects", "params": [{"param_type": "IndexSet", "param_description": "The indexes of the objects to remove from the mutable ordered set. The locations specified by indexes must lie within the bounds of the mutable ordered .", "param_name": ["at", "indexes"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func removeObjects(at indexes: IndexSet)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the objects in the array from the mutable ordered set.", "method_name": "removeObjects", "params": [{"param_type": "[Any]", "param_description": "An array containing the objects to be removed from the receiving mutable ordered set.", "param_name": ["in", "array"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func removeObjects(in array: [Any])", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes from the mutable ordered set each of the objects within a given range.", "method_name": "removeObjects", "params": [{"param_type": "NSRange", "param_description": "The range of the objects to remove from the mutable ordered set.", "param_name": ["in", "range"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func removeObjects(in range: NSRange)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes all the objects from the mutable ordered set.", "method_name": "removeAllObjects", "params": [], "class_name": "NSMutableOrderedSet", "method_declar": "func removeAllObjects()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces the object at the specified index with the new object.", "method_name": "replaceObject", "params": [{"param_type": "Int", "param_description": "The index of the object to be replaced. This value must not exceed the bounds of the mutable ordered set.ImportantRaises an rangeException if index is beyond the end of the mutable ordered set.", "param_name": ["at", "idx"]}, {"param_type": "Any", "param_description": "The object with which to replace the object at the index in the ordered set specified by idx.", "param_name": ["with", "object"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func replaceObject(at idx: Int, with object: Any)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces the objects at the specified indexes with the new objects.", "method_name": "replaceObjects", "params": [{"param_type": "IndexSet", "param_description": "The indexes of the objects to be replaced.", "param_name": ["at", "indexes"]}, {"param_type": "[Any]", "param_description": "The objects with which to replace the objects in the receiving mutable ordered set at the indexes specified by indexes.The count of locations in indexes must equal the count of objects.", "param_name": ["with", "objects"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func replaceObjects(at indexes: IndexSet, with objects: [Any])", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces the objects in the receiving mutable ordered set at the range with the specified number of objects from a given C array.", "method_name": "replaceObjects", "params": [{"param_type": "NSRange", "param_description": "The range of the objects to replace.", "param_name": ["in", "range"]}, {"param_type": "UnsafePointer<AnyObject>", "param_description": "A C array of objects.", "param_name": ["with", "objects"]}, {"param_type": "Int", "param_description": "The number of values from the objects C array to insert in place of the objects in range. This number will be the count of the new array\u2014it must not be negative or greater than the number of elements in objects.", "param_name": ["count"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func replaceObjects(in range: NSRange, with objects: UnsafePointer<AnyObject>?, count: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends or replaces the object at the specified index.", "method_name": "setObject", "params": [{"param_type": "Any", "param_description": "The object to insert or append.", "param_name": ["obj"]}, {"param_type": "Int", "param_description": "The index. If the index is equal to the length of the collection, then it inserts the object at that index, otherwise it replaces the object at that index with the given object.", "param_name": ["at", "idx"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func setObject(_ obj: Any, at idx: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Moves the objects at the specified indexes to the new location.", "method_name": "moveObjects", "params": [{"param_type": "IndexSet", "param_description": "The indexes of the objects to move.", "param_name": ["at", "indexes"]}, {"param_type": "Int", "param_description": "The index in the mutable ordered set at which to insert the objects. The objects being moved are first removed from the set, then this index is used to find the location at which to insert the moved objects.", "param_name": ["to", "idx"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func moveObjects(at indexes: IndexSet, to idx: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Exchanges the object at the specified index with the object at the other index.", "method_name": "exchangeObject", "params": [{"param_type": "Int", "param_description": "The index of the first object.ImportantRaises an rangeException if index is beyond the end of the mutable ordered set.", "param_name": ["at", "idx1"]}, {"param_type": "Int", "param_description": "The index of the second object.ImportantRaises an rangeException if index is beyond the end of the mutable ordered set.", "param_name": ["withObjectAt", "idx2"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func exchangeObject(at idx1: Int, withObjectAt idx2: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Evaluates a given predicate against the mutable ordered set\u2019s content and leaves only objects that match.", "method_name": "filter", "params": [{"param_type": "NSPredicate", "param_description": "", "param_name": ["using", "p"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func filter(using p: NSPredicate)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Sorts the receiving ordered set using a given array of sort descriptors.", "method_name": "sort", "params": [{"param_type": "[NSSortDescriptor]", "param_description": "An array containing the NSSortDescriptor objects to use to sort the receiving ordered set\u2019s contents.", "param_name": ["using", "sortDescriptors"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func sort(using sortDescriptors: [NSSortDescriptor])", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Sorts the mutable ordered set using the comparison method specified by the comparator block.", "method_name": "sort", "params": [{"param_type": "(Any, Any) -> ComparisonResult", "param_description": "A comparator block.", "param_name": ["comparator", "cmptr"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func sort(comparator cmptr: (Any, Any) -> ComparisonResult)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "Sorts the mutable ordered set using the specified options and the comparison method specified by a given comparator block.", "method_name": "sort", "params": [{"param_type": "NSSortOptions", "param_description": "A bitmask that specifies the options for the sort (whether it should be performed concurrently and whether it should be performed stably).", "param_name": ["options", "opts"]}, {"param_type": "(Any, Any) -> ComparisonResult", "param_description": "A comparator block.", "param_name": ["usingComparator", "cmptr"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func sort(options opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "Sorts the specified range of the mutable ordered set using the specified options and the comparison method specified by a given comparator block.", "method_name": "sortRange", "params": [{"param_type": "NSRange", "param_description": "The range to sort.", "param_name": ["range"]}, {"param_type": "NSSortOptions", "param_description": "A bitmask that specifies the options for the sort (whether it should be performed concurrently and whether it should be performed stably).", "param_name": ["options", "opts"]}, {"param_type": "(Any, Any) -> ComparisonResult", "param_description": "A comparator block.", "param_name": ["usingComparator", "cmptr"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func sortRange(_ range: NSRange, options opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "Removes from the receiving ordered set each object that isn\u2019t a member of another ordered set.", "method_name": "intersect", "params": [{"param_type": "NSOrderedSet", "param_description": "The ordered set with which to perform the intersection.", "param_name": ["other"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func intersect(_ other: NSOrderedSet)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes from the receiving ordered set each object that isn\u2019t a member of another set.", "method_name": "intersectSet", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set with which to perform the intersection.", "param_name": ["other"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func intersectSet(_ other: Set<AnyHashable>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes each object in another given ordered set from the receiving mutable ordered set, if present.", "method_name": "minus", "params": [{"param_type": "NSOrderedSet", "param_description": "The ordered set of objects to remove from the receiving set.", "param_name": ["other"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func minus(_ other: NSOrderedSet)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes each object in another given set from the receiving mutable ordered set, if present.", "method_name": "minusSet", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set of objects to remove from the receiving set.", "param_name": ["other"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func minusSet(_ other: Set<AnyHashable>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds each object in another given ordered set to the receiving mutable ordered set, if not present.", "method_name": "union", "params": [{"param_type": "NSOrderedSet", "param_description": "The set of objects to add to the receiving mutable ordered set.", "param_name": ["other"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func union(_ other: NSOrderedSet)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds each object in another given set to the receiving mutable ordered set, if not present.", "method_name": "unionSet", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set of objects to add to the receiving mutable ordered set.", "param_name": ["other"]}], "class_name": "NSMutableOrderedSet", "method_declar": "func unionSet(_ other: Set<AnyHashable>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "NSCoder", "param_description": "", "param_name": ["coder", "aDecoder"]}], "class_name": "NSMutableOrderedSet", "method_declar": "init?(coder aDecoder: NSCoder)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": ["NSOrderedSet"], "class_name": "NSMutableOrderedSet", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "Sequence"], "package_name": "foundation", "subclass_list": []}