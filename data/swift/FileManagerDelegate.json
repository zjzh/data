{"package_name": "foundation", "subclass_list": [], "class_description": "The FileManagerDelegate protocol defines optional methods for managing operations involving the copying, moving, linking, or removal of files and directories. When you use an FileManager object to initiate a copy, move, link, or remove operation, the file manager asks its delegate whether the operation should begin at all and whether it should proceed when an error occurs.\nThe methods of this protocol accept either NSURL or NSString objects. The file manager always prefers methods that take an NSURL object over those that take an NSString object.\nYou should associate your delegate with a unique instance of the FileManager class, as opposed to the shared instance. \n", "class_type": "protocol", "typealias": [], "interface_list": [], "class_inherit_list": ["NSObjectProtocol"], "Methods": [{"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that is attempting to move the file or directory."}, {"param_name": ["shouldMoveItemAt", "srcURL"], "param_type": "URL", "param_description": "The URL of the file or directory that the file manager wants to move."}, {"param_name": ["to", "dstURL"], "param_type": "URL", "param_description": "The URL specifying the new location for the file or directory."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the item should be moved or false if it should not be moved. If you do not implement this method, the file manager assumes a response of true."], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the file manager should move the specified item to the new URL. ", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldMoveItemAt srcURL: URL, to dstURL: URL) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that is attempting to move the file or directory."}, {"param_name": ["shouldMoveItemAtPath", "srcPath"], "param_type": "String", "param_description": "The path to the file or directory that the file manager wants to move."}, {"param_name": ["toPath", "dstPath"], "param_type": "String", "param_description": "The new path for the file or directory."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed, otherwise false. If you do not implement this method, the file manager assumes a response of true."], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the file manager should move the specified item to the new path.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldMoveItemAtPath srcPath: String, toPath dstPath: String) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that attempted to move the item."}, {"param_name": ["shouldProceedAfterError", "error"], "param_type": "Error", "param_description": "The error that occurred while trying to move the item in srcURL."}, {"param_name": ["movingItemAt", "srcURL"], "param_type": "URL", "param_description": "The URL of the file or directory that the file manager tried to move."}, {"param_name": ["to", "dstURL"], "param_type": "URL", "param_description": "The URL of the intended destination for the item in srcURL."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed or false if it should be aborted. If you do not implement this method, the file manager assumes a response of false. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the move operation should continue after an error occurs while moving the item at the specified URL.  ", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, movingItemAt srcURL: URL, to dstURL: URL) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that attempted to move the item."}, {"param_name": ["shouldProceedAfterError", "error"], "param_type": "Error", "param_description": "The error that occurred while trying to move the item in srcPath."}, {"param_name": ["movingItemAtPath", "srcPath"], "param_type": "String", "param_description": "The path of the file or directory that the file manager tried to move."}, {"param_name": ["toPath", "dstPath"], "param_type": "String", "param_description": "The path of the intended destination for the item in srcPath."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed or false if it should be aborted. If you do not implement this method, the file manager assumes a response of false. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the move operation should continue after an error occurs while moving the item at the specified path.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, movingItemAtPath srcPath: String, toPath dstPath: String) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that is attempting to copy the file or directory."}, {"param_name": ["shouldCopyItemAt", "srcURL"], "param_type": "URL", "param_description": "The URL of the file or directory that the file manager wants to copy."}, {"param_name": ["to", "dstURL"], "param_type": "URL", "param_description": "The URL specifying the location for the copied file or directory."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the item should be copied or false if the file manager should stop copying items associated with the current operation. If you do not implement this method, the file manager assumes a response of true."], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the file manager should copy the specified item to the new URL.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldCopyItemAt srcURL: URL, to dstURL: URL) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that is attempting to copy the file or directory."}, {"param_name": ["shouldCopyItemAtPath", "srcPath"], "param_type": "String", "param_description": "The path to the file or directory that the file manager wants to copy."}, {"param_name": ["toPath", "dstPath"], "param_type": "String", "param_description": "The new path for the copied file or directory."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the item should be copied or false if the file manager should stop copying items associated with the current operation. If you do not implement this method, the file manager assumes a response of true. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the file manager should copy the specified item to the new path.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldCopyItemAtPath srcPath: String, toPath dstPath: String) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that attempted to copy the item."}, {"param_name": ["shouldProceedAfterError", "error"], "param_type": "Error", "param_description": "The error that occurred during the attempt to copy."}, {"param_name": ["copyingItemAt", "srcURL"], "param_type": "URL", "param_description": "The URL or a file or directory that fileManager is attempting to copy."}, {"param_name": ["to", "dstURL"], "param_type": "URL", "param_description": "The URL or a file or directory to which fileManager is attempting to copy."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed or false if it should be aborted. If you do not implement this method, the file manager assumes a response of false. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the move operation should continue after an error occurs while copying the item at the specified URL.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, copyingItemAt srcURL: URL, to dstURL: URL) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The NSFileManager object that sent this message. "}, {"param_name": ["shouldProceedAfterError", "error"], "param_type": "Error", "param_description": "The error that occurred during the attempt to copy."}, {"param_name": ["copyingItemAtPath", "srcPath"], "param_type": "String", "param_description": "The path or a file or directory that fileManager is attempting to copy."}, {"param_name": ["toPath", "dstPath"], "param_type": "String", "param_description": "The path or a file or directory to which fileManager is attempting to copy."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed or false if it should be aborted. If you do not implement this method, the file manager assumes a response of false. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the move operation should continue after an error occurs while copying the item at the specified path.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, copyingItemAtPath srcPath: String, toPath dstPath: String) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that is attempting to remove the file or directory."}, {"param_name": ["shouldRemoveItemAt", "URL"], "param_type": "URL", "param_description": "The URL indicating the file or directory that the file manager is attempting to delete."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the specified item should be removed or false if it should not be removed. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate whether the item at the specified URL should be deleted. ", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldRemoveItemAt URL: URL) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that is attempting to remove the file or directory."}, {"param_name": ["shouldRemoveItemAtPath", "path"], "param_type": "String", "param_description": "The path to the file or directory that the file manager is attempting to delete."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the specified item should be deleted or false if it should not be deleted. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate whether the item at the specified path should be deleted. ", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldRemoveItemAtPath path: String) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that attempted to remove the item."}, {"param_name": ["shouldProceedAfterError", "error"], "param_type": "Error", "param_description": "The error that occurred while attempting to remove the item at URL."}, {"param_name": ["removingItemAt", "URL"], "param_type": "URL", "param_description": "The URL for the file or directory that the file manager tried to delete."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed or false if it should be aborted. If you do not implement this method, the file manager assumes a response of false. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the operation should continue after an error occurs while removing the item at the specified URL.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, removingItemAt URL: URL) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that attempted to remove the item."}, {"param_name": ["shouldProceedAfterError", "error"], "param_type": "Error", "param_description": "The error that occurred during the attempt to copy."}, {"param_name": ["removingItemAtPath", "path"], "param_type": "String", "param_description": "The path for the file or directory that the file manager tried to delete."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed or false if it should be aborted. If you do not implement this method, the file manager assumes a response of false. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the operation should continue after an error occurs while removing the item at the specified path.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, removingItemAtPath path: String) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that is attempting to create the link."}, {"param_name": ["shouldLinkItemAt", "srcURL"], "param_type": "URL", "param_description": "The URL identifying the new hard link to be created."}, {"param_name": ["to", "dstURL"], "param_type": "URL", "param_description": "The URL identifying the destination of the link."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the link should be created or false if it should not be created."], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if a hard link should be created between the items at the two URLs.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldLinkItemAt srcURL: URL, to dstURL: URL) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that is attempting to create the link."}, {"param_name": ["shouldLinkItemAtPath", "srcPath"], "param_type": "String", "param_description": "The path or a file or directory that fileManager is about to attempt to link."}, {"param_name": ["toPath", "dstPath"], "param_type": "String", "param_description": "The path or a file or directory to which fileManager is about to attempt to link."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed, otherwise false. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if a hard link should be created between the items at the two paths. ", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldLinkItemAtPath srcPath: String, toPath dstPath: String) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that attempted to create the link. "}, {"param_name": ["shouldProceedAfterError", "error"], "param_type": "Error", "param_description": "The error that occurred during the link attempt."}, {"param_name": ["linkingItemAt", "srcURL"], "param_type": "URL", "param_description": "The URL of the attempted link location."}, {"param_name": ["to", "dstURL"], "param_type": "URL", "param_description": "The URL of the file or directory that was the destination of the hard link."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed or false if it should be aborted. If you do not implement this method, the file manager assumes a response of false. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the operation should continue after an error occurs while linking to the item at the specified URL.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, linkingItemAt srcURL: URL, to dstURL: URL) -> Bool"}, {"params": [{"param_name": ["fileManager"], "param_type": "FileManager", "param_description": "The file manager object that attempted to create the link. "}, {"param_name": ["shouldProceedAfterError", "error"], "param_type": "Error", "param_description": "The error that occurred during the link attempt."}, {"param_name": ["linkingItemAtPath", "srcPath"], "param_type": "String", "param_description": "The path to the attempted link location."}, {"param_name": ["toPath", "dstPath"], "param_type": "String", "param_description": "The path to the file or directory that was the destination of the hard link."}], "class_name": "FileManagerDelegate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the operation should proceed or false if it should be aborted. If you do not implement this method, the file manager assumes a response of false. "], "return_type": ["Boo"]}, "method_name": "fileManager", "method_description": "Asks the delegate if the operation should continue after an error occurs while linking to the item at the specified path.", "method_declar": "optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, linkingItemAtPath srcPath: String, toPath dstPath: String) -> Bool"}], "class_name": "FileManagerDelegate", "Vars": []}