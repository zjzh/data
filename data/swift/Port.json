{"class_description": "Communication occurs between Port objects, which typically reside in different threads or tasks. The distributed objects system uses Port objects to send PortMessage objects back and forth. Implement interapplication communication using distributed objects whenever possible and use Port objects only when necessary. \nTo receive incoming messages, Port objects must be added to an RunLoop object as input sources. NSConnection objects automatically add their receive port when initialized.\nWhen an Port object receives a port message, it forwards the message to its delegate in a handleMachMessage(_:) or handle(_:) message. The delegate should implement only one of these methods to process the incoming message in whatever form desired. handleMachMessage(_:) provides a message as a raw Mach message beginning with a msg_header_t structure. handle(_:) provides a message as an PortMessage object, which is an object-oriented wrapper for a Mach message. If a delegate has not been set, the NSPort object handles the message itself.\nWhen you are finished using a port object, you must explicitly invalidate the port object prior to sending it a release message. Similarly, if your application uses garbage collection, you must invalidate the port object before removing any strong references to it. If you do not invalidate the port, the resulting port object may linger and create a memory leak. To invalidate the port object, invoke its invalidate() method. \nFoundation defines three concrete subclasses of NSPort. NSMachPort and MessagePort allow local (on the same machine) communication only. SocketPort allows for both local and remote communication, but may be more expensive than the others for the local case. When creating an NSPort object, using allocWithZone: or port, an NSMachPort object is created instead.\nImportant\nPort conforms to the NSCoding protocol, but only supports coding by an NSPortCoder. Port and its subclasses do not support archiving.\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "Port", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCoding", "NSCopying"], "package_name": "foundation", "subclass_list": []}