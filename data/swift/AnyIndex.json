{"Methods": [{"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "A value to compare.", "param_type": "AnyIndex", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "AnyIndex", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether two values are not equal.", "is_static": true, "method_name": "!=", "method_declar": "static func != (lhs: AnyIndex, rhs: AnyIndex) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeThrough<AnyIndex>"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "The upper bound for the range.", "param_type": "AnyIndex", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, and including, its upper bound.", "is_static": true, "method_name": "...", "method_declar": "prefix static func ... (maximum: AnyIndex) -> PartialRangeThrough<AnyIndex>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeFrom<AnyIndex>"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "The lower bound for the range.", "param_type": "AnyIndex", "param_name": ["minimum"]}], "method_description": "Returns a partial range extending upward from a lower bound.", "is_static": true, "method_name": "...", "method_declar": "postfix static func ... (minimum: AnyIndex) -> PartialRangeFrom<AnyIndex>"}, {"return_value": {"return_name": [""], "return_type": ["ClosedRange<AnyIndex>"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "The lower bound for the range.", "param_type": "AnyIndex", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "AnyIndex", "param_name": ["maximum"]}], "method_description": "Returns a closed range that contains both of its bounds.", "is_static": true, "method_name": "...", "method_declar": "static func ... (minimum: AnyIndex, maximum: AnyIndex) -> ClosedRange<AnyIndex>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeUpTo<AnyIndex>"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "The upper bound for the range.", "param_type": "AnyIndex", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, but not including, its upper bound.", "is_static": true, "method_name": "..", "method_declar": "prefix static func ..< (maximum: AnyIndex) -> PartialRangeUpTo<AnyIndex>"}, {"return_value": {"return_name": [""], "return_type": ["Range<AnyIndex>"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "The lower bound for the range.", "param_type": "AnyIndex", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "AnyIndex", "param_name": ["maximum"]}], "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "is_static": true, "method_name": "..", "method_declar": "static func ..< (minimum: AnyIndex, maximum: AnyIndex) -> Range<AnyIndex>"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "An index to compare.", "param_type": "AnyIndex", "param_name": ["lhs"]}, {"param_description": "Another index to compare.", "param_type": "AnyIndex", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the first argument represents a position before the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func < (lhs: AnyIndex, rhs: AnyIndex) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "A value to compare.", "param_type": "AnyIndex", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "AnyIndex", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func <= (lhs: AnyIndex, rhs: AnyIndex) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "An index to compare.", "param_type": "AnyIndex", "param_name": ["lhs"]}, {"param_description": "Another index to compare.", "param_type": "AnyIndex", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether two indices wrap equal underlying indices.", "is_static": true, "method_name": "==", "method_declar": "static func == (lhs: AnyIndex, rhs: AnyIndex) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "AnyIndex", "params": [{"param_description": "A value to compare.", "param_type": "AnyIndex", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "AnyIndex", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "is_static": true, "method_name": ">", "method_declar": "static func > (lhs: AnyIndex, rhs: AnyIndex) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."]}, "class_name": "AnyIndex", "params": [{"param_description": "A value to compare.", "param_type": "AnyIndex", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "AnyIndex", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "is_static": true, "method_name": ">=", "method_declar": "static func >= (lhs: AnyIndex, rhs: AnyIndex) -> Bool"}], "Vars": [], "class_name": "AnyIndex", "interface_list": ["Comparable"], "class_description": "", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}