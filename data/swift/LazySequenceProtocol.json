{"class_description": "Lazy sequences can be used to avoid needless storage allocation and computation, because they use an underlying sequence for storage and compute their elements on demand.  For example,\nis a sequence containing { 2, 4, 6 }.  Each time an element of the lazy sequence is accessed, an element of the underlying array is accessed and transformed by the closure.\nSequence operations taking closure arguments, such as map and filter, are normally eager: they use the closure immediately and return a new array.  Using the lazy property gives the standard library explicit permission to store the closure and the sequence in the result, and defer computation until it is needed.\nTo add new lazy sequence operations, extend this protocol with methods that return lazy wrappers that are themselves LazySequenceProtocols.  For example, given an eager scan method defined as follows\nwe can build a sequence that lazily computes the elements in the result of scan:\nand finally, we can give all lazy sequences a lazy scan method:\nNote\nThe explicit permission to implement further operations lazily applies only in contexts where the sequence is statically known to conform to LazySequenceProtocol.  Thus, side-effects such as the accumulation of result below are never unexpectedly dropped or deferred:\n[We don\u2019t recommend that you use map this way, because it creates and discards an array. sum would be better implemented using reduce].\nSee also: LazySequence, LazyCollectionProtocol, LazyCollection\n", "Methods": [], "class_inherit_list": ["Sequence"], "class_name": "LazySequenceProtocol", "typealias": [], "Vars": [], "class_type": "protocol", "interface_list": [], "package_name": "swift", "subclass_list": ["LazyCollectionProtocol"]}