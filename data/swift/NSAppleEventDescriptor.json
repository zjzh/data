{"package_name": "foundation", "subclass_list": [], "class_description": "An instance of NSAppleEventDescriptor represents a descriptor\u2014the basic building block for Apple events. This class is a wrapper for the underlying Apple event descriptor data type, AEDesc. Scriptable Cocoa applications frequently work with instances of NSAppleEventDescriptor, but should rarely need to work directly with the AEDesc data structure.\nA descriptor is a data structure that stores data and an accompanying four-character code. A descriptor can store a value, or it can store a list of other descriptors (which may also be lists). All the information in an Apple event is stored in descriptors and lists of descriptors, and every Apple event is itself a descriptor list that matches certain criteria.\nImportant\nAn instance of NSAppleEventDescriptor can represent any kind of descriptor, from a simple value descriptor, to a descriptor list, to a full-fledged Apple event.\nDescriptors can be used to build arbitrarily complex containers, so that one Apple event can represent a script statement such as tell application \"TextEdit\" to get word 3 of paragraph 6 of document 3.\nIn working with Apple event descriptors, it can be useful to understand some of the underlying data types. You\u2019ll find terms such as descriptor, descriptor list, Apple event record, and Apple event defined in Building an Apple Event in Apple Events Programming Guide. You\u2019ll also find information on the four-character codes used to identify information within a descriptor. Apple event data types are defined in Apple Event Manager. The values of many four-character codes used by Apple (and in some cases reused by developers) can be found in AppleScript Terminology and Apple Event Codes.\nThe most common reason to construct an Apple event with an instance of NSAppleEventDescriptor is to supply information in a return Apple event. The most common situation where you might need to extract information from an Apple event (as an instance of NSAppleEventDescriptor) is when an Apple event handler installed by your application is invoked, as described in \u201cInstalling an Apple Event Handler\u201d in How Cocoa Applications Handle Apple Events. In addition, if you execute an AppleScript script using the NSAppleScript class, you get an instance of NSAppleEventDescriptor as the return value, from which you can extract any required information.\nWhen you work with an instance of NSAppleEventDescriptor, you can access the underlying descriptor directly, if necessary, with the aeDesc method. Other methods, including descriptorWithDescriptorType:bytes:length: make it possible to create and initialize instances of NSAppleEventDescriptor without creating temporary instances of NSData.\nThe designated initializer for NSAppleEventDescriptor is init(aeDescNoCopy:). However, it is unlikely that you will need to create a subclass of NSAppleEventDescriptor.\nCocoa doesn\u2019t currently provide a mechanism for applications to directly send raw Apple events (though compiling and executing an AppleScript script with NSAppleScript may result in Apple events being sent). However, Cocoa applications have full access to the Apple Event Manager C APIs for working with Apple events. So, for example, you might use an instance of  NSAppleEventDescriptor to assemble an Apple event and call the Apple Event Manager function AESend(_:_:_:_:_:_:_:) to send it.\nIf you need to send Apple events, or if you need more information on some of the Apple event concepts described here, see Apple Events Programming Guide and Apple Event Manager.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["withEventClass", "eventClass"], "param_type": "AEEventClass", "param_description": "The event class to be set in the returned descriptor."}, {"param_name": ["eventID"], "param_type": "AEEventID", "param_description": "The event ID to be set in the returned descriptor."}, {"param_name": ["targetDescriptor"], "param_type": "NSAppleEventDescriptor", "param_description": ""}, {"param_name": ["returnID"], "param_type": "AEReturnID", "param_description": "The return ID to be set in the returned descriptor. If you pass a value of kAutoGenerateReturnID, the Apple Event Manager assigns the created Apple event a return ID that is unique to the current session. If you pass any other value, the Apple Event Manager assigns that value for the ID."}, {"param_name": ["transactionID"], "param_type": "AETransactionID", "param_description": "The transaction ID to be set in the returned descriptor. A transaction is a sequence of Apple events that are sent back and forth between client and server applications, beginning with the client\u2019s initial request for a service. All Apple events that are part of a transaction must have the same transaction ID. You can specify kAnyTransactionID if the Apple event is not one of a series of interdependent Apple events."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A descriptor for an Apple event, initialized according to the specified parameter values, or nil if an error occurs."], "return_type": ["NSAppleEventDescripto"]}, "method_name": "appleEvent", "method_description": "Creates a descriptor that represents an Apple event, initialized according to the specified information.", "method_declar": "class func appleEvent(withEventClass eventClass: AEEventClass, eventID: AEEventID, targetDescriptor: NSAppleEventDescriptor?, returnID: AEReturnID, transactionID: AETransactionID) -> NSAppleEventDescriptor"}, {"params": [{"param_name": ["boolean"], "param_type": "Bool", "param_description": "The Boolean value to be set in the returned descriptor."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["A descriptor with the specified Boolean value, or nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Creates a descriptor initialized with type typeBoolean that stores the specified Boolean value.", "method_declar": "init(boolean: Bool)"}, {"params": [{"param_name": ["enumCode", "enumerator"], "param_type": "OSType", "param_description": "A type code that identifies the type of enumerated data to be stored in the returned descriptor."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["A descriptor with the specified enumerator data type value, or nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Creates a descriptor initialized with type typeEnumerated that stores the specified enumerator data type value.", "method_declar": "init(enumCode enumerator: OSType)"}, {"params": [{"param_name": ["int32", "signedInt"], "param_type": "Int32", "param_description": "The integer value to be stored in the returned descriptor."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["A descriptor containing the specified integer value, or nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Creates a descriptor initialized with Apple event type typeSInt32 that stores the specified integer value.", "method_declar": "init(int32 signedInt: Int32)"}, {"params": [{"param_name": ["string"], "param_type": "String", "param_description": "A string that specifies the text to be stored in the returned descriptor."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["A descriptor that contains the text from the specified string, or nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Creates a descriptor initialized with type typeUnicodeText that stores the text from the specified string.", "method_declar": "init(string: String)"}, {"params": [{"param_name": ["typeCode"], "param_type": "OSType", "param_description": "The type value to be set in the returned descriptor."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["A descriptor with the specified type, or nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Creates a descriptor initialized with type typeType that stores the specified type value.", "method_declar": "init(typeCode: OSType)"}, {"params": [], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An empty list descriptor, or nil if an error occurs."], "return_type": ["NSAppleEventDescripto"]}, "method_name": "list", "method_description": "Creates and initializes an empty list descriptor.", "method_declar": "class func list() -> NSAppleEventDescriptor"}, {"params": [], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A descriptor with no parameter or attribute values set, or nil if an error occurs."], "return_type": ["NSAppleEventDescripto"]}, "method_name": "null", "method_description": "Creates and initializes a descriptor with no parameter or attribute values set.", "method_declar": "class func null() -> NSAppleEventDescriptor"}, {"params": [], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An Apple event descriptor whose data has yet to be set, or nil if an error occurs."], "return_type": ["NSAppleEventDescripto"]}, "method_name": "record", "method_description": "Creates and initializes a descriptor for an Apple event record whose data has yet to be set.", "method_declar": "class func record() -> NSAppleEventDescriptor"}, {"params": [{"param_name": ["listDescriptor"], "param_type": "()", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["An empty list descriptor, or nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Initializes a newly allocated instance as an empty list descriptor.", "method_declar": "convenience init(listDescriptor: ())"}, {"params": [{"param_name": ["recordDescriptor"], "param_type": "()", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized Apple event record, or nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Initializes a newly allocated instance as a descriptor that is an Apple event record.", "method_declar": "convenience init(recordDescriptor: ())"}, {"params": [{"param_name": ["aeDescNoCopy", "aeDesc"], "param_type": "UnsafePointer<AEDesc>", "param_description": "A pointer to the AEDesc structure to associate with the descriptor."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["An instance of NSAppleEventDescriptor that is associated with the structure pointed to by aeDesc, or nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Initializes a newly allocated instance as a descriptor for the specified Carbon AEDesc structure.", "method_declar": "init(aeDescNoCopy aeDesc: UnsafePointer<AEDesc>)"}, {"params": [{"param_name": ["descriptorType"], "param_type": "DescType", "param_description": "The descriptor type to be set in the returned descriptor."}, {"param_name": ["bytes"], "param_type": "UnsafeRawPointer", "param_description": "The data, as a sequence of bytes, to be set in the returned descriptor."}, {"param_name": ["length", "byteCount"], "param_type": "Int", "param_description": "The length, in bytes, of the data to be set in the returned descriptor."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["An instance of NSAppleEventDescriptor with the specified type and data. Returns nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Initializes a newly allocated instance as a descriptor with the specified descriptor type and data (from an arbitrary sequence of bytes and a length count).", "method_declar": "convenience init?(descriptorType: DescType, bytes: UnsafeRawPointer?, length byteCount: Int)"}, {"params": [{"param_name": ["descriptorType"], "param_type": "DescType", "param_description": "The descriptor type to be set in the initialized descriptor."}, {"param_name": ["data"], "param_type": "Data", "param_description": "The data to be set in the initialized descriptor."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["An instance of NSAppleEventDescriptor with the specified type and data. Returns nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Initializes a newly allocated instance as a descriptor with the specified descriptor type and data (from an instance of NSData).", "method_declar": "convenience init?(descriptorType: DescType, data: Data?)"}, {"params": [{"param_name": ["eventClass"], "param_type": "AEEventClass", "param_description": "The event class to be set in the returned descriptor."}, {"param_name": ["eventID"], "param_type": "AEEventID", "param_description": "The event ID to be set in the returned descriptor."}, {"param_name": ["targetDescriptor"], "param_type": "NSAppleEventDescriptor", "param_description": ""}, {"param_name": ["returnID"], "param_type": "AEReturnID", "param_description": "The return ID to be set in the returned descriptor. If you pass a value of kAutoGenerateReturnID, the Apple Event Manager assigns the created Apple event a return ID that is unique to the current session. If you pass any other value, the Apple Event Manager assigns that value for the ID."}, {"param_name": ["transactionID"], "param_type": "AETransactionID", "param_description": "The transaction ID to be set in the returned descriptor. A transaction is a sequence of Apple events that are sent back and forth between client and server applications, beginning with the client\u2019s initial request for a service. All Apple events that are part of a transaction must have the same transaction ID. You can specify kAnyTransactionID if the Apple event is not one of a series of interdependent Apple events."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized Apple event (an instance of NSAppleEventDescriptor), or nil if an error occurs."], "return_type": []}, "method_name": "init", "method_description": "Initializes a newly allocated instance as a descriptor for an Apple event, initialized with the specified values.", "method_declar": "convenience init(eventClass: AEEventClass, eventID: AEEventID, targetDescriptor: NSAppleEventDescriptor?, returnID: AEReturnID, transactionID: AETransactionID)"}, {"params": [{"param_name": ["toDescriptorType", "descriptorType"], "param_type": "DescType", "param_description": "The descriptor type to coerce the receiver to."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A descriptor of the specified type, or nil if an error occurs."], "return_type": ["NSAppleEventDescripto"]}, "method_name": "coerce", "method_description": "Returns a descriptor obtained by coercing the receiver to the specified type.", "method_declar": "func coerce(toDescriptorType descriptorType: DescType) -> NSAppleEventDescriptor?"}, {"params": [{"param_name": ["index"], "param_type": "Int", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The descriptor from the specified position (one-based) in the descriptor list, or nil if the specified descriptor cannot be obtained."], "return_type": ["NSAppleEventDescripto"]}, "method_name": "atIndex", "method_description": "Returns the descriptor at the specified (one-based) position in the receiving descriptor list.", "method_declar": "func atIndex(_ index: Int) -> NSAppleEventDescriptor?"}, {"params": [{"param_name": ["descriptor"], "param_type": "NSAppleEventDescriptor", "param_description": "The descriptor to insert in the receiver. Specifying an index of 0 or count + 1 causes appending to the end of the list."}, {"param_name": ["at", "index"], "param_type": "Int", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "insert", "method_description": "Inserts a descriptor at the specified (one-based) position in the receiving descriptor list, replacing the existing descriptor, if any, at that position.", "method_declar": "func insert(_ descriptor: NSAppleEventDescriptor, at index: Int)"}, {"params": [{"param_name": ["at", "index"], "param_type": "Int", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "remove", "method_description": "Removes the descriptor at the specified (one-based) position in the receiving descriptor list.", "method_declar": "func remove(at index: Int)"}, {"params": [{"param_name": ["keyword"], "param_type": "AEKeyword", "param_description": "A keyword (a four-character code) that identifies the descriptor to obtain."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A descriptor for the specified keyword, or nil if an error occurs."], "return_type": ["NSAppleEventDescripto"]}, "method_name": "forKeyword", "method_description": "Returns the receiver\u2019s descriptor for the specified keyword.", "method_declar": "func forKeyword(_ keyword: AEKeyword) -> NSAppleEventDescriptor?"}, {"params": [{"param_name": ["at", "index"], "param_type": "Int", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The keyword (a four-character code) for the descriptor at the one-based location specified by anIndex, or 0 if an error occurs."], "return_type": ["AEKeywor"]}, "method_name": "keywordForDescriptor", "method_description": "Returns the keyword for the descriptor at the specified (one-based) position in the receiver.", "method_declar": "func keywordForDescriptor(at index: Int) -> AEKeyword"}, {"params": [{"param_name": ["withKeyword", "keyword"], "param_type": "AEKeyword", "param_description": "A keyword (a four-character code) that identifies the descriptor to remove."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "remove", "method_description": "Removes the receiver\u2019s descriptor identified by the specified keyword.", "method_declar": "func remove(withKeyword keyword: AEKeyword)"}, {"params": [{"param_name": ["descriptor"], "param_type": "NSAppleEventDescriptor", "param_description": "The descriptor to add to the receiver."}, {"param_name": ["forKeyword", "keyword"], "param_type": "AEKeyword", "param_description": "A keyword (a four-character code) that identifies the descriptor to add. If a descriptor with that keyword already exists in the receiver, it is replaced."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "setDescriptor", "method_description": "Adds a descriptor, identified by a keyword, to the receiver.", "method_declar": "func setDescriptor(_ descriptor: NSAppleEventDescriptor, forKeyword keyword: AEKeyword)"}, {"params": [{"param_name": ["forKeyword", "keyword"], "param_type": "AEKeyword", "param_description": "A keyword (a four-character code) that identifies the descriptor to obtain."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The attribute descriptor for the specified keyword, or nil if an error occurs."], "return_type": ["NSAppleEventDescripto"]}, "method_name": "attributeDescriptor", "method_description": "Returns a descriptor for the receiver\u2019s Apple event attribute identified by the specified keyword.", "method_declar": "func attributeDescriptor(forKeyword keyword: AEKeyword) -> NSAppleEventDescriptor?"}, {"params": [{"param_name": ["forKeyword", "keyword"], "param_type": "AEKeyword", "param_description": "A keyword (a four-character code) that identifies the parameter descriptor to obtain."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A descriptor for the specified keyword, or nil if an error occurs."], "return_type": ["NSAppleEventDescripto"]}, "method_name": "paramDescriptor", "method_description": "Returns a descriptor for the receiver\u2019s Apple event parameter identified by the specified keyword.", "method_declar": "func paramDescriptor(forKeyword keyword: AEKeyword) -> NSAppleEventDescriptor?"}, {"params": [{"param_name": ["withKeyword", "keyword"], "param_type": "AEKeyword", "param_description": "A keyword (a four-character code) that identifies the parameter descriptor to remove. Currently provides no indication if an error occurs."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "removeParamDescriptor", "method_description": "Removes the receiver\u2019s parameter descriptor identified by the specified keyword.", "method_declar": "func removeParamDescriptor(withKeyword keyword: AEKeyword)"}, {"params": [{"param_name": ["descriptor"], "param_type": "NSAppleEventDescriptor", "param_description": "The attribute descriptor to add to the receiver."}, {"param_name": ["forKeyword", "keyword"], "param_type": "AEKeyword", "param_description": "A keyword (a four-character code) that identifies the attribute descriptor to add. If a descriptor with that keyword already exists in the receiver, it is replaced."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "setAttribute", "method_description": "Adds a descriptor to the receiver as an attribute identified by the specified keyword.", "method_declar": "func setAttribute(_ descriptor: NSAppleEventDescriptor, forKeyword keyword: AEKeyword)"}, {"params": [{"param_name": ["descriptor"], "param_type": "NSAppleEventDescriptor", "param_description": "The parameter descriptor to add to the receiver."}, {"param_name": ["forKeyword", "keyword"], "param_type": "AEKeyword", "param_description": "A keyword (a four-character code) that identifies the parameter descriptor to add. If a descriptor with that keyword already exists in the receiver, it is replaced."}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "setParam", "method_description": "Adds a descriptor to the receiver as an Apple event parameter identified by the specified keyword.", "method_declar": "func setParam(_ descriptor: NSAppleEventDescriptor, forKeyword keyword: AEKeyword)"}, {"params": [{"param_name": ["applicationURL"], "param_type": "URL", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(applicationURL: URL)"}, {"params": [{"param_name": ["bundleIdentifier"], "param_type": "String", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(bundleIdentifier: String)"}, {"params": [{"param_name": ["date"], "param_type": "Date", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(date: Date)"}, {"params": [{"param_name": ["double", "doubleValue"], "param_type": "Double", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(double doubleValue: Double)"}, {"params": [{"param_name": ["fileURL"], "param_type": "URL", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(fileURL: URL)"}, {"params": [{"param_name": ["processIdentifier"], "param_type": "pidt", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(processIdentifier: pid_t)"}, {"params": [{"param_name": ["options", "sendOptions"], "param_type": "NSAppleEventDescriptor.SendOptions", "param_description": ""}, {"param_name": ["timeout", "timeoutInSeconds"], "param_type": "TimeInterval", "param_description": ""}], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSAppleEventDescripto"]}, "method_name": "sendEvent", "method_description": "", "method_declar": "func sendEvent(options sendOptions: NSAppleEventDescriptor.SendOptions = [], timeout timeoutInSeconds: TimeInterval) throws -> NSAppleEventDescriptor"}, {"params": [], "class_name": "NSAppleEventDescriptor", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSAppleEventDescripto"]}, "method_name": "currentProcess", "method_description": "", "method_declar": "class func currentProcess() -> NSAppleEventDescriptor"}], "class_name": "NSAppleEventDescriptor", "Vars": [{"var_description": "The AEDesc structure encapsulated by the receiver, if it has one.", "var_type": "UnsafePointer<AEDesc>", "is_static": false, "var_name": "aeDesc"}, {"var_description": "The contents of the receiver as a Boolean value, coercing (to typeBoolean) if necessary.", "var_type": "Bool", "is_static": false, "var_name": "booleanValue"}, {"var_description": "The receiver\u2019s data.", "var_type": "Data", "is_static": false, "var_name": "data"}, {"var_description": "The descriptor type of the receiver.", "var_type": "DescType", "is_static": false, "var_name": "descriptorType"}, {"var_description": "The contents of the receiver as an enumeration type, coercing to typeEnumerated if necessary.", "var_type": "OSType", "is_static": false, "var_name": "enumCodeValue"}, {"var_description": "The contents of the receiver as an integer, coercing (to typeSInt32) if necessary.", "var_type": "Int32", "is_static": false, "var_name": "int32Value"}, {"var_description": "The number of descriptors in the receiver\u2019s descriptor list.", "var_type": "Int", "is_static": false, "var_name": "numberOfItems"}, {"var_description": "The contents of the receiver as a Unicode text string, coercing to typeUnicodeText if necessary.", "var_type": "String", "is_static": false, "var_name": "stringValue"}, {"var_description": "The contents of the receiver as a type, coercing to typeType if necessary.", "var_type": "OSType", "is_static": false, "var_name": "typeCodeValue"}, {"var_description": "The event class for the receiver.", "var_type": "AEEventClass", "is_static": false, "var_name": "eventClass"}, {"var_description": "The event ID for the receiver.", "var_type": "AEEventID", "is_static": false, "var_name": "eventID"}, {"var_description": "The receiver\u2019s return ID (the ID for a reply Apple event).", "var_type": "AEReturnID", "is_static": false, "var_name": "returnID"}, {"var_description": "The receiver\u2019s transaction ID, if any.", "var_type": "AETransactionID", "is_static": false, "var_name": "transactionID"}, {"var_description": "", "var_type": "Date", "is_static": false, "var_name": "dateValue"}, {"var_description": "", "var_type": "Double", "is_static": false, "var_name": "doubleValue"}, {"var_description": "", "var_type": "URL", "is_static": false, "var_name": "fileURLValue"}, {"var_description": "", "var_type": "Bool", "is_static": false, "var_name": "isRecordDescriptor"}]}