{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [], "return_description": ["An initialized NSXMLParser object or nil if an error occurs."], "return_type": []}, "method_description": "Initializes a parser with the XML content referenced by the given URL.", "is_static": false, "method_name": "init", "class_name": "XMLParser", "method_declar": "convenience init?(contentsOf url: URL)", "params": [{"param_type": "URL", "param_description": "An NSURL object specifying a URL. The URL must be fully qualified and refer to a scheme that is supported by the NSURL class.", "param_name": ["contentsOf", "url"]}]}, {"return_value": {"return_name": [], "return_description": ["An initialized NSXMLParser object or nil if an error occurs."], "return_type": []}, "method_description": "Initializes a parser with the XML contents encapsulated in a given data object. ", "is_static": false, "method_name": "init", "class_name": "XMLParser", "method_declar": "init(data: Data)", "params": [{"param_type": "Data", "param_description": "An NSData object containing XML markup. ", "param_name": ["data"]}]}, {"return_value": {"return_name": [], "return_description": ["An initialized NSXMLParser object or nil if an error occurs."], "return_type": []}, "method_description": "Initializes a parser with the XML contents from the specified stream and parses it.. ", "is_static": false, "method_name": "init", "class_name": "XMLParser", "method_declar": "convenience init(stream: InputStream)", "params": [{"param_type": "InputStream", "param_description": "The input stream. The content is incrementally loaded from the specified stream and parsed. The NSXMLParser will open the stream, and synchronously read from it without scheduling it.", "param_name": ["stream"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if parsing is successful and false in there is an error or if the parsing operation is aborted."], "return_type": ["Boo"]}, "method_description": "Starts the event-driven parsing operation.", "is_static": false, "method_name": "parse", "class_name": "XMLParser", "method_declar": "func parse() -> Bool", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Stops the parser object.", "is_static": false, "method_name": "abortParsing", "class_name": "XMLParser", "method_declar": "func abortParsing()", "params": []}], "class_type": "class", "class_name": "XMLParser", "Vars": [{"var_name": "delegate", "var_type": "XMLParserDelegate", "var_description": "A delegate object that receives messages about the parsing process.", "is_static": false}, {"var_name": "shouldProcessNamespaces", "var_type": "Bool", "var_description": "A Boolean value that determines whether the parser reports the namespaces and qualified names of elements.", "is_static": false}, {"var_name": "shouldReportNamespacePrefixes", "var_type": "Bool", "var_description": "A Boolean value that determines whether the parser reports the prefixes indicating the scope of namespace declarations.", "is_static": false}, {"var_name": "shouldResolveExternalEntities", "var_type": "Bool", "var_description": "A Boolean value that determines whether the parser reports declarations of external entities.", "is_static": false}, {"var_name": "parserError", "var_type": "Error", "var_description": "An NSError object from which you can obtain information about a parsing error.", "is_static": false}, {"var_name": "columnNumber", "var_type": "Int", "var_description": "The column number of the XML document being processed by the parser.", "is_static": false}, {"var_name": "lineNumber", "var_type": "Int", "var_description": "The line number of the XML document being processed by the parser.", "is_static": false}, {"var_name": "publicID", "var_type": "String", "var_description": "The public identifier of the external entity referenced in the XML document.", "is_static": false}, {"var_name": "systemID", "var_type": "String", "var_description": "The system identifier of the external entity referenced in the XML document.", "is_static": false}, {"var_name": "errorDomain", "var_type": "String", "var_description": "Indicates an error in XML parsing.", "is_static": false}, {"var_name": "allowedExternalEntityURLs", "var_type": "Set<URL>", "var_description": "", "is_static": false}, {"var_name": "externalEntityResolvingPolicy", "var_type": "XMLParser.ExternalEntityResolvingPolicy", "var_description": "", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "An XMLParser notifies its delegate about the items (elements, attributes, CDATA blocks, comments, and so on) that it encounters as it processes an XML document. It does not itself do anything with those parsed items except report them. It also reports parsing errors. For convenience, an XMLParser object in the following descriptions is sometimes referred to as a parser object. Unless used in a callback, the XMLParser is a thread-safe class as long as any given instance is only used in one thread.\nNote\nNamespace support was implemented in XMLParser starting in macOS 10.4. Namespace-related methods of XMLParser prior to this version have no effect.\n", "package_name": "foundation"}