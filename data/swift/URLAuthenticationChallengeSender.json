{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObjectProtocol"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Cancels a given authentication challenge.Required.", "is_static": false, "method_name": "cancel", "class_name": "URLAuthenticationChallengeSender", "method_declar": "func cancel(_ challenge: URLAuthenticationChallenge)", "params": [{"param_type": "URLAuthenticationChallenge", "param_description": "The authentication challenge to cancel.", "param_name": ["challenge"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Attempt to continue downloading a request without providing a credential for a given challenge.Required.", "is_static": false, "method_name": "continueWithoutCredential", "class_name": "URLAuthenticationChallengeSender", "method_declar": "func continueWithoutCredential(for challenge: URLAuthenticationChallenge)", "params": [{"param_type": "URLAuthenticationChallenge", "param_description": "A challenge without authentication credentials.", "param_name": ["for", "challenge"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Attempt to use a given credential for a given authentication challenge.Required.", "is_static": false, "method_name": "use", "class_name": "URLAuthenticationChallengeSender", "method_declar": "func use(_ credential: URLCredential, for challenge: URLAuthenticationChallenge)", "params": [{"param_type": "URLCredential", "param_description": "The credential to use for authentication.", "param_name": ["credential"]}, {"param_type": "URLAuthenticationChallenge", "param_description": "The challenge for which to use credential.", "param_name": ["for", "challenge"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Causes the system-provided default behavior to be used.", "is_static": false, "method_name": "performDefaultHandling", "class_name": "URLAuthenticationChallengeSender", "method_declar": "optional func performDefaultHandling(for challenge: URLAuthenticationChallenge)", "params": [{"param_type": "URLAuthenticationChallenge", "param_description": "The challenge for which the default behavior should be used.", "param_name": ["for", "challenge"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Rejects the currently supplied protection space.", "is_static": false, "method_name": "rejectProtectionSpaceAndContinue", "class_name": "URLAuthenticationChallengeSender", "method_declar": "optional func rejectProtectionSpaceAndContinue(with challenge: URLAuthenticationChallenge)", "params": [{"param_type": "URLAuthenticationChallenge", "param_description": "The challenge that should be rejected.", "param_name": ["with", "challenge"]}]}], "class_type": "protocol", "class_name": "URLAuthenticationChallengeSender", "Vars": [], "interface_list": [], "class_description": "The methods in the protocol are generally sent by a delegate in response to receiving a connection(_:didReceive:): or download(_:didReceive:):. The different methods provide different ways of responding to authentication challenges.\nImportant\nThis protocol is only for use with the legacy NSURLConnection and NSURLDownload classes. It should not be used with URLSession-based code, for which you respond to authentication challenges by passing URLSession.AuthChallengeDisposition constants to the provided completion handler blocks.\n", "package_name": "foundation"}