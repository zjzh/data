{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [], "return_description": ["An initialized condition lock object; may be different than the original receiver."], "return_type": []}, "method_description": "Initializes a newly allocated NSConditionLock object and sets its condition.", "is_static": false, "method_name": "init", "class_name": "NSConditionLock", "method_declar": "init(condition: Int)", "params": [{"param_type": "Int", "param_description": "The user-defined condition for the lock. The value of condition is user-defined; see the class description for more information.", "param_name": ["condition"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the lock is acquired within the time limit, false otherwise."], "return_type": ["Boo"]}, "method_description": "Attempts to acquire a lock before a specified moment in time.", "is_static": false, "method_name": "lock", "class_name": "NSConditionLock", "method_declar": "func lock(before limit: Date) -> Bool", "params": [{"param_type": "Date", "param_description": "The date by which the lock must be acquired or the attempt will time out.", "param_name": ["before", "limit"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Attempts to acquire a lock.", "is_static": false, "method_name": "lock", "class_name": "NSConditionLock", "method_declar": "func lock(whenCondition condition: Int)", "params": [{"param_type": "Int", "param_description": "The condition to match on.", "param_name": ["whenCondition", "condition"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the lock is acquired within the time limit, false otherwise."], "return_type": ["Boo"]}, "method_description": "Attempts to acquire a lock before a specified moment in time.", "is_static": false, "method_name": "lock", "class_name": "NSConditionLock", "method_declar": "func lock(whenCondition condition: Int, before limit: Date) -> Bool", "params": [{"param_type": "Int", "param_description": "The condition to match on.", "param_name": ["whenCondition", "condition"]}, {"param_type": "Date", "param_description": "The date by which the lock must be acquired or the attempt will time out.", "param_name": ["before", "limit"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the lock could be acquired, false otherwise."], "return_type": ["Boo"]}, "method_description": "Attempts to acquire a lock without regard to the receiver\u2019s condition.", "is_static": false, "method_name": "`try`", "class_name": "NSConditionLock", "method_declar": "func `try`() -> Bool", "params": []}, {"return_value": {"return_name": [""], "return_description": ["true if the lock could be acquired, false otherwise."], "return_type": ["Boo"]}, "method_description": "Attempts to acquire a lock if the receiver\u2019s condition is equal to the specified condition.", "is_static": false, "method_name": "tryLock", "class_name": "NSConditionLock", "method_declar": "func tryLock(whenCondition condition: Int) -> Bool", "params": [{"param_type": "Int", "param_description": "", "param_name": ["whenCondition", "condition"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Relinquishes the lock and sets the receiver\u2019s condition.", "is_static": false, "method_name": "unlock", "class_name": "NSConditionLock", "method_declar": "func unlock(withCondition condition: Int)", "params": [{"param_type": "Int", "param_description": "The user-defined condition for the lock. The value of condition is user-defined; see the class description for more information.", "param_name": ["withCondition", "condition"]}]}], "class_type": "class", "class_name": "NSConditionLock", "Vars": [{"var_name": "condition", "var_type": "Int", "var_description": "The condition associated with the receiver.", "is_static": false}, {"var_name": "name", "var_type": "String", "var_description": "The name associated with the receiver.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSLocking"], "class_description": "Using an NSConditionLock object, you can ensure that a thread can acquire a lock only if a certain condition is met. Once it has acquired the lock and executed the critical section of code, the thread can relinquish the lock and set the associated condition to something new. The conditions themselves are arbitrary: you define them as needed for your application.\n", "package_name": "foundation"}