{"subclass_list": [], "typealias": [], "class_inherit_list": ["URLSessionTaskDelegate"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the delegate that a better route to the host has been detected for the stream.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionStreamDelegate", "method_declar": "optional func urlSession(_ session: URLSession, betterRouteDiscoveredFor streamTask: URLSessionStreamTask)", "params": [{"param_type": "URLSession", "param_description": "The session of the stream task that discovered a better route.", "param_name": ["session"]}, {"param_type": "URLSessionStreamTask", "param_description": "The stream task that discovered a better route.", "param_name": ["betterRouteDiscoveredFor", "streamTask"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the delegate that the stream task has been completed as a result of the stream task calling the captureStreams() method.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionStreamDelegate", "method_declar": "optional func urlSession(_ session: URLSession, streamTask: URLSessionStreamTask, didBecome inputStream: InputStream, outputStream: OutputStream)", "params": [{"param_type": "URLSession", "param_description": "The session of the stream task that has been completed.", "param_name": ["session"]}, {"param_type": "URLSessionStreamTask", "param_description": "The stream task that has been completed.", "param_name": ["streamTask"]}, {"param_type": "InputStream", "param_description": "The created input stream. This InputStream object is unopened.", "param_name": ["didBecome", "inputStream"]}, {"param_type": "OutputStream", "param_description": "The created output stream. This OutputStream object is unopened", "param_name": ["outputStream"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the delegate that the read side of the underlying socket has been closed.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionStreamDelegate", "method_declar": "optional func urlSession(_ session: URLSession, readClosedFor streamTask: URLSessionStreamTask)", "params": [{"param_type": "URLSession", "param_description": "The session containing the stream task that closed reads.", "param_name": ["session"]}, {"param_type": "URLSessionStreamTask", "param_description": "The stream task that closed reads.", "param_name": ["readClosedFor", "streamTask"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the delegate that the write side of the underlying socket has been closed.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionStreamDelegate", "method_declar": "optional func urlSession(_ session: URLSession, writeClosedFor streamTask: URLSessionStreamTask)", "params": [{"param_type": "URLSession", "param_description": "The session containing the stream task that closed writes.", "param_name": ["session"]}, {"param_type": "URLSessionStreamTask", "param_description": "The stream task that closed writes.", "param_name": ["writeClosedFor", "streamTask"]}]}], "class_type": "protocol", "class_name": "URLSessionStreamDelegate", "Vars": [], "interface_list": [], "class_description": "In addition to these methods, be sure to implement the methods in the URLSessionTaskDelegate and URLSessionDelegate protocols to handle events common to all task types and session-level events, respectively.\nNote\nA URLSession object need not have a delegate. If no delegate is assigned, a system-provided delegate is used, and you must provide a completion callback to obtain the data.\n", "package_name": "foundation"}