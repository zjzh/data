{"package_name": "foundation", "subclass_list": [], "class_description": "A Date value encapsulate a single point in time, independent of any particular calendrical system or time zone. Date values represent a time interval relative to an absolute reference date.\nThe Date structure provides methods for comparing dates, calculating the time interval between two dates, and creating a new date from a time interval relative to another date. Use date values in conjunction with DateFormatter instances to create localized representations of dates and times and with Calendar instances to perform calendar arithmetic.\nDate bridges to the NSDate class. You can use these interchangeably in code that interacts with Objective-C APIs.\n", "class_type": "struct", "typealias": ["typealias Date.ReferenceType = NSDate"], "interface_list": ["CKRecordValueProtocol", "Comparable", "CustomDebugStringConvertible", "CustomPlaygroundQuickLookable", "CustomReflectable", "CustomStringConvertible", "Equatable", "ReferenceConvertible"], "class_inherit_list": [], "Methods": [{"params": [], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a date value initialized to the current date and time.", "method_declar": "init()"}, {"params": [{"param_name": ["timeIntervalSinceNow"], "param_type": "TimeInterval", "param_description": ""}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a date value initialized relative to the current date and time by a given number of seconds.", "method_declar": "init(timeIntervalSinceNow: TimeInterval)"}, {"params": [{"param_name": ["timeInterval"], "param_type": "TimeInterval", "param_description": "The number of seconds to add to date. A negative value means the receiver will be earlier than date."}, {"param_name": ["since", "date"], "param_type": "Date", "param_description": "The reference date."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a date value initialized relative to another given date by a given number of seconds.", "method_declar": "init(timeInterval: TimeInterval, since date: Date)"}, {"params": [{"param_name": ["timeIntervalSinceReferenceDate", "ti"], "param_type": "TimeInterval", "param_description": ""}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a date value initialized relative to 00:00:00 UTC on 1 January 2001 by a given number of seconds.", "method_declar": "init(timeIntervalSinceReferenceDate ti: TimeInterval)"}, {"params": [{"param_name": ["timeIntervalSince1970"], "param_type": "TimeInterval", "param_description": ""}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a date value initialized relative to 00:00:00 UTC on 1 January 1970 by a given number of seconds.", "method_declar": "init(timeIntervalSince1970: TimeInterval)"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Date", "param_description": ""}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "func", "method_description": "Returns a Boolean that is true if the left hand date is earlier in time than the right hand date.", "method_declar": "static func < (lhs: Date, rhs: Date) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Date", "param_description": ""}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "==", "method_description": "Returns a Boolean that is true if the two date values represent the same point in time.", "method_declar": "static func == (lhs: Date, rhs: Date) -> Bool"}, {"params": [{"param_name": ["other"], "param_type": "Date", "param_description": ""}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["ComparisonResul"]}, "method_name": "compare", "method_description": "Compares two date values.", "method_declar": "func compare(_ other: Date) -> ComparisonResult"}, {"params": [{"param_name": ["date"], "param_type": "Date", "param_description": ""}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The interval between the receiver and the another parameter. If the receiver is earlier than anotherDate, the return value is negative. If anotherDate is nil, the results are undefined."], "return_type": ["TimeInterva"]}, "method_name": "timeIntervalSince", "method_description": "Returns the interval between the receiver and another given date.", "method_declar": "func timeIntervalSince(_ date: Date) -> TimeInterval"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "Date", "param_description": "Another value to compare."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "!=", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_declar": "static func != (lhs: Date, rhs: Date) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": ""}, {"param_name": ["rhs"], "param_type": "TimeInterval", "param_description": ""}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Dat"]}, "method_name": "+", "method_description": "Returns a date with a specified amount of time added to it.", "method_declar": "static func + (lhs: Date, rhs: TimeInterval) -> Date"}, {"params": [{"param_name": ["lhs"], "param_type": "inout Date", "param_description": ""}, {"param_name": ["rhs"], "param_type": "TimeInterval", "param_description": ""}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "+=", "method_description": "Adds a time interval to a date.", "method_declar": "static func += (lhs: inout Date, rhs: TimeInterval)"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": ""}, {"param_name": ["rhs"], "param_type": "TimeInterval", "param_description": ""}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Dat"]}, "method_name": "-", "method_description": "Returns a date with a specified amount of time subtracted from it.", "method_declar": "static func - (lhs: Date, rhs: TimeInterval) -> Date"}, {"params": [{"param_name": ["lhs"], "param_type": "inout Date", "param_description": ""}, {"param_name": ["rhs"], "param_type": "TimeInterval", "param_description": ""}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "-=", "method_description": "Subtracts a time interval from a date.", "method_declar": "static func -= (lhs: inout Date, rhs: TimeInterval)"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Date", "param_description": ""}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "func", "method_description": "Returns a Boolean that is true if the left hand date is earlier in time than the right hand date.", "method_declar": "static func < (lhs: Date, rhs: Date) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "Date", "param_description": "Another value to compare."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "func", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_declar": "static func <= (lhs: Date, rhs: Date) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Date", "param_description": ""}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "==", "method_description": "Returns a Boolean that is true if the two date values represent the same point in time.", "method_declar": "static func == (lhs: Date, rhs: Date) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "Date", "param_description": "Another value to compare."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_type": ["Boo"]}, "method_name": ">=", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_declar": "static func >= (lhs: Date, rhs: Date) -> Bool"}, {"params": [{"param_name": ["with", "locale"], "param_type": "Locale", "param_description": "A Locale. If you pass nil, Date formats the date in the same way as the description property."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string representation of the Date, using the given locale, or if the locale argument is nil, in the international format YYYY-MM-DD HH:MM:SS \u00b1HHMM, where \u00b1HHMM represents the time zone offset in hours and minutes from UTC (for example, \u201c2001-03-24 10:45:32 +0600\u201d)."], "return_type": ["Strin"]}, "method_name": "description", "method_description": "Returns a string representation of the date using the given locale.", "method_declar": "func description(with locale: Locale?) -> String"}, {"params": [{"param_name": ["from", "decoder"], "param_type": "Decoder", "param_description": ""}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(from decoder: Decoder) throws"}, {"params": [{"param_name": ["timeInterval"], "param_type": "TimeInterval", "param_description": "The value to add, in seconds."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "addTimeInterval", "method_description": "Adds a time interval to this date.", "method_declar": "mutating func addTimeInterval(_ timeInterval: TimeInterval)"}, {"params": [{"param_name": ["timeInterval"], "param_type": "TimeInterval", "param_description": "The value to add, in seconds."}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Dat"]}, "method_name": "addingTimeInterval", "method_description": "Creates a new date value by adding a time interval to this date.", "method_declar": "func addingTimeInterval(_ timeInterval: TimeInterval) -> Date"}, {"params": [{"param_name": ["to", "encoder"], "param_type": "Encoder", "param_description": ""}], "class_name": "Date", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "", "method_declar": "func encode(to encoder: Encoder) throws"}, {"params": [{"param_name": ["minimum"], "param_type": "Date", "param_description": "The lower bound for the range."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["PartialRangeFrom<Date"]}, "method_name": "...", "method_description": "Returns a partial range extending upward from a lower bound.", "method_declar": "postfix static func ... (minimum: Date) -> PartialRangeFrom<Date>"}, {"params": [{"param_name": ["maximum"], "param_type": "Date", "param_description": "The upper bound for the range."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["PartialRangeThrough<Date"]}, "method_name": "...", "method_description": "Returns a partial range up to, and including, its upper bound.", "method_declar": "prefix static func ... (maximum: Date) -> PartialRangeThrough<Date>"}, {"params": [{"param_name": ["minimum"], "param_type": "Date", "param_description": "The lower bound for the range."}, {"param_name": ["maximum"], "param_type": "Date", "param_description": "The upper bound for the range."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["ClosedRange<Date"]}, "method_name": "...", "method_description": "Returns a closed range that contains both of its bounds.", "method_declar": "static func ... (minimum: Date, maximum: Date) -> ClosedRange<Date>"}, {"params": [{"param_name": ["maximum"], "param_type": "Date", "param_description": "The upper bound for the range."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["PartialRangeUpTo<Date"]}, "method_name": "..", "method_description": "Returns a partial range up to, but not including, its upper bound.", "method_declar": "prefix static func ..< (maximum: Date) -> PartialRangeUpTo<Date>"}, {"params": [{"param_name": ["minimum"], "param_type": "Date", "param_description": "The lower bound for the range."}, {"param_name": ["maximum"], "param_type": "Date", "param_description": "The upper bound for the range."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Range<Date"]}, "method_name": "..", "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_declar": "static func ..< (minimum: Date, maximum: Date) -> Range<Date>"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Date", "param_description": ""}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": ">", "method_description": "", "method_declar": "static func > (lhs: Date, rhs: Date) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Date", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "Date", "param_description": "Another value to compare."}], "class_name": "Date", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": ">", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_declar": "static func > (lhs: Date, rhs: Date) -> Bool"}], "class_name": "Date", "Vars": [{"var_description": "A date value representing a date in the distant future.", "var_type": "Date", "is_static": false, "var_name": "distantFuture"}, {"var_description": "A date value representing a date in the distant past.", "var_type": "Date", "is_static": false, "var_name": "distantPast"}, {"var_description": "The time interval between the date value and the current date and time.", "var_type": "TimeInterval", "is_static": false, "var_name": "timeIntervalSinceNow"}, {"var_description": "The interval between the date value and 00:00:00 UTC on 1 January 2001.", "var_type": "TimeInterval", "is_static": false, "var_name": "timeIntervalSinceReferenceDate"}, {"var_description": "The interval between the date value and 00:00:00 UTC on 1 January 1970.", "var_type": "TimeInterval", "is_static": false, "var_name": "timeIntervalSince1970"}, {"var_description": "The interval between 00:00:00 UTC on 1 January 2001 and the current date and time.", "var_type": "TimeInterval", "is_static": false, "var_name": "timeIntervalSinceReferenceDate"}, {"var_description": "The number of seconds from 1 January 1970 to the reference date, 1 January 2001.", "var_type": "TimeInterval", "is_static": false, "var_name": "timeIntervalBetween1970AndReferenceDate"}, {"var_description": "A textual description of the date value.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A textual description of the date suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the date.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "The computed hash value of the date.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}, {"var_description": "A custom playground Quick Look for the date.", "var_type": "PlaygroundQuickLook", "is_static": false, "var_name": "customPlaygroundQuickLook"}]}