{"package_name": "foundation", "subclass_list": [], "class_description": "You use the JSONSerialization class to convert JSON to Foundation objects and convert Foundation objects to JSON.\nA Foundation object that may be converted to JSON must have the following properties:\nThe top level object is an NSArray or NSDictionary.\nAll objects are instances of NSString, NSNumber, NSArray, NSDictionary, or NSNull.\nAll dictionary keys are instances of NSString.\nNumbers are not NaN or infinity.\nOther rules may apply. Calling isValidJSONObject(_:) or attempting a conversion are the definitive ways to tell if a given object can be converted to JSON data.\nThread Safety\nOn iOS 7 and later and macOS 10.9 and later JSONSerialization is thread safe.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["with", "data"], "param_type": "Data", "param_description": "A data object containing JSON data."}, {"param_name": ["options", "opt"], "param_type": "JSONSerialization.ReadingOptions = []", "param_description": "Options for reading the JSON data and creating the Foundation objects.For possible values, see JSONSerialization.ReadingOptions."}], "class_name": "JSONSerialization", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A Foundation object from the JSON data in data, or nil if an error occurs."], "return_type": ["An"]}, "method_name": "jsonObject", "method_description": "Returns a Foundation object from given JSON data.", "method_declar": "class func jsonObject(with data: Data, options opt: JSONSerialization.ReadingOptions = []) throws -> Any"}, {"params": [{"param_name": ["with", "stream"], "param_type": "InputStream", "param_description": "A stream from which to read JSON data.The stream should be opened and configured. "}, {"param_name": ["options", "opt"], "param_type": "JSONSerialization.ReadingOptions = []", "param_description": "Options for reading the JSON data and creating the Foundation objects.For possible values, see JSONSerialization.ReadingOptions."}], "class_name": "JSONSerialization", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A Foundation object from the JSON data in stream."], "return_type": ["An"]}, "method_name": "jsonObject", "method_description": "Returns a Foundation object from JSON data in a given stream.", "method_declar": "class func jsonObject(with stream: InputStream, options opt: JSONSerialization.ReadingOptions = []) throws -> Any"}, {"params": [{"param_name": ["withJSONObject", "obj"], "param_type": "Any", "param_description": "The object from which to generate JSON data. Must not be nil."}, {"param_name": ["options", "opt"], "param_type": "JSONSerialization.WritingOptions = []", "param_description": "Options for creating the JSON data.See JSONSerialization.WritingOptions for possible values."}], "class_name": "JSONSerialization", "is_static": false, "return_value": {"return_name": [""], "return_description": ["JSON data for obj, or nil if an internal error occurs. The resulting data is encoded in UTF-8."], "return_type": ["Dat"]}, "method_name": "data", "method_description": "Returns JSON data from a Foundation object.", "method_declar": "class func data(withJSONObject obj: Any, options opt: JSONSerialization.WritingOptions = []) throws -> Data"}, {"params": [{"param_name": ["obj"], "param_type": "Any", "param_description": "The object to write to stream."}, {"param_name": ["to", "stream"], "param_type": "OutputStream", "param_description": "The stream to which to write.The stream should be opened and configured."}, {"param_name": ["options", "opt"], "param_type": "JSONSerialization.WritingOptions", "param_description": "Options for writing the JSON data.See JSONSerialization.WritingOptions for possible values."}, {"param_name": ["error"], "param_type": "NSErrorPointer", "param_description": ""}], "class_name": "JSONSerialization", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The number of bytes written to the stream, or 0 if an error occurs."], "return_type": ["In"]}, "method_name": "writeJSONObject", "method_description": "Writes a given JSON object to a stream.", "method_declar": "class func writeJSONObject(_ obj: Any, to stream: OutputStream, options opt: JSONSerialization.WritingOptions = [], error: NSErrorPointer) -> Int"}, {"params": [{"param_name": ["obj"], "param_type": "Any", "param_description": "The object to test."}], "class_name": "JSONSerialization", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if obj can be converted to JSON data, otherwise false."], "return_type": ["Boo"]}, "method_name": "isValidJSONObject", "method_description": "Returns a Boolean value that indicates whether a given object can be converted to JSON data.", "method_declar": "class func isValidJSONObject(_ obj: Any) -> Bool"}], "class_name": "JSONSerialization", "Vars": []}