{"class_description": "Use this class when you want to have an Objective-C method run in its own thread of execution. Threads are especially useful when you need to perform a lengthy task, but don\u2019t want it to block the execution of the rest of the application. In particular, you can use threads to avoid blocking the main thread of the application, which handles user interface and event-related actions. Threads can also be used to divide a large job into several smaller jobs, which can lead to performance increases on multi-core computers.\nThe Thread class supports semantics similar to those of Operation for monitoring the runtime condition of a thread. You can use these semantics to cancel the execution of a thread or determine if the thread is still executing or has finished its task. Canceling a thread requires support from your thread code; see the description for cancel() for more information.\nYou can subclass Thread and override the main() method to implement your thread\u2019s main entry point. If you override main(), you do not need to invoke the inherited behavior by calling super.\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "Thread", "typealias": [], "Vars": [{"var_description": "Not implemented.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSDidBecomeSingleThreaded"}, {"var_description": "An NSThread object posts this notification when it receives the exit() message, before the thread exits. Observer methods invoked to receive this notification execute in the exiting thread, before it exits.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSThreadWillExit"}, {"var_description": "Posted when the first thread is detached from the current thread. The NSThread class posts this notification at most once\u2014the first time a thread is detached using detachNewThreadSelector(_:toTarget:with:) or the start() method. Subsequent invocations of those methods do not post this notification. Observers of this notification have their notification method invoked in the main thread, not the new thread. The observer notification methods always execute before the new thread begins executing.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSWillBecomeMultiThreaded"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}