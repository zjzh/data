{"class_description": "An instance of the XMLDTD class is held as a property of an XMLDocument instance, accessed through the XMLDocument method dtd (and set via setDTD:).\nIn the data model, an XMLDTD object is conceptually similar to namespace and attribute nodes: it is not considered to be a child of the XMLDocument object although it is closely associated with it. It is at the \u201croot\u201d of a shallow tree consisting primarily of nodes representing DTD declarations. Acceptable child nodes are instances of the XMLDTDNode class as well as XMLNode objects representing comment nodes and processing-instruction nodes.\nYou create an NSXMLDTD object in one of three ways: \nBy processing an XML document with its own internal (in-line) DTD\nBy process a standalone (external) DTD\nProgrammatically\nOnce an XMLDTD instance is in place, you can add, remove, and change the XMLDTDNode objects representing various DTD declarations. When you write the document out as XML, the new or modified internal DTD is included (assuming you set the DTD in the XMLDocument instance). You may also programmatically create an external DTD and write that out to its own file.\n", "Methods": [{"method_description": "Initializes and returns an NSXMLDTD object created from the DTD declarations in a URL-referenced source.", "method_name": "init", "params": [{"param_type": "URL", "param_description": "An NSURL object identifying a URL source.", "param_name": ["contentsOf", "url"]}, {"param_type": "XMLNode.Options = []", "param_description": "A bit mask specifying input options; bit-OR multiple options. The current valid options are NSXMLNodePreserveWhitespace and NSXMLNodePreserveEntities; these constants are described in the \"Constants\" section of the XMLNode reference.", "param_name": ["options", "mask"]}], "class_name": "XMLDTD", "method_declar": "convenience init(contentsOf url: URL, options mask: XMLNode.Options = []) throws", "return_value": {"return_description": ["An initialized NSXMLDTD object or nil if initialization fails because of parsing errors or other reasons."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes and returns an NSXMLDTD object created from the DTD declarations encapsulated in an NSData object ", "method_name": "init", "params": [{"param_type": "Data", "param_description": "A data object containing DTD declarations.", "param_name": ["data"]}, {"param_type": "XMLNode.Options = []", "param_description": "A bit mask specifying input options; bit-OR multiple options. The current valid options are NSXMLNodePreserveWhitespace and NSXMLNodePreserveEntities; these constants are described in the \"Constants\" section of the XMLNode reference.", "param_name": ["options", "mask"]}], "class_name": "XMLDTD", "method_declar": "init(data: Data, options mask: XMLNode.Options = []) throws", "return_value": {"return_description": ["An initialized NSXMLDTD object or nil if initialization fails because of parsing errors or other reasons."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds a child node to the end of the list of existing children.", "method_name": "addChild", "params": [{"param_type": "XMLNode", "param_description": "The node object to add to the existing children.", "param_name": ["child"]}], "class_name": "XMLDTD", "method_declar": "func addChild(_ child: XMLNode)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Inserts a child node in the receiver\u2019s list of children at a specific location in the list.", "method_name": "insertChild", "params": [{"param_type": "XMLNode", "param_description": "An XML-node object that represents the child to insert.", "param_name": ["child"]}, {"param_type": "Int", "param_description": "An integer identifying the location in the receiver's list of children to insert child. The indices of subsequent children in the list are incremented by one.", "param_name": ["at", "index"]}], "class_name": "XMLDTD", "method_declar": "func insertChild(_ child: XMLNode, at index: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Inserts an array of child nodes at a specified location in the receiver\u2019s list of children.", "method_name": "insertChildren", "params": [{"param_type": "[XMLNode]", "param_description": "An array of XMLNode objects to insert as children of the receiver.", "param_name": ["children"]}, {"param_type": "Int", "param_description": "An integer identifying the location in the list of current children to make the insertion. The indices of subsequent children in the list are incremented by the number of inserted children.", "param_name": ["at", "index"]}], "class_name": "XMLDTD", "method_declar": "func insertChildren(_ children: [XMLNode], at index: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the child node at a particular location in the receiver\u2019s list of children.", "method_name": "removeChild", "params": [{"param_type": "Int", "param_description": "An integer identifying the child node to remove. The indices of subsequent children in the list are decremented by one.", "param_name": ["at", "index"]}], "class_name": "XMLDTD", "method_declar": "func removeChild(at index: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces a child at a particular index with another child.", "method_name": "replaceChild", "params": [{"param_type": "Int", "param_description": "An integer identifying the position of a node in the receiver's list of child nodes.", "param_name": ["at", "index"]}, {"param_type": "XMLNode", "param_description": "An XMLNode object to replace the object at index.", "param_name": ["with", "node"]}], "class_name": "XMLDTD", "method_declar": "func replaceChild(at index: Int, with node: XMLNode)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes all existing children of the receiver and replaces them with an array of new child nodes.", "method_name": "setChildren", "params": [{"param_type": "[XMLNode]", "param_description": "An array of XMLNode objects. To remove all existing children, pass in nil.", "param_name": ["children"]}], "class_name": "XMLDTD", "method_declar": "func setChildren(_ children: [XMLNode]?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a DTD node representing the predefined entity declaration with the specified name.", "method_name": "predefinedEntityDeclaration", "params": [{"param_type": "String", "param_description": "A string identifying a predefined entity declaration.", "param_name": ["forName", "name"]}], "class_name": "XMLDTD", "method_declar": "class func predefinedEntityDeclaration(forName name: String) -> XMLDTDNode?", "return_value": {"return_description": ["An autoreleased XMLDTDNode object, or nil if there is no match for name."], "return_name": [""], "return_type": ["XMLDTDNod"]}, "is_static": false}, {"method_description": "Returns the DTD node representing an element declaration for a specified element.", "method_name": "elementDeclaration", "params": [{"param_type": "String", "param_description": "", "param_name": ["forName", "name"]}], "class_name": "XMLDTD", "method_declar": "func elementDeclaration(forName name: String) -> XMLDTDNode?", "return_value": {"return_description": ["An autoreleased XMLDTDNode object, or nil if there is no match."], "return_name": [""], "return_type": ["XMLDTDNod"]}, "is_static": false}, {"method_description": "Returns the DTD node representing an attribute-list declaration for a given attribute and its element.", "method_name": "attributeDeclaration", "params": [{"param_type": "String", "param_description": "", "param_name": ["forName", "name"]}, {"param_type": "String", "param_description": "A string object identifying the name of an element. ", "param_name": ["elementName"]}], "class_name": "XMLDTD", "method_declar": "func attributeDeclaration(forName name: String, elementName: String) -> XMLDTDNode?", "return_value": {"return_description": ["An autoreleased XMLDTDNode object, or nil if there is no matching attribute-list declaration."], "return_name": [""], "return_type": ["XMLDTDNod"]}, "is_static": false}, {"method_description": "Returns the DTD node representing the entity declaration for a specified entity.", "method_name": "entityDeclaration", "params": [{"param_type": "String", "param_description": "", "param_name": ["forName", "name"]}], "class_name": "XMLDTD", "method_declar": "func entityDeclaration(forName name: String) -> XMLDTDNode?", "return_value": {"return_description": ["An autoreleased XMLDTDNode object, or nil if there is no match."], "return_name": [""], "return_type": ["XMLDTDNod"]}, "is_static": false}, {"method_description": "Returns the DTD node representing the notation declaration identified by the specified notation name.", "method_name": "notationDeclaration", "params": [{"param_type": "String", "param_description": "", "param_name": ["forName", "name"]}], "class_name": "XMLDTD", "method_declar": "func notationDeclaration(forName name: String) -> XMLDTDNode?", "return_value": {"return_description": ["An autoreleased XMLDTDNode object, or nil if there is no match."], "return_name": [""], "return_type": ["XMLDTDNod"]}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [], "class_name": "XMLDTD", "method_declar": "init()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": ["XMLNode"], "class_name": "XMLDTD", "typealias": [], "Vars": [{"var_description": "Returns the receiver\u2019s public identifier.", "var_type": "String", "is_static": false, "var_name": "publicID"}, {"var_description": "Returns the receiver\u2019s system identifier.", "var_type": "String", "is_static": false, "var_name": "systemID"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}