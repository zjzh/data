{"class_description": "The NSMutableSet class declares the programmatic interface to a mutable, unordered collection of distinct objects.\nThe NSCountedSet class, which is a concrete subclass of NSMutableSet, supports mutable sets that can contain multiple instances of the same element. The NSSet class supports creating and managing immutable sets.\nNSMutableSet is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFMutableSet. See Toll-Free Bridging for more information.\nThere should be little need of subclassing. If you need to customize behavior, it is often better to consider composition instead of subclassing.\nIn a subclass, you must override both of its primitive methods:\nadd(_:)\nremove(_:)\nYou must also override the primitive methods of the NSSet class.\n", "Methods": [{"method_description": "Returns an initialized mutable set with a given initial capacity.", "method_name": "init", "params": [{"param_type": "Int", "param_description": "The initial capacity of the set.", "param_name": ["capacity", "numItems"]}], "class_name": "NSMutableSet", "method_declar": "init(capacity numItems: Int)", "return_value": {"return_description": ["An initialized mutable set with initial capacity to hold numItems members. The returned set might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated set.", "method_name": "init", "params": [], "class_name": "NSMutableSet", "method_declar": "init()", "return_value": {"return_description": ["A set."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds a given object to the set, if it is not already a member.", "method_name": "add", "params": [{"param_type": "Any", "param_description": "The object to add to the set.", "param_name": ["object"]}], "class_name": "NSMutableSet", "method_declar": "func add(_ object: Any)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Evaluates a given predicate against the set\u2019s content and removes from the set those objects for which the predicate returns false.", "method_name": "filter", "params": [{"param_type": "NSPredicate", "param_description": "A predicate.", "param_name": ["using", "predicate"]}], "class_name": "NSMutableSet", "method_declar": "func filter(using predicate: NSPredicate)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes a given object from the set.", "method_name": "remove", "params": [{"param_type": "Any", "param_description": "The object to remove from the set.", "param_name": ["object"]}], "class_name": "NSMutableSet", "method_declar": "func remove(_ object: Any)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Empties the set of all of its members.", "method_name": "removeAllObjects", "params": [], "class_name": "NSMutableSet", "method_declar": "func removeAllObjects()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds to the set each object contained in a given array that is not already a member.", "method_name": "addObjects", "params": [{"param_type": "[Any]", "param_description": "An array of objects to add to the set.", "param_name": ["from", "array"]}], "class_name": "NSMutableSet", "method_declar": "func addObjects(from array: [Any])", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds each object in another given set to the receiving set, if not present.", "method_name": "union", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set of objects to add to the receiving set.", "param_name": ["otherSet"]}], "class_name": "NSMutableSet", "method_declar": "func union(_ otherSet: Set<AnyHashable>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes each object in another given set from the receiving set, if present.", "method_name": "minus", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set of objects to remove from the receiving set.", "param_name": ["otherSet"]}], "class_name": "NSMutableSet", "method_declar": "func minus(_ otherSet: Set<AnyHashable>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes from the receiving set each object that isn\u2019t a member of another given set.", "method_name": "intersect", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set with which to perform the intersection.", "param_name": ["otherSet"]}], "class_name": "NSMutableSet", "method_declar": "func intersect(_ otherSet: Set<AnyHashable>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Empties the receiving set, then adds each object contained in another given set.", "method_name": "setSet", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set whose members replace the receiving set's content.", "param_name": ["otherSet"]}], "class_name": "NSMutableSet", "method_declar": "func setSet(_ otherSet: Set<AnyHashable>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "NSCoder", "param_description": "", "param_name": ["coder", "aDecoder"]}], "class_name": "NSMutableSet", "method_declar": "init?(coder aDecoder: NSCoder)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": ["NSSet"], "class_name": "NSMutableSet", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CustomReflectable", "CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "Sequence"], "package_name": "foundation", "subclass_list": []}