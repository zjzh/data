{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObjectProtocol"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by the parser object to the delegate when it begins parsing a document.", "is_static": false, "method_name": "parserDidStartDocument", "class_name": "XMLParserDelegate", "method_declar": "optional func parserDidStartDocument(_ parser: XMLParser)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by the parser object to the delegate when it has successfully completed parsing.", "is_static": false, "method_name": "parserDidEndDocument", "class_name": "XMLParserDelegate", "method_declar": "optional func parserDidEndDocument(_ parser: XMLParser)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters a start tag for a given element.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String] = [:])", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is the name of an element (in its start tag).", "param_name": ["didStartElement", "elementName"]}, {"param_type": "String", "param_description": "If namespace processing is turned on, contains the URI for the current namespace as a string object.", "param_name": ["namespaceURI"]}, {"param_type": "String", "param_description": "If namespace processing is turned on, contains the qualified name for the current namespace as a string object.", "param_name": ["qualifiedName", "qName"]}, {"param_type": "[String", "param_description": "A dictionary that contains any attributes associated with the element. Keys are the names of attributes, and values are attribute values.", "param_name": ["attributes", "attributeDict"]}, {"param_type": "String]", "param_description": "", "param_name": ["[String"]}, {"param_type": "]", "param_description": "", "param_name": ["String]", "=", "["]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters an end tag for a specific element.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is the name of an element (in its end tag).", "param_name": ["didEndElement", "elementName"]}, {"param_type": "String", "param_description": "If namespace processing is turned on, contains the URI for the current namespace as a string object.", "param_name": ["namespaceURI"]}, {"param_type": "String", "param_description": "If namespace processing is turned on, contains the qualified name for the current namespace as a string object.", "param_name": ["qualifiedName", "qName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate the first time it encounters a given namespace prefix, which is mapped to a URI.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, didStartMappingPrefix prefix: String, toURI namespaceURI: String)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is a namespace prefix.", "param_name": ["didStartMappingPrefix", "prefix"]}, {"param_type": "String", "param_description": "A string that specifies a namespace URI.", "param_name": ["toURI", "namespaceURI"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when a given namespace prefix goes out of scope.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, didEndMappingPrefix prefix: String)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is a namespace prefix.", "param_name": ["didEndMappingPrefix", "prefix"]}]}, {"return_value": {"return_name": [""], "return_description": ["An NSData object that contains the resolution of the given external entity."], "return_type": ["Dat"]}, "method_description": "Sent by a parser object to its delegate when it encounters a given external entity with a specific system ID.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, resolveExternalEntityName name: String, systemID: String?) -> Data?", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "", "param_name": ["resolveExternalEntityName", "name"]}, {"param_type": "String", "param_description": "A string that specifies the system ID for the external entity.", "param_name": ["systemID"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters a fatal error.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, parseErrorOccurred parseError: Error)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "Error", "param_description": "An NSError object describing the parsing error that occurred.", "param_name": ["parseErrorOccurred", "parseError"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters a fatal validation error. NSXMLParser currently does not invoke this method and does not perform validation.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, validationErrorOccurred validationError: Error)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "Error", "param_description": "", "param_name": ["validationErrorOccurred", "validationError"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to provide its delegate with a string representing all or part of the characters of the current element.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundCharacters string: String)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string representing the complete or partial textual content of the current element.", "param_name": ["foundCharacters", "string"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Reported by a parser object to provide its delegate with a string representing all or part of the ignorable whitespace characters of the current element.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundIgnorableWhitespace whitespaceString: String)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string representing all or part of the ignorable whitespace characters of the current element.", "param_name": ["foundIgnorableWhitespace", "whitespaceString"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters a processing instruction.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundProcessingInstructionWithTarget target: String, data: String?)", "params": [{"param_type": "XMLParser", "param_description": "A parser object.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string representing the target of a processing instruction.", "param_name": ["foundProcessingInstructionWithTarget", "target"]}, {"param_type": "String", "param_description": "A string representing the data for a processing instruction.", "param_name": ["data"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters a comment in the XML.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundComment comment: String)", "params": [{"param_type": "XMLParser", "param_description": "An NSXMLParser object parsing XML.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is a the content of a comment in the XML.", "param_name": ["foundComment", "comment"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters a CDATA block.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundCDATA CDATABlock: Data)", "params": [{"param_type": "XMLParser", "param_description": "An NSXMLParser object parsing XML.", "param_name": ["parser"]}, {"param_type": "Data", "param_description": "A data object containing a block of CDATA. ", "param_name": ["foundCDATA", "CDATABlock"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters a declaration of an attribute that is associated with a specific element.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundAttributeDeclarationWithName attributeName: String, forElement elementName: String, type: String?, defaultValue: String?)", "params": [{"param_type": "XMLParser", "param_description": "An NSXMLParser object parsing XML.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is the name of an attribute.", "param_name": ["foundAttributeDeclarationWithName", "attributeName"]}, {"param_type": "String", "param_description": "A string that is the name of an element that has the attribute attributeName.", "param_name": ["forElement", "elementName"]}, {"param_type": "String", "param_description": "A string, such as \"ENTITY\", \"NOTATION\", or \"ID\", that indicates the type of the attribute.", "param_name": ["type"]}, {"param_type": "String", "param_description": "A string that specifies the default value of the attribute.", "param_name": ["defaultValue"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters a declaration of an element with a given model.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundElementDeclarationWithName elementName: String, model: String)", "params": [{"param_type": "XMLParser", "param_description": "An NSXMLParser object parsing XML.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is the name of an element.", "param_name": ["foundElementDeclarationWithName", "elementName"]}, {"param_type": "String", "param_description": "A string that specifies a model for elementName.", "param_name": ["model"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters an external entity declaration.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundExternalEntityDeclarationWithName name: String, publicID: String?, systemID: String?)", "params": [{"param_type": "XMLParser", "param_description": "An NSXMLParser object parsing XML.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "", "param_name": ["foundExternalEntityDeclarationWithName", "name"]}, {"param_type": "String", "param_description": "A string that specifies the public ID associated with entityName.", "param_name": ["publicID"]}, {"param_type": "String", "param_description": "A string that specifies the system ID associated with entityName. ", "param_name": ["systemID"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to the delegate when it encounters an internal entity declaration.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundInternalEntityDeclarationWithName name: String, value: String?)", "params": [{"param_type": "XMLParser", "param_description": "An NSXMLParser object parsing XML.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is the declared name of an internal entity.", "param_name": ["foundInternalEntityDeclarationWithName", "name"]}, {"param_type": "String", "param_description": "A string that is the value of entity name.", "param_name": ["value"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters an unparsed entity declaration.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundUnparsedEntityDeclarationWithName name: String, publicID: String?, systemID: String?, notationName: String?)", "params": [{"param_type": "XMLParser", "param_description": "An NSXMLParser object parsing XML.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is the name of the unparsed entity in the declaration.", "param_name": ["foundUnparsedEntityDeclarationWithName", "name"]}, {"param_type": "String", "param_description": "A string specifying the public ID associated with the entity name.", "param_name": ["publicID"]}, {"param_type": "String", "param_description": "A string specifying the system ID associated with the entity name.", "param_name": ["systemID"]}, {"param_type": "String", "param_description": "A string specifying a notation of the declaration of entity name.", "param_name": ["notationName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent by a parser object to its delegate when it encounters a notation declaration.", "is_static": false, "method_name": "parser", "class_name": "XMLParserDelegate", "method_declar": "optional func parser(_ parser: XMLParser, foundNotationDeclarationWithName name: String, publicID: String?, systemID: String?)", "params": [{"param_type": "XMLParser", "param_description": "An NSXMLParser object parsing XML.", "param_name": ["parser"]}, {"param_type": "String", "param_description": "A string that is the name of the notation.", "param_name": ["foundNotationDeclarationWithName", "name"]}, {"param_type": "String", "param_description": "A string specifying the public ID associated with the notation name.", "param_name": ["publicID"]}, {"param_type": "String", "param_description": "A string specifying the system ID associated with the notation name.", "param_name": ["systemID"]}]}], "class_type": "protocol", "class_name": "XMLParserDelegate", "Vars": [], "interface_list": [], "class_description": "", "package_name": "foundation"}