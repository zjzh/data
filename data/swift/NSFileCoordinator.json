{"package_name": "foundation", "subclass_list": [], "class_description": "The NSFileCoordinator class coordinates the reading and writing of files and directories among multiple processes and objects in the same process. You use instances of this class as is to read from, write to, modify the attributes of, change the location of, or delete a file or directory, but before your code to perform those actions executes, the file coordinator lets registered file presenter objects perform any tasks that they might require to ensure their own integrity. For example, if you want to change the location of a file, other objects interested in that file need to know where you intend to move it so that they can update their references.\nObjects that adopt the NSFilePresenter protocol must register themselves with the NSFileCoordinator class to be notified of any pending changes. They do this by calling the addFilePresenter(_:) class method. A file presenter must balance calls to addFilePresenter(_:) with a call to removeFilePresenter(_:) before being released, even in a garbage-collected application. The file presenter class maintains a list of active file presenter objects in the current application and uses that list, plus the file coordinator classes in other processes, to deliver notifications to all of the objects interested in a particular item.\nInstances of NSFileCoordinator are meant to be used on a per-file-operation basis, where a file operation is something like opening and reading the contents of a file or moving a batch of files and directories to a new location. There is no benefit to keeping a file coordinator object past the length of the planned operation. In fact, because file coordinators retain file presenter objects, keeping one around could prevent the file presenter objects from being released in a timely manner.\nFor information about implementing a file presenter object to receive file-related notifications, see NSFilePresenter.\nIf your app or extension enters the background with an active file presenter, it may be terminated by the system in order to prevent deadlock on that file. To prevent this situation, call removeFilePresenter(_:) to remove the file presenter in the applicationDidEnterBackground(_:) method or in response to a didEnterBackgroundNotification notification. Call addFilePresenter(_:) to add the file presenter again in the applicationWillEnterForeground(_:) method or in response to a willEnterForegroundNotification notification.\nNote\nThe UIDocument class automatically removes itself when your app goes to the background. It automatically adds itself again when your app returns to the foreground.\nA coordinated read or write will automatically begin a background task when granted, similar to one created with the beginBackgroundTask(expirationHandler:) method. This helps ensure that your app or extension has sufficient time to finish the read or write operation if it\u2019s suspended, without creating a deadlock on access to that file by other processes. If a process is suspended while waiting for a coordinated read or write to be granted, the request is canceled, and an NSError object with the code NSUserCancelledError is produced. If the background task expires, the process is terminated.\nNote\nThe UIDocument class automatically requests additional background time and safely performs coordinated reads and writes when loading and saving the document.\nEach file coordinator object you create should be used on a single thread only. If you need to coordinate file operations across multiple objects in different threads, each object should create its own file coordinator. \n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["filePresenter", "filePresenterOrNil"], "param_type": "NSFilePresenter", "param_description": "The file presenter object that is initiating some action on its file or directory. This object is assumed to be performing the relevant file or directory operations and therefore does not receive notifications about those operations from the returned file coordinator object. This parameter may be nil."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [], "return_description": ["A file coordinator object to use to coordinate file-related operations."], "return_type": []}, "method_name": "init", "method_description": "Initializes and returns a file coordinator object using the specified file presenter.", "method_declar": "init(filePresenter filePresenterOrNil: NSFilePresenter?)"}, {"params": [{"param_name": ["filePresenter"], "param_type": "NSFilePresenter", "param_description": "The file presenter object to register."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "addFilePresenter", "method_description": "Registers the specified file presenter object so that it can receive notifications.", "method_declar": "class func addFilePresenter(_ filePresenter: NSFilePresenter)"}, {"params": [{"param_name": ["filePresenter"], "param_type": "NSFilePresenter", "param_description": "The file presenter object to unregister. If the object is not currently registered, this method does nothing."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "removeFilePresenter", "method_description": "Unregisters the specified file presenter object.", "method_declar": "class func removeFilePresenter(_ filePresenter: NSFilePresenter)"}, {"params": [{"param_name": ["with", "intents"], "param_type": "[NSFileAccessIntent]", "param_description": "An array of file access intent objects, representing the individual read and write operations."}, {"param_name": ["queue"], "param_type": "OperationQueue", "param_description": "The operation queue on which the accessor block is executed. The queue must not be nil."}, {"param_name": ["byAccessor", "accessor"], "param_type": "@escaping (Error) -> Void", "param_description": "A Block object containing the file operations corresponding to the file access intent objects in the intents array. The accessor block takes the following parameter:errorIf an error occurs while waiting for access, this parameter contains an NSError object that describes the problem. If access is successfully granted, it is set to nil, and you may perform the intended file access.Do not attempt to access the files if the error parameter contains a non-nil value."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "coordinate", "method_description": "Performs a number of coordinated-read or -write operations asynchronously.", "method_declar": "func coordinate(with intents: [NSFileAccessIntent], queue: OperationQueue, byAccessor accessor: @escaping (Error?) -> Void)"}, {"params": [{"param_name": ["readingItemAt", "url"], "param_type": "URL", "param_description": "A URL identifying the file or directory to read. If other objects or processes are acting on the item at the URL, the actual URL passed to the reader parameter may be different than the one in this parameter. "}, {"param_name": ["options"], "param_type": "NSFileCoordinator.ReadingOptions", "param_description": "One of the reading options described in NSFileCoordinator.ReadingOptions. If you pass no options, the savePresentedItemChanges(completionHandler:) method of relevant file presenters is called before your block executes."}, {"param_name": ["error", "outError"], "param_type": "NSErrorPointer", "param_description": "On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this read operation, that error is returned in this parameter and the block in the reader parameter is not executed. If you cancel this operation before the reader block is executed, this parameter contains an error object on output."}, {"param_name": ["byAccessor", "reader"], "param_type": "(URL) -> Void", "param_description": "A Block object containing the file operations you want to perform in a coordinated manner. This block receives an NSURL object containing the URL of the item and returns no value. Always use the URL passed into the block instead of the value in the url parameter."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "coordinate", "method_description": "Initiates a read operation on a single file or directory using the specified options.", "method_declar": "func coordinate(readingItemAt url: URL, options: NSFileCoordinator.ReadingOptions = [], error outError: NSErrorPointer, byAccessor reader: (URL) -> Void)"}, {"params": [{"param_name": ["writingItemAt", "url"], "param_type": "URL", "param_description": "A URL identifying the file or directory to write to. If other objects or processes are acting on the item at the URL, the actual URL passed to writer parameter may be different from the one in this parameter. "}, {"param_name": ["options"], "param_type": "NSFileCoordinator.WritingOptions", "param_description": "One of the writing options described in NSFileCoordinator.WritingOptions. The options you specify partially determine how file presenters are notified and how this file coordinator object waits to execute your block. "}, {"param_name": ["error", "outError"], "param_type": "NSErrorPointer", "param_description": "On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this write operation, that error is returned in this parameter and the block in the writer parameter is not executed. If you cancel this operation before the writer block is executed, this parameter contains an error object on output."}, {"param_name": ["byAccessor", "writer"], "param_type": "(URL) -> Void", "param_description": "A Block object containing the file operations you want to perform in a coordinated manner. This block receives an NSURL object containing the URL of the item and returns no value. Always use the URL passed into the block instead of the value in the url parameter."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "coordinate", "method_description": "Initiates a write operation on a single file or directory using the specified options.", "method_declar": "func coordinate(writingItemAt url: URL, options: NSFileCoordinator.WritingOptions = [], error outError: NSErrorPointer, byAccessor writer: (URL) -> Void)"}, {"params": [{"param_name": ["readingItemAt", "readingURL"], "param_type": "URL", "param_description": "A URL identifying the file or directory to read. If other objects or processes are acting on the item at the URL, the actual URL passed to the block in the readerWriter parameter may be different than the one in this parameter. "}, {"param_name": ["options", "readingOptions"], "param_type": "NSFileCoordinator.ReadingOptions", "param_description": "One of the reading options described in NSFileCoordinator.ReadingOptions. If you pass 0 for this parameter, the savePresentedItemChanges(completionHandler:) method of relevant file presenters is called before your block executes."}, {"param_name": ["writingItemAt", "writingURL"], "param_type": "URL", "param_description": "A URL identifying the file or directory to write. If other objects or processes are acting on the item at the URL, the actual URL passed to the block in the readerWriter parameter may be different than the one in this parameter. "}, {"param_name": ["options", "writingOptions"], "param_type": "NSFileCoordinator.WritingOptions", "param_description": "One of the writing options described in NSFileCoordinator.WritingOptions. The options you specify partially determine how file presenters are notified and how this file coordinator object waits to execute your block. "}, {"param_name": ["error", "outError"], "param_type": "NSErrorPointer", "param_description": "On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this operation, that error is returned in this parameter and the block in the readerWriter parameter is not executed. If you cancel this operation before the readerWriter block is executed, this parameter contains an error object on output."}, {"param_name": ["byAccessor", "readerWriter"], "param_type": "(URL, URL) -> Void", "param_description": "A Block object containing the read and write operations you want to perform in a coordinated manner. This block receives NSURL objects containing the URLs of the items to read and write and returns no value. Always use the URLs passed into the block instead of the values in the readingURL and writingURL parameters."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "coordinate", "method_description": "Initiates a read operation that contains a follow-up write operation.  ", "method_declar": "func coordinate(readingItemAt readingURL: URL, options readingOptions: NSFileCoordinator.ReadingOptions = [], writingItemAt writingURL: URL, options writingOptions: NSFileCoordinator.WritingOptions = [], error outError: NSErrorPointer, byAccessor readerWriter: (URL, URL) -> Void)"}, {"params": [{"param_name": ["writingItemAt", "url1"], "param_type": "URL", "param_description": "A URL identifying the first file or directory to write. If other objects or processes are acting on the item at the URL, the actual URL passed to the block in the writer parameter may be different from the one in this parameter. "}, {"param_name": ["options", "options1"], "param_type": "NSFileCoordinator.WritingOptions", "param_description": "One of the writing options described in NSFileCoordinator.WritingOptions. "}, {"param_name": ["writingItemAt", "url2"], "param_type": "URL", "param_description": "A URL identifying the other file or directory to write. If other objects or processes are acting on the item at the URL, the actual URL passed to the block in the writer parameter may be different from the one in this parameter. "}, {"param_name": ["options", "options2"], "param_type": "NSFileCoordinator.WritingOptions", "param_description": "One of the writing options described in NSFileCoordinator.WritingOptions. The options you specify partially determine how file presenters are notified and how this file coordinator object waits to execute your block. "}, {"param_name": ["error", "outError"], "param_type": "NSErrorPointer", "param_description": "On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this operation, that error is returned in this parameter and the block in the writer parameter is not executed. If you cancel this operation before the writer block is executed, this parameter contains an error object on output."}, {"param_name": ["byAccessor", "writer"], "param_type": "(URL, URL) -> Void", "param_description": "A Block object containing the write operations you want to perform in a coordinated manner. This block receives NSURL objects containing the URLs of the items to write and returns no value. Always use the URLs passed into the block instead of the values in the url1 and url2 parameters."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "coordinate", "method_description": "Initiates a write operation that involves a secondary write operation.  ", "method_declar": "func coordinate(writingItemAt url1: URL, options options1: NSFileCoordinator.WritingOptions = [], writingItemAt url2: URL, options options2: NSFileCoordinator.WritingOptions = [], error outError: NSErrorPointer, byAccessor writer: (URL, URL) -> Void)"}, {"params": [{"param_name": ["forReadingItemsAt", "readingURLs"], "param_type": "[URL]", "param_description": "An array of NSURL objects identifying the items you want to read. "}, {"param_name": ["options", "readingOptions"], "param_type": "NSFileCoordinator.ReadingOptions", "param_description": "One of the reading options described in NSFileCoordinator.ReadingOptions. If you pass 0 for this parameter, the savePresentedItemChanges(completionHandler:) method of relevant file presenters is called before your block executes."}, {"param_name": ["writingItemsAt", "writingURLs"], "param_type": "[URL]", "param_description": "An array of NSURL objects identifying the items you want to write."}, {"param_name": ["options", "writingOptions"], "param_type": "NSFileCoordinator.WritingOptions", "param_description": "One of the writing options described in NSFileCoordinator.WritingOptions. The options you specify partially determine how file presenters are notified and how this file coordinator object waits to execute your block. "}, {"param_name": ["error", "outError"], "param_type": "NSErrorPointer", "param_description": "On input, a pointer to a pointer for an error object. If a file presenter encounters an error while preparing for this operation, that error is returned in this parameter and the block in the writer parameter is not executed. If you cancel this operation before the batchAccessor block is executed, this parameter contains an error object on output."}, {"param_name": ["byAccessor", "batchAccessor"], "param_type": "(() -> Void) -> Void", "param_description": "A Block object containing additional calls to methods of this class.The block takes the following parameter:completionHandlerA completion handler block. The batch accessor must call the completion handler when it has finished its read and write calls."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "prepare", "method_description": "Prepare to read or write from multiple files in a single batch operation.", "method_declar": "func prepare(forReadingItemsAt readingURLs: [URL], options readingOptions: NSFileCoordinator.ReadingOptions = [], writingItemsAt writingURLs: [URL], options writingOptions: NSFileCoordinator.WritingOptions = [], error outError: NSErrorPointer, byAccessor batchAccessor: (() -> Void) -> Void)"}, {"params": [{"param_name": ["at", "oldURL"], "param_type": "URL", "param_description": "The old location of the file or directory."}, {"param_name": ["willMoveTo", "newURL"], "param_type": "URL", "param_description": "The new location of the file or directory."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "item", "method_description": "Announces that your app is moving a file to a new URL.", "method_declar": "func item(at oldURL: URL, willMoveTo newURL: URL)"}, {"params": [{"param_name": ["at", "oldURL"], "param_type": "URL", "param_description": "The old location of the file or directory."}, {"param_name": ["didMoveTo", "newURL"], "param_type": "URL", "param_description": "The new location of the file or directory."}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "item", "method_description": "Notifies relevant file presenters that the location of a file or directory changed.", "method_declar": "func item(at oldURL: URL, didMoveTo newURL: URL)"}, {"params": [], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "cancel", "method_description": "Cancels any active file coordination calls.", "method_declar": "func cancel()"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": ""}, {"param_name": ["didChangeUbiquityAttributes", "attributes"], "param_type": "Set<URLResourceKey>", "param_description": ""}], "class_name": "NSFileCoordinator", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "item", "method_description": "Tells observing file providers that the item's ubiquity attributes have changed.", "method_declar": "func item(at url: URL, didChangeUbiquityAttributes attributes: Set<URLResourceKey>)"}], "class_name": "NSFileCoordinator", "Vars": [{"var_description": "Returns an array containing the currently registered file presenter objects. ", "var_type": "[NSFilePresenter]", "is_static": false, "var_name": "filePresenters"}, {"var_description": "A string that uniquely identifies the file access that was performed by this file coordinator.", "var_type": "String", "is_static": false, "var_name": "purposeIdentifier"}]}