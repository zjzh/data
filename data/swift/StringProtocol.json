{"class_description": "Do not declare new conformances to StringProtocol. Only the String and Substring types in the standard library are valid conforming types.\n", "Methods": [{"method_description": "Creates a string from the null-terminated, UTF-8 encoded sequence of bytes at the given pointer.Required.", "method_name": "init", "params": [{"param_type": "UnsafePointer<CChar>", "param_description": "A pointer to a sequence of contiguous, UTF-8 encoded bytes ending just before the first zero byte.", "param_name": ["cString", "nullTerminatedUTF8"]}], "class_name": "StringProtocol", "method_declar": "init(cString nullTerminatedUTF8: UnsafePointer<CChar>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string from the given Unicode code units in the specified encoding.Required.", "method_name": "init", "params": [{"param_type": "Collection", "param_description": "A collection of code units encoded in the encoding specified in sourceEncoding.", "param_name": ["decoding", "codeUnits"]}, {"param_type": "Encoding.Type", "param_description": "The encoding in which codeUnits should be interpreted.", "param_name": ["as", "sourceEncoding"]}], "class_name": "StringProtocol", "method_declar": "init<C, Encoding>(decoding codeUnits: C, as sourceEncoding: Encoding.Type) where C : Collection, Encoding : _UnicodeEncoding, C.Element == Encoding.CodeUnit", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string from the null-terminated sequence of bytes at the given pointer.Required.", "method_name": "init", "params": [{"param_type": "UnsafePointer<UnicodeEncoding.CodeUnit>", "param_description": "A pointer to a sequence of contiguous code units in the encoding specified in sourceEncoding, ending just before the first zero code unit.", "param_name": ["decodingCString", "nullTerminatedCodeUnits"]}, {"param_type": "Encoding.Type", "param_description": "The encoding in which the code units should be interpreted.", "param_name": ["as", "sourceEncoding"]}], "class_name": "StringProtocol", "method_declar": "init<Encoding>(decodingCString nullTerminatedCodeUnits: UnsafePointer<Encoding.CodeUnit>, as sourceEncoding: Encoding.Type) where Encoding : _UnicodeEncoding", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "addingPercentEncoding", "params": [{"param_type": "CharacterSet", "param_description": "", "param_name": ["withAllowedCharacters", "allowedCharacters"]}], "class_name": "StringProtocol", "method_declar": "func addingPercentEncoding(withAllowedCharacters allowedCharacters: CharacterSet) -> String?", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "appending", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["aString"]}], "class_name": "StringProtocol", "method_declar": "func appending<T>(_ aString: T) -> String where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "", "method_name": "appendingFormat", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["format"]}, {"param_type": "CVarArg...", "param_description": "", "param_name": ["arguments"]}], "class_name": "StringProtocol", "method_declar": "func appendingFormat<T>(_ format: T, _ arguments: CVarArg...) -> String where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "", "method_name": "applyingTransform", "params": [{"param_type": "StringTransform", "param_description": "", "param_name": ["transform"]}, {"param_type": "Bool", "param_description": "", "param_name": ["reverse"]}], "class_name": "StringProtocol", "method_declar": "func applyingTransform(_ transform: StringTransform, reverse: Bool) -> String?", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "cString", "params": [{"param_type": "String.Encoding", "param_description": "", "param_name": ["using", "encoding"]}], "class_name": "StringProtocol", "method_declar": "func cString(using encoding: String.Encoding) -> [CChar]?", "return_value": {"return_description": [], "return_name": [""], "return_type": ["[CChar"]}, "is_static": false}, {"method_description": "", "method_name": "canBeConverted", "params": [{"param_type": "String.Encoding", "param_description": "", "param_name": ["to", "encoding"]}], "class_name": "StringProtocol", "method_declar": "func canBeConverted(to encoding: String.Encoding) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "", "method_name": "capitalized", "params": [{"param_type": "Locale", "param_description": "", "param_name": ["with", "locale"]}], "class_name": "StringProtocol", "method_declar": "func capitalized(with locale: Locale?) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "caseInsensitiveCompare", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["aString"]}], "class_name": "StringProtocol", "method_declar": "func caseInsensitiveCompare<T>(_ aString: T) -> ComparisonResult where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "", "method_name": "commonPrefix", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["with", "aString"]}, {"param_type": "String.CompareOptions = []", "param_description": "", "param_name": ["options"]}], "class_name": "StringProtocol", "method_declar": "func commonPrefix<T>(with aString: T, options: String.CompareOptions = []) -> String where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "", "method_name": "compare", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["aString"]}, {"param_type": "String.CompareOptions", "param_description": "", "param_name": ["options", "mask"]}, {"param_type": "Range<Self.Index>", "param_description": "", "param_name": ["range"]}, {"param_type": "Locale = nil", "param_description": "", "param_name": ["locale"]}], "class_name": "StringProtocol", "method_declar": "func compare<T>(_ aString: T, options mask: String.CompareOptions = [], range: Range<Self.Index>? = nil, locale: Locale? = nil) -> ComparisonResult where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "", "method_name": "completePath", "params": [{"param_type": "UnsafeMutablePointer<String>", "param_description": "", "param_name": ["into", "outputName"]}, {"param_type": "Bool", "param_description": "", "param_name": ["caseSensitive"]}, {"param_type": "UnsafeMutablePointer<[String]>", "param_description": "", "param_name": ["matchesInto", "outputArray"]}, {"param_type": "[String] = nil", "param_description": "", "param_name": ["filterTypes"]}], "class_name": "StringProtocol", "method_declar": "func completePath(into outputName: UnsafeMutablePointer<String>? = nil, caseSensitive: Bool, matchesInto outputArray: UnsafeMutablePointer<[String]>? = nil, filterTypes: [String]? = nil) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "", "method_name": "components", "params": [{"param_type": "CharacterSet", "param_description": "", "param_name": ["separatedBy", "separator"]}], "class_name": "StringProtocol", "method_declar": "func components(separatedBy separator: CharacterSet) -> [String]", "return_value": {"return_description": [], "return_name": [""], "return_type": ["[String"]}, "is_static": false}, {"method_description": "", "method_name": "components", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["separatedBy", "separator"]}], "class_name": "StringProtocol", "method_declar": "func components<T>(separatedBy separator: T) -> [String] where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["[String]"]}, "is_static": false}, {"method_description": "", "method_name": "contains", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["other"]}], "class_name": "StringProtocol", "method_declar": "func contains<T>(_ other: T) -> Bool where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "", "method_name": "data", "params": [{"param_type": "String.Encoding", "param_description": "", "param_name": ["using", "encoding"]}, {"param_type": "Bool = false", "param_description": "", "param_name": ["allowLossyConversion"]}], "class_name": "StringProtocol", "method_declar": "func data(using encoding: String.Encoding, allowLossyConversion: Bool = false) -> Data?", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "", "method_name": "enumerateLines", "params": [{"param_type": "@escaping (String, inout Bool) -> Void", "param_description": "", "param_name": ["invoking", "body"]}], "class_name": "StringProtocol", "method_declar": "func enumerateLines(invoking body: @escaping (String, inout Bool) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "", "method_name": "enumerateLinguisticTags", "params": [{"param_type": "RangeExpression", "param_description": "", "param_name": ["in", "range"]}, {"param_type": "StringProtocol", "param_description": "", "param_name": ["scheme", "tagScheme"]}, {"param_type": "NSLinguisticStringProtocolagger.Options", "param_description": "", "param_name": ["options", "opts"]}, {"param_type": "NSOrthography", "param_description": "", "param_name": ["orthography"]}, {"param_type": "(String, Range<Self.Index>, Range<Self.Index>, inout Bool) -> Void", "param_description": "", "param_name": ["invoking", "body"]}], "class_name": "StringProtocol", "method_declar": "func enumerateLinguisticTags<T, R>(in range: R, scheme tagScheme: T, options opts: NSLinguisticTagger.Options = [], orthography: NSOrthography? = nil, invoking body: (String, Range<Self.Index>, Range<Self.Index>, inout Bool) -> Void) where T : StringProtocol, R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "", "method_name": "enumerateSubstrings", "params": [{"param_type": "RangeExpression", "param_description": "", "param_name": ["in", "range"]}, {"param_type": "String.EnumerationOptions", "param_description": "", "param_name": ["options", "opts"]}, {"param_type": "@escaping (String, Range<Self.Index>, Range<Self.Index>, inout Bool) -> Void", "param_description": "", "param_name": ["body"]}], "class_name": "StringProtocol", "method_declar": "func enumerateSubstrings<R>(in range: R, options opts: String.EnumerationOptions = [], _ body: @escaping (String?, Range<Self.Index>, Range<Self.Index>, inout Bool) -> Void) where R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "", "method_name": "folding", "params": [{"param_type": "String.CompareOptions", "param_description": "", "param_name": ["options"]}, {"param_type": "Locale", "param_description": "", "param_name": ["locale"]}], "class_name": "StringProtocol", "method_declar": "func folding(options: String.CompareOptions = [], locale: Locale?) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "getBytes", "params": [{"param_type": "inout [UInt8]", "param_description": "", "param_name": ["buffer"]}, {"param_type": "Int", "param_description": "", "param_name": ["maxLength", "maxBufferCount"]}, {"param_type": "UnsafeMutablePointer<Int>", "param_description": "", "param_name": ["usedLength", "usedBufferCount"]}, {"param_type": "String.Encoding", "param_description": "", "param_name": ["encoding"]}, {"param_type": "String.EncodingConversionOptions", "param_description": "", "param_name": ["options"]}, {"param_type": "RangeExpression", "param_description": "", "param_name": ["range"]}, {"param_type": "UnsafeMutablePointer<Range<Self.Index>>", "param_description": "", "param_name": ["remaining", "leftover"]}], "class_name": "StringProtocol", "method_declar": "func getBytes<R>(_ buffer: inout [UInt8], maxLength maxBufferCount: Int, usedLength usedBufferCount: UnsafeMutablePointer<Int>, encoding: String.Encoding, options: String.EncodingConversionOptions = [], range: R, remaining leftover: UnsafeMutablePointer<Range<Self.Index>>) -> Bool where R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "", "method_name": "getCString", "params": [{"param_type": "inout [CChar]", "param_description": "", "param_name": ["buffer"]}, {"param_type": "Int", "param_description": "", "param_name": ["maxLength"]}, {"param_type": "String.Encoding", "param_description": "", "param_name": ["encoding"]}], "class_name": "StringProtocol", "method_declar": "func getCString(_ buffer: inout [CChar], maxLength: Int, encoding: String.Encoding) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "", "method_name": "getLineStart", "params": [{"param_type": "UnsafeMutablePointer<Self.Index>", "param_description": "", "param_name": ["start"]}, {"param_type": "UnsafeMutablePointer<Self.Index>", "param_description": "", "param_name": ["end"]}, {"param_type": "UnsafeMutablePointer<Self.Index>", "param_description": "", "param_name": ["contentsEnd"]}, {"param_type": "RangeExpression", "param_description": "", "param_name": ["for", "range"]}], "class_name": "StringProtocol", "method_declar": "func getLineStart<R>(_ start: UnsafeMutablePointer<Self.Index>, end: UnsafeMutablePointer<Self.Index>, contentsEnd: UnsafeMutablePointer<Self.Index>, for range: R) where R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "getParagraphStart", "params": [{"param_type": "UnsafeMutablePointer<Self.Index>", "param_description": "", "param_name": ["start"]}, {"param_type": "UnsafeMutablePointer<Self.Index>", "param_description": "", "param_name": ["end"]}, {"param_type": "UnsafeMutablePointer<Self.Index>", "param_description": "", "param_name": ["contentsEnd"]}, {"param_type": "RangeExpression", "param_description": "", "param_name": ["for", "range"]}], "class_name": "StringProtocol", "method_declar": "func getParagraphStart<R>(_ start: UnsafeMutablePointer<Self.Index>, end: UnsafeMutablePointer<Self.Index>, contentsEnd: UnsafeMutablePointer<Self.Index>, for range: R) where R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Required. Default implementation provided.", "method_name": "hasPrefix", "params": [{"param_type": "String", "param_description": "", "param_name": ["prefix"]}], "class_name": "StringProtocol", "method_declar": "func hasPrefix(_ prefix: String) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Required. Default implementation provided.", "method_name": "hasSuffix", "params": [{"param_type": "String", "param_description": "", "param_name": ["prefix"]}], "class_name": "StringProtocol", "method_declar": "func hasSuffix(_ prefix: String) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "", "method_name": "lengthOfBytes", "params": [{"param_type": "String.Encoding", "param_description": "", "param_name": ["using", "encoding"]}], "class_name": "StringProtocol", "method_declar": "func lengthOfBytes(using encoding: String.Encoding) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "", "method_name": "lineRange", "params": [{"param_type": "RangeExpression", "param_description": "", "param_name": ["for", "aRange"]}], "class_name": "StringProtocol", "method_declar": "func lineRange<R>(for aRange: R) -> Range<Self.Index> where R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Self.Index>"]}, "is_static": false}, {"method_description": "", "method_name": "linguisticTags", "params": [{"param_type": "RangeExpression", "param_description": "", "param_name": ["in", "range"]}, {"param_type": "StringProtocol", "param_description": "", "param_name": ["scheme", "tagScheme"]}, {"param_type": "NSLinguisticStringProtocolagger.Options", "param_description": "", "param_name": ["options", "opts"]}, {"param_type": "NSOrthography", "param_description": "", "param_name": ["orthography"]}, {"param_type": "UnsafeMutablePointer<[Range<Self.Index>]> = nil", "param_description": "", "param_name": ["tokenRanges"]}], "class_name": "StringProtocol", "method_declar": "func linguisticTags<T, R>(in range: R, scheme tagScheme: T, options opts: NSLinguisticTagger.Options = [], orthography: NSOrthography? = nil, tokenRanges: UnsafeMutablePointer<[Range<Self.Index>]>? = nil) -> [String] where T : StringProtocol, R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["[String]"]}, "is_static": false}, {"method_description": "", "method_name": "localizedCaseInsensitiveCompare", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["aString"]}], "class_name": "StringProtocol", "method_declar": "func localizedCaseInsensitiveCompare<T>(_ aString: T) -> ComparisonResult where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "", "method_name": "localizedCaseInsensitiveContains", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["other"]}], "class_name": "StringProtocol", "method_declar": "func localizedCaseInsensitiveContains<T>(_ other: T) -> Bool where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "", "method_name": "localizedCompare", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["aString"]}], "class_name": "StringProtocol", "method_declar": "func localizedCompare<T>(_ aString: T) -> ComparisonResult where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "", "method_name": "localizedStandardCompare", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["string"]}], "class_name": "StringProtocol", "method_declar": "func localizedStandardCompare<T>(_ string: T) -> ComparisonResult where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "", "method_name": "localizedStandardContains", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["string"]}], "class_name": "StringProtocol", "method_declar": "func localizedStandardContains<T>(_ string: T) -> Bool where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "", "method_name": "localizedStandardRange", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["of", "string"]}], "class_name": "StringProtocol", "method_declar": "func localizedStandardRange<T>(of string: T) -> Range<Self.Index>? where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Self.Index>"]}, "is_static": false}, {"method_description": "Required.", "method_name": "lowercased", "params": [], "class_name": "StringProtocol", "method_declar": "func lowercased() -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "lowercased", "params": [{"param_type": "Locale", "param_description": "", "param_name": ["with", "locale"]}], "class_name": "StringProtocol", "method_declar": "func lowercased(with locale: Locale?) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "maximumLengthOfBytes", "params": [{"param_type": "String.Encoding", "param_description": "", "param_name": ["using", "encoding"]}], "class_name": "StringProtocol", "method_declar": "func maximumLengthOfBytes(using encoding: String.Encoding) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "", "method_name": "padding", "params": [{"param_type": "Int", "param_description": "", "param_name": ["toLength", "newLength"]}, {"param_type": "StringProtocol", "param_description": "", "param_name": ["withPad", "padString"]}, {"param_type": "Int", "param_description": "", "param_name": ["startingAt", "padIndex"]}], "class_name": "StringProtocol", "method_declar": "func padding<T>(toLength newLength: Int, withPad padString: T, startingAt padIndex: Int) -> String where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "", "method_name": "paragraphRange", "params": [{"param_type": "RangeExpression", "param_description": "", "param_name": ["for", "aRange"]}], "class_name": "StringProtocol", "method_declar": "func paragraphRange<R>(for aRange: R) -> Range<Self.Index> where R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Self.Index>"]}, "is_static": false}, {"method_description": "", "method_name": "propertyList", "params": [], "class_name": "StringProtocol", "method_declar": "func propertyList() -> Any", "return_value": {"return_description": [], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "", "method_name": "propertyListFromStringsFileFormat", "params": [], "class_name": "StringProtocol", "method_declar": "func propertyListFromStringsFileFormat() -> [String : String]", "return_value": {"return_description": [], "return_name": [["[String"]], "return_type": ["String"]}, "is_static": false}, {"method_description": "", "method_name": "range", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["of", "aString"]}, {"param_type": "String.CompareOptions", "param_description": "", "param_name": ["options", "mask"]}, {"param_type": "Range<Self.Index>", "param_description": "", "param_name": ["range", "searchRange"]}, {"param_type": "Locale = nil", "param_description": "", "param_name": ["locale"]}], "class_name": "StringProtocol", "method_declar": "func range<T>(of aString: T, options mask: String.CompareOptions = [], range searchRange: Range<Self.Index>? = nil, locale: Locale? = nil) -> Range<Self.Index>? where T : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Self.Index>"]}, "is_static": false}, {"method_description": "", "method_name": "rangeOfCharacter", "params": [{"param_type": "CharacterSet", "param_description": "", "param_name": ["from", "aSet"]}, {"param_type": "String.CompareOptions", "param_description": "", "param_name": ["options", "mask"]}, {"param_type": "Range<Self.Index> = nil", "param_description": "", "param_name": ["range", "aRange"]}], "class_name": "StringProtocol", "method_declar": "func rangeOfCharacter(from aSet: CharacterSet, options mask: String.CompareOptions = [], range aRange: Range<Self.Index>? = nil) -> Range<Self.Index>?", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Self.Index"]}, "is_static": false}, {"method_description": "", "method_name": "rangeOfComposedCharacterSequence", "params": [{"param_type": "Self.Index", "param_description": "", "param_name": ["at", "anIndex"]}], "class_name": "StringProtocol", "method_declar": "func rangeOfComposedCharacterSequence(at anIndex: Self.Index) -> Range<Self.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Self.Index"]}, "is_static": false}, {"method_description": "", "method_name": "rangeOfComposedCharacterSequences", "params": [{"param_type": "RangeExpression", "param_description": "", "param_name": ["for", "range"]}], "class_name": "StringProtocol", "method_declar": "func rangeOfComposedCharacterSequences<R>(for range: R) -> Range<Self.Index> where R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Self.Index>"]}, "is_static": false}, {"method_description": "", "method_name": "replacingCharacters", "params": [{"param_type": "RangeExpression", "param_description": "", "param_name": ["in", "range"]}, {"param_type": "StringProtocol", "param_description": "", "param_name": ["with", "replacement"]}], "class_name": "StringProtocol", "method_declar": "func replacingCharacters<T, R>(in range: R, with replacement: T) -> String where T : StringProtocol, R : RangeExpression, R.Bound == String.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "", "method_name": "replacingOccurrences", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["of", "target"]}, {"param_type": "StringProtocol", "param_description": "", "param_name": ["with", "replacement"]}, {"param_type": "String.CompareOptions", "param_description": "", "param_name": ["options"]}, {"param_type": "Range<Self.Index> = nil", "param_description": "", "param_name": ["range", "searchRange"]}], "class_name": "StringProtocol", "method_declar": "func replacingOccurrences<Target, Replacement>(of target: Target, with replacement: Replacement, options: String.CompareOptions = [], range searchRange: Range<Self.Index>? = nil) -> String where Target : StringProtocol, Replacement : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "", "method_name": "substring", "params": [{"param_type": "Self.Index", "param_description": "", "param_name": ["from", "index"]}], "class_name": "StringProtocol", "method_declar": "func substring(from index: Self.Index) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "substring", "params": [{"param_type": "Self.Index", "param_description": "", "param_name": ["to", "index"]}], "class_name": "StringProtocol", "method_declar": "func substring(to index: Self.Index) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "substring", "params": [{"param_type": "Range<Self.Index>", "param_description": "", "param_name": ["with", "aRange"]}], "class_name": "StringProtocol", "method_declar": "func substring(with aRange: Range<Self.Index>) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "trimmingCharacters", "params": [{"param_type": "CharacterSet", "param_description": "", "param_name": ["in", "set"]}], "class_name": "StringProtocol", "method_declar": "func trimmingCharacters(in set: CharacterSet) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Required.", "method_name": "uppercased", "params": [], "class_name": "StringProtocol", "method_declar": "func uppercased() -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "uppercased", "params": [{"param_type": "Locale", "param_description": "", "param_name": ["with", "locale"]}], "class_name": "StringProtocol", "method_declar": "func uppercased(with locale: Locale?) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of UTF-8 code units.Required.", "method_name": "withCString", "params": [{"param_type": "(UnsafePointer<CChar>) throws -> Result", "param_description": "A closure with a pointer parameter that points to a null-terminated sequence of UTF-8 code units. If body has a return value, that value is also used as the return value for the withCString(_:) method. The pointer argument is valid only for the duration of the method\u2019s execution.", "param_name": ["body"]}], "class_name": "StringProtocol", "method_declar": "func withCString<Result>(_ body: (UnsafePointer<CChar>) throws -> Result) rethrows -> Result", "return_value": {"return_description": ["The return value, if any, of the body closure parameter."], "return_name": [""], "return_type": ["Resul"]}, "is_static": false}, {"method_description": "Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of code units.Required.", "method_name": "withCString", "params": [{"param_type": "UnicodeEncoding.Type", "param_description": "The encoding in which the code units should be interpreted.", "param_name": ["encodedAs", "targetEncoding"]}, {"param_type": "(UnsafePointer<Encoding.CodeUnit>) throws -> Result", "param_description": "A closure with a pointer parameter that points to a null-terminated sequence of code units. If body has a return value, that value is also used as the return value for the withCString(encodedAs:_:) method. The pointer argument is valid only for the duration of the method\u2019s execution.", "param_name": ["body"]}], "class_name": "StringProtocol", "method_declar": "func withCString<Result, Encoding>(encodedAs targetEncoding: Encoding.Type, _ body: (UnsafePointer<Encoding.CodeUnit>) throws -> Result) rethrows -> Result where Encoding : _UnicodeEncoding", "return_value": {"return_description": ["The return value, if any, of the body closure parameter."], "return_name": [""], "return_type": ["Result"]}, "is_static": false}, {"method_description": "", "method_name": "write", "params": [{"param_type": "URL", "param_description": "", "param_name": ["to", "url"]}, {"param_type": "Bool", "param_description": "", "param_name": ["atomically", "useAuxiliaryFile"]}, {"param_type": "String.Encoding", "param_description": "", "param_name": ["encoding", "enc"]}], "class_name": "StringProtocol", "method_declar": "func write(to url: URL, atomically useAuxiliaryFile: Bool, encoding enc: String.Encoding) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "write", "params": [{"param_type": "StringProtocol", "param_description": "", "param_name": ["toFile", "path"]}, {"param_type": "Bool", "param_description": "", "param_name": ["atomically", "useAuxiliaryFile"]}, {"param_type": "String.Encoding", "param_description": "", "param_name": ["encoding", "enc"]}], "class_name": "StringProtocol", "method_declar": "func write<T>(toFile path: T, atomically useAuxiliaryFile: Bool, encoding enc: String.Encoding) throws where T : StringProtocol", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "!=", "params": [{"param_type": "Self", "param_description": "", "param_name": ["lhs"]}, {"param_type": "StringProtocol", "param_description": "", "param_name": ["rhs"]}], "class_name": "StringProtocol", "method_declar": "static func != <RHS>(lhs: Self, rhs: RHS) -> Bool where RHS : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "params": [{"param_type": "Self", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "StringProtocol", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "StringProtocol", "method_declar": "static func == <RHS>(lhs: Self, rhs: RHS) -> Bool where RHS : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}], "class_inherit_list": ["BidirectionalCollection", "Comparable", "ExpressibleByStringInterpolation", "Hashable", "LosslessStringConvertible", "TextOutputStream", "TextOutputStreamable"], "class_name": "StringProtocol", "typealias": [], "Vars": [{"var_description": "", "var_type": "String", "is_static": false, "var_name": "capitalized"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "decomposedStringWithCanonicalMapping"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "decomposedStringWithCompatibilityMapping"}, {"var_description": "", "var_type": "String.Encoding", "is_static": false, "var_name": "fastestEncoding"}, {"var_description": "", "var_type": "Int", "is_static": false, "var_name": "hash"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "localizedCapitalized"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "localizedLowercase"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "localizedUppercase"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "precomposedStringWithCanonicalMapping"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "precomposedStringWithCompatibilityMapping"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "removingPercentEncoding"}, {"var_description": "", "var_type": "String.Encoding", "is_static": false, "var_name": "smallestEncoding"}, {"var_description": "Required.", "var_type": "Self.UnicodeScalarView", "is_static": false, "var_name": "unicodeScalars"}, {"var_description": "Required.", "var_type": "Self.UTF16View", "is_static": false, "var_name": "utf16"}, {"var_description": "Required.", "var_type": "Self.UTF8View", "is_static": false, "var_name": "utf8"}], "class_type": "protocol", "interface_list": [], "package_name": "foundation", "subclass_list": []}