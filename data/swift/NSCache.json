{"class_description": "Cache objects differ from other mutable collections in a few ways:\nThe NSCache class incorporates various auto-eviction policies, which ensure that a cache doesn\u2019t use too much of the system\u2019s memory. If memory is needed by other applications, these policies remove some items from the cache, minimizing its memory footprint.\nYou can add, remove, and query items in the cache from different threads without having to lock the cache yourself. \nUnlike an NSMutableDictionary object, a cache does not copy the key objects that are put into it.\nYou typically use NSCache objects to temporarily store objects with transient data that are expensive to create. Reusing these objects can provide performance benefits, because their values do not have to be recalculated. However, the objects are not critical to the application and can be discarded if memory is tight. If discarded, their values will have to be recomputed again when needed.\nObjects that have subcomponents that can be discarded when not being used can adopt the NSDiscardableContent protocol to improve cache eviction behavior. By default, NSDiscardableContent objects in a cache are automatically removed if their content is discarded, although this automatic removal policy can be changed. If an NSDiscardableContent object is put into the cache, the cache calls discardContentIfPossible() on it upon its removal.\n", "Methods": [{"method_description": "Returns the value associated with a given key.", "method_name": "object", "params": [{"param_type": "KeyType", "param_description": "An object identifying the value.", "param_name": ["forKey", "key"]}], "class_name": "NSCache", "method_declar": "func object(forKey key: KeyType) -> ObjectType?", "return_value": {"return_description": ["The value associated with key, or nil if no value is associated with key."], "return_name": [""], "return_type": ["ObjectTyp"]}, "is_static": false}, {"method_description": "Sets the value of the specified key in the cache.", "method_name": "setObject", "params": [{"param_type": "ObjectType", "param_description": "The object to be stored in the cache.", "param_name": ["obj"]}, {"param_type": "KeyType", "param_description": "The key with which to associate the value.", "param_name": ["forKey", "key"]}], "class_name": "NSCache", "method_declar": "func setObject(_ obj: ObjectType, forKey key: KeyType)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Sets the value of the specified key in the cache, and associates the key-value pair with the specified cost.", "method_name": "setObject", "params": [{"param_type": "ObjectType", "param_description": "The object to store in the cache.", "param_name": ["obj"]}, {"param_type": "KeyType", "param_description": "The key with which to associate the value.", "param_name": ["forKey", "key"]}, {"param_type": "Int", "param_description": "", "param_name": ["cost", "g"]}], "class_name": "NSCache", "method_declar": "func setObject(_ obj: ObjectType, forKey key: KeyType, cost g: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the value of the specified key in the cache.", "method_name": "removeObject", "params": [{"param_type": "KeyType", "param_description": "The key identifying the value to be removed.", "param_name": ["forKey", "key"]}], "class_name": "NSCache", "method_declar": "func removeObject(forKey key: KeyType)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Empties the cache.", "method_name": "removeAllObjects", "params": [], "class_name": "NSCache", "method_declar": "func removeAllObjects()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSCache", "typealias": [], "Vars": [{"var_description": "The name of the cache.", "var_type": "String", "is_static": false, "var_name": "name"}, {"var_description": "The maximum number of objects the cache should hold.", "var_type": "Int", "is_static": false, "var_name": "countLimit"}, {"var_description": "The maximum total cost that the cache can hold before it starts evicting objects.", "var_type": "Int", "is_static": false, "var_name": "totalCostLimit"}, {"var_description": "Whether the cache will automatically evict discardable-content objects whose content has been discarded.", "var_type": "Bool", "is_static": false, "var_name": "evictsObjectsWithDiscardedContent"}, {"var_description": "The cache\u2019s delegate.", "var_type": "NSCacheDelegate", "is_static": false, "var_name": "delegate"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}