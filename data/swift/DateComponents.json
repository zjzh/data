{"package_name": "foundation", "subclass_list": [], "class_description": "DateComponents encapsulates the components of a date in an extendable, structured manner.\nIt is used to specify a date by providing the temporal components that make up a date and time in a particular calendar: hour, minutes, seconds, day, month, year, and so on. It can also be used to specify a duration of time, for example, 5 hours and 16 minutes. A DateComponents is not required to define all the component fields.\nWhen a new instance of DateComponents is created, the date components are set to nil.\n", "class_type": "struct", "typealias": ["typealias DateComponents.ReferenceType = NSDateComponents"], "interface_list": ["CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "Hashable", "ReferenceConvertible"], "class_inherit_list": [], "Methods": [{"params": [{"param_name": ["calendar"], "param_type": "Calendar", "param_description": ""}, {"param_name": ["timeZone"], "param_type": "TimeZone", "param_description": ""}, {"param_name": ["era"], "param_type": "Int", "param_description": ""}, {"param_name": ["year"], "param_type": "Int", "param_description": ""}, {"param_name": ["month"], "param_type": "Int", "param_description": ""}, {"param_name": ["day"], "param_type": "Int", "param_description": ""}, {"param_name": ["hour"], "param_type": "Int", "param_description": ""}, {"param_name": ["minute"], "param_type": "Int", "param_description": ""}, {"param_name": ["second"], "param_type": "Int", "param_description": ""}, {"param_name": ["nanosecond"], "param_type": "Int", "param_description": ""}, {"param_name": ["weekday"], "param_type": "Int", "param_description": ""}, {"param_name": ["weekdayOrdinal"], "param_type": "Int", "param_description": ""}, {"param_name": ["quarter"], "param_type": "Int", "param_description": ""}, {"param_name": ["weekOfMonth"], "param_type": "Int", "param_description": ""}, {"param_name": ["weekOfYear"], "param_type": "Int", "param_description": ""}, {"param_name": ["yearForWeekOfYear"], "param_type": "Int = nil", "param_description": ""}], "class_name": "DateComponents", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initializes a date components value, optionally specifying values for its fields.", "method_declar": "init(calendar: Calendar? = nil, timeZone: TimeZone? = nil, era: Int? = nil, year: Int? = nil, month: Int? = nil, day: Int? = nil, hour: Int? = nil, minute: Int? = nil, second: Int? = nil, nanosecond: Int? = nil, weekday: Int? = nil, weekdayOrdinal: Int? = nil, quarter: Int? = nil, weekOfMonth: Int? = nil, weekOfYear: Int? = nil, yearForWeekOfYear: Int? = nil)"}, {"params": [{"param_name": ["in", "calendar"], "param_type": "Calendar", "param_description": ""}], "class_name": "DateComponents", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "isValidDate", "method_description": "Indicates whether the current combination of properties represents a date which exists in the specified calendar.", "method_declar": "func isValidDate(in calendar: Calendar) -> Bool"}, {"params": [{"param_name": ["for", "component"], "param_type": "Calendar.Component", "param_description": ""}], "class_name": "DateComponents", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["In"]}, "method_name": "value", "method_description": "Returns the value of one of the properties, using an enumeration value instead of a property name.", "method_declar": "func value(for component: Calendar.Component) -> Int?"}, {"params": [{"param_name": ["value"], "param_type": "Int", "param_description": ""}, {"param_name": ["for", "component"], "param_type": "Calendar.Component", "param_description": ""}], "class_name": "DateComponents", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "setValue", "method_description": "Set the value of one of the properties, using an enumeration value instead of a property name.", "method_declar": "mutating func setValue(_ value: Int?, for component: Calendar.Component)"}, {"params": [{"param_name": ["lhs"], "param_type": "DateComponents", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "DateComponents", "param_description": "Another value to compare."}], "class_name": "DateComponents", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "!=", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_declar": "static func != (lhs: DateComponents, rhs: DateComponents) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "DateComponents", "param_description": ""}, {"param_name": ["rhs"], "param_type": "DateComponents", "param_description": ""}], "class_name": "DateComponents", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "==", "method_description": "Indicates whether two date component instances are the same.", "method_declar": "static func == (lhs: DateComponents, rhs: DateComponents) -> Bool"}, {"params": [{"param_name": ["from", "decoder"], "param_type": "Decoder", "param_description": ""}], "class_name": "DateComponents", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(from decoder: Decoder) throws"}, {"params": [{"param_name": ["to", "encoder"], "param_type": "Encoder", "param_description": ""}], "class_name": "DateComponents", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "", "method_declar": "func encode(to encoder: Encoder) throws"}], "class_name": "DateComponents", "Vars": [{"var_description": "The calendar used to interpret the other values in this structure.", "var_type": "Calendar", "is_static": false, "var_name": "calendar"}, {"var_description": "A time zone.", "var_type": "TimeZone", "is_static": false, "var_name": "timeZone"}, {"var_description": "Indicates whether the current combination of properties represents a date which exists in the current calendar.", "var_type": "Bool", "is_static": false, "var_name": "isValidDate"}, {"var_description": "The date calculated from the current components using the stored calendar.", "var_type": "Date", "is_static": false, "var_name": "date"}, {"var_description": "An era or count of eras.", "var_type": "Int", "is_static": false, "var_name": "era"}, {"var_description": "A year or count of years.", "var_type": "Int", "is_static": false, "var_name": "year"}, {"var_description": "The year corresponding to a week-counting week.", "var_type": "Int", "is_static": false, "var_name": "yearForWeekOfYear"}, {"var_description": "A quarter or count of quarters.", "var_type": "Int", "is_static": false, "var_name": "quarter"}, {"var_description": "A month or count of months.", "var_type": "Int", "is_static": false, "var_name": "month"}, {"var_description": "Set to true if these components represent a leap month.", "var_type": "Bool", "is_static": false, "var_name": "isLeapMonth"}, {"var_description": "A week of the month or a count of weeks of the month.", "var_type": "Int", "is_static": false, "var_name": "weekOfMonth"}, {"var_description": "A week of the year or count of the weeks of the year.", "var_type": "Int", "is_static": false, "var_name": "weekOfYear"}, {"var_description": "A weekday or count of weekdays.", "var_type": "Int", "is_static": false, "var_name": "weekday"}, {"var_description": "A weekday ordinal or count of weekday ordinals. ", "var_type": "Int", "is_static": false, "var_name": "weekdayOrdinal"}, {"var_description": "A day or count of days.", "var_type": "Int", "is_static": false, "var_name": "day"}, {"var_description": "An hour or count of hours.", "var_type": "Int", "is_static": false, "var_name": "hour"}, {"var_description": "A minute or count of minutes.", "var_type": "Int", "is_static": false, "var_name": "minute"}, {"var_description": "A second or count of seconds.", "var_type": "Int", "is_static": false, "var_name": "second"}, {"var_description": "A nanosecond or count of nanoseconds.", "var_type": "Int", "is_static": false, "var_name": "nanosecond"}, {"var_description": "A textual description of the date components.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A textual description of the date components suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the date.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "The computed hash value of the date.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}]}