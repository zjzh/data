{"class_description": "", "Methods": [{"method_description": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.", "method_name": "allSatisfy", "params": [{"param_type": "(Value) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.", "param_name": ["predicate"]}], "class_name": "Dictionary.Values", "method_declar": "func allSatisfy(_ predicate: (Value) throws -> Bool) rethrows -> Bool", "return_value": {"return_description": ["true if the sequence contains only elements that satisfy predicate; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "method_name": "compactMap", "params": [{"param_type": "(Value) throws -> ElementOfResult", "param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_name": ["transform"]}], "class_name": "Dictionary.Values", "method_declar": "func compactMap<ElementOfResult>(_ transform: (Value) throws -> ElementOfResult?) rethrows -> [ElementOfResult]", "return_value": {"return_description": ["An array of the non-nil results of calling transform with each element of the sequence."], "return_name": [""], "return_type": ["[ElementOfResult]"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence contains the given element.", "method_name": "contains", "params": [{"param_type": "Value", "param_description": "The element to find in the sequence.", "param_name": ["element"]}], "class_name": "Dictionary.Values", "method_declar": "func contains(_ element: Value) -> Bool", "return_value": {"return_description": ["true if the element was found in the sequence; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.", "method_name": "contains", "params": [{"param_type": "(Value) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_name": ["where", "predicate"]}], "class_name": "Dictionary.Values", "method_declar": "func contains(where predicate: (Value) throws -> Bool) rethrows -> Bool", "return_value": {"return_description": ["true if the sequence contains an element that satisfies predicate; otherwise, false."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the distance between two indices.", "method_name": "distance", "params": [{"param_type": "Dictionary<Key, Value>.Index", "param_description": "A valid index of the collection.", "param_name": ["from", "start"]}, {"param_type": "Dictionary<Key, Value>.Index", "param_description": "Another valid index of the collection. If end is equal to start, the result is zero.", "param_name": ["to", "end"]}], "class_name": "Dictionary.Values", "method_declar": "func distance(from start: Dictionary<Key, Value>.Index, to end: Dictionary<Key, Value>.Index) -> Int", "return_value": {"return_description": ["The distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.", "method_name": "drop", "params": [{"param_type": "(Value) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.", "param_name": ["while", "predicate"]}], "class_name": "Dictionary.Values", "method_declar": "func drop(while predicate: (Value) throws -> Bool) rethrows -> Slice<Dictionary<Key, Value>.Values>", "return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["Slice<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "params": [{"param_type": "Int = 1", "param_description": "The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "Dictionary.Values", "method_declar": "func dropFirst(_ k: Int = 1) -> Slice<Dictionary<Key, Value>.Values>", "return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": ["", ""], "return_type": ["Slice<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "params": [{"param_type": "Int = 1", "param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "Dictionary.Values", "method_declar": "func dropLast(_ k: Int = 1) -> Slice<Dictionary<Key, Value>.Values>", "return_value": {"return_description": ["A subsequence that leaves off the specified number of elements at the end."], "return_name": ["", ""], "return_type": ["Slice<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "method_name": "elementsEqual", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "Dictionary.Values", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence and other contain the same elements in the same order."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.", "method_name": "elementsEqual", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}, {"param_type": "(Value, OtherSequence.Element) throws -> Bool", "param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_name": ["by", "areEquivalent"]}], "class_name": "Dictionary.Values", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence, by areEquivalent: (Value, OtherSequence.Element) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence", "return_value": {"return_description": ["true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "params": [], "class_name": "Dictionary.Values", "method_declar": "func enumerated() -> EnumeratedSequence<Dictionary<Key, Value>.Values>", "return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": ["", ""], "return_type": ["EnumeratedSequence<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.", "method_name": "filter", "params": [{"param_type": "(Value) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.", "param_name": ["isIncluded"]}], "class_name": "Dictionary.Values", "method_declar": "func filter(_ isIncluded: (Value) throws -> Bool) rethrows -> [Value]", "return_value": {"return_description": ["An array of the elements that isIncluded allowed."], "return_name": [""], "return_type": ["[Value]"]}, "is_static": false}, {"method_description": "Returns the first element of the sequence that satisfies the given predicate.", "method_name": "first", "params": [{"param_type": "(Value) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_name": ["where", "predicate"]}], "class_name": "Dictionary.Values", "method_declar": "func first(where predicate: (Value) throws -> Bool) rethrows -> Value?", "return_value": {"return_description": ["The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the first index where the specified value appears in the collection.", "method_name": "firstIndex", "params": [{"param_type": "Value", "param_description": "An element to search for in the collection.", "param_name": ["of", "element"]}], "class_name": "Dictionary.Values", "method_declar": "func firstIndex(of element: Value) -> Dictionary<Key, Value>.Index?", "return_value": {"return_description": ["The first index where element is found. If element is not found in the collection, returns nil."], "return_name": ["", ""], "return_type": ["Dictionary<Key", "Value>.Index"]}, "is_static": false}, {"method_description": "Returns the first index in which an element of the collection satisfies the given predicate.", "method_name": "firstIndex", "params": [{"param_type": "(Value) throws -> Bool", "param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_name": ["where", "predicate"]}], "class_name": "Dictionary.Values", "method_declar": "func firstIndex(where predicate: (Value) throws -> Bool) rethrows -> Dictionary<Key, Value>.Index?", "return_value": {"return_description": ["The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Calls the given closure on each element in the sequence in the same order as a for-in loop.", "method_name": "forEach", "params": [{"param_type": "(Value) throws -> Void", "param_description": "A closure that takes an element of the sequence as a parameter.", "param_name": ["body"]}], "class_name": "Dictionary.Values", "method_declar": "func forEach(_ body: (Value) throws -> Void) rethrows", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void rethrows"]}, "is_static": false}, {"method_description": "Offsets the given index by the specified distance.", "method_name": "formIndex", "params": [{"param_type": "inout Dictionary<Key, Value>.Index", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_name": ["offsetBy", "distance"]}], "class_name": "Dictionary.Values", "method_declar": "func formIndex(_ i: inout Dictionary<Key, Value>.Index, offsetBy distance: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Offsets the given index by the specified distance, or so that it equals the given limiting index.", "method_name": "formIndex", "params": [{"param_type": "inout Dictionary<Key, Value>.Index", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_name": ["offsetBy", "distance"]}, {"param_type": "Dictionary<Key, Value>.Index", "param_description": "A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.", "param_name": ["limitedBy", "limit"]}], "class_name": "Dictionary.Values", "method_declar": "func formIndex(_ i: inout Dictionary<Key, Value>.Index, offsetBy distance: Int, limitedBy limit: Dictionary<Key, Value>.Index) -> Bool", "return_value": {"return_description": ["true if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Replaces the given index with its successor.", "method_name": "formIndex", "params": [{"param_type": "inout Dictionary<Key, Value>.Index", "param_description": "A valid index of the collection. i must be less than endIndex.", "param_name": ["after", "i"]}], "class_name": "Dictionary.Values", "method_declar": "func formIndex(after i: inout Dictionary<Key, Value>.Index)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an index that is the specified distance from the given index.", "method_name": "index", "params": [{"param_type": "Dictionary<Key, Value>.Index", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_name": ["offsetBy", "distance"]}], "class_name": "Dictionary.Values", "method_declar": "func index(_ i: Dictionary<Key, Value>.Index, offsetBy distance: Int) -> Dictionary<Key, Value>.Index", "return_value": {"return_description": ["An index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:)."], "return_name": ["", ""], "return_type": ["Dictionary<Key", "Value>.Index"]}, "is_static": false}, {"method_description": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.", "method_name": "index", "params": [{"param_type": "Dictionary<Key, Value>.Index", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_name": ["offsetBy", "distance"]}, {"param_type": "Dictionary<Key, Value>.Index", "param_description": "A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.", "param_name": ["limitedBy", "limit"]}], "class_name": "Dictionary.Values", "method_declar": "func index(_ i: Dictionary<Key, Value>.Index, offsetBy distance: Int, limitedBy limit: Dictionary<Key, Value>.Index) -> Dictionary<Key, Value>.Index?", "return_value": {"return_description": ["An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil."], "return_name": ["", ""], "return_type": ["Dictionary<Key", "Value>.Index"]}, "is_static": false}, {"method_description": "", "method_name": "index", "params": [{"param_type": "Dictionary<Key, Value>.Index", "param_description": "", "param_name": ["after", "i"]}], "class_name": "Dictionary.Values", "method_declar": "func index(after i: Dictionary<Key, Value>.Index) -> Dictionary<Key, Value>.Index", "return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["Dictionary<Key", "Value>.Index"]}, "is_static": false}, {"method_description": "Returns the elements of this sequence of sequences, concatenated.", "method_name": "joined", "params": [], "class_name": "Dictionary.Values", "method_declar": "func joined() -> FlattenSequence<Dictionary<Key, Value>.Values>", "return_value": {"return_description": ["A flattened view of the elements of this sequence of sequences."], "return_name": ["", ""], "return_type": ["FlattenSequence<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "params": [{"param_type": "String = \"\"", "param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_name": ["separator"]}], "class_name": "Dictionary.Values", "method_declar": "func joined(separator: String = \"\") -> String", "return_value": {"return_description": ["A single, concatenated string."], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.", "method_name": "joined", "params": [{"param_type": "Sequence", "param_description": "A sequence to insert between each of this sequence\u2019s elements.", "param_name": ["separator"]}], "class_name": "Dictionary.Values", "method_declar": "func joined<Separator>(separator: Separator) -> JoinedSequence<Dictionary<Key, Value>.Values> where Separator : Sequence, Separator.Element == Self.Element.Element", "return_value": {"return_description": ["The joined sequence of elements."], "return_name": ["", ""], "return_type": ["JoinedSequence<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "method_name": "lexicographicallyPrecedes", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "Dictionary.Values", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.", "method_name": "lexicographicallyPrecedes", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}, {"param_type": "(Value, Value) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "Dictionary.Values", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence, by areInIncreasingOrder: (Value, Value) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "params": [{"param_type": "(Value) throws -> T", "param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_name": ["transform"]}], "class_name": "Dictionary.Values", "method_declar": "func map<T>(_ transform: (Value) throws -> T) rethrows -> [T]", "return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["[T]"]}, "is_static": false}, {"method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "params": [{"param_type": "(Value) throws -> T", "param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_name": ["transform"]}], "class_name": "Dictionary.Values", "method_declar": "func map<T>(_ transform: (Value) throws -> T) rethrows -> [T]", "return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["[T]"]}, "is_static": false}, {"method_description": "Returns the maximum element in the sequence.", "method_name": "max", "params": [], "class_name": "Dictionary.Values", "method_declar": "@warn_unqualified_access func max() -> Value?", "return_value": {"return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Value"]}, "is_static": false}, {"method_description": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "max", "params": [{"param_type": "(Value, Value) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "Dictionary.Values", "method_declar": "@warn_unqualified_access func max(by areInIncreasingOrder: (Value, Value) throws -> Bool) rethrows -> Value?", "return_value": {"return_description": ["The sequence\u2019s maximum element if the sequence is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Value"]}, "is_static": false}, {"method_description": "Returns the minimum element in the sequence.", "method_name": "min", "params": [], "class_name": "Dictionary.Values", "method_declar": "@warn_unqualified_access func min() -> Value?", "return_value": {"return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Value"]}, "is_static": false}, {"method_description": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "min", "params": [{"param_type": "(Value, Value) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "Dictionary.Values", "method_declar": "@warn_unqualified_access func min(by areInIncreasingOrder: (Value, Value) throws -> Bool) rethrows -> Value?", "return_value": {"return_description": ["The sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Value"]}, "is_static": false}, {"method_description": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don\u2019t match.", "method_name": "partition", "params": [{"param_type": "(Value) throws -> Bool", "param_description": "A predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.", "param_name": ["by", "belongsInSecondPartition"]}], "class_name": "Dictionary.Values", "method_declar": "mutating func partition(by belongsInSecondPartition: (Value) throws -> Bool) rethrows -> Dictionary<Key, Value>.Index", "return_value": {"return_description": ["The index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection\u2019s endIndex."], "return_name": ["", ""], "return_type": ["Dictionary<Key", "Value>.Index"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "Dictionary.Values", "method_declar": "func prefix(_ maxLength: Int) -> Slice<Dictionary<Key, Value>.Values>", "return_value": {"return_description": ["A subsequence starting at the beginning of this collection with at most maxLength elements."], "return_name": ["", ""], "return_type": ["Slice<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection through the specified position.", "method_name": "prefix", "params": [{"param_type": "Dictionary<Key, Value>.Index", "param_description": "", "param_name": ["through", "position"]}], "class_name": "Dictionary.Values", "method_declar": "func prefix(through position: Dictionary<Key, Value>.Index) -> Slice<Dictionary<Key, Value>.Values>", "return_value": {"return_description": ["A subsequence up to, and including, the end position."], "return_name": ["", ""], "return_type": ["Slice<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "method_name": "prefix", "params": [{"param_type": "Dictionary<Key, Value>.Index", "param_description": "The \u201cpast the end\u201d index of the resulting subsequence. end must be a valid index of the collection.", "param_name": ["upTo", "end"]}], "class_name": "Dictionary.Values", "method_declar": "func prefix(upTo end: Dictionary<Key, Value>.Index) -> Slice<Dictionary<Key, Value>.Values>", "return_value": {"return_description": ["A subsequence up to, but not including, the end position."], "return_name": ["", ""], "return_type": ["Slice<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.", "method_name": "prefix", "params": [{"param_type": "(Value) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.", "param_name": ["while", "predicate"]}], "class_name": "Dictionary.Values", "method_declar": "func prefix(while predicate: (Value) throws -> Bool) rethrows -> Slice<Dictionary<Key, Value>.Values>", "return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["Slice<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a random element of the collection.", "method_name": "randomElement", "params": [], "class_name": "Dictionary.Values", "method_declar": "func randomElement() -> Value?", "return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Value"]}, "is_static": false}, {"method_description": "Returns a random element of the collection, using the given generator as a source for randomness.", "method_name": "randomElement", "params": [{"param_type": "inout T", "param_description": "The random number generator to use when choosing a random element.", "param_name": ["using", "generator"]}], "class_name": "Dictionary.Values", "method_declar": "func randomElement<T>(using generator: inout T) -> Value? where T : RandomNumberGenerator", "return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Value"]}, "is_static": false}, {"method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "params": [{"param_type": "Result", "param_description": "The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.", "param_name": ["initialResult"]}, {"param_type": "(Result, Value) throws -> Result", "param_description": "A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.", "param_name": ["nextPartialResult"]}], "class_name": "Dictionary.Values", "method_declar": "func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, Value) throws -> Result) rethrows -> Result", "return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["Result"]}, "is_static": false}, {"method_description": "Returns an array containing the elements of this sequence in reverse order.", "method_name": "reversed", "params": [], "class_name": "Dictionary.Values", "method_declar": "func reversed() -> [Value]", "return_value": {"return_description": ["An array containing the elements of this sequence in reverse order."], "return_name": [""], "return_type": ["[Value]"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, shuffled.", "method_name": "shuffled", "params": [], "class_name": "Dictionary.Values", "method_declar": "func shuffled() -> [Value]", "return_value": {"return_description": ["A shuffled array of this sequence\u2019s elements."], "return_name": [""], "return_type": ["[Value]"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.", "method_name": "shuffled", "params": [{"param_type": "inout T", "param_description": "The random number generator to use when shuffling the sequence.", "param_name": ["using", "generator"]}], "class_name": "Dictionary.Values", "method_declar": "func shuffled<T>(using generator: inout T) -> [Value] where T : RandomNumberGenerator", "return_value": {"return_description": ["An array of this sequence\u2019s elements in a shuffled order."], "return_name": [""], "return_type": ["[Value]"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, sorted.", "method_name": "sorted", "params": [], "class_name": "Dictionary.Values", "method_declar": "func sorted() -> [Value]", "return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Value]"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.", "method_name": "sorted", "params": [{"param_type": "(Value, Value) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "Dictionary.Values", "method_declar": "func sorted(by areInIncreasingOrder: (Value, Value) throws -> Bool) rethrows -> [Value]", "return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Value]"]}, "is_static": false}, {"method_description": "Returns the longest possible subsequences of the collection, in order, that don\u2019t contain elements satisfying the given predicate.", "method_name": "split", "params": [{"param_type": "Int", "param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_name": ["maxSplits"]}, {"param_type": "Bool", "param_description": "If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.", "param_name": ["omittingEmptySubsequences"]}, {"param_type": "(Value) throws -> Bool", "param_description": "A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.", "param_name": ["whereSeparator", "isSeparator"]}], "class_name": "Dictionary.Values", "method_declar": "func split(maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true, whereSeparator isSeparator: (Value) throws -> Bool) rethrows -> [Slice<Dictionary<Key, Value>.Values>]", "return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "method_name": "split", "params": [{"param_type": "Value", "param_description": "The element that should be split upon.", "param_name": ["separator"]}, {"param_type": "Int", "param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_name": ["maxSplits"]}, {"param_type": "Bool = true", "param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.", "param_name": ["omittingEmptySubsequences"]}], "class_name": "Dictionary.Values", "method_declar": "func split(separator: Value, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Slice<Dictionary<Key, Value>.Values>]", "return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": ["", ""], "return_type": ["[Slice<Dictionary<Key", "Value>.Values>]"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "method_name": "starts", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["with", "possiblePrefix"]}], "class_name": "Dictionary.Values", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix) -> Bool where PossiblePrefix : Sequence, Self.Element == PossiblePrefix.Element", "return_value": {"return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.", "method_name": "starts", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["with", "possiblePrefix"]}, {"param_type": "(Value, PossiblePrefix.Element) throws -> Bool", "param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_name": ["by", "areEquivalent"]}], "class_name": "Dictionary.Values", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix, by areEquivalent: (Value, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool where PossiblePrefix : Sequence", "return_value": {"return_description": ["true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.", "method_name": "suffix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. The value of maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "Dictionary.Values", "method_declar": "func suffix(_ maxLength: Int) -> Slice<Dictionary<Key, Value>.Values>", "return_value": {"return_description": ["A subsequence terminating at the end of the collection with at most maxLength elements."], "return_name": ["", ""], "return_type": ["Slice<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the specified position to the end of the collection.", "method_name": "suffix", "params": [{"param_type": "Dictionary<Key, Value>.Index", "param_description": "The index at which to start the resulting subsequence. start must be a valid index of the collection.", "param_name": ["from", "start"]}], "class_name": "Dictionary.Values", "method_declar": "func suffix(from start: Dictionary<Key, Value>.Index) -> Slice<Dictionary<Key, Value>.Values>", "return_value": {"return_description": ["A subsequence starting at the start position."], "return_name": ["", ""], "return_type": ["Slice<Dictionary<Key", "Value>.Values>"]}, "is_static": false}, {"method_description": "Exchanges the values at the specified indices of the collection.", "method_name": "swapAt", "params": [{"param_type": "Dictionary<Key, Value>.Index", "param_description": "The index of the first value to swap.", "param_name": ["i"]}, {"param_type": "Dictionary<Key, Value>.Index", "param_description": "The index of the second value to swap.", "param_name": ["j"]}], "class_name": "Dictionary.Values", "method_declar": "mutating func swapAt(_ i: Dictionary<Key, Value>.Index, _ j: Dictionary<Key, Value>.Index)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": [], "class_name": "Dictionary.Values", "typealias": [], "Vars": [{"var_description": "The number of values in the dictionary.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "The number of values in the dictionary.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "", "var_type": "Dictionary<Key,", "is_static": false, "var_name": "endIndex"}, {"var_description": "The first element of the collection.", "var_type": "Value", "is_static": false, "var_name": "first"}, {"var_description": "The indices that are valid for subscripting the collection, in ascending order.", "var_type": "DefaultIndices<Dictionary<Key,", "is_static": false, "var_name": "indices"}, {"var_description": "", "var_type": "Bool", "is_static": false, "var_name": "isEmpty"}, {"var_description": "", "var_type": "Bool", "is_static": false, "var_name": "isEmpty"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<Dictionary<Key,", "is_static": false, "var_name": "lazy"}, {"var_description": "", "var_type": "Dictionary<Key,", "is_static": false, "var_name": "startIndex"}, {"var_description": "A value less than or equal to the number of elements in the collection.", "var_type": "Int", "is_static": false, "var_name": "underestimatedCount"}, {"var_description": "A value less than or equal to the number of elements in the collection.", "var_type": "Int", "is_static": false, "var_name": "underestimatedCount"}], "class_type": "struct", "interface_list": ["CustomDebugStringConvertible", "CustomStringConvertible", "MutableCollection"], "package_name": "foundation", "subclass_list": []}