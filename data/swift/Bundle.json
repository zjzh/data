{"class_description": "Apple uses bundles to represent apps, frameworks, plug-ins, and many other specific types of content. Bundles organize their contained resources into well-defined subdirectories, and bundle structures vary depending on the platform and the type of the bundle. By using a bundle object, you can access a bundle's resources without knowing the structure of the bundle. The bundle object provides a single interface for locating items, taking into account the bundle structure, user preferences, available localizations, and other relevant factors. \nAny executable can use a bundle object to locate resources, either inside an app\u2019s bundle or in a known bundle located elsewhere. You don't use a bundle object to locate files in a container directory or in other parts of the file system. \nThe general pattern for using a bundle object is as follows:\nCreate a bundle object for the intended bundle directory.\nUse the methods of the bundle object to locate or load the needed resource.\nUse other system APIs to interact with the resource.\nSome types of frequently used resources can be located and opened without a bundle. For example, when loading images, you store images in asset catalogs and load them using the init(named:) methods of UIImage or NSImage. Similarly, for string resources, you use NSLocalizedString to load individual strings instead of loading the entire .strings file yourself.\nNote\nUnlike some other Foundation classes with corresponding Core Foundation names (such as NSString and CFString), Bundle objects cannot be cast to CFBundle references. If you need functionality provided by CFBundle, you can still create a CFBundle and use the CFBundle API. See Toll-Free Bridging for more information.\nBefore you can locate a resource, you must first specify which bundle contains it. The Bundle class has many constructors, but the one you use most often is main. The main bundle represents the bundle directory that contains the currently executing code. So for an app, the main bundle object gives you access to the resources that shipped with your app.\nIf your app interacts directly with plug-ins, frameworks, or other bundled content, you can use other methods of this class to create appropriate bundle objects. You can always create bundle objects from a known URL or path, but other methods make it easier to access bundles your app is already using. For example, if you link to a framework, you can use the init(for:) method to locate the framework bundle based on a class defined in that framework.\nYou use Bundle objects to obtain the location of specific resources inside the bundle. When looking for resources, you provide the name of the resource and its type at a minimum. For resources in a specific subdirectory, you can also specify that directory. After locating the resource, the bundle routines return a path string or URL that you can use to open the file. \nLocating a single resource in a bundle\n\nBundle objects follow a specific search pattern when looking for resources on disk. Global resources\u2014that is, resources not in a language-specific .lproj directory\u2014are returned first, followed by region- and language-specific resources. This search pattern means that the bundle looks for resources in the following order:\nGlobal (nonlocalized) resources\nRegion-specific localized resources (based on the user\u2019s region preferences)\nLanguage-specific localized resources (based on the user\u2019s language preferences)\nDevelopment language resources (as specified by the CFBundleDevelopmentRegion key in the bundle\u2019s Info.plist file)\nBecause global resources take precedence over language-specific resources, you should never include both a global and localized version of a given resource in your app. When a global version of a resource exists, language-specific versions are never returned. The reason for this precedence is performance. If localized resources were searched first, the bundle object might waste time searching for a nonexistent localized resource before returning the global resource.\nImportant\nBundle objects always consider case when searching for resource files, even on file systems that support case-insensitive filenames. Always make sure that you specify filenames with case sensitivity in mind.\nWhen locating resource files, the bundle object automatically considers many standard filename modifiers when determining which file to return. Resources may be tagged for a specific device (~iphone, ~ipad) or for a specific screen resolution (@2x, @3x). Do not include these modifiers when specifying the name of the resource you want. The bundle object selects the file that is most appropriate for the underlying device. For more information, see App Icons on iPhone, iPad and Apple Watch.\nBundle structures vary depending on the target platform and the type of bundle you are building. The Bundle class hides this underlying structure in most (but not all) cases. Many of the methods you use to load resources from a bundle automatically locate the appropriate starting directory and look for resources in known places. You can also use the methods and properties of this class to get the location of known bundle directories and to retrieve resources specifically from those directories.\nFor information about the bundle structure of iOS and macOS apps, see Bundle Programming Guide. For information about the structure of framework bundles, see Framework Programming Guide. For information about the structure of macOS plug-ins, see Code Loading Programming Topics.\n", "Methods": [{"method_description": "Returns the NSBundle object with which the specified class is associated.", "method_name": "init", "params": [{"param_type": "AnyClass", "param_description": "A class.", "param_name": ["for", "aClass"]}], "class_name": "Bundle", "method_declar": "init(for aClass: AnyClass)", "return_value": {"return_description": ["The NSBundle object that dynamically loaded aClass (a loadable bundle), the NSBundle object for the framework in which aClass is defined, or the main bundle object if aClass was not dynamically loaded or is not defined in a framework."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the NSBundle instance that has the specified bundle identifier.", "method_name": "init", "params": [{"param_type": "String", "param_description": "The identifier for an existing NSBundle instance.", "param_name": ["identifier"]}], "class_name": "Bundle", "method_declar": "init?(identifier: String)", "return_value": {"return_description": ["The NSBundle object with the bundle identifier identifier, or nil if the requested bundle is not found on the system."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an NSBundle object initialized to correspond to the specified file URL.", "method_name": "init", "params": [{"param_type": "URL", "param_description": "The file URL to a directory. This must be a full URL for a directory; if it contains any symbolic links, they must be resolvable.", "param_name": ["url"]}], "class_name": "Bundle", "method_declar": "convenience init?(url: URL)", "return_value": {"return_description": ["An NSBundle object initialized to correspond to url. This method initializes and returns a new instance only if there is no existing bundle associated with url, otherwise it deallocates self and returns the existing object. If url doesn\u2019t exist or the user doesn\u2019t have access to it, returns nil."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an NSBundle object initialized to correspond to the specified directory.", "method_name": "init", "params": [{"param_type": "String", "param_description": "", "param_name": ["path"]}], "class_name": "Bundle", "method_declar": "init?(path: String)", "return_value": {"return_description": ["An NSBundle object initialized to correspond to fullPath. This method initializes and returns a new instance only if there is no existing bundle associated with fullPath, otherwise it deallocates self and returns the existing object. If fullPath doesn\u2019t exist or the user doesn\u2019t have access to it, returns nil."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Unarchives the contents of a nib file located in the receiver's bundle.", "method_name": "loadNibNamed", "params": [{"param_type": "String", "param_description": "The name of the nib file, which need not include the .nib extension.", "param_name": ["name"]}, {"param_type": "Any", "param_description": "The object to assign as the nib\u2019s File's Owner object.", "param_name": ["owner"]}, {"param_type": "[UINib.OptionsKey", "param_description": "A dictionary containing the options to use when opening the nib file. For a list of available keys for this dictionary, see UIKit Nib Loading Options. ", "param_name": ["options"]}, {"param_type": "Any] = nil", "param_description": "", "param_name": ["[UINib.OptionsKey"]}], "class_name": "Bundle", "method_declar": "func loadNibNamed(_ name: String, owner: Any?, options: [UINib.OptionsKey : Any]? = nil) -> [Any]?", "return_value": {"return_description": ["An array containing the top-level objects in the nib file. The array does not contain references to the File\u2019s Owner or any proxy objects; it contains only those objects that were instantiated when the nib file was unarchived. You should retain either the returned array or the objects it contains manually to prevent the nib file objects from being released prematurely. "], "return_name": [""], "return_type": ["[Any]"]}, "is_static": false}, {"method_description": "Loads a nib from the bundle with the specified file name and owner.", "method_name": "loadNibNamed", "params": [{"param_type": "NSNib.Name", "param_description": "The name of the nib.", "param_name": ["nibName"]}, {"param_type": "Any", "param_description": "The object that will be the nib\u2019s owner.", "param_name": ["owner"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSArray>", "param_description": "This by-reference parameter is populated with the top level objects of the nib.", "param_name": ["topLevelObjects"]}], "class_name": "Bundle", "method_declar": "func loadNibNamed(_ nibName: NSNib.Name, owner: Any?, topLevelObjects: AutoreleasingUnsafeMutablePointer<NSArray?>?) -> Bool", "return_value": {"return_description": ["true if the nib file was loaded successfully; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns the file URL for the resource file identified by the specified name and extension and residing in a given bundle directory. ", "method_name": "url", "params": [{"param_type": "String", "param_description": "The name of a resource file contained in the directory specified by subpath.If you specify nil, the method returns the first resource file it finds with the specified extension in that directory.", "param_name": ["forResource", "name"]}, {"param_type": "String", "param_description": "", "param_name": ["withExtension", "ext"]}, {"param_type": "String", "param_description": "The path of a top-level bundle directory. This must be a valid path. For example, to specify the bundle directory for a Mac app, you might specify the path /Applications/MyApp.app.", "param_name": ["subdirectory", "subpath"]}], "class_name": "Bundle", "method_declar": "func url(forResource name: String?, withExtension ext: String?, subdirectory subpath: String?) -> URL?", "return_value": {"return_description": ["The file URL for the resource file or nil if the file could not be located. This method also returns nil if the bundle specified by the bundlePath parameter does not exist or is not a readable directory."], "return_name": [""], "return_type": ["URL"]}, "is_static": false}, {"method_description": "Returns the file URL for the resource identified by the specified name and file extension.", "method_name": "url", "params": [{"param_type": "String", "param_description": "The name of the resource file.If you specify nil, the method returns the first resource file it finds with the specified extension.", "param_name": ["forResource", "name"]}, {"param_type": "String", "param_description": "", "param_name": ["withExtension", "ext"]}], "class_name": "Bundle", "method_declar": "func url(forResource name: String?, withExtension ext: String?) -> URL?", "return_value": {"return_description": ["The file URL for the resource file or nil if the file could not be located."], "return_name": [""], "return_type": ["URL"]}, "is_static": false}, {"method_description": "Returns an array of file URLs for all resources identified by the specified file extension and located in the specified bundle subdirectory.", "method_name": "urls", "params": [{"param_type": "String", "param_description": "", "param_name": ["forResourcesWithExtension", "ext"]}, {"param_type": "String", "param_description": "The name of the bundle subdirectory.", "param_name": ["subdirectory", "subpath"]}], "class_name": "Bundle", "method_declar": "func urls(forResourcesWithExtension ext: String?, subdirectory subpath: String?) -> [URL]?", "return_value": {"return_description": ["An array of file URLs for the resource files or nil if no files could be located at subpath with extension. Returns an empty array if no matching resource files are found."], "return_name": [""], "return_type": ["[URL]"]}, "is_static": false}, {"method_description": "Returns the file URL for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.", "method_name": "url", "params": [{"param_type": "String", "param_description": "The name of the resource file.If you specify nil, the method returns the first resource file it finds that matches the remaining criteria.", "param_name": ["forResource", "name"]}, {"param_type": "String", "param_description": "", "param_name": ["withExtension", "ext"]}, {"param_type": "String", "param_description": "The name of the bundle subdirectory to search.", "param_name": ["subdirectory", "subpath"]}, {"param_type": "String", "param_description": "The language ID for the localization. This parameter should correspond to the name of one of the bundle's language-specific resource directories without the .lproj extension. ", "param_name": ["localization", "localizationName"]}], "class_name": "Bundle", "method_declar": "func url(forResource name: String?, withExtension ext: String?, subdirectory subpath: String?, localization localizationName: String?) -> URL?", "return_value": {"return_description": ["The file URL for the resource file or nil if the file could not be located."], "return_name": [""], "return_type": ["URL"]}, "is_static": false}, {"method_description": "Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.", "method_name": "urls", "params": [{"param_type": "String", "param_description": "", "param_name": ["forResourcesWithExtension", "ext"]}, {"param_type": "String", "param_description": "The name of the bundle subdirectory to search.", "param_name": ["subdirectory", "subpath"]}, {"param_type": "String", "param_description": "The language ID for the localization. This parameter should correspond to the name of one of the bundle's language-specific resource directories without the .lproj extension. ", "param_name": ["localization", "localizationName"]}], "class_name": "Bundle", "method_declar": "func urls(forResourcesWithExtension ext: String?, subdirectory subpath: String?, localization localizationName: String?) -> [URL]?", "return_value": {"return_description": ["An array containing the file URLs for all bundle resources matching the specified criteria. This method returns an empty array if no matching resource files are found. "], "return_name": [""], "return_type": ["[URL]"]}, "is_static": false}, {"method_description": "Creates and returns a file URL for the resource with the specified name and extension in the specified bundle.", "method_name": "url", "params": [{"param_type": "String", "param_description": "The name of the resource file.If you specify nil, the method returns the first resource file it finds that matches the remaining criteria.", "param_name": ["forResource", "name"]}, {"param_type": "String", "param_description": "", "param_name": ["withExtension", "ext"]}, {"param_type": "String", "param_description": "The name of the bundle subdirectory to search.", "param_name": ["subdirectory", "subpath"]}, {"param_type": "URL", "param_description": "The file URL of the bundle to search.", "param_name": ["in", "bundleURL"]}], "class_name": "Bundle", "method_declar": "class func url(forResource name: String?, withExtension ext: String?, subdirectory subpath: String?, in bundleURL: URL) -> URL?", "return_value": {"return_description": ["The file URL for the resource file or nil if the file could not be located."], "return_name": [""], "return_type": ["URL"]}, "is_static": false}, {"method_description": "Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, within the specified bundle.", "method_name": "urls", "params": [{"param_type": "String", "param_description": "", "param_name": ["forResourcesWithExtension", "ext"]}, {"param_type": "String", "param_description": "The name of the bundle subdirectory to search. ", "param_name": ["subdirectory", "subpath"]}, {"param_type": "URL", "param_description": "The file URL of the bundle to search.", "param_name": ["in", "bundleURL"]}], "class_name": "Bundle", "method_declar": "class func urls(forResourcesWithExtension ext: String?, subdirectory subpath: String?, in bundleURL: URL) -> [URL]?", "return_value": {"return_description": ["An array of file URLs for the resource files matching the criteria or an empty array if no files could be located."], "return_name": [""], "return_type": ["[URL]"]}, "is_static": false}, {"method_description": "Returns the full pathname for the resource identified by the specified name and file extension.", "method_name": "path", "params": [{"param_type": "String", "param_description": "The name of the resource file.If you specify nil, the method returns the first resource file it finds with the specified extension.", "param_name": ["forResource", "name"]}, {"param_type": "String", "param_description": "", "param_name": ["ofType", "ext"]}], "class_name": "Bundle", "method_declar": "func path(forResource name: String?, ofType ext: String?) -> String?", "return_value": {"return_description": ["The full pathname for the resource file, or nil if the file could not be located."], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns the full pathname for the resource identified by the specified name and file extension and located in the specified bundle subdirectory.", "method_name": "path", "params": [{"param_type": "String", "param_description": "The name of the resource file.If you specify nil, the method returns the first resource file it finds that matches the remaining criteria.", "param_name": ["forResource", "name"]}, {"param_type": "String", "param_description": "", "param_name": ["ofType", "ext"]}, {"param_type": "String", "param_description": "The name of the bundle subdirectory.", "param_name": ["inDirectory", "subpath"]}], "class_name": "Bundle", "method_declar": "func path(forResource name: String?, ofType ext: String?, inDirectory subpath: String?) -> String?", "return_value": {"return_description": ["The full pathname for the resource file, or nil if the file could not be located."], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns the full pathname for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.", "method_name": "path", "params": [{"param_type": "String", "param_description": "The name of the resource file.If you specify nil, the method returns the first resource file it finds that matches the remaining criteria.", "param_name": ["forResource", "name"]}, {"param_type": "String", "param_description": "", "param_name": ["ofType", "ext"]}, {"param_type": "String", "param_description": "The name of the bundle subdirectory to search. ", "param_name": ["inDirectory", "subpath"]}, {"param_type": "String", "param_description": "The language ID for of the localization. This parameter should correspond to the name of one of the bundle's language-specific resource directories without the .lproj extension. ", "param_name": ["forLocalization", "localizationName"]}], "class_name": "Bundle", "method_declar": "func path(forResource name: String?, ofType ext: String?, inDirectory subpath: String?, forLocalization localizationName: String?) -> String?", "return_value": {"return_description": ["The full pathname for the resource file or nil if the file could not be located."], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns an array containing the pathnames for all bundle resources having the specified filename extension and residing in the resource subdirectory.", "method_name": "paths", "params": [{"param_type": "String", "param_description": "", "param_name": ["forResourcesOfType", "ext"]}, {"param_type": "String", "param_description": "The name of the bundle subdirectory to search. ", "param_name": ["inDirectory", "subpath"]}], "class_name": "Bundle", "method_declar": "func paths(forResourcesOfType ext: String?, inDirectory subpath: String?) -> [String]", "return_value": {"return_description": ["An array containing the full pathnames for all bundle resources matching the specified criteria. This method returns an empty array if no matching resource files are found. "], "return_name": [""], "return_type": ["[String]"]}, "is_static": false}, {"method_description": "Returns an array containing the file for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.", "method_name": "paths", "params": [{"param_type": "String", "param_description": "", "param_name": ["forResourcesOfType", "ext"]}, {"param_type": "String", "param_description": "The name of the bundle subdirectory to search. ", "param_name": ["inDirectory", "subpath"]}, {"param_type": "String", "param_description": "The language ID for the localization. This parameter should correspond to the name of one of the bundle's language-specific resource directories without the .lproj extension. ", "param_name": ["forLocalization", "localizationName"]}], "class_name": "Bundle", "method_declar": "func paths(forResourcesOfType ext: String?, inDirectory subpath: String?, forLocalization localizationName: String?) -> [String]", "return_value": {"return_description": ["An array containing the full pathnames for all bundle resources matching the specified criteria. This method returns an empty array if no matching resource files are found. "], "return_name": [""], "return_type": ["[String]"]}, "is_static": false}, {"method_description": "Returns the full pathname for the resource file identified by the specified name and extension and residing in a given bundle directory. ", "method_name": "path", "params": [{"param_type": "String", "param_description": "The name of a resource file contained in the directory specified by bundlePath.If you specify nil, the method returns the first resource file it finds with the specified extension.", "param_name": ["forResource", "name"]}, {"param_type": "String", "param_description": "", "param_name": ["ofType", "ext"]}, {"param_type": "String", "param_description": "The path of a top-level bundle directory. This must be a valid path. For example, to specify the bundle directory for a Mac app, you might specify the path /Applications/MyApp.app.", "param_name": ["inDirectory", "bundlePath"]}], "class_name": "Bundle", "method_declar": "class func path(forResource name: String?, ofType ext: String?, inDirectory bundlePath: String) -> String?", "return_value": {"return_description": ["The full pathname for the resource file or nil if the file could not be located. This method also returns nil if the bundle specified by the bundlePath parameter does not exist or is not a readable directory."], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns an array containing the pathnames for all bundle resources having the specified extension and residing in the bundle directory at the specified path.", "method_name": "paths", "params": [{"param_type": "String", "param_description": "", "param_name": ["forResourcesOfType", "ext"]}, {"param_type": "String", "param_description": "The top-level directory of a bundle. This must represent a valid path.", "param_name": ["inDirectory", "bundlePath"]}], "class_name": "Bundle", "method_declar": "class func paths(forResourcesOfType ext: String?, inDirectory bundlePath: String) -> [String]", "return_value": {"return_description": ["An array containing the full pathnames for all bundle resources with the specified extension. This method returns an empty array if no matching resource files are found. It also returns an empty array if the bundle specified by the bundlePath parameter does not exist or is not a readable directory."], "return_name": [""], "return_type": ["[String]"]}, "is_static": false}, {"method_description": "Returns the location of the specified image resource as an NSURL.", "method_name": "urlForImageResource", "params": [{"param_type": "NSImage.Name", "param_description": "The name of the image resource file. Including a filename extension is optional.", "param_name": ["name"]}], "class_name": "Bundle", "method_declar": "func urlForImageResource(_ name: NSImage.Name) -> URL?", "return_value": {"return_description": ["An NSURL for the resource file or nil if the file was not found. "], "return_name": [""], "return_type": ["URL"]}, "is_static": false}, {"method_description": "Returns the location of the specified image resource file. ", "method_name": "pathForImageResource", "params": [{"param_type": "NSImage.Name", "param_description": "The name of the image resource file, without any pathname information. Including a filename extension is optional.", "param_name": ["name"]}], "class_name": "Bundle", "method_declar": "func pathForImageResource(_ name: NSImage.Name) -> String?", "return_value": {"return_description": ["The absolute pathname of the resource file or nil if the file is not found. "], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns an NSImage instance associated with the specified name, which can be backed by multiple files representing different resolution versions of the image.", "method_name": "image", "params": [{"param_type": "NSImage.Name", "param_description": "The filename of the image resource file. Including a filename extension is optional.", "param_name": ["forResource", "name"]}], "class_name": "Bundle", "method_declar": "func image(forResource name: NSImage.Name) -> NSImage?", "return_value": {"return_description": ["The NSImage object associated with the specified name, or nil if no file is found."], "return_name": [""], "return_type": ["NSImage"]}, "is_static": false}, {"method_description": "Returns the location of the specified sound resource file. ", "method_name": "path", "params": [{"param_type": "NSSound.Name", "param_description": "The name of the sound resource file, without any pathname information. Including a filename extension is optional", "param_name": ["forSoundResource", "name"]}], "class_name": "Bundle", "method_declar": "func path(forSoundResource name: NSSound.Name) -> String?", "return_value": {"return_description": ["The absolute pathname of the resource file or nil if the file was not found. "], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns a localized version of the string designated by the specified key and residing in the specified table.", "method_name": "localizedString", "params": [{"param_type": "String", "param_description": "The key for a string in the table identified by tableName.", "param_name": ["forKey", "key"]}, {"param_type": "String", "param_description": "The value to return if key is nil or if a localized string for key can\u2019t be found in the table.", "param_name": ["value"]}, {"param_type": "String", "param_description": "The receiver\u2019s string table to search. If tableName is nil or is an empty string, the method attempts to use the table in Localizable.strings.", "param_name": ["table", "tableName"]}], "class_name": "Bundle", "method_declar": "func localizedString(forKey key: String, value: String?, table tableName: String?) -> String", "return_value": {"return_description": ["A localized version of the string designated by key in table tableName. This method returns the following when key is nil or not found in table:"], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns the context-sensitive help for the specified key from the bundle's help file. ", "method_name": "contextHelp", "params": [{"param_type": "NSHelpManager.ContextHelpKey", "param_description": "A key in your application's Help.plist file that identifies the context-sensitive help to return.", "param_name": ["forKey", "key"]}], "class_name": "Bundle", "method_declar": "func contextHelp(forKey key: NSHelpManager.ContextHelpKey) -> NSAttributedString?", "return_value": {"return_description": ["The help string or nil if the application does not have a Help.plist file or the file does not contain an entry for the specified key. "], "return_name": [""], "return_type": ["NSAttributedString"]}, "is_static": false}, {"method_description": "Returns the file URL of the executable with the specified name in the receiver\u2019s bundle.", "method_name": "url", "params": [{"param_type": "String", "param_description": "The name of an executable file.", "param_name": ["forAuxiliaryExecutable", "executableName"]}], "class_name": "Bundle", "method_declar": "func url(forAuxiliaryExecutable executableName: String) -> URL?", "return_value": {"return_description": ["The file URL of the executable executableName in the receiver\u2019s bundle."], "return_name": [""], "return_type": ["URL"]}, "is_static": false}, {"method_description": "Returns the full pathname of the executable with the specified name in the receiver\u2019s bundle.", "method_name": "path", "params": [{"param_type": "String", "param_description": "The name of an executable file.", "param_name": ["forAuxiliaryExecutable", "executableName"]}], "class_name": "Bundle", "method_declar": "func path(forAuxiliaryExecutable executableName: String) -> String?", "return_value": {"return_description": ["The full pathname of the executable executableName in the receiver\u2019s bundle."], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns the value associated with the specified key in the receiver's information property list.", "method_name": "object", "params": [{"param_type": "String", "param_description": "A key in the receiver's property list.", "param_name": ["forInfoDictionaryKey", "key"]}], "class_name": "Bundle", "method_declar": "func object(forInfoDictionaryKey key: String) -> Any?", "return_value": {"return_description": ["The value associated with key in the receiver's property list (Info.plist). The localized value of a key is returned when one is available."], "return_name": [""], "return_type": ["Any"]}, "is_static": false}, {"method_description": "Returns one or more localizations from the specified list that a bundle object would use to locate resources for the current user.", "method_name": "preferredLocalizations", "params": [{"param_type": "[String]", "param_description": "An array of NSString objects, each of which specifies the language ID for a localization that the bundle supports.  ", "param_name": ["from", "localizationsArray"]}], "class_name": "Bundle", "method_declar": "class func preferredLocalizations(from localizationsArray: [String]) -> [String]", "return_value": {"return_description": ["An array of NSString objects containing the preferred localizations. These strings are ordered in the array according to the user's language preferences and are taken from the strings in the localizationsArray parameter. "], "return_name": [""], "return_type": ["[String]"]}, "is_static": false}, {"method_description": "Returns locale identifiers for which a bundle would provide localized content, given a specified list of candidates for a user's language preferences.", "method_name": "preferredLocalizations", "params": [{"param_type": "[String]", "param_description": "An array of identifiers, each corresponding to a localization that a bundle can support. ", "param_name": ["from", "localizationsArray"]}, {"param_type": "[String]", "param_description": "An array of BCP 47 language codes corresponding to a user's preferred languages. If this parameter is nil, the method uses the current user's language preferences.", "param_name": ["forPreferences", "preferencesArray"]}], "class_name": "Bundle", "method_declar": "class func preferredLocalizations(from localizationsArray: [String], forPreferences preferencesArray: [String]?) -> [String]", "return_value": {"return_description": ["An array of locale identifiers, ordered according to user preference. "], "return_name": [""], "return_type": ["[String]"]}, "is_static": false}, {"method_description": "A hint to the system of the relative order for purging tagged sets of resources in the bundle.", "method_name": "setPreservationPriority", "params": [{"param_type": "Double", "param_description": "A number specifying the relative priority of preserving the resources in the group specified by tag.Possible values are between 0.0 and 1.0. The default is 0.0. The system will attempt to purge resources with lower priorities first.", "param_name": ["priority"]}, {"param_type": "Set<String>", "param_description": "A set set of tag names specifying resources stored in the bundle. Must not be nil. An exception is thrown if any of the tags in the set do not exist in your app.", "param_name": ["forTags", "tags"]}], "class_name": "Bundle", "method_declar": "func setPreservationPriority(_ priority: Double, forTags tags: Set<String>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the current preservation priority for the specified tag.", "method_name": "preservationPriority", "params": [{"param_type": "String", "param_description": "A string specifying the identifier for a group of related resources. An exception is thrown if tag does not exist in your app.", "param_name": ["forTag", "tag"]}], "class_name": "Bundle", "method_declar": "func preservationPriority(forTag tag: String) -> Double", "return_value": {"return_description": ["The preservation priority for the specified tag. Possible values are between 0.0 and 1.0"], "return_name": [""], "return_type": ["Double"]}, "is_static": false}, {"method_description": "Returns the Class object for the specified name.", "method_name": "classNamed", "params": [{"param_type": "String", "param_description": "The name of a class.", "param_name": ["className"]}], "class_name": "Bundle", "method_declar": "func classNamed(_ className: String) -> AnyClass?", "return_value": {"return_description": ["The Class object for className. Returns nil if className is not one of the classes associated with the receiver or if there is an error loading the executable code containing the class implementation. "], "return_name": [""], "return_type": ["AnyClass"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the bundle\u2019s executable code could be loaded successfully. ", "method_name": "preflight", "params": [], "class_name": "Bundle", "method_declar": "func preflight() throws", "return_value": {"return_description": ["true if the bundle\u2019s executable code could be loaded successfully or is already loaded; otherwise, false if the code could not be loaded."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Dynamically loads the bundle\u2019s executable code into a running program, if the code has not already been loaded.", "method_name": "load", "params": [], "class_name": "Bundle", "method_declar": "func load() -> Bool", "return_value": {"return_description": ["true if the method successfully loads the bundle\u2019s code or if the code has already been loaded, otherwise false. "], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Loads the bundle\u2019s executable code and returns any errors.", "method_name": "loadAndReturnError", "params": [], "class_name": "Bundle", "method_declar": "func loadAndReturnError() throws", "return_value": {"return_description": ["true if the bundle\u2019s executable code was loaded successfully or was already loaded; otherwise, false if the code could not be loaded."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Unloads the code associated with the receiver. ", "method_name": "unload", "params": [], "class_name": "Bundle", "method_declar": "func unload() -> Bool", "return_value": {"return_description": ["true if the bundle was successfully unloaded or was not already loaded; otherwise, false if the bundle could not be unloaded."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "Bundle", "typealias": [], "Vars": [{"var_description": "Returns the bundle object that contains the current executable.", "var_type": "Bundle", "is_static": false, "var_name": "main"}, {"var_description": "Returns an array of all of the application\u2019s bundles that represent frameworks.", "var_type": "[Bundle]", "is_static": false, "var_name": "allFrameworks"}, {"var_description": "Returns an array of all the application\u2019s non-framework bundles.", "var_type": "[Bundle]", "is_static": false, "var_name": "allBundles"}, {"var_description": "The file URL of the bundle\u2019s subdirectory containing resource files.", "var_type": "URL", "is_static": false, "var_name": "resourceURL"}, {"var_description": "The file URL of the receiver's executable file.", "var_type": "URL", "is_static": false, "var_name": "executableURL"}, {"var_description": "The file URL of the bundle\u2019s subdirectory containing private frameworks.", "var_type": "URL", "is_static": false, "var_name": "privateFrameworksURL"}, {"var_description": "The file URL of the receiver's subdirectory containing shared frameworks.", "var_type": "URL", "is_static": false, "var_name": "sharedFrameworksURL"}, {"var_description": "The file URL of the receiver's subdirectory containing plug-ins.", "var_type": "URL", "is_static": false, "var_name": "builtInPlugInsURL"}, {"var_description": "The file URL of the bundle\u2019s subdirectory containing shared support files.", "var_type": "URL", "is_static": false, "var_name": "sharedSupportURL"}, {"var_description": "The file URL for the bundle\u2019s App Store receipt.", "var_type": "URL", "is_static": false, "var_name": "appStoreReceiptURL"}, {"var_description": "The full pathname of the bundle\u2019s subdirectory containing resources.", "var_type": "String", "is_static": false, "var_name": "resourcePath"}, {"var_description": "The full pathname of the receiver's executable file.", "var_type": "String", "is_static": false, "var_name": "executablePath"}, {"var_description": "The full pathname of the bundle\u2019s subdirectory containing private frameworks.", "var_type": "String", "is_static": false, "var_name": "privateFrameworksPath"}, {"var_description": "The full pathname of the bundle\u2019s subdirectory containing shared frameworks.", "var_type": "String", "is_static": false, "var_name": "sharedFrameworksPath"}, {"var_description": "The full pathname of the receiver's subdirectory containing plug-ins.", "var_type": "String", "is_static": false, "var_name": "builtInPlugInsPath"}, {"var_description": "The full pathname of the bundle\u2019s subdirectory containing shared support files.", "var_type": "String", "is_static": false, "var_name": "sharedSupportPath"}, {"var_description": "The full URL of the receiver\u2019s bundle directory.", "var_type": "URL", "is_static": false, "var_name": "bundleURL"}, {"var_description": "The full pathname of the receiver\u2019s bundle directory.", "var_type": "String", "is_static": false, "var_name": "bundlePath"}, {"var_description": "The receiver\u2019s bundle identifier.", "var_type": "String", "is_static": false, "var_name": "bundleIdentifier"}, {"var_description": "A dictionary, constructed from the bundle\u2019s Info.plist file, that contains information about the receiver.", "var_type": "[String", "is_static": false, "var_name": "infoDictionary"}, {"var_description": "A list of all the localizations contained in the bundle.", "var_type": "[String]", "is_static": false, "var_name": "localizations"}, {"var_description": "An ordered list of preferred localizations contained in the bundle.", "var_type": "[String]", "is_static": false, "var_name": "preferredLocalizations"}, {"var_description": "The localization for the development language.", "var_type": "String", "is_static": false, "var_name": "developmentLocalization"}, {"var_description": "A dictionary with the keys from the bundle\u2019s localized property list.", "var_type": "[String", "is_static": false, "var_name": "localizedInfoDictionary"}, {"var_description": "The bundle\u2019s principal class.", "var_type": "AnyClass", "is_static": false, "var_name": "principalClass"}, {"var_description": "A notification that lets observers know when classes are dynamically loaded.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "didLoadNotification"}, {"var_description": "A constant used as a key for the userInfo dictionary of a didLoadNotification notification that corresponds to an array of names of each class that was loaded.", "var_type": "String", "is_static": false, "var_name": "NSLoadedClasses"}, {"var_description": "An array of numbers indicating the architecture types supported by the bundle\u2019s executable.", "var_type": "[NSNumber]", "is_static": false, "var_name": "executableArchitectures"}, {"var_description": "The load status of a bundle.", "var_type": "Bool", "is_static": false, "var_name": "isLoaded"}, {"var_description": "The 32-bit Intel architecture.", "var_type": "Int", "is_static": false, "var_name": "NSBundleExecutableArchitectureI386"}, {"var_description": "The 32-bit PowerPC architecture.", "var_type": "Int", "is_static": false, "var_name": "NSBundleExecutableArchitecturePPC"}, {"var_description": "The 64-bit Intel architecture.", "var_type": "Int", "is_static": false, "var_name": "NSBundleExecutableArchitectureX8664"}, {"var_description": "The 64-bit PowerPC architecture.", "var_type": "Int", "is_static": false, "var_name": "NSBundleExecutableArchitecturePPC64"}, {"var_description": "The beginning of the range of error codes reserved for errors related to executable files.", "var_type": "Int", "is_static": false, "var_name": "NSExecutableErrorMinimum"}, {"var_description": "The executable type isn\u2019t loadable in the current process.", "var_type": "Int", "is_static": false, "var_name": "NSExecutableNotLoadableError"}, {"var_description": "The executable doesn\u2019t provide an architecture compatible with the current process.", "var_type": "Int", "is_static": false, "var_name": "NSExecutableArchitectureMismatchError"}, {"var_description": "The executable has Objective-C runtime information that\u2019s incompatible with the current process.", "var_type": "Int", "is_static": false, "var_name": "NSExecutableRuntimeMismatchError"}, {"var_description": "Executable cannot be loaded for an otherwise-unspecified reason.", "var_type": "Int", "is_static": false, "var_name": "NSExecutableLoadError"}, {"var_description": "The executable failed due to linking issues.", "var_type": "Int", "is_static": false, "var_name": "NSExecutableLinkError"}, {"var_description": "The end of the range of error codes reserved for errors related to executable files.", "var_type": "Int", "is_static": false, "var_name": "NSExecutableErrorMaximum"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}