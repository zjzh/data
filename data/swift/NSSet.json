{"class_description": "The NSSet, NSMutableSet, and NSCountedSet classes declare the programmatic interface to an unordered collection of objects.\nNSSet declares the programmatic interface for static sets of distinct objects. You establish a static set\u2019s entries when it\u2019s created, and thereafter the entries can\u2019t be modified. NSMutableSet, on the other hand, declares a programmatic interface for dynamic sets of distinct objects. A dynamic\u2014or mutable\u2014set allows the addition and deletion of entries at any time, automatically allocating memory as needed.\nYou can use sets as an alternative to arrays when the order of elements isn\u2019t important and performance in testing whether an object is contained in the set is a consideration\u2014while arrays are ordered, testing for membership is slower than with sets.\nNSSet is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFSet. See Toll-Free Bridging for more information on toll-free bridging.\nThere should be little need of subclassing. If you need to customize behavior, it is often better to consider composition instead of subclassing.\nIn a subclass, you must override all of its primitive methods:\ncount\nmember(_:)\nobjectEnumerator()\nBefore making a custom class of NSSet, investigate NSHashTable and the corresponding Core Foundation type, CFSet. Because NSSet and CFSet are \u201ctoll-free bridged,\u201d you can substitute a CFSet object for a NSSet object in your code (with appropriate casting). Although they are corresponding types, CFSet and NSSet do not have identical interfaces or implementations, and you can sometimes do things with CFSet that you cannot easily do with NSSet.\nIf the behavior you want to add supplements that of the existing class, you could write a category on NSSet. Keep in mind, however, that this category will be in effect for all instances of NSSet that you use, and this might have unintended consequences. Alternatively, you could use composition to achieve the desired behavior.\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "NSSet", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CustomReflectable", "CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "NSCopying", "NSFastEnumeration", "NSMutableCopying", "NSSecureCoding", "Sequence"], "package_name": "foundation", "subclass_list": []}