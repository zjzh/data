{"class_description": "The NSSet, NSMutableSet, and NSCountedSet classes declare the programmatic interface to an unordered collection of objects.\nNSSet declares the programmatic interface for static sets of distinct objects. You establish a static set\u2019s entries when it\u2019s created, and thereafter the entries can\u2019t be modified. NSMutableSet, on the other hand, declares a programmatic interface for dynamic sets of distinct objects. A dynamic\u2014or mutable\u2014set allows the addition and deletion of entries at any time, automatically allocating memory as needed.\nYou can use sets as an alternative to arrays when the order of elements isn\u2019t important and performance in testing whether an object is contained in the set is a consideration\u2014while arrays are ordered, testing for membership is slower than with sets.\nNSSet is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFSet. See Toll-Free Bridging for more information on toll-free bridging.\nThere should be little need of subclassing. If you need to customize behavior, it is often better to consider composition instead of subclassing.\nIn a subclass, you must override all of its primitive methods:\ncount\nmember(_:)\nobjectEnumerator()\nBefore making a custom class of NSSet, investigate NSHashTable and the corresponding Core Foundation type, CFSet. Because NSSet and CFSet are \u201ctoll-free bridged,\u201d you can substitute a CFSet object for a NSSet object in your code (with appropriate casting). Although they are corresponding types, CFSet and NSSet do not have identical interfaces or implementations, and you can sometimes do things with CFSet that you cannot easily do with NSSet.\nIf the behavior you want to add supplements that of the existing class, you could write a category on NSSet. Keep in mind, however, that this category will be in effect for all instances of NSSet that you use, and this might have unintended consequences. Alternatively, you could use composition to achieve the desired behavior.\n", "Methods": [{"method_description": "Creates and returns a set that contains a single given object.", "method_name": "init", "params": [{"param_type": "Any", "param_description": "The object to add to the new set. object receives a retain message after being added to the set.", "param_name": ["object"]}], "class_name": "NSSet", "method_declar": "convenience init(object: Any)", "return_value": {"return_description": ["A new set that contains a single member, object."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and returns a set containing a specified number of objects from a given C array of objects.", "method_name": "init", "params": [{"param_type": "UnsafePointer<AnyObject>", "param_description": "A C array of objects to add to the new set. If the same object appears more than once in objects, it is added only once to the returned set. Each object receives a retain message as it is added to the set.", "param_name": ["objects"]}, {"param_type": "Int", "param_description": "The number of objects from objects to add to the new set.", "param_name": ["count", "cnt"]}], "class_name": "NSSet", "method_declar": "convenience init(objects: UnsafePointer<AnyObject>, count cnt: Int)", "return_value": {"return_description": ["A new set containing cnt objects from the list of objects specified by objects."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a new set formed by adding a given object to the receiving set.", "method_name": "adding", "params": [{"param_type": "Any", "param_description": "The object to add to the set.", "param_name": ["anObject"]}], "class_name": "NSSet", "method_declar": "func adding(_ anObject: Any) -> Set<AnyHashable>", "return_value": {"return_description": ["A new set formed by adding anObject to the receiving set."], "return_name": [""], "return_type": ["Set<AnyHashable"]}, "is_static": false}, {"method_description": "Returns a new set formed by adding the objects in a given set to the receiving set.", "method_name": "addingObjects", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set of objects to add to the receiving set.", "param_name": ["from", "other"]}], "class_name": "NSSet", "method_declar": "func addingObjects(from other: Set<AnyHashable>) -> Set<AnyHashable>", "return_value": {"return_description": ["A new set formed by adding the objects in other to the receiving set."], "return_name": [""], "return_type": ["Set<AnyHashable"]}, "is_static": false}, {"method_description": "Returns a new set formed by adding the objects in a given array to the receiving set.", "method_name": "addingObjects", "params": [{"param_type": "[Any]", "param_description": "The array of objects to add to the set.", "param_name": ["from", "other"]}], "class_name": "NSSet", "method_declar": "func addingObjects(from other: [Any]) -> Set<AnyHashable>", "return_value": {"return_description": ["A new set formed by adding the objects in other to the receiving set."], "return_name": [""], "return_type": ["Set<AnyHashable"]}, "is_static": false}, {"method_description": "Initializes a newly allocated set with the objects that are contained in a given array.", "method_name": "init", "params": [{"param_type": "[Any]", "param_description": "An array of objects to add to the new set. If the same object appears more than once in array, it is represented only once in the returned set. Each object receives a retain message as it is added to the set. ", "param_name": ["array"]}], "class_name": "NSSet", "method_declar": "convenience init(array: [Any])", "return_value": {"return_description": ["An initialized set with the contents of array. The returned set might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated set with a specified number of objects from a given C array of objects.", "method_name": "init", "params": [{"param_type": "UnsafePointer<AnyObject>", "param_description": "A C array of objects to add to the new set. If the same object appears more than once in objects, it is added only once to the returned set. Each object receives a retain message as it is added to the set.", "param_name": ["objects"]}, {"param_type": "Int", "param_description": "The number of objects from objects to add to the new set.", "param_name": ["count", "cnt"]}], "class_name": "NSSet", "method_declar": "init(objects: UnsafePointer<AnyObject>?, count cnt: Int)", "return_value": {"return_description": ["An initialized set containing cnt objects from the list of objects specified by objects. The returned set might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated set and adds to it objects from another given set.", "method_name": "init", "params": [{"param_type": "Set<AnyHashable>", "param_description": "A set containing objects to add to the receiving set. Each object is retained as it is added.", "param_name": ["set"]}], "class_name": "NSSet", "method_declar": "convenience init(set: Set<AnyHashable>)", "return_value": {"return_description": ["An initialized objects set containing the objects from set. The returned set might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated set and adds to it members of another given set.", "method_name": "init", "params": [{"param_type": "Set<AnyHashable>", "param_description": "A set containing objects to add to the new set.", "param_name": ["set"]}, {"param_type": "Bool", "param_description": "If true, each object in set receives a copyWithZone: message to create a copy of the object\u2014objects must conform to the NSCopying protocol. In a managed memory environment, this is instead of the retain message the object would otherwise receive. The object copy is then added to the returned set.If false, then in a managed memory environment each object in set simply receives a retain message when it is added to the returned set. ", "param_name": ["copyItems", "flag"]}], "class_name": "NSSet", "method_declar": "convenience init(set: Set<AnyHashable>, copyItems flag: Bool)", "return_value": {"return_description": ["An initialized set that contains the members of set. The returned set might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated set.", "method_name": "init", "params": [], "class_name": "NSSet", "method_declar": "init()", "return_value": {"return_description": ["A set."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns one of the objects in the set, or nil if the set contains no objects.", "method_name": "anyObject", "params": [], "class_name": "NSSet", "method_declar": "func anyObject() -> Any?", "return_value": {"return_description": ["One of the objects in the set, or nil if the set contains no objects. The object returned is chosen at the set\u2019s convenience\u2014the selection is not guaranteed to be random."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether a given object is present in the set.", "method_name": "contains", "params": [{"param_type": "Any", "param_description": "An object to look for in the set.", "param_name": ["anObject"]}], "class_name": "NSSet", "method_declar": "func contains(_ anObject: Any) -> Bool", "return_value": {"return_description": ["true if anObject is present in the set, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Evaluates a given predicate against each object in the receiving set and returns a new set containing the objects for which the predicate returns true.", "method_name": "filtered", "params": [{"param_type": "NSPredicate", "param_description": "A predicate.", "param_name": ["using", "predicate"]}], "class_name": "NSSet", "method_declar": "func filtered(using predicate: NSPredicate) -> Set<AnyHashable>", "return_value": {"return_description": ["A new set containing the objects in the receiving set for which predicate returns true."], "return_name": [""], "return_type": ["Set<AnyHashable"]}, "is_static": false}, {"method_description": "Determines whether a given object is present in the set, and returns that object if it is.", "method_name": "member", "params": [{"param_type": "Any", "param_description": "An object to look for in the set.", "param_name": ["object"]}], "class_name": "NSSet", "method_declar": "func member(_ object: Any) -> Any?", "return_value": {"return_description": ["Returns an object equal to object if it's present in the set, otherwise nil. "], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Returns an enumerator object that lets you access each object in the set.", "method_name": "objectEnumerator", "params": [], "class_name": "NSSet", "method_declar": "func objectEnumerator() -> NSEnumerator", "return_value": {"return_description": ["An enumerator object that lets you access each object in the set."], "return_name": [""], "return_type": ["NSEnumerato"]}, "is_static": false}, {"method_description": "Executes a given block using each object in the set.", "method_name": "enumerateObjects", "params": [{"param_type": "(Any, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to elements in the set.The block takes two arguments:objThe element in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.", "param_name": ["block"]}], "class_name": "NSSet", "method_declar": "func enumerateObjects(_ block: (Any, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Executes a given block using each object in the set, using the specified enumeration options.", "method_name": "enumerateObjects", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration.", "param_name": ["options", "opts"]}, {"param_type": "(Any, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to elements in the set.The block takes two arguments:objThe element in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.", "param_name": ["using", "block"]}], "class_name": "NSSet", "method_declar": "func enumerateObjects(options opts: NSEnumerationOptions = [], using block: (Any, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Returns a set of object that pass a test in a given block.", "method_name": "objects", "params": [{"param_type": "(Any, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The block to apply to elements in the array.The block takes two arguments:objThe element in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.The block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSSet", "method_declar": "func objects(passingTest predicate: (Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>", "return_value": {"return_description": ["An NSSet containing objects that pass the test."], "return_name": [""], "return_type": ["Set<AnyHashable"]}, "is_static": false}, {"method_description": "Returns a set of object that pass a test in a given block, using the specified enumeration options.", "method_name": "objects", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration.", "param_name": ["options", "opts"]}, {"param_type": "(Any, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The block to apply to elements in the set.The block takes two arguments:objThe element in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.The block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSSet", "method_declar": "func objects(options opts: NSEnumerationOptions = [], passingTest predicate: (Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>", "return_value": {"return_description": ["An NSSet containing objects that pass the test."], "return_name": [""], "return_type": ["Set<AnyHashable"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether every object in the receiving set is also present in another given set.", "method_name": "isSubset", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set with which to compare the receiving set.", "param_name": ["of", "otherSet"]}], "class_name": "NSSet", "method_declar": "func isSubset(of otherSet: Set<AnyHashable>) -> Bool", "return_value": {"return_description": ["true if every object in the receiving set is also present in otherSet, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether at least one object in the receiving set is also present in another given set.", "method_name": "intersects", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set with which to compare the receiving set.", "param_name": ["otherSet"]}], "class_name": "NSSet", "method_declar": "func intersects(_ otherSet: Set<AnyHashable>) -> Bool", "return_value": {"return_description": ["true if at least one object in the receiving set is also present in otherSet, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Compares the receiving set to another set.", "method_name": "isEqual", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set with which to compare the receiving set.", "param_name": ["to", "otherSet"]}], "class_name": "NSSet", "method_declar": "func isEqual(to otherSet: Set<AnyHashable>) -> Bool", "return_value": {"return_description": ["true if the contents of otherSet are equal to the contents of the receiving set, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Return a set containing the results of invoking valueForKey: on each of the receiving set's members.", "method_name": "value", "params": [{"param_type": "String", "param_description": "The name of one of the properties of the receiving set's members.", "param_name": ["forKey", "key"]}], "class_name": "NSSet", "method_declar": "func value(forKey key: String) -> Any", "return_value": {"return_description": ["A set containing the results of invoking valueForKey: (with the argument key) on each of the receiving set's members."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Invokes setValue:forKey: on each of the set\u2019s members.", "method_name": "setValue", "params": [{"param_type": "Any", "param_description": "The value for the property identified by key.", "param_name": ["value"]}, {"param_type": "String", "param_description": "The name of one of the properties of the set's members.", "param_name": ["forKey", "key"]}], "class_name": "NSSet", "method_declar": "func setValue(_ value: Any?, forKey key: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an array of the set\u2019s content sorted as specified by a given array of sort descriptors.", "method_name": "sortedArray", "params": [{"param_type": "[NSSortDescriptor]", "param_description": "An array of NSSortDescriptor objects.", "param_name": ["using", "sortDescriptors"]}], "class_name": "NSSet", "method_declar": "func sortedArray(using sortDescriptors: [NSSortDescriptor]) -> [Any]", "return_value": {"return_description": ["An NSArray containing the set\u2019s content sorted as specified by sortDescriptors."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Raises an exception.", "method_name": "addObserver", "params": [{"param_type": "NSObject", "param_description": "The object to register for KVO notifications. The observer must implement the key-value observing method observeValue(forKeyPath:of:change:context:).", "param_name": ["observer"]}, {"param_type": "String", "param_description": "The key path, relative to the set, of the property to observe. This value must not be nil.", "param_name": ["forKeyPath", "keyPath"]}, {"param_type": "NSKeyValueObservingOptions", "param_description": "A combination of the NSKeyValueObservingOptions values that specifies what is included in observation notifications. For possible values, see NSKeyValueObservingOptions.", "param_name": ["options"]}, {"param_type": "UnsafeMutableRawPointer", "param_description": "Arbitrary data that is passed to observer in observeValue(forKeyPath:of:change:context:).", "param_name": ["context"]}], "class_name": "NSSet", "method_declar": "func addObserver(_ observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Raises an exception.", "method_name": "removeObserver", "params": [{"param_type": "NSObject", "param_description": "The object to remove as an observer.", "param_name": ["observer"]}, {"param_type": "String", "param_description": "A key-path, relative to the set, for which observer is registered to receive KVO change notifications. This value must not be nil.", "param_name": ["forKeyPath", "keyPath"]}, {"param_type": "UnsafeMutableRawPointer", "param_description": "Arbitrary data that is passed to observer in observeValue(forKeyPath:of:change:context:).", "param_name": ["context"]}], "class_name": "NSSet", "method_declar": "func removeObserver(_ observer: NSObject, forKeyPath keyPath: String, context: UnsafeMutableRawPointer?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Raises an exception.", "method_name": "removeObserver", "params": [{"param_type": "NSObject", "param_description": "The object to remove as an observer.", "param_name": ["observer"]}, {"param_type": "String", "param_description": "A key-path, relative to the set, for which observer is registered to receive KVO change notifications. This value must not be nil.", "param_name": ["forKeyPath", "keyPath"]}], "class_name": "NSSet", "method_declar": "func removeObserver(_ observer: NSObject, forKeyPath keyPath: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a string that represents the contents of the set, formatted as a property list.", "method_name": "description", "params": [{"param_type": "Any", "param_description": "On iOS and macOS 10.5 and later, either an instance of NSDictionary or an NSLocale object may be used for locale.In OS X v10.4 and earlier it must be an instance of NSDictionary.", "param_name": ["withLocale", "locale"]}], "class_name": "NSSet", "method_declar": "func description(withLocale locale: Any?) -> String", "return_value": {"return_description": ["A string that represents the contents of the set, formatted as a property list."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "Any...", "param_description": "", "param_name": ["arrayLiteral", "elements"]}], "class_name": "NSSet", "method_declar": "required convenience init(arrayLiteral elements: Any...)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "NSCoder", "param_description": "", "param_name": ["coder", "aDecoder"]}], "class_name": "NSSet", "method_declar": "init?(coder aDecoder: NSCoder)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "IndexPath", "param_description": "", "param_name": ["collectionViewIndexPath", "indexPath"]}], "class_name": "NSSet", "method_declar": "convenience init(collectionViewIndexPath indexPath: IndexPath)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "[IndexPath]", "param_description": "", "param_name": ["collectionViewIndexPaths", "indexPaths"]}], "class_name": "NSSet", "method_declar": "convenience init(collectionViewIndexPaths indexPaths: [IndexPath])", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "Any...", "param_description": "", "param_name": ["objects", "elements"]}], "class_name": "NSSet", "method_declar": "convenience init(objects elements: Any...)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "enumerateIndexPaths", "params": [{"param_type": "NSEnumerationOptions", "param_description": "", "param_name": ["options", "opts"]}, {"param_type": "(IndexPath, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "", "param_name": ["using", "block"]}], "class_name": "NSSet", "method_declar": "func enumerateIndexPaths(options opts: NSEnumerationOptions = [], using block: (IndexPath, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Return an iterator over the elements of this sequence.", "method_name": "makeIterator", "params": [], "class_name": "NSSet", "method_declar": "func makeIterator() -> NSFastEnumerationIterator", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSFastEnumerationIterato"]}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSSet", "typealias": [], "Vars": [{"var_description": "The number of members in the set.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "An array containing the set\u2019s members, or an empty array if the set has no members.", "var_type": "[Any]", "is_static": false, "var_name": "allObjects"}, {"var_description": "A string that represents the contents of the set, formatted as a property list.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}], "class_type": "class", "interface_list": ["CustomReflectable", "CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "NSCopying", "NSFastEnumeration", "NSMutableCopying", "NSSecureCoding", "Sequence"], "package_name": "foundation", "subclass_list": []}