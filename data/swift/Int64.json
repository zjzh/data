{"Methods": [{"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["Int64", "Bool"], "return_description": ["A tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire sum. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs."]}, "class_name": "Int64", "params": [{"param_description": "", "param_type": "Int64) -> (partialValu", "param_name": ["other"]}, {"param_description": "", "param_type": "Int64", "param_name": ["Int64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "is_static": false, "method_name": "addingReportingOverflow", "method_declar": "func addingReportingOverflow(_ other: Int64) -> (partialValue: Int64, overflow: Bool)"}, {"return_value": {"return_name": [""], "return_type": ["Int64"], "return_description": ["A value that is offset from this value by n."]}, "class_name": "Int64", "params": [{"param_description": "The distance to advance this value.", "param_type": "Int", "param_name": ["by", "n"]}], "method_description": "Returns a value that is offset the specified distance from this value.", "is_static": false, "method_name": "advanced", "method_declar": "func advanced(by n: Int) -> Int64"}, {"return_value": {"return_name": [""], "return_type": ["Int"], "return_description": ["The distance from this value to other."]}, "class_name": "Int64", "params": [{"param_description": "The value to calculate the distance to.", "param_type": "Int64", "param_name": ["to", "other"]}], "method_description": "Returns the distance from this value to the given value, expressed as a stride.", "is_static": false, "method_name": "distance", "method_declar": "func distance(to other: Int64) -> Int"}, {"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["Int64", "Bool"], "return_description": ["A tuple containing the result of the division along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire quotient. If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend."]}, "class_name": "Int64", "params": [{"param_description": "", "param_type": "Int64) -> (partialValu", "param_name": ["by", "other"]}, {"param_description": "", "param_type": "Int64", "param_name": ["Int64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "is_static": false, "method_name": "dividedReportingOverflow", "method_declar": "func dividedReportingOverflow(by other: Int64) -> (partialValue: Int64, overflow: Bool)"}, {"return_value": {"return_name": [["quotient"], ["remainder"]], "return_type": ["Int64", "Int64"], "return_description": ["A tuple containing the quotient and remainder of dividend divided by this value."]}, "class_name": "Int64", "params": [{"param_description": "A tuple containing the high and low parts of a double-width integer. The high component of the value carries the sign, if the type is signed.", "param_type": "(hig", "param_name": ["dividend"]}, {"param_description": "", "param_type": "Int64", "param_name": ["(high"]}, {"param_description": "", "param_type": "Int64.Magnitude)) -> (quotien", "param_name": ["low"]}, {"param_description": "", "param_type": "Int64", "param_name": ["Int64.Magnitude))", "->", "(quotient"]}, {"param_description": "", "param_type": "Int64", "param_name": ["remainder"]}], "method_description": "Returns a tuple containing the quotient and remainder of dividing the given value by this value.", "is_static": false, "method_name": "dividingFullWidth", "method_declar": "func dividingFullWidth(_ dividend: (high: Int64, low: Int64.Magnitude)) -> (quotient: Int64, remainder: Int64)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Int64", "params": [{"param_description": "The encoder to write data to.", "param_type": "Encoder", "param_name": ["to", "encoder"]}], "method_description": "Encodes this value into the given encoder.", "is_static": false, "method_name": "encode", "method_declar": "func encode(to encoder: Encoder) throws"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Int64", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}], "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "is_static": false, "method_name": "hash", "method_declar": "func hash(into hasher: inout Hasher)"}, {"return_value": {"return_name": [["high"], ["low"]], "return_type": ["Int64", "Int64.Magnitude"], "return_description": ["A tuple containing the high and low parts of the result of multiplying this value and other."]}, "class_name": "Int64", "params": [{"param_description": "The value to multiply this value by.", "param_type": "Int64) -> (hig", "param_name": ["by", "other"]}, {"param_description": "", "param_type": "Int64", "param_name": ["Int64)", "->", "(high"]}, {"param_description": "", "param_type": "Int64.Magnitude", "param_name": ["low"]}], "method_description": "Returns a tuple containing the high and low parts of the result of multiplying this value by the given value.", "is_static": false, "method_name": "multipliedFullWidth", "method_declar": "func multipliedFullWidth(by other: Int64) -> (high: Int64, low: Int64.Magnitude)"}, {"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["Int64", "Bool"], "return_description": ["A tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire product. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs."]}, "class_name": "Int64", "params": [{"param_description": "", "param_type": "Int64) -> (partialValu", "param_name": ["by", "other"]}, {"param_description": "", "param_type": "Int64", "param_name": ["Int64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "is_static": false, "method_name": "multipliedReportingOverflow", "method_declar": "func multipliedReportingOverflow(by other: Int64) -> (partialValue: Int64, overflow: Bool)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Int64", "params": [], "method_description": "Replaces this value with its additive inverse.", "is_static": false, "method_name": "negate", "method_declar": "mutating func negate()"}, {"return_value": {"return_name": [["quotient"], ["remainder"]], "return_type": ["Int64", "Int64"], "return_description": ["A tuple containing the quotient and remainder of this value divided by rhs."]}, "class_name": "Int64", "params": [{"param_description": "The value to divide this value by.", "param_type": "Int64) -> (quotien", "param_name": ["dividingBy", "rhs"]}, {"param_description": "", "param_type": "Int64", "param_name": ["Int64)", "->", "(quotient"]}, {"param_description": "", "param_type": "Int64", "param_name": ["remainder"]}], "method_description": "Returns the quotient and remainder of this value divided by the given value.", "is_static": false, "method_name": "quotientAndRemainder", "method_declar": "func quotientAndRemainder(dividingBy rhs: Int64) -> (quotient: Int64, remainder: Int64)"}, {"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["Int64", "Bool"], "return_description": ["A tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire remainder. If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend."]}, "class_name": "Int64", "params": [{"param_description": "", "param_type": "Int64) -> (partialValu", "param_name": ["dividingBy", "other"]}, {"param_description": "", "param_type": "Int64", "param_name": ["Int64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division.", "is_static": false, "method_name": "remainderReportingOverflow", "method_declar": "func remainderReportingOverflow(dividingBy other: Int64) -> (partialValue: Int64, overflow: Bool)"}, {"return_value": {"return_name": [""], "return_type": ["Int64"], "return_description": ["The sign of this number, expressed as an integer of the same type."]}, "class_name": "Int64", "params": [], "method_description": "Returns -1 if this value is negative and 1 if it\u2019s positive; otherwise, 0.", "is_static": false, "method_name": "signum", "method_declar": "func signum() -> Int64"}, {"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["Int64", "Bool"], "return_description": ["A tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire difference. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value."]}, "class_name": "Int64", "params": [{"param_description": "", "param_type": "Int64) -> (partialValu", "param_name": ["other"]}, {"param_description": "", "param_type": "Int64", "param_name": ["Int64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation.", "is_static": false, "method_name": "subtractingReportingOverflow", "method_declar": "func subtractingReportingOverflow(_ other: Int64) -> (partialValue: Int64, overflow: Bool)"}, {"return_value": {"return_name": [""], "return_type": ["Int64"], "return_description": ["A random value within the bounds of range."]}, "class_name": "Int64", "params": [{"param_description": "The range in which to create a random value.", "param_type": "ClosedRange<Int64>", "param_name": ["in", "range"]}], "method_description": "Returns a random value within the specified range.", "is_static": true, "method_name": "random", "method_declar": "static func random(in range: ClosedRange<Int64>) -> Int64"}, {"return_value": {"return_name": [""], "return_type": ["Int64"], "return_description": ["A random value within the bounds of range."]}, "class_name": "Int64", "params": [{"param_description": "The range in which to create a random value. range must not be empty.", "param_type": "Range<Int64>", "param_name": ["in", "range"]}], "method_description": "Returns a random value within the specified range.", "is_static": true, "method_name": "random", "method_declar": "static func random(in range: Range<Int64>) -> Int64"}, {"return_value": {"return_name": [""], "return_type": ["Int64"], "return_description": ["A random value within the bounds of range."]}, "class_name": "Int64", "params": [{"param_description": "The range in which to create a random value.", "param_type": "ClosedRange<Int64>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout T", "param_name": ["using", "generator"]}], "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "is_static": true, "method_name": "random", "method_declar": "static func random<T>(in range: ClosedRange<Int64>, using generator: inout T) -> Int64 where T : RandomNumberGenerator"}, {"return_value": {"return_name": [""], "return_type": ["Int64"], "return_description": ["A random value within the bounds of range."]}, "class_name": "Int64", "params": [{"param_description": "The range in which to create a random value. range must not be empty.", "param_type": "Range<Int64>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout T", "param_name": ["using", "generator"]}], "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "is_static": true, "method_name": "random", "method_declar": "static func random<T>(in range: Range<Int64>, using generator: inout T) -> Int64 where T : RandomNumberGenerator"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Int64", "params": [{"param_description": "An integer to compare.", "param_type": "Int64", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the two given values are not equal.", "is_static": true, "method_name": "!=", "method_declar": "static func != <Other>(lhs: Int64, rhs: Other) -> Bool where Other : BinaryInteger"}], "Vars": [{"var_description": "The big-endian representation of this integer.", "is_static": false, "var_name": "bigEndian", "var_type": "Int64"}, {"var_description": "The number of bits in the binary representation of this value.", "is_static": false, "var_name": "bitWidth", "var_type": "Int"}, {"var_description": "A representation of this integer with the byte order swapped.", "is_static": false, "var_name": "byteSwapped", "var_type": "Int64"}, {"var_description": "A mirror that reflects the Int64 instance.", "is_static": false, "var_name": "customMirror", "var_type": "Mirror"}, {"var_description": "", "is_static": false, "var_name": "dataValue", "var_type": "MLDataValue"}, {"var_description": "A textual representation of this value.", "is_static": false, "var_name": "description", "var_type": "String"}, {"var_description": "The number of leading zeros in this value\u2019s binary representation.", "is_static": false, "var_name": "leadingZeroBitCount", "var_type": "Int"}, {"var_description": "The little-endian representation of this integer.", "is_static": false, "var_name": "littleEndian", "var_type": "Int64"}, {"var_description": "The magnitude of this value.", "is_static": false, "var_name": "magnitude", "var_type": "UInt64"}, {"var_description": "The number of bits equal to 1 in this value\u2019s binary representation.", "is_static": false, "var_name": "nonzeroBitCount", "var_type": "Int"}, {"var_description": "The number of trailing zeros in this value\u2019s binary representation.", "is_static": false, "var_name": "trailingZeroBitCount", "var_type": "Int"}, {"var_description": "A collection containing the words of this value\u2019s binary representation, in order from the least significant to most significant.", "is_static": false, "var_name": "words", "var_type": "Int64.Words"}, {"var_description": "The number of bits used for the underlying binary representation of values of this type.", "is_static": false, "var_name": "bitWidth", "var_type": "Int"}, {"var_description": "", "is_static": false, "var_name": "dataValueType", "var_type": "MLDataValue.ValueType"}, {"var_description": "A Boolean value indicating whether this type is a signed integer type.", "is_static": false, "var_name": "isSigned", "var_type": "Bool"}, {"var_description": "The maximum representable integer in this type.", "is_static": false, "var_name": "max", "var_type": "Int64"}, {"var_description": "The minimum representable integer in this type.", "is_static": false, "var_name": "min", "var_type": "Int64"}], "class_name": "Int64", "interface_list": ["CKRecordValueProtocol", "CustomPlaygroundQuickLookable", "CustomReflectable", "CVarArg", "FixedWidthInteger", "Hashable", "SignedInteger"], "class_description": "", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}