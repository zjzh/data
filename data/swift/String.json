{"class_description": "A string is a series of characters, such as \"Swift\", that forms a collection. Strings in Swift are Unicode correct and locale insensitive, and are designed to be efficient. The String type bridges with the Objective-C class NSString and offers interoperability with C functions that works with strings.\nYou can create new strings using string literals or string interpolations. A string literal is a series of characters enclosed in quotes.\nString interpolations are string literals that evaluate any included expressions and convert the results to string form. String interpolations give you an easy way to build a string from multiple pieces. Wrap each expression in a string interpolation in parentheses, prefixed by a backslash.\nCombine strings using the concatenation operator (+).\nMultiline string literals are enclosed in three double quotation marks (\"\"\"), with each delimiter on its own line. Indentation is stripped from each line of a multiline string literal to match the indentation of the closing delimiter.\nStrings always have value semantics. Modifying a copy of a string leaves the original unaffected.\nComparing strings for equality using the equal-to operator (==) or a relational operator (like < or >=) is always performed using Unicode canonical representation. As a result, different representations of a string compare as being equal.\nThe Unicode scalar value \"\\u{301}\" modifies the preceding character to include an accent, so \"e\\u{301}\" has the same canonical representation as the single Unicode scalar value \"\u00e9\".\nBasic string operations are not sensitive to locale settings, ensuring that string comparisons and other operations always have a single, stable result, allowing strings to be used as keys in Dictionary instances and for other purposes.\nA string is a collection of extended grapheme clusters, which approximate human-readable characters. Many individual characters, such as \u201c\u00e9\u201d, \u201c\uae40\u201d, and \u201c\ud83c\uddee\ud83c\uddf3\u201d, can be made up of multiple Unicode scalar values. These scalar values are combined by Unicode\u2019s boundary algorithms into extended grapheme clusters, represented by the Swift Character type. Each element of a string is represented by a Character instance.\nFor example, to retrieve the first word of a longer string, you can search for a space and then create a substring from a prefix of the string up to that point:\nThe firstName constant is an instance of the Substring type\u2014a type that represents substrings of a string while sharing the original string\u2019s storage. Substrings present the same interface as strings.\nIf you need to access the contents of a string as encoded in different Unicode encodings, use one of the string\u2019s unicodeScalars, utf16, or utf8 properties. Each property provides access to a view of the string as a series of code units, each encoded in a different Unicode encoding.\nTo demonstrate the different views available for every string, the following examples use this String instance:\nThe cafe string is a collection of the nine characters that are visible when the string is displayed.\nA string\u2019s unicodeScalars property is a collection of Unicode scalar values, the 21-bit codes that are the basic unit of Unicode. Each scalar value is represented by a Unicode.Scalar instance and is equivalent to a UTF-32 code unit.\nThe unicodeScalars view\u2019s elements comprise each Unicode scalar value in the cafe string. In particular, because cafe was declared using the decomposed form of the \"\u00e9\" character, unicodeScalars contains the scalar values for both the letter \"e\" (101) and the accent character \"\u00b4\" (769).\nA string\u2019s utf16 property is a collection of UTF-16 code units, the 16-bit encoding form of the string\u2019s Unicode scalar values. Each code unit is stored as a UInt16 instance.\nThe elements of the utf16 view are the code units for the string when encoded in UTF-16. These elements match those accessed through indexed NSString APIs.\nA string\u2019s utf8 property is a collection of UTF-8 code units, the 8-bit encoding form of the string\u2019s Unicode scalar values. Each code unit is stored as a UInt8 instance.\nThe elements of the utf8 view are the code units for the string when encoded in UTF-8. This representation matches the one used when String instances are passed to C APIs.\nWhen you need to know the length of a string, you must first consider what you\u2019ll use the length for. Are you measuring the number of characters that will be displayed on the screen, or are you measuring the amount of storage needed for the string in a particular encoding? A single string can have greatly differing lengths when measured by its different views.\nFor example, an ASCII character like the capital letter A is represented by a single element in each of its four views. The Unicode scalar value of A is 65, which is small enough to fit in a single code unit in both UTF-16 and UTF-8.\nOn the other hand, an emoji flag character is constructed from a pair of Unicode scalar values, like \"\\u{1F1F5}\" and \"\\u{1F1F7}\". Each of these scalar values, in turn, is too large to fit into a single UTF-16 or UTF-8 code unit. As a result, each view of the string \"\ud83c\uddf5\ud83c\uddf7\" reports a different length.\nTo check whether a string is empty, use its isEmpty property instead of comparing the length of one of the views to 0. Unlike with isEmpty, calculating a view\u2019s count property requires iterating through the elements of the string.\nTo find individual elements of a string, use the appropriate view for your task. For example, to retrieve the first word of a longer string, you can search the string for a space and then create a new string from a prefix of the string up to that point.\nStrings and their views share indices, so you can access the UTF-8 view of the name string using the same firstSpace index.\nNote that an index into one view may not have an exact corresponding position in another view. For example, the flag string declared above comprises a single character, but is composed of eight code units when encoded as UTF-8. The following code creates constants for the first and second positions in the flag.utf8 view. Accessing the utf8 view with these indices yields the first and second code UTF-8 units.\nWhen used to access the elements of the flag string itself, however, the secondCodeUnit index does not correspond to the position of a specific character. Instead of only accessing the specific UTF-8 code unit, that index is treated as the position of the character at the index\u2019s encoded offset. In the case of secondCodeUnit, that character is still the flag itself.\nIf you need to validate that an index from one string\u2019s view corresponds with an exact position in another view, use the index\u2019s samePosition(in:) method or the init(_:within:) initializer.\nAlthough strings in Swift have value semantics, strings use a copy-on-write strategy to store their data in a buffer. This buffer can then be shared by different copies of a string. A string\u2019s data is only copied lazily, upon mutation, when more than one string instance is using the same buffer. Therefore, the first in any sequence of mutating operations may cost O(n) time and space.\nWhen a string\u2019s contiguous storage fills up, a new buffer must be allocated and data must be moved to the new storage. String buffers use an exponential growth strategy that makes appending to a string a constant time operation when averaged over many append operations.\nAny String instance can be bridged to NSString using the type-cast operator (as), and any String instance that originates in Objective-C may use an NSString instance as its storage. Because any arbitrary subclass of NSString can become a String instance, there are no guarantees about representation or efficiency when a String instance is backed by NSString storage. Because NSString is immutable, it is just as though the storage was shared by a copy. The first in any sequence of mutating operations causes elements to be copied into unique, contiguous storage which may cost O(n) time and space, where n is the length of the string\u2019s encoded representation (or more, if the underlying NSString has unusual performance characteristics).\nFor more information about the Unicode terms used in this discussion, see the Unicode.org glossary. In particular, this discussion mentions extended grapheme clusters, Unicode scalar values, and canonical equivalence.\n", "Methods": [{"method_description": "Creates an empty string.", "method_name": "init", "params": [], "class_name": "String", "method_declar": "init()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string containing the given character.", "method_name": "init", "params": [{"param_type": "Character", "param_description": "The character to convert to a string.", "param_name": ["c"]}], "class_name": "String", "method_declar": "init(_ c: Character)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new string containing the characters in the given sequence.", "method_name": "init", "params": [{"param_type": "Sequence", "param_description": "A string instance or another sequence of characters.", "param_name": ["characters"]}], "class_name": "String", "method_declar": "init<S>(_ characters: S) where S : Sequence, S.Element == Character", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new instance of a collection containing the elements of a sequence.", "method_name": "init", "params": [{"param_type": "Sequence", "param_description": "The sequence of elements for the new collection.", "param_name": ["elements"]}], "class_name": "String", "method_declar": "init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new string containing the characters in the given sequence.", "method_name": "init", "params": [{"param_type": "LosslessStringConvertible", "param_description": "A string instance or another sequence of characters.", "param_name": ["other"]}], "class_name": "String", "method_declar": "init<S>(_ other: S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new string representing the given string repeated the specified number of times.", "method_name": "init", "params": [{"param_type": "String", "param_description": "The string to repeat.", "param_name": ["repeating", "repeatedValue"]}, {"param_type": "Int", "param_description": "The number of times to repeat repeatedValue in the resulting string.", "param_name": ["count"]}], "class_name": "String", "method_declar": "init(repeating repeatedValue: String, count: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string representing the given character repeated the specified number of times.", "method_name": "init", "params": [{"param_type": "Character", "param_description": "The character to repeat.", "param_name": ["repeating", "repeatedValue"]}, {"param_type": "Int", "param_description": "The number of times to repeat repeatedValue in the resulting string.", "param_name": ["count"]}], "class_name": "String", "method_declar": "init(repeating repeatedValue: Character, count: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string representing the given character repeated the specified number of times.", "method_name": "init", "params": [{"param_type": "Character", "param_description": "The character to repeat.", "param_name": ["repeating", "repeatedValue"]}, {"param_type": "Int", "param_description": "The number of times to repeat repeatedValue in the resulting string.", "param_name": ["count"]}], "class_name": "String", "method_declar": "init(repeating repeatedValue: Character, count: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "Unicode.Scalar", "param_description": "", "param_name": ["scalar"]}], "class_name": "String", "method_declar": "init(_ scalar: Unicode.Scalar)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Produces a string created by copying the data from a given C array of UTF8-encoded bytes.", "method_name": "init", "params": [{"param_type": "UnsafePointer<CChar>", "param_description": "", "param_name": ["utf8String", "bytes"]}], "class_name": "String", "method_declar": "init?(utf8String bytes: UnsafePointer<CChar>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new string by copying and validating the null-terminated UTF-8 data referenced by the given pointer.", "method_name": "init", "params": [{"param_type": "UnsafePointer<CChar>", "param_description": "A pointer to a null-terminated UTF-8 code sequence.", "param_name": ["validatingUTF8", "cString"]}], "class_name": "String", "method_declar": "init?(validatingUTF8 cString: UnsafePointer<CChar>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an initialized String object that contains a given number of characters from a given array of Unicode characters.", "method_name": "init", "params": [{"param_type": "UnsafePointer<unichar>", "param_description": "", "param_name": ["utf16CodeUnits"]}, {"param_type": "Int", "param_description": "", "param_name": ["count"]}], "class_name": "String", "method_declar": "init(utf16CodeUnits: UnsafePointer<unichar>, count: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an initialized String object that contains a given number of characters from a given array of UTF-16 Code Units", "method_name": "init", "params": [{"param_type": "UnsafePointer<unichar>", "param_description": "", "param_name": ["utf16CodeUnitsNoCopy"]}, {"param_type": "Int", "param_description": "", "param_name": ["count"]}, {"param_type": "Bool", "param_description": "", "param_name": ["freeWhenDone", "flag"]}], "class_name": "String", "method_declar": "init(utf16CodeUnitsNoCopy: UnsafePointer<unichar>, count: Int, freeWhenDone flag: Bool)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string from the given Unicode code units in the specified encoding.", "method_name": "init", "params": [{"param_type": "Collection", "param_description": "A collection of code units encoded in the encoding specified in sourceEncoding.", "param_name": ["decoding", "codeUnits"]}, {"param_type": "Encoding.Type", "param_description": "The encoding in which codeUnits should be interpreted.", "param_name": ["as", "sourceEncoding"]}], "class_name": "String", "method_declar": "init<C, Encoding>(decoding codeUnits: C, as sourceEncoding: Encoding.Type) where C : Collection, Encoding : _UnicodeEncoding, C.Element == Encoding.CodeUnit", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a string created by using a given format string as a template into which the remaining argument values are substituted according to the user\u2019s default locale.", "method_name": "localizedStringWithFormat", "params": [{"param_type": "String", "param_description": "", "param_name": ["format"]}, {"param_type": "CVarArg...", "param_description": "", "param_name": ["arguments"]}], "class_name": "String", "method_declar": "static func localizedStringWithFormat(_ format: String, _ arguments: CVarArg...) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": true}, {"method_description": "Creates a string representing the given value in base 10, or some other specified base.", "method_name": "init", "params": [{"param_type": "BinaryInteger", "param_description": "The value to convert to a string.", "param_name": ["value"]}, {"param_type": "Int", "param_description": "The base to use for the string representation. radix must be at least 2 and at most 36. The default is 10.", "param_name": ["radix"]}, {"param_type": "Bool = false", "param_description": "Pass true to use uppercase letters to represent numerals greater than 9, or false to use lowercase letters. The default is false.", "param_name": ["uppercase"]}], "class_name": "String", "method_declar": "init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Produces an initialized String object that contains a given number of bytes from a given buffer of bytes interpreted in a given encoding, and optionally frees the buffer.  WARNING: this initializer is not memory-safe!", "method_name": "init", "params": [{"param_type": "UnsafeMutableRawPointer", "param_description": "", "param_name": ["bytesNoCopy", "bytes"]}, {"param_type": "Int", "param_description": "", "param_name": ["length"]}, {"param_type": "String.Encoding", "param_description": "", "param_name": ["encoding"]}, {"param_type": "Bool", "param_description": "", "param_name": ["freeWhenDone", "flag"]}], "class_name": "String", "method_declar": "init?(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, encoding: String.Encoding, freeWhenDone flag: Bool)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new string by copying the null-terminated UTF-8 data referenced by the given pointer.", "method_name": "init", "params": [{"param_type": "UnsafePointer<CChar>", "param_description": "A pointer to a null-terminated UTF-8 code sequence.", "param_name": ["cString"]}], "class_name": "String", "method_declar": "init(cString: UnsafePointer<CChar>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new string by copying the null-terminated UTF-8 data referenced by the given pointer.", "method_name": "init", "params": [{"param_type": "UnsafePointer<UInt8>", "param_description": "", "param_name": ["cString"]}], "class_name": "String", "method_declar": "init(cString: UnsafePointer<UInt8>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Produces a string containing the bytes in a given C array, interpreted according to a given encoding.", "method_name": "init", "params": [{"param_type": "UnsafePointer<CChar>", "param_description": "", "param_name": ["cString"]}, {"param_type": "String.Encoding", "param_description": "", "param_name": ["encoding", "enc"]}], "class_name": "String", "method_declar": "init?(cString: UnsafePointer<CChar>, encoding enc: String.Encoding)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string from the null-terminated sequence of bytes at the given pointer.", "method_name": "init", "params": [{"param_type": "UnsafePointer<UnicodeEncoding.CodeUnit>", "param_description": "", "param_name": ["decodingCString", "ptr"]}, {"param_type": "Encoding.Type", "param_description": "The encoding in which the code units should be interpreted.", "param_name": ["as", "sourceEncoding"]}], "class_name": "String", "method_declar": "init<Encoding>(decodingCString ptr: UnsafePointer<Encoding.CodeUnit>, as sourceEncoding: Encoding.Type) where Encoding : _UnicodeEncoding", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new string by copying the null-terminated data referenced by the given pointer using the specified encoding.", "method_name": "decodeCString", "params": [{"param_type": "UnsafePointer<UnicodeEncoding.CodeUnit>", "param_description": "A pointer to a null-terminated code sequence encoded in encoding.", "param_name": ["cString"]}, {"param_type": "UnicodeEncoding.Type", "param_description": "The Unicode encoding of the data referenced by cString.", "param_name": ["as", "encoding"]}, {"param_type": "Bool", "param_description": "Pass true to create a new string, even when the data referenced by cString contains ill-formed sequences. Ill-formed sequences are replaced with the Unicode replacement character (\"\\u{FFFD}\"). Pass false to interrupt the creation of the new string if an ill-formed sequence is detected.", "param_name": ["repairingInvalidCodeUnits", "isRepairing"]}, {"param_type": "String", "param_description": "", "param_name": ["Bool", "=", "true)", "->", "(result"]}, {"param_type": "Bool", "param_description": "", "param_name": ["repairsMade"]}], "class_name": "String", "method_declar": "static func decodeCString<Encoding>(_ cString: UnsafePointer<Encoding.CodeUnit>?, as encoding: Encoding.Type, repairingInvalidCodeUnits isRepairing: Bool = true) -> (result: String, repairsMade: Bool)? where Encoding : _UnicodeEncoding", "return_value": {"return_description": ["A tuple with the new string and a Boolean value that indicates whether any repairs were made. If isRepairing is false and an ill-formed sequence is detected, this method returns nil."], "return_name": [["result"], ["repairsMade"]], "return_type": ["String", "Bool"]}, "is_static": true}, {"method_description": "Creates an instance from the description of a given LosslessStringConvertible instance.", "method_name": "init", "params": [{"param_type": "LosslessStringConvertible", "param_description": "", "param_name": ["value"]}], "class_name": "String", "method_declar": "init<T>(_ value: T) where T : LosslessStringConvertible", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string representing the given value.", "method_name": "init", "params": [{"param_type": "Subject", "param_description": "", "param_name": ["describing", "instance"]}], "class_name": "String", "method_declar": "init<Subject>(describing instance: Subject)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string with a detailed representation of the given value, suitable for debugging.", "method_name": "init", "params": [{"param_type": "Subject", "param_description": "", "param_name": ["reflecting", "subject"]}], "class_name": "String", "method_declar": "init<Subject>(reflecting subject: Subject)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends the given string to this string.", "method_name": "write", "params": [{"param_type": "String", "param_description": "A string to append.", "param_name": ["other"]}], "class_name": "String", "method_declar": "mutating func write(_ other: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Writes the string into the given output stream.", "method_name": "write", "params": [{"param_type": "inout Target", "param_description": "An output stream.", "param_name": ["to", "target"]}], "class_name": "String", "method_declar": "func write<Target>(to target: inout Target) where Target : TextOutputStream", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends the given string to this string.", "method_name": "append", "params": [{"param_type": "String", "param_description": "Another string.", "param_name": ["other"]}], "class_name": "String", "method_declar": "mutating func append(_ other: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends the given character to the string.", "method_name": "append", "params": [{"param_type": "Character", "param_description": "The character to append to the string.", "param_name": ["c"]}], "class_name": "String", "method_declar": "mutating func append(_ c: Character)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "append", "params": [{"param_type": "String", "param_description": "", "param_name": ["contentsOf", "newElements"]}], "class_name": "String", "method_declar": "mutating func append(contentsOf newElements: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "append", "params": [{"param_type": "Substring", "param_description": "", "param_name": ["contentsOf", "newElements"]}], "class_name": "String", "method_declar": "mutating func append(contentsOf newElements: Substring)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends the characters in the given sequence to the string.", "method_name": "append", "params": [{"param_type": "Sequence", "param_description": "A sequence of characters.", "param_name": ["contentsOf", "newElements"]}], "class_name": "String", "method_declar": "mutating func append<S>(contentsOf newElements: S) where S : Sequence, S.Element == Character", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Reserves enough space in the string\u2019s underlying storage to store the specified number of ASCII characters.", "method_name": "reserveCapacity", "params": [{"param_type": "Int", "param_description": "The minimum number of ASCII character\u2019s worth of storage to allocate.", "param_name": ["n"]}], "class_name": "String", "method_declar": "mutating func reserveCapacity(_ n: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Reserves enough space in the string\u2019s underlying storage to store the specified number of ASCII characters.", "method_name": "reserveCapacity", "params": [{"param_type": "Int", "param_description": "The minimum number of ASCII character\u2019s worth of storage to allocate.", "param_name": ["n"]}], "class_name": "String", "method_declar": "mutating func reserveCapacity(_ n: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "+", "params": [{"param_type": "String", "param_description": "", "param_name": ["lhs"]}, {"param_type": "String", "param_description": "", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func + (lhs: String, rhs: String) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": true}, {"method_description": "", "method_name": "+=", "params": [{"param_type": "inout String", "param_description": "", "param_name": ["lhs"]}, {"param_type": "String", "param_description": "", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func += (lhs: inout String, rhs: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Creates a new collection by concatenating the elements of a sequence and a collection.", "method_name": "+", "params": [{"param_type": "Sequence", "param_description": "A collection or finite sequence.", "param_name": ["lhs"]}, {"param_type": "String", "param_description": "A range-replaceable collection.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func + <Other>(lhs: Other, rhs: String) -> String where Other : Sequence, Self.Element == Other.Element", "return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "is_static": true}, {"method_description": "Creates a new collection by concatenating the elements of a collection and a sequence.", "method_name": "+", "params": [{"param_type": "String", "param_description": "A range-replaceable collection.", "param_name": ["lhs"]}, {"param_type": "Sequence", "param_description": "A collection or finite sequence.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func + <Other>(lhs: String, rhs: Other) -> String where Other : Sequence, Self.Element == Other.Element", "return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "is_static": true}, {"method_description": "Creates a new collection by concatenating the elements of two collections.", "method_name": "+", "params": [{"param_type": "String", "param_description": "A range-replaceable collection.", "param_name": ["lhs"]}, {"param_type": "RangeReplaceableCollection", "param_description": "Another range-replaceable collection.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func + <Other>(lhs: String, rhs: Other) -> String where Other : RangeReplaceableCollection, Self.Element == Other.Element", "return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "is_static": true}, {"method_description": "Appends the elements of a sequence to a range-replaceable collection.", "method_name": "+=", "params": [{"param_type": "inout String", "param_description": "The array to append to.", "param_name": ["lhs"]}, {"param_type": "Sequence", "param_description": "A collection or finite sequence.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func += <Other>(lhs: inout String, rhs: Other) where Other : Sequence, Self.Element == Other.Element", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Inserts a new character at the specified position.", "method_name": "insert", "params": [{"param_type": "Character", "param_description": "The new character to insert into the string.", "param_name": ["newElement"]}, {"param_type": "String.Index", "param_description": "A valid index of the string. If i is equal to the string\u2019s end index, this methods appends newElement to the string.", "param_name": ["at", "i"]}], "class_name": "String", "method_declar": "mutating func insert(_ newElement: Character, at i: String.Index)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Inserts a collection of characters at the specified position.", "method_name": "insert", "params": [{"param_type": "Collection", "param_description": "A collection of Character elements to insert into the string.", "param_name": ["contentsOf", "newElements"]}, {"param_type": "String.Index", "param_description": "A valid index of the string. If i is equal to the string\u2019s end index, this methods appends the contents of newElements to the string.", "param_name": ["at", "i"]}], "class_name": "String", "method_declar": "mutating func insert<S>(contentsOf newElements: S, at i: String.Index) where S : Collection, S.Element == Character", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces the text within the specified bounds with the given characters.", "method_name": "replaceSubrange", "params": [{"param_type": "Range<String.Index>", "param_description": "The range of text to replace. The bounds of the range must be valid indices of the string.", "param_name": ["bounds"]}, {"param_type": "Collection", "param_description": "The new characters to add to the string.", "param_name": ["with", "newElements"]}], "class_name": "String", "method_declar": "mutating func replaceSubrange<C>(_ bounds: Range<String.Index>, with newElements: C) where C : Collection, C.Element == Character", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes and returns the character at the specified position.", "method_name": "remove", "params": [{"param_type": "String.Index", "param_description": "The position of the character to remove. i must be a valid index of the string that is not equal to the string\u2019s end index.", "param_name": ["at", "i"]}], "class_name": "String", "method_declar": "@discardableResult mutating func remove(at i: String.Index) -> Character", "return_value": {"return_description": ["The character that was removed."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "Removes and returns the character at the specified position.", "method_name": "remove", "params": [{"param_type": "String.Index", "param_description": "The position of the character to remove. i must be a valid index of the string that is not equal to the string\u2019s end index.", "param_name": ["at", "i"]}], "class_name": "String", "method_declar": "@discardableResult mutating func remove(at i: String.Index) -> Character", "return_value": {"return_description": ["The character that was removed."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "Replaces this string with the empty string.", "method_name": "removeAll", "params": [{"param_type": "Bool = false", "param_description": "Pass true to prevent the release of the string\u2019s allocated storage. Retaining the storage can be a useful optimization when you\u2019re planning to grow the string again. The default value is false.", "param_name": ["keepingCapacity", "keepCapacity"]}], "class_name": "String", "method_declar": "mutating func removeAll(keepingCapacity keepCapacity: Bool = false)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces this string with the empty string.", "method_name": "removeAll", "params": [{"param_type": "Bool = false", "param_description": "Pass true to prevent the release of the string\u2019s allocated storage. Retaining the storage can be a useful optimization when you\u2019re planning to grow the string again. The default value is false.", "param_name": ["keepingCapacity", "keepCapacity"]}], "class_name": "String", "method_declar": "mutating func removeAll(keepingCapacity keepCapacity: Bool = false)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes all the elements that satisfy the given predicate.", "method_name": "removeAll", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.", "param_name": ["where", "shouldBeRemoved"]}], "class_name": "String", "method_declar": "mutating func removeAll(where shouldBeRemoved: (Character) throws -> Bool) rethrows", "return_value": {"return_description": [], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Removes and returns the first element of the collection.", "method_name": "removeFirst", "params": [], "class_name": "String", "method_declar": "@discardableResult mutating func removeFirst() -> Character", "return_value": {"return_description": ["The removed element."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "Removes the specified number of elements from the beginning of the collection.", "method_name": "removeFirst", "params": [{"param_type": "Int", "param_description": "The number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.", "param_name": ["k"]}], "class_name": "String", "method_declar": "mutating func removeFirst(_ k: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes and returns the last element of the collection.", "method_name": "removeLast", "params": [], "class_name": "String", "method_declar": "@discardableResult mutating func removeLast() -> Character", "return_value": {"return_description": ["The last element of the collection."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "Removes the specified number of elements from the end of the collection.", "method_name": "removeLast", "params": [{"param_type": "Int", "param_description": "The number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.", "param_name": ["k"]}], "class_name": "String", "method_declar": "mutating func removeLast(_ k: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the characters in the given range.", "method_name": "removeSubrange", "params": [{"param_type": "Range<String.Index>", "param_description": "The range of the elements to remove. The upper and lower bounds of bounds must be valid indices of the string and not equal to the string\u2019s end index.", "param_name": ["bounds"]}], "class_name": "String", "method_declar": "mutating func removeSubrange(_ bounds: Range<String.Index>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the characters in the given range.", "method_name": "removeSubrange", "params": [{"param_type": "Range<String.Index>", "param_description": "The range of the elements to remove. The upper and lower bounds of bounds must be valid indices of the string and not equal to the string\u2019s end index.", "param_name": ["bounds"]}], "class_name": "String", "method_declar": "mutating func removeSubrange(_ bounds: Range<String.Index>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the elements in the specified subrange from the collection.", "method_name": "removeSubrange", "params": [{"param_type": "RangeExpression", "param_description": "The range of the collection to be removed. The bounds of the range must be valid indices of the collection.", "param_name": ["bounds"]}], "class_name": "String", "method_declar": "mutating func removeSubrange<R>(_ bounds: R) where R : RangeExpression, Self.Index == R.Bound", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate.", "method_name": "filter", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned collection.", "param_name": ["isIncluded"]}], "class_name": "String", "method_declar": "func filter(_ isIncluded: (Character) throws -> Bool) rethrows -> String", "return_value": {"return_description": ["A collection of the elements that isIncluded allowed."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.", "method_name": "drop", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.", "param_name": ["while", "predicate"]}], "class_name": "String", "method_declar": "func drop(while predicate: (Character) throws -> Bool) rethrows -> Substring", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Substrin"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "params": [{"param_type": "Int = 1", "param_description": "The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "String", "method_declar": "func dropFirst(_ k: Int = 1) -> Substring", "return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": [""], "return_type": ["Substrin"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "params": [{"param_type": "Int", "param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "String", "method_declar": "func dropLast(_ k: Int) -> Substring", "return_value": {"return_description": ["A subsequence that leaves off k elements from the end."], "return_name": [""], "return_type": ["Substrin"]}, "is_static": false}, {"method_description": "Removes and returns the last element of the collection.", "method_name": "popLast", "params": [], "class_name": "String", "method_declar": "mutating func popLast() -> Character?", "return_value": {"return_description": ["The last element of the collection if the collection is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "Returns a lowercase version of the string.", "method_name": "lowercased", "params": [], "class_name": "String", "method_declar": "func lowercased() -> String", "return_value": {"return_description": ["A lowercase copy of the string."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Returns an uppercase version of the string.", "method_name": "uppercased", "params": [], "class_name": "String", "method_declar": "func uppercased() -> String", "return_value": {"return_description": ["An uppercase copy of the string."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "==", "params": [{"param_type": "String", "param_description": "", "param_name": ["lhs"]}, {"param_type": "String", "param_description": "", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func == (lhs: String, rhs: String) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "params": [{"param_type": "String", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "StringProtocol", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func == <RHS>(lhs: String, rhs: RHS) -> Bool where RHS : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "String", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "String", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func != (lhs: String, rhs: String) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "", "method_name": "!=", "params": [{"param_type": "String", "param_description": "", "param_name": ["lhs"]}, {"param_type": "StringProtocol", "param_description": "", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func != <RHS>(lhs: String, rhs: RHS) -> Bool where RHS : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "", "method_name": "func", "params": [{"param_type": "String", "param_description": "", "param_name": ["lhs"]}, {"param_type": "String", "param_description": "", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func < (lhs: String, rhs: String) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "func", "params": [{"param_type": "String", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "StringProtocol", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func < <RHS>(lhs: String, rhs: RHS) -> Bool where RHS : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "String", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "String", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func <= (lhs: String, rhs: String) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "String", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "StringProtocol", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func <= <RHS>(lhs: String, rhs: RHS) -> Bool where RHS : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "String", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "String", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func > (lhs: String, rhs: String) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "String", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "StringProtocol", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func > <RHS>(lhs: String, rhs: RHS) -> Bool where RHS : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "String", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "String", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func >= (lhs: String, rhs: String) -> Bool", "return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "String", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "StringProtocol", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String", "method_declar": "static func >= <RHS>(lhs: String, rhs: RHS) -> Bool where RHS : StringProtocol", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "method_name": "elementsEqual", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "String", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence and other contain the same elements in the same order."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.", "method_name": "elementsEqual", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}, {"param_type": "(Character, OtherSequence.Element) throws -> Bool", "param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_name": ["by", "areEquivalent"]}], "class_name": "String", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence, by areEquivalent: (Character, OtherSequence.Element) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence", "return_value": {"return_description": ["true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "method_name": "starts", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["with", "possiblePrefix"]}], "class_name": "String", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix) -> Bool where PossiblePrefix : Sequence, Self.Element == PossiblePrefix.Element", "return_value": {"return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.", "method_name": "starts", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["with", "possiblePrefix"]}, {"param_type": "(Character, PossiblePrefix.Element) throws -> Bool", "param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_name": ["by", "areEquivalent"]}], "class_name": "String", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix, by areEquivalent: (Character, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool where PossiblePrefix : Sequence", "return_value": {"return_description": ["true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "method_name": "lexicographicallyPrecedes", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "String", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.", "method_name": "lexicographicallyPrecedes", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}, {"param_type": "(Character, Character) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "String", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence, by areInIncreasingOrder: (Character, Character) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the string begins with the specified prefix.", "method_name": "hasPrefix", "params": [{"param_type": "String", "param_description": "A possible prefix to test against this string.", "param_name": ["prefix"]}], "class_name": "String", "method_declar": "func hasPrefix(_ prefix: String) -> Bool", "return_value": {"return_description": ["true if the string begins with prefix; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the string ends with the specified suffix.", "method_name": "hasSuffix", "params": [{"param_type": "String", "param_description": "A possible suffix to test against this string.", "param_name": ["suffix"]}], "class_name": "String", "method_declar": "func hasSuffix(_ suffix: String) -> Bool", "return_value": {"return_description": ["true if the string ends with suffix; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence contains the given element.", "method_name": "contains", "params": [{"param_type": "Character", "param_description": "The element to find in the sequence.", "param_name": ["element"]}], "class_name": "String", "method_declar": "func contains(_ element: Character) -> Bool", "return_value": {"return_description": ["true if the element was found in the sequence; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.", "method_name": "allSatisfy", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.", "param_name": ["predicate"]}], "class_name": "String", "method_declar": "func allSatisfy(_ predicate: (Character) throws -> Bool) rethrows -> Bool", "return_value": {"return_description": ["true if the sequence contains only elements that satisfy predicate; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.", "method_name": "contains", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_name": ["where", "predicate"]}], "class_name": "String", "method_declar": "func contains(where predicate: (Character) throws -> Bool) rethrows -> Bool", "return_value": {"return_description": ["true if the sequence contains an element that satisfies predicate; otherwise, false."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the first element of the sequence that satisfies the given predicate.", "method_name": "first", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_name": ["where", "predicate"]}], "class_name": "String", "method_declar": "func first(where predicate: (Character) throws -> Bool) rethrows -> Character?", "return_value": {"return_description": ["The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the first index where the specified value appears in the collection.", "method_name": "firstIndex", "params": [{"param_type": "Character", "param_description": "An element to search for in the collection.", "param_name": ["of", "element"]}], "class_name": "String", "method_declar": "func firstIndex(of element: Character) -> String.Index?", "return_value": {"return_description": ["The first index where element is found. If element is not found in the collection, returns nil."], "return_name": [""], "return_type": ["String.Inde"]}, "is_static": false}, {"method_description": "Returns the first index in which an element of the collection satisfies the given predicate.", "method_name": "firstIndex", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_name": ["where", "predicate"]}], "class_name": "String", "method_declar": "func firstIndex(where predicate: (Character) throws -> Bool) rethrows -> String.Index?", "return_value": {"return_description": ["The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the last element of the sequence that satisfies the given predicate.", "method_name": "last", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_name": ["where", "predicate"]}], "class_name": "String", "method_declar": "func last(where predicate: (Character) throws -> Bool) rethrows -> Character?", "return_value": {"return_description": ["The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the last index where the specified value appears in the collection.", "method_name": "lastIndex", "params": [{"param_type": "Character", "param_description": "An element to search for in the collection.", "param_name": ["of", "element"]}], "class_name": "String", "method_declar": "func lastIndex(of element: Character) -> String.Index?", "return_value": {"return_description": ["The last index where element is found. If element is not found in the collection, this method returns nil."], "return_name": [""], "return_type": ["String.Inde"]}, "is_static": false}, {"method_description": "Returns the index of the last element in the collection that matches the given predicate.", "method_name": "lastIndex", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_name": ["where", "predicate"]}], "class_name": "String", "method_declar": "func lastIndex(where predicate: (Character) throws -> Bool) rethrows -> String.Index?", "return_value": {"return_description": ["The index of the last element in the collection that matches predicate, or nil if no elements match."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the maximum element in the sequence.", "method_name": "max", "params": [], "class_name": "String", "method_declar": "@warn_unqualified_access func max() -> Character?", "return_value": {"return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "", "method_name": "max", "params": [{"param_type": "Comparable", "param_description": "", "param_name": ["x"]}, {"param_type": "Comparable", "param_description": "", "param_name": ["y"]}], "class_name": "String", "method_declar": "func max<T>(_ x: T, _ y: T) -> T where T : Comparable", "return_value": {"return_description": [], "return_name": [""], "return_type": ["T"]}, "is_static": false}, {"method_description": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "max", "params": [{"param_type": "(Character, Character) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "String", "method_declar": "@warn_unqualified_access func max(by areInIncreasingOrder: (Character, Character) throws -> Bool) rethrows -> Character?", "return_value": {"return_description": ["The sequence\u2019s maximum element if the sequence is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "Returns the minimum element in the sequence.", "method_name": "min", "params": [], "class_name": "String", "method_declar": "@warn_unqualified_access func min() -> Character?", "return_value": {"return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "", "method_name": "min", "params": [{"param_type": "Comparable", "param_description": "", "param_name": ["x"]}, {"param_type": "Comparable", "param_description": "", "param_name": ["y"]}], "class_name": "String", "method_declar": "func min<T>(_ x: T, _ y: T) -> T where T : Comparable", "return_value": {"return_description": [], "return_name": [""], "return_type": ["T"]}, "is_static": false}, {"method_description": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "min", "params": [{"param_type": "(Character, Character) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "String", "method_declar": "@warn_unqualified_access func min(by areInIncreasingOrder: (Character, Character) throws -> Bool) rethrows -> Character?", "return_value": {"return_description": ["The sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "String", "method_declar": "func prefix(_ maxLength: Int) -> Substring", "return_value": {"return_description": ["A subsequence starting at the beginning of this collection with at most maxLength elements."], "return_name": [""], "return_type": ["Substrin"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection through the specified position.", "method_name": "prefix", "params": [{"param_type": "String.Index", "param_description": "", "param_name": ["through", "position"]}], "class_name": "String", "method_declar": "func prefix(through position: String.Index) -> Substring", "return_value": {"return_description": ["A subsequence up to, and including, the end position."], "return_name": [""], "return_type": ["Substrin"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "method_name": "prefix", "params": [{"param_type": "String.Index", "param_description": "The \u201cpast the end\u201d index of the resulting subsequence. end must be a valid index of the collection.", "param_name": ["upTo", "end"]}], "class_name": "String", "method_declar": "func prefix(upTo end: String.Index) -> Substring", "return_value": {"return_description": ["A subsequence up to, but not including, the end position."], "return_name": [""], "return_type": ["Substrin"]}, "is_static": false}, {"method_description": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.", "method_name": "prefix", "params": [{"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.", "param_name": ["while", "predicate"]}], "class_name": "String", "method_declar": "func prefix(while predicate: (Character) throws -> Bool) rethrows -> Substring", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Substrin"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.", "method_name": "suffix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "String", "method_declar": "func suffix(_ maxLength: Int) -> Substring", "return_value": {"return_description": ["A subsequence terminating at the end of the collection with at most maxLength elements."], "return_name": [""], "return_type": ["Substrin"]}, "is_static": false}, {"method_description": "Returns a subsequence from the specified position to the end of the collection.", "method_name": "suffix", "params": [{"param_type": "String.Index", "param_description": "The index at which to start the resulting subsequence. start must be a valid index of the collection.", "param_name": ["from", "start"]}], "class_name": "String", "method_declar": "func suffix(from start: String.Index) -> Substring", "return_value": {"return_description": ["A subsequence starting at the start position."], "return_name": [""], "return_type": ["Substrin"]}, "is_static": false}, {"method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "method_name": "split", "params": [{"param_type": "Character", "param_description": "The element that should be split upon.", "param_name": ["separator"]}, {"param_type": "Int", "param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_name": ["maxSplits"]}, {"param_type": "Bool = true", "param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.", "param_name": ["omittingEmptySubsequences"]}], "class_name": "String", "method_declar": "func split(separator: Character, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Substring]", "return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": ["[Substring"]}, "is_static": false}, {"method_description": "Returns the longest possible subsequences of the collection, in order, that don\u2019t contain elements satisfying the given predicate.", "method_name": "split", "params": [{"param_type": "Int", "param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_name": ["maxSplits"]}, {"param_type": "Bool", "param_description": "If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.", "param_name": ["omittingEmptySubsequences"]}, {"param_type": "(Character) throws -> Bool", "param_description": "A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.", "param_name": ["whereSeparator", "isSeparator"]}], "class_name": "String", "method_declar": "func split(maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true, whereSeparator isSeparator: (Character) throws -> Bool) rethrows -> [Substring]", "return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns a random element of the collection.", "method_name": "randomElement", "params": [], "class_name": "String", "method_declar": "func randomElement() -> Character?", "return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Characte"]}, "is_static": false}, {"method_description": "Returns a random element of the collection, using the given generator as a source for randomness.", "method_name": "randomElement", "params": [{"param_type": "inout T", "param_description": "The random number generator to use when choosing a random element.", "param_name": ["using", "generator"]}], "class_name": "String", "method_declar": "func randomElement<T>(using generator: inout T) -> Character? where T : RandomNumberGenerator", "return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Character"]}, "is_static": false}, {"method_description": "Returns a human-readable string giving the name of a given encoding.", "method_name": "localizedName", "params": [{"param_type": "String.Encoding", "param_description": "", "param_name": ["of", "encoding"]}], "class_name": "String", "method_declar": "static func localizedName(of encoding: String.Encoding) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": true}, {"method_description": "Creates a string corresponding to the given collection of Unicode scalars.", "method_name": "init", "params": [{"param_type": "String.UnicodeScalarView", "param_description": "A collection of Unicode scalar values.", "param_name": ["unicodeScalars"]}], "class_name": "String", "method_declar": "init(_ unicodeScalars: String.UnicodeScalarView)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a String having the given content.", "method_name": "init", "params": [{"param_type": "Substring.UnicodeScalarView", "param_description": "", "param_name": ["content"]}], "class_name": "String", "method_declar": "init(_ content: Substring.UnicodeScalarView)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string corresponding to the given sequence of UTF-16 code units.", "method_name": "init", "params": [{"param_type": "String.UTF16View", "param_description": "", "param_name": ["utf16"]}], "class_name": "String", "method_declar": "init(_ utf16: String.UTF16View)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a String having the given content.", "method_name": "init", "params": [{"param_type": "Substring.UTF16View", "param_description": "", "param_name": ["codeUnits"]}], "class_name": "String", "method_declar": "init?(_ codeUnits: Substring.UTF16View)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a string corresponding to the given sequence of UTF-8 code units.", "method_name": "init", "params": [{"param_type": "String.UTF8View", "param_description": "", "param_name": ["utf8"]}], "class_name": "String", "method_declar": "init(_ utf8: String.UTF8View)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a String having the given content.", "method_name": "init", "params": [{"param_type": "Substring.UTF8View", "param_description": "", "param_name": ["codeUnits"]}], "class_name": "String", "method_declar": "init?(_ codeUnits: Substring.UTF8View)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "params": [{"param_type": "(Character) throws -> T", "param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_name": ["transform"]}], "class_name": "String", "method_declar": "func map<T>(_ transform: (Character) throws -> T) rethrows -> [T]", "return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["[T"]}, "is_static": false}, {"method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "params": [{"param_type": "(Character) throws -> T", "param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_name": ["transform"]}], "class_name": "String", "method_declar": "func map<T>(_ transform: (Character) throws -> T) rethrows -> [T]", "return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["[T"]}, "is_static": false}, {"method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "method_name": "compactMap", "params": [{"param_type": "(Character) throws -> ElementOfResult", "param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_name": ["transform"]}], "class_name": "String", "method_declar": "func compactMap<ElementOfResult>(_ transform: (Character) throws -> ElementOfResult?) rethrows -> [ElementOfResult]", "return_value": {"return_description": ["An array of the non-nil results of calling transform with each element of the sequence."], "return_name": [""], "return_type": ["[ElementOfResult"]}, "is_static": false}, {"method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "params": [{"param_type": "Result", "param_description": "The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.", "param_name": ["initialResult"]}, {"param_type": "(Result, Character) throws -> Result", "param_description": "A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.", "param_name": ["nextPartialResult"]}], "class_name": "String", "method_declar": "func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, Character) throws -> Result) rethrows -> Result", "return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["Resul"]}, "is_static": false}, {"method_description": "Calls the given closure on each element in the sequence in the same order as a for-in loop.", "method_name": "forEach", "params": [{"param_type": "(Character) throws -> Void", "param_description": "A closure that takes an element of the sequence as a parameter.", "param_name": ["body"]}], "class_name": "String", "method_declar": "func forEach(_ body: (Character) throws -> Void) rethrows", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void rethrow"]}, "is_static": false}, {"method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "params": [], "class_name": "String", "method_declar": "func enumerated() -> EnumeratedSequence<String>", "return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<String"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, sorted.", "method_name": "sorted", "params": [], "class_name": "String", "method_declar": "func sorted() -> [Character]", "return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Character"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.", "method_name": "sorted", "params": [{"param_type": "(Character, Character) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "String", "method_declar": "func sorted(by areInIncreasingOrder: (Character, Character) throws -> Bool) rethrows -> [Character]", "return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Character"]}, "is_static": false}, {"method_description": "Returns a view presenting the elements of the collection in reverse order.", "method_name": "reversed", "params": [], "class_name": "String", "method_declar": "func reversed() -> ReversedCollection<String>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ReversedCollection<String"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, shuffled.", "method_name": "shuffled", "params": [], "class_name": "String", "method_declar": "func shuffled() -> [Character]", "return_value": {"return_description": ["A shuffled array of this sequence\u2019s elements."], "return_name": [""], "return_type": ["[Character"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.", "method_name": "shuffled", "params": [{"param_type": "inout T", "param_description": "The random number generator to use when shuffling the sequence.", "param_name": ["using", "generator"]}], "class_name": "String", "method_declar": "func shuffled<T>(using generator: inout T) -> [Character] where T : RandomNumberGenerator", "return_value": {"return_description": ["An array of this sequence\u2019s elements in a shuffled order."], "return_name": [""], "return_type": ["[Character]"]}, "is_static": false}, {"method_description": "Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of UTF-8 code units.", "method_name": "withCString", "params": [{"param_type": "(UnsafePointer<Int8>) throws -> Result", "param_description": "A closure with a pointer parameter that points to a null-terminated sequence of UTF-8 code units. If body has a return value, that value is also used as the return value for the withCString(_:) method. The pointer argument is valid only for the duration of the method\u2019s execution.", "param_name": ["body"]}], "class_name": "String", "method_declar": "func withCString<Result>(_ body: (UnsafePointer<Int8>) throws -> Result) rethrows -> Result", "return_value": {"return_description": ["The return value, if any, of the body closure parameter."], "return_name": [""], "return_type": ["Resul"]}, "is_static": false}, {"method_description": "Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of code units.", "method_name": "withCString", "params": [{"param_type": "UnicodeEncoding.Type", "param_description": "The encoding in which the code units should be interpreted.", "param_name": ["encodedAs", "targetEncoding"]}, {"param_type": "(UnsafePointer<TargetEncoding.CodeUnit>) throws -> Result", "param_description": "A closure with a pointer parameter that points to a null-terminated sequence of code units. If body has a return value, that value is also used as the return value for the withCString(encodedAs:_:) method. The pointer argument is valid only for the duration of the method\u2019s execution.", "param_name": ["body"]}], "class_name": "String", "method_declar": "func withCString<Result, TargetEncoding>(encodedAs targetEncoding: TargetEncoding.Type, _ body: (UnsafePointer<TargetEncoding.CodeUnit>) throws -> Result) rethrows -> Result where TargetEncoding : _UnicodeEncoding", "return_value": {"return_description": ["The return value, if any, of the body closure parameter."], "return_name": [""], "return_type": ["Result"]}, "is_static": false}, {"method_description": "Returns the position immediately after the given index.", "method_name": "index", "params": [{"param_type": "String.Index", "param_description": "A valid index of the collection. i must be less than endIndex.", "param_name": ["after", "i"]}], "class_name": "String", "method_declar": "func index(after i: String.Index) -> String.Index", "return_value": {"return_description": ["The index value immediately after i."], "return_name": [""], "return_type": ["String.Inde"]}, "is_static": false}, {"method_description": "Replaces the given index with its successor.", "method_name": "formIndex", "params": [{"param_type": "inout String.Index", "param_description": "A valid index of the collection. i must be less than endIndex.", "param_name": ["after", "i"]}], "class_name": "String", "method_declar": "func formIndex(after i: inout String.Index)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the position immediately before the given index.", "method_name": "index", "params": [{"param_type": "String.Index", "param_description": "A valid index of the collection. i must be greater than startIndex.", "param_name": ["before", "i"]}], "class_name": "String", "method_declar": "func index(before i: String.Index) -> String.Index", "return_value": {"return_description": ["The index value immediately before i."], "return_name": [""], "return_type": ["String.Inde"]}, "is_static": false}, {"method_description": "Replaces the given index with its predecessor.", "method_name": "formIndex", "params": [{"param_type": "inout String.Index", "param_description": "A valid index of the collection. i must be greater than startIndex.", "param_name": ["before", "i"]}], "class_name": "String", "method_declar": "func formIndex(before i: inout String.Index)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an index that is the specified distance from the given index.", "method_name": "index", "params": [{"param_type": "String.Index", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "String.IndexDistance", "param_description": "The distance to offset i.", "param_name": ["offsetBy", "n"]}], "class_name": "String", "method_declar": "func index(_ i: String.Index, offsetBy n: String.IndexDistance) -> String.Index", "return_value": {"return_description": ["An index offset by n from the index i. If n is positive, this is the same value as the result of n calls to index(after:). If n is negative, this is the same value as the result of -n calls to index(before:)."], "return_name": [""], "return_type": ["String.Inde"]}, "is_static": false}, {"method_description": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.", "method_name": "index", "params": [{"param_type": "String.Index", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "String.IndexDistance", "param_description": "The distance to offset i.", "param_name": ["offsetBy", "n"]}, {"param_type": "String.Index", "param_description": "A valid index of the collection to use as a limit. If n > 0, a limit that is less than i has no effect. Likewise, if n < 0, a limit that is greater than i has no effect.", "param_name": ["limitedBy", "limit"]}], "class_name": "String", "method_declar": "func index(_ i: String.Index, offsetBy n: String.IndexDistance, limitedBy limit: String.Index) -> String.Index?", "return_value": {"return_description": ["An index offset by n from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil."], "return_name": [""], "return_type": ["String.Inde"]}, "is_static": false}, {"method_description": "Offsets the given index by the specified distance.", "method_name": "formIndex", "params": [{"param_type": "inout String.Index", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_name": ["offsetBy", "distance"]}], "class_name": "String", "method_declar": "func formIndex(_ i: inout String.Index, offsetBy distance: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Offsets the given index by the specified distance, or so that it equals the given limiting index.", "method_name": "formIndex", "params": [{"param_type": "inout String.Index", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_name": ["offsetBy", "distance"]}, {"param_type": "String.Index", "param_description": "A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.", "param_name": ["limitedBy", "limit"]}], "class_name": "String", "method_declar": "func formIndex(_ i: inout String.Index, offsetBy distance: Int, limitedBy limit: String.Index) -> Bool", "return_value": {"return_description": ["true if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns the distance between two indices.", "method_name": "distance", "params": [{"param_type": "String.Index", "param_description": "A valid index of the collection.", "param_name": ["from", "start"]}, {"param_type": "String.Index", "param_description": "Another valid index of the collection. If end is equal to start, the result is zero.", "param_name": ["to", "end"]}], "class_name": "String", "method_declar": "func distance(from start: String.Index, to end: String.Index) -> String.IndexDistance", "return_value": {"return_description": ["The distance between start and end."], "return_name": [""], "return_type": ["String.IndexDistanc"]}, "is_static": false}, {"method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "params": [{"param_type": "String", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "String", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "String", "method_declar": "static func ..< (minimum: String, maximum: String) -> Range<String>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<String"]}, "is_static": true}, {"method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "params": [{"param_type": "String", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "String", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "String", "method_declar": "static func ... (minimum: String, maximum: String) -> ClosedRange<String>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<String"]}, "is_static": true}, {"method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "params": [{"param_type": "String", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "String", "method_declar": "prefix static func ..< (maximum: String) -> PartialRangeUpTo<String>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<String"]}, "is_static": true}, {"method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "params": [{"param_type": "String", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "String", "method_declar": "prefix static func ... (maximum: String) -> PartialRangeThrough<String>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<String"]}, "is_static": true}, {"method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "params": [{"param_type": "String", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}], "class_name": "String", "method_declar": "postfix static func ... (minimum: String) -> PartialRangeFrom<String>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<String"]}, "is_static": true}, {"method_description": "Encodes this value into the given encoder.", "method_name": "encode", "params": [{"param_type": "Encoder", "param_description": "The encoder to write data to.", "param_name": ["to", "encoder"]}], "class_name": "String", "method_declar": "func encode(to encoder: Encoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new instance by decoding from the given decoder.", "method_name": "init", "params": [{"param_type": "Decoder", "param_description": "The decoder to read data from.", "param_name": ["from", "decoder"]}], "class_name": "String", "method_declar": "init(from decoder: Decoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "params": [{"param_type": "inout Hasher", "param_description": "The hasher to use when combining the components of this instance.", "param_name": ["into", "hasher"]}], "class_name": "String", "method_declar": "func hash(into hasher: inout Hasher)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "NSString", "param_description": "", "param_name": ["cocoaString"]}], "class_name": "String", "method_declar": "init(_ cocoaString: NSString)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an instance initialized to the given string value.", "method_name": "init", "params": [{"param_type": "String", "param_description": "", "param_name": ["stringLiteral", "value"]}], "class_name": "String", "method_declar": "init(stringLiteral value: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an instance initialized to the given value.", "method_name": "init", "params": [{"param_type": "String", "param_description": "The value of the new instance.", "param_name": ["unicodeScalarLiteral", "value"]}], "class_name": "String", "method_declar": "init(unicodeScalarLiteral value: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an instance initialized to the given value.", "method_name": "init", "params": [{"param_type": "String", "param_description": "The value of the new instance.", "param_name": ["extendedGraphemeClusterLiteral", "value"]}], "class_name": "String", "method_declar": "init(extendedGraphemeClusterLiteral value: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "MLDataValue", "param_description": "", "param_name": ["from", "dataValue"]}], "class_name": "String", "method_declar": "init?(from dataValue: MLDataValue)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": [], "class_name": "String", "typealias": ["typealias SubSequence = Substring", "typealias CompareOptions = NSString.CompareOptions", "typealias EncodingConversionOptions = NSString.EncodingConversionOptions", "typealias EnumerationOptions = NSString.EnumerationOptions", "typealias IndexDistance = Int", "typealias UnicodeScalarIndex = String.UnicodeScalarView.Index"], "Vars": [{"var_description": "A Boolean value indicating whether a string has no characters.", "var_type": "Bool", "is_static": false, "var_name": "isEmpty"}, {"var_description": "A Boolean value indicating whether a string has no characters.", "var_type": "Bool", "is_static": false, "var_name": "isEmpty"}, {"var_description": "The number of characters in a string.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "The number of characters in a string.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "The first element of the collection.", "var_type": "Character", "is_static": false, "var_name": "first"}, {"var_description": "The last element of the collection.", "var_type": "Character", "is_static": false, "var_name": "last"}, {"var_description": "Returns an Array of the encodings string objects support in the application\u2019s environment.", "var_type": "[String.Encoding]", "is_static": false, "var_name": "availableStringEncodings"}, {"var_description": "Returns the C-string encoding assumed for any method accepting a C string as an argument.", "var_type": "String.Encoding", "is_static": false, "var_name": "defaultCStringEncoding"}, {"var_description": "The string\u2019s value represented as a collection of Unicode scalar values.", "var_type": "String.UnicodeScalarView", "is_static": false, "var_name": "unicodeScalars"}, {"var_description": "A UTF-16 encoding of self.", "var_type": "String.UTF16View", "is_static": false, "var_name": "utf16"}, {"var_description": "A UTF-8 encoding of self.", "var_type": "String.UTF8View", "is_static": false, "var_name": "utf8"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<String>", "is_static": false, "var_name": "lazy"}, {"var_description": "A value less than or equal to the number of elements in the collection.", "var_type": "Int", "is_static": false, "var_name": "underestimatedCount"}, {"var_description": "A value less than or equal to the number of elements in the collection.", "var_type": "Int", "is_static": false, "var_name": "underestimatedCount"}, {"var_description": "A contiguously stored null-terminated UTF-8 representation of the string.", "var_type": "ContiguousArray<CChar>", "is_static": false, "var_name": "utf8CString"}, {"var_description": "The position of the first character in a nonempty string.", "var_type": "String.Index", "is_static": false, "var_name": "startIndex"}, {"var_description": "A string\u2019s \u201cpast the end\u201d position\u2014that is, the position one greater than the last valid subscript argument.", "var_type": "String.Index", "is_static": false, "var_name": "endIndex"}, {"var_description": "The indices that are valid for subscripting the collection, in ascending order.", "var_type": "DefaultIndices<String>", "is_static": false, "var_name": "indices"}, {"var_description": "The value of this string.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A representation of the string that is suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the String instance.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "", "var_type": "MLDataValue", "is_static": false, "var_name": "dataValue"}, {"var_description": "", "var_type": "MLDataValue.ValueType", "is_static": false, "var_name": "dataValueType"}], "class_type": "struct", "interface_list": ["CKRecordValueProtocol", "Comparable", "CustomDebugStringConvertible", "CustomPlaygroundQuickLookable", "CustomReflectable", "CustomStringConvertible", "CVarArg", "Equatable", "ExpressibleByStringLiteral", "Hashable", "RangeReplaceableCollection", "StringProtocol", "TextOutputStream", "TextOutputStreamable"], "package_name": "foundation", "subclass_list": []}