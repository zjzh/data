{"class_description": "A Scanner object interprets and converts the characters of a String into number and string values. You assign the scanner\u2019s string when you create the scanner, and the scanner progresses through the characters of that string from beginning to end as you request items. \nBecause of the nature of class clusters, a scanner object isn\u2019t an actual instance of the Scanner class, but is one of its private subclasses. Although a scanner object\u2019s class is private, its interface is public, as declared by this abstract superclass, Scanner. The objects you create using this class are referred to as scanner objects (and when no confusion will result, merely as scanners). \nTo set a Scanner object to ignore a set of characters as it scans the string, use the charactersToBeSkipped property. Characters in the skip set are skipped over before the target is scanned. The default set of characters to skip is the whitespace and newline character set.\nTo retrieve the unscanned remainder of the string, use scanner.string.substring(from: scanner.scanLocation). \n", "Methods": [{"method_description": "Returns an NSScanner object that scans a given string according to the user\u2019s default locale. ", "method_name": "localizedScanner", "params": [{"param_type": "String", "param_description": "", "param_name": ["with", "string"]}], "class_name": "Scanner", "method_declar": "class func localizedScanner(with string: String) -> Any", "return_value": {"return_description": ["An NSScanner object that scans aString according to the user\u2019s default locale."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Returns an NSScanner object initialized to scan a given string.", "method_name": "init", "params": [{"param_type": "String", "param_description": "", "param_name": ["string"]}], "class_name": "Scanner", "method_declar": "init(string: String)", "return_value": {"return_description": ["An NSScanner object initialized to scan aString from the beginning. The returned object might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Scans the string as long as characters from a given character set are encountered, accumulating characters into a string that\u2019s returned by reference.", "method_name": "scanCharacters", "params": [{"param_type": "CharacterSet", "param_description": "", "param_name": ["from", "set"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": "", "param_name": ["into", "result"]}], "class_name": "Scanner", "method_declar": "func scanCharacters(from set: CharacterSet, into result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool", "return_value": {"return_description": ["true if the receiver scanned any characters, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans the string until a character from a given character set is encountered, accumulating characters into a string that\u2019s returned by reference.", "method_name": "scanUpToCharacters", "params": [{"param_type": "CharacterSet", "param_description": "", "param_name": ["from", "set"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": "", "param_name": ["into", "result"]}], "class_name": "Scanner", "method_declar": "func scanUpToCharacters(from set: CharacterSet, into result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool", "return_value": {"return_description": ["true if the receiver scanned any characters, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans a given string, returning an equivalent string object by reference if a match is found.", "method_name": "scanString", "params": [{"param_type": "String", "param_description": "The string for which to scan at the current scan location.", "param_name": ["string"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": "", "param_name": ["into", "result"]}], "class_name": "Scanner", "method_declar": "func scanString(_ string: String, into result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool", "return_value": {"return_description": ["true if string matches the characters at the scan location, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans the string until a given string is encountered, accumulating characters into a string that\u2019s returned by reference.", "method_name": "scanUpTo", "params": [{"param_type": "String", "param_description": "", "param_name": ["string"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": "", "param_name": ["into", "result"]}], "class_name": "Scanner", "method_declar": "func scanUpTo(_ string: String, into result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool", "return_value": {"return_description": ["true if the receiver scans any characters, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for an NSDecimal value, returning a found value by reference.", "method_name": "scanDecimal", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["dcm"]}], "class_name": "Scanner", "method_declar": "func scanDecimal(_ dcm: UnsafeMutablePointer<Decimal>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid NSDecimal representation, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for a double value, returning a found value by reference.", "method_name": "scanDouble", "params": [{"param_type": "UnsafeMutablePointer<Double>", "param_description": "", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanDouble(_ result: UnsafeMutablePointer<Double>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid floating-point representation, otherwise false. Overflow or underflow are both considered valid floating-point representations."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for a float value, returning a found value by reference.", "method_name": "scanFloat", "params": [{"param_type": "UnsafeMutablePointer<Float>", "param_description": "", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanFloat(_ result: UnsafeMutablePointer<Float>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid floating-point representation, otherwise false. Overflow or underflow are both considered valid floating-point representations."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for a double value from a hexadecimal representation, returning a found value by reference.", "method_name": "scanHexDouble", "params": [{"param_type": "UnsafeMutablePointer<Double>", "param_description": "Upon return, contains the scanned value. Contains HUGE_VAL or \u2013HUGE_VAL on overflow, or 0.0 on underflow.", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanHexDouble(_ result: UnsafeMutablePointer<Double>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid double-point representation, otherwise false. Overflow or underflow are both considered valid floating-point representations."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for a double value from a hexadecimal representation, returning a found value by reference.", "method_name": "scanHexFloat", "params": [{"param_type": "UnsafeMutablePointer<Float>", "param_description": "Upon return, contains the scanned value. Contains HUGE_VAL or \u2013HUGE_VAL on overflow, or 0.0 on underflow.", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanHexFloat(_ result: UnsafeMutablePointer<Float>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid float-point representation, otherwise false. Overflow or underflow are both considered valid floating-point representations."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for an unsigned value from a hexadecimal representation, returning a found value by reference.", "method_name": "scanHexInt32", "params": [{"param_type": "UnsafeMutablePointer<UInt32>", "param_description": "", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanHexInt32(_ result: UnsafeMutablePointer<UInt32>?) -> Bool", "return_value": {"return_description": ["Returns true if the receiver finds a valid hexadecimal integer representation, otherwise false. Overflow is considered a valid hexadecimal integer representation."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for a long long value from a hexadecimal representation, returning a found value by reference.", "method_name": "scanHexInt64", "params": [{"param_type": "UnsafeMutablePointer<UInt64>", "param_description": "Upon return, contains the scanned value. Contains HUGE_VAL or \u2013HUGE_VAL on overflow.", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanHexInt64(_ result: UnsafeMutablePointer<UInt64>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid hexadecimal long long representation, otherwise false. Overflow is considered a valid hexadecimal long long representation."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for an NSInteger value from a decimal representation, returning a found value by reference", "method_name": "scanInt", "params": [{"param_type": "UnsafeMutablePointer<Int>", "param_description": "", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanInt(_ result: UnsafeMutablePointer<Int>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid integer representation, otherwise false. Overflow is considered a valid integer representation."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for an int value from a decimal representation, returning a found value by reference.", "method_name": "scanInt32", "params": [{"param_type": "UnsafeMutablePointer<Int32>", "param_description": "", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanInt32(_ result: UnsafeMutablePointer<Int32>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid decimal integer representation, otherwise false. Overflow is considered a valid integer representation."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for a long long value from a decimal representation, returning a found value by reference.", "method_name": "scanInt64", "params": [{"param_type": "UnsafeMutablePointer<Int64>", "param_description": "", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanInt64(_ result: UnsafeMutablePointer<Int64>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid decimal integer representation, otherwise false. Overflow is considered a valid decimal integer representation."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Scans for an unsigned long long value from a decimal representation, returning a found value by reference.", "method_name": "scanUnsignedLongLong", "params": [{"param_type": "UnsafeMutablePointer<UInt64>", "param_description": "", "param_name": ["result"]}], "class_name": "Scanner", "method_declar": "func scanUnsignedLongLong(_ result: UnsafeMutablePointer<UInt64>?) -> Bool", "return_value": {"return_description": ["true if the receiver finds a valid decimal integer representation, otherwise false. Overflow is considered a valid decimal integer representation."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "Scanner", "typealias": [], "Vars": [{"var_description": "The string the scanner will scan.", "var_type": "String", "is_static": false, "var_name": "string"}, {"var_description": "The character position at which the receiver will begin its next scanning operation.", "var_type": "Int", "is_static": false, "var_name": "scanLocation"}, {"var_description": "Flag that indicates whether the receiver distinguishes case in the characters it scans.", "var_type": "Bool", "is_static": false, "var_name": "caseSensitive"}, {"var_description": "Character set containing the characters the scanner ignores when looking for a scannable element.", "var_type": "CharacterSet", "is_static": false, "var_name": "charactersToBeSkipped"}, {"var_description": "The locale to use when scanning.", "var_type": "Any", "is_static": false, "var_name": "locale"}, {"var_description": "Flag that indicates whether the receiver has exhausted all significant characters.", "var_type": "Bool", "is_static": false, "var_name": "isAtEnd"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying"], "package_name": "foundation", "subclass_list": []}