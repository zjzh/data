{"package_name": "foundation", "subclass_list": [], "class_description": "The FileWrapper class provides access to the attributes and contents of file system nodes. A file system node is a file, directory, or symbolic link. Instances of this class are known as file wrappers.\nNote\nStarting in macOS 10.7, FileWrapper moved from Application Kit to Foundation. As a result of this the icon, and setIcon: methods have moved to a new category of FileWrapper that remains in Application Kit. \nFile wrappers represent a file system node as an object that can be displayed as an image (and possibly edited in place), saved to the file system, or transmitted to another application. \nThere are three types of file wrappers:\nRegular-file file wrapper: Represents a regular file.\nDirectory file wrapper: Represents a directory.\nSymbolic-link file wrapper: Represents a symbolic link.\nA file wrapper has these attributes:\nFilename. Name of the file system node the file wrapper represents.\nfile-system attributes. See FileManager for information on the contents of the attributes dictionary. \nRegular-file contents. Applicable only to regular-file file wrappers.\nFile wrappers. Applicable only to directory file wrappers.\nDestination node. Applicable only to symbolic-link file wrappers.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["url"], "param_type": "URL", "param_description": "URL of the file-system node the file wrapper is to represent."}, {"param_name": ["options"], "param_type": "FileWrapper.ReadingOptions = []", "param_description": "Option flags for reading the node located at url. See FileWrapper.ReadingOptions for possible values."}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["File wrapper for the file-system node at url. May be a directory, file, or symbolic link, depending on what is located at the URL. Returns false (0) if reading is not successful. "], "return_type": []}, "method_name": "init", "method_description": "Initializes a file wrapper instance whose kind is determined by the type of file-system node located by the URL.", "method_declar": "init(url: URL, options: FileWrapper.ReadingOptions = []) throws"}, {"params": [{"param_name": ["path"], "param_type": "String", "param_description": ""}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["File wrapper for node."], "return_type": []}, "method_name": "init", "method_description": "Initializes a file wrapper instance whose kind is determined by the type of file-system node located by the path.DeprecatedUse init(url:options:) instead.", "method_declar": "convenience init?(path: String)"}, {"params": [{"param_name": ["directoryWithFileWrappers", "childrenByPreferredName"], "param_type": "[String", "param_description": "Key-value dictionary of file wrappers with which to initialize the receiver. The dictionary must contain entries whose values are the file wrappers that are to become children and whose keys are filenames. See Accessing File Wrapper Identities in File System Programming Guide for more information about the file-wrapper list structure."}, {"param_name": ["[String"], "param_type": "FileWrapper]", "param_description": ""}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["Initialized file wrapper for fileWrappers."], "return_type": []}, "method_name": "init", "method_description": "Initializes the receiver as a directory file wrapper, with a given file-wrapper list.", "method_declar": "init(directoryWithFileWrappers childrenByPreferredName: [String : FileWrapper])"}, {"params": [{"param_name": ["regularFileWithContents", "contents"], "param_type": "Data", "param_description": "Contents of the file."}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["Initialized regular-file file wrapper containing contents."], "return_type": []}, "method_name": "init", "method_description": "Initializes the receiver as a regular-file file wrapper.", "method_declar": "init(regularFileWithContents contents: Data)"}, {"params": [{"param_name": ["symbolicLinkWithDestination", "path"], "param_type": "String", "param_description": ""}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["Initialized symbolic-link file wrapper referencing node."], "return_type": []}, "method_name": "init", "method_description": "Initializes the receiver as a symbolic-link file wrapper.DeprecatedUse init(symbolicLinkWithDestinationURL:) instead.", "method_declar": "convenience init(symbolicLinkWithDestination path: String)"}, {"params": [{"param_name": ["symbolicLinkWithDestinationURL", "url"], "param_type": "URL", "param_description": "URL of the file the file wrapper is to reference."}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["Initialized symbolic-link file wrapper referencing url."], "return_type": []}, "method_name": "init", "method_description": "Initializes the receiver as a symbolic-link file wrapper that links to a specified file.", "method_declar": "init(symbolicLinkWithDestinationURL url: URL)"}, {"params": [{"param_name": ["serializedRepresentation", "serializeRepresentation"], "param_type": "Data", "param_description": "Serialized representation of a file wrapper in the format used for the NSFileContentsPboardType pasteboard type. Data of this format is returned by such methods as serializedRepresentation and rtfd(from:documentAttributes:) (NSAttributedString)."}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["Regular-file file wrapper initialized from serializedRepresentation."], "return_type": []}, "method_name": "init", "method_description": "Initializes the receiver as a regular-file file wrapper from given serialized data.", "method_declar": "init?(serializedRepresentation serializeRepresentation: Data)"}, {"params": [{"param_name": ["child"], "param_type": "FileWrapper", "param_description": "File wrapper to add to the directory. "}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["Dictionary key used to store fileWrapper in the directory\u2019s list of file wrappers. The dictionary key is a unique filename, which is the same as the passed-in file wrapper's preferred filename unless that name is already in use as a key in the directory\u2019s dictionary of children. See Accessing File Wrapper Identities in File System Programming Guide for more information about the file-wrapper list structure."], "return_type": ["Strin"]}, "method_name": "addFileWrapper", "method_description": "Adds a child file wrapper to the receiver, which must be a directory file wrapper.", "method_declar": "func addFileWrapper(_ child: FileWrapper) -> String"}, {"params": [{"param_name": ["child"], "param_type": "FileWrapper", "param_description": "File wrapper to remove from the directory."}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "removeFileWrapper", "method_description": "Removes a child file wrapper from the receiver, which must be a directory file wrapper.", "method_declar": "func removeFileWrapper(_ child: FileWrapper)"}, {"params": [{"param_name": ["withPath", "path"], "param_type": "String", "param_description": ""}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["Dictionary key used to store the new file wrapper in the directory\u2019s list of file wrappers. See Accessing File Wrapper Identities in File System Programming Guide for more information."], "return_type": ["Strin"]}, "method_name": "addFile", "method_description": "Creates a file wrapper from a given file-system node and adds it to the receiver, which must be a directory file wrapper.DeprecatedUse addFileWrapper(_:) instead.", "method_declar": "func addFile(withPath path: String) -> String"}, {"params": [{"param_name": ["withContents", "data"], "param_type": "Data", "param_description": "Contents for the new regular-file file wrapper."}, {"param_name": ["preferredFilename", "fileName"], "param_type": "String", "param_description": ""}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["Dictionary key used to store the new file wrapper in the directory\u2019s list of file wrappers. The dictionary key is a unique filename, which is the same as the passed-in file wrapper's preferred filename unless that name is already in use as a key in the directory's dictionary of children. See Accessing File Wrapper Identities in File System Programming Guide for more information about the file-wrapper list structure."], "return_type": ["Strin"]}, "method_name": "addRegularFile", "method_description": "Creates a regular-file file wrapper with the given contents and adds it to the receiver, which must be a directory file wrapper.", "method_declar": "func addRegularFile(withContents data: Data, preferredFilename fileName: String) -> String"}, {"params": [{"param_name": ["withDestination", "path"], "param_type": "String", "param_description": ""}, {"param_name": ["preferredFilename", "filename"], "param_type": "String", "param_description": "Preferred filename for the new symbolic-link file wrapper. "}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["Dictionary key used to store the new file wrapper in the directory\u2019s list of file wrappers. See Accessing File Wrapper Identities in File System Programming Guide for more information."], "return_type": ["Strin"]}, "method_name": "addSymbolicLink", "method_description": "Creates a symbolic-link file wrapper pointing to a given file-system node and adds it to the receiver, which must be a directory file wrapper.DeprecatedUse addFileWrapper(_:) instead.", "method_declar": "func addSymbolicLink(withDestination path: String, preferredFilename filename: String) -> String"}, {"params": [{"param_name": ["child"], "param_type": "FileWrapper", "param_description": "The child file wrapper for which you want the key."}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["Dictionary key used to store the file wrapper in the directory\u2019s list of file wrappers. The dictionary key is a unique filename, which may not be the same as the passed-in file wrapper's preferred filename if more than one file wrapper in the directory's dictionary of children has the same preferred filename. See Accessing File Wrapper Identities in File System Programming Guide for more information about the file-wrapper list structure. Returns nil if the file wrapper specified in child is not a child of the directory."], "return_type": ["Strin"]}, "method_name": "keyForChildFileWrapper", "method_description": "Returns the dictionary key used by a directory to identify a given file wrapper.", "method_declar": "func keyForChildFileWrapper(_ child: FileWrapper) -> String?"}, {"params": [], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["Pathname the file wrapper references (the destination of the symbolic link the file wrapper represents)."], "return_type": ["Strin"]}, "method_name": "symbolicLinkDestination", "method_description": "Provides the pathname referenced by the file wrapper object, which must be a symbolic-link file wrapper.DeprecatedUse symbolicLinkDestinationURL instead.", "method_declar": "func symbolicLinkDestination() -> String"}, {"params": [{"param_name": ["fromPath", "path"], "param_type": "String", "param_description": ""}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["false when the file wrapper needs to be updated to match node, false otherwise."], "return_type": ["Boo"]}, "method_name": "needsToBeUpdated", "method_description": "Indicates whether the file wrapper needs to be updated to match a given file-system node.DeprecatedUse matchesContents(of:) instead.", "method_declar": "func needsToBeUpdated(fromPath path: String) -> Bool"}, {"params": [{"param_name": ["of", "url"], "param_type": "URL", "param_description": "URL of the file-system node with which to compare the file wrapper."}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true when the contents of the file wrapper match the contents of url, false otherwise."], "return_type": ["Boo"]}, "method_name": "matchesContents", "method_description": "Indicates whether the contents of a file wrapper matches a directory, regular file, or symbolic link on disk.", "method_declar": "func matchesContents(of url: URL) -> Bool"}, {"params": [{"param_name": ["fromPath", "path"], "param_type": "String", "param_description": ""}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the update is carried out, false if it isn\u2019t needed."], "return_type": ["Boo"]}, "method_name": "update", "method_description": "Updates the file wrapper to match a given file-system node.DeprecatedUse read(from:options:) instead.", "method_declar": "func update(fromPath path: String) -> Bool"}, {"params": [{"param_name": ["from", "url"], "param_type": "URL", "param_description": "URL of the file-system node corresponding to the file wrapper."}, {"param_name": ["options"], "param_type": "FileWrapper.ReadingOptions = []", "param_description": "Option flags for reading the node located at url. See FileWrapper.ReadingOptions for possible values."}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if successful. If not successful, returns false after setting outError to an NSError object that describes the reason why the file wrapper could not be reread."], "return_type": []}, "method_name": "read", "method_description": "Recursively rereads the entire contents of a file wrapper from the specified location on disk.", "method_declar": "func read(from url: URL, options: FileWrapper.ReadingOptions = []) throws"}, {"params": [{"param_name": ["toFile", "path"], "param_type": "String", "param_description": ""}, {"param_name": ["atomically", "atomicFlag"], "param_type": "Bool", "param_description": "true to write the file safely so that:An existing file is not overwrittenThe method fails if the file cannot be written in its entiretyfalse to overwrite an existing file and ignore incomplete writes."}, {"param_name": ["updateFilenames", "updateFilenamesFlag"], "param_type": "Bool", "param_description": ""}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true when the write operation is successful, false otherwise."], "return_type": ["Boo"]}, "method_name": "write", "method_description": "Writes a file wrapper\u2019s contents to a given file-system node.DeprecatedUse write(to:options:originalContentsURL:) instead.", "method_declar": "func write(toFile path: String, atomically atomicFlag: Bool, updateFilenames updateFilenamesFlag: Bool) -> Bool"}, {"params": [{"param_name": ["to", "url"], "param_type": "URL", "param_description": "URL of the file-system node to which the file wrapper\u2019s contents are written."}, {"param_name": ["options"], "param_type": "FileWrapper.WritingOptions", "param_description": "Option flags for writing to the node located at url. See FileWrapper.WritingOptions for possible values."}, {"param_name": ["originalContentsURL"], "param_type": "URL", "param_description": "The location of a previous revision of the contents being written. The default implementation of this method attempts to avoid unnecessary I/O by writing hard links to regular files instead of actually writing out their contents when the contents have not changed.  The child file wrappers must return accurate values when its filename property is accessed for this to work. Use the NSFileWrapperWritingWithNameUpdating writing option to increase the likelihood of that.Specify nil for this parameter if there is no earlier version of the contents or if you want to ensure that all the contents are written to files.  "}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["true when the write operation is successful. If not successful, returns false after setting outError to an NSError object that describes the reason why the file wrapper\u2019s contents could not be written."], "return_type": []}, "method_name": "write", "method_description": "Recursively writes the entire contents of a file wrapper to a given file-system URL.", "method_declar": "func write(to url: URL, options: FileWrapper.WritingOptions = [], originalContentsURL: URL?) throws"}, {"params": [{"param_name": ["url"], "param_type": "URL", "param_description": "URL of the file-system node the file wrapper is to represent."}, {"param_name": ["options"], "param_type": "FileWrapper.ReadingOptions = []", "param_description": "Option flags for reading the node located at url. See FileWrapper.ReadingOptions for possible values."}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": ["File wrapper for the file-system node at url. May be a directory, file, or symbolic link, depending on what is located at the URL. Returns false (0) if reading is not successful. "], "return_type": []}, "method_name": "init", "method_description": "Initializes a file wrapper instance whose kind is determined by the type of file-system node located by the URL.", "method_declar": "init(url: URL, options: FileWrapper.ReadingOptions = []) throws"}, {"params": [{"param_name": ["coder", "inCoder"], "param_type": "NSCoder", "param_description": ""}], "class_name": "FileWrapper", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init?(coder inCoder: NSCoder)"}], "class_name": "FileWrapper", "Vars": [{"var_description": "This property contains a boolean value that indicates whether the file wrapper object is a regular-file.", "var_type": "Bool", "is_static": false, "var_name": "isRegularFile"}, {"var_description": "This property contains a boolean value indicating whether the file wrapper is a directory file wrapper.", "var_type": "Bool", "is_static": false, "var_name": "isDirectory"}, {"var_description": "A boolean that indicates whether the file wrapper object is a symbolic-link file wrapper.", "var_type": "Bool", "is_static": false, "var_name": "isSymbolicLink"}, {"var_description": "The file wrappers contained by a directory file wrapper.", "var_type": "[String", "is_static": false, "var_name": "fileWrappers"}, {"var_description": "The URL referenced by the file wrapper object, which must be a symbolic-link file wrapper.", "var_type": "URL", "is_static": false, "var_name": "symbolicLinkDestinationURL"}, {"var_description": "The contents of the file wrapper as an opaque data object.", "var_type": "Data", "is_static": false, "var_name": "serializedRepresentation"}, {"var_description": "The filename of the file wrapper object", "var_type": "String", "is_static": false, "var_name": "filename"}, {"var_description": "The preferred filename for the file wrapper object.", "var_type": "String", "is_static": false, "var_name": "preferredFilename"}, {"var_description": "A dictionary of file attributes.", "var_type": "[String", "is_static": false, "var_name": "fileAttributes"}, {"var_description": "The contents of the file-system node associated with a regular-file file wrapper.", "var_type": "Data", "is_static": false, "var_name": "regularFileContents"}, {"var_description": "The icon that represents the file wrapper.", "var_type": "NSImage", "is_static": false, "var_name": "icon"}]}