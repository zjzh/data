{"package_name": "foundation", "subclass_list": [], "class_description": "Comparison operations in an NSPredicate are based on two expressions, as represented by instances of the NSExpression class. Expressions are created for constant values, key paths, and so on.\nGenerally, anywhere in the NSExpression class hierarchy where there is composite API and subtypes that may only reasonably respond to a subset of that API, invoking a method that does not make sense for that subtype will cause an exception to be thrown.\nIn OS X v10.5, NSExpression introduces several new expression types: NSSubqueryExpressionType, NSAggregateExpressionType, NSUnionSetExpressionType, NSIntersectSetExpressionType, and NSMinusSetExpressionType.\nThe aggregate expression allows you to create predicates containing expressions that evaluate to collections that contain further expressions. The collection may be an NSArray, NSSet, or NSDictionary object.\nFor example, consider the BETWEEN operator (NSComparisonPredicate.Operator.between); its right hand side is a collection containing two elements. Using just the OS X v10.4 API, these elements must be constants, as there is no way to populate them using variable expressions. In OS X v10.4, it is not possible to create a predicate template to the effect of date between {$YESTERDAY, $TOMORROW}; instead you must create a new predicate each time.\nAggregate expressions are not supported by Core Data.\nThe NSExpression.ExpressionType.subquery creates a sub-expression, evaluation of which returns a subset of a collection of objects. It allows you to create sophisticated queries across relationships, such as a search for multiple correlated values on the destination object of a relationship.\nThe set expressions (NSExpression.ExpressionType.unionSet, NSExpression.ExpressionType.intersectSet, and NSExpression.ExpressionType.minusSet) combine results in a manner similar to the NSSet methods.\nBoth sides of these expressions must evaluate to a collection; the left-hand side must evaluate to an NSSet object, the right-hand side can be any other collection type.\nSet expressions are not supported by Core Data. \nIn OS X v10.4, NSExpression only supports a predefined set of functions: sum, count, min, max, and average. These predefined functions were accessed in the predicate syntax using custom keywords (for example, MAX(1, 5, 10)).\nIn macOS 10.5 and later, function expressions also support arbitrary method invocations. To use this extended functionality, you can now use the syntax FUNCTION(receiver, selectorName, arguments, ...), for example:\nAll methods must take 0 or more id arguments and return an id value, although you can use the CAST expression to convert datatypes with lossy string representations (for example, CAST(####, \"NSDate\")). The CAST expression is extended in OS X v10.5 to provide support for casting to classes for use in creating receivers for function expressions.\nNote that although Core Data supports evaluation of the predefined functions, it does not support the evaluation of custom predicate functions in the persistent stores (during a fetch).\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["expressionType", "type"], "param_type": "NSExpression.ExpressionType", "param_description": "The type of the new expression, as defined by NSExpression.ExpressionType. "}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["An initialized NSExpression object of the type type."], "return_type": []}, "method_name": "init", "method_description": "Initializes the expression with the specified expression type.", "method_declar": "init(expressionType type: NSExpression.ExpressionType)"}, {"params": [{"param_name": ["format", "expressionFormat"], "param_type": "String", "param_description": "The expression format."}, {"param_name": ["argumentArray", "arguments"], "param_type": "[Any]", "param_description": "An array of arguments to be used with the expressionFormat string."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["An initialized NSExpression object with the specified arguments."], "return_type": []}, "method_name": "init", "method_description": "Initializes the expression with the specified expression format and array of arguments.", "method_declar": "init(format expressionFormat: String, argumentArray arguments: [Any])"}, {"params": [{"param_name": ["format", "expressionFormat"], "param_type": "String", "param_description": "The expression format."}, {"param_name": ["arguments", "argList"], "param_type": "CVaListPointer", "param_description": "A list of arguments to be inserted into the expressionFormat string. The argument list is terminated by nil."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["An initialized NSExpression object with the specified arguments."], "return_type": []}, "method_name": "init", "method_description": "Initializes the expression with the specified expression format and arguments list.", "method_declar": "init(format expressionFormat: String, arguments argList: CVaListPointer)"}, {"params": [{"param_name": ["forConstantValue", "obj"], "param_type": "Any", "param_description": "The constant value the new expression is to represent."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new expression that represents the constant value, obj."], "return_type": []}, "method_name": "init", "method_description": "Returns a new expression that represents a given constant value.", "method_declar": "init(forConstantValue obj: Any?)"}, {"params": [], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new expression that represents the object being evaluated."], "return_type": ["NSExpressio"]}, "method_name": "expressionForEvaluatedObject", "method_description": "Returns a new expression that represents the object being evaluated.", "method_declar": "class func expressionForEvaluatedObject() -> NSExpression"}, {"params": [{"param_name": ["forKeyPath", "keyPath"], "param_type": "String", "param_description": "The key path that the new expression should evaluate."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new expression that invokes value(forKeyPath:) with keyPath."], "return_type": []}, "method_name": "init", "method_description": "Returns a new expression that invokes valueForKeyPath: with a given key path.", "method_declar": "init(forKeyPath keyPath: String)"}, {"params": [{"param_name": ["forVariable", "string"], "param_type": "String", "param_description": "The key for the variable to extract from the variable bindings dictionary."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new expression that extracts from the variable bindings dictionary the value for the key string."], "return_type": []}, "method_name": "init", "method_description": "Returns a new expression that extracts a value from the variable bindings dictionary for a given key.", "method_declar": "init(forVariable string: String)"}, {"params": [], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new expression that represents any key for a Spotlight query."], "return_type": ["NSExpressio"]}, "method_name": "expressionForAnyKey", "method_description": "Returns a new expression that represents any key for a Spotlight query.", "method_declar": "class func expressionForAnyKey() -> NSExpression"}, {"params": [{"param_name": ["forAggregate", "subexpressions"], "param_type": "[NSExpression]", "param_description": ""}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new expression that contains the expressions in collection."], "return_type": []}, "method_name": "init", "method_description": "Returns a new aggregate expression for a given collection.", "method_declar": "init(forAggregate subexpressions: [NSExpression])"}, {"params": [{"param_name": ["forUnionSet", "left"], "param_type": "NSExpression", "param_description": "An expression that evaluates to an NSSet object."}, {"param_name": ["with", "right"], "param_type": "NSExpression", "param_description": "An expression that evaluates to a collection object (an instance of NSArray, NSSet, or NSDictionary)."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["An new NSExpression object that represents the union of left and right."], "return_type": []}, "method_name": "init", "method_description": "Returns a new NSExpression object that represent the union of a given set and collection.", "method_declar": "init(forUnionSet left: NSExpression, with right: NSExpression)"}, {"params": [{"param_name": ["forIntersectSet", "left"], "param_type": "NSExpression", "param_description": "An expression that evaluates to an NSSet object."}, {"param_name": ["with", "right"], "param_type": "NSExpression", "param_description": "An expression that evaluates to a collection object (an instance of NSArray, NSSet, or NSDictionary)."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new NSExpression object that represents the intersection of left and right."], "return_type": []}, "method_name": "init", "method_description": "Returns a new NSExpression object that represent the intersection of a given set and collection.", "method_declar": "init(forIntersectSet left: NSExpression, with right: NSExpression)"}, {"params": [{"param_name": ["forMinusSet", "left"], "param_type": "NSExpression", "param_description": "An expression that evaluates to an NSSet object."}, {"param_name": ["with", "right"], "param_type": "NSExpression", "param_description": "An expression that evaluates to a collection object (an instance of NSArray, NSSet, or NSDictionary)."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new NSExpression object that represents the subtraction of right from left."], "return_type": []}, "method_name": "init", "method_description": "Returns a new NSExpression object that represent the subtraction of a given collection from a given set.", "method_declar": "init(forMinusSet left: NSExpression, with right: NSExpression)"}, {"params": [{"param_name": ["forSubquery", "expression"], "param_type": "NSExpression", "param_description": "A predicate expression that evaluates to a collection."}, {"param_name": ["usingIteratorVariable", "variable"], "param_type": "String", "param_description": "Used as a local variable, and will shadow any instances of variable in the bindings dictionary. The variable is removed or the old value replaced once evaluation completes."}, {"param_name": ["predicate"], "param_type": "NSPredicate", "param_description": "The predicate used to determine whether the element belongs in the result collection."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["An expression that filters a collection by storing elements in the collection in the variable variable and keeping the elements for which qualifier returns true"], "return_type": []}, "method_name": "init", "method_description": "Returns an expression that filters a collection by storing elements in the collection in a given variable and keeping the elements for which qualifier returns true.", "method_declar": "init(forSubquery expression: NSExpression, usingIteratorVariable variable: String, predicate: NSPredicate)"}, {"params": [{"param_name": ["block"], "param_type": "@escaping (Any, [NSExpression], NSMutableDictionary) -> Any", "param_description": "The Block is applied to the object to be evaluated.The Block takes three arguments and returns a value:evaluatedObjectThe object to be evaluated.expressionsAn array of predicate expressions that evaluates to a collection.contextA dictionary that the expression can use to store temporary state for one predicate evaluation.Note that context is mutable, and that it can only be accessed during the evaluation of the expression. You must not attempt to retain it for use elsewhere. ]The Block returns the evaluatedObject. "}, {"param_name": ["arguments"], "param_type": "[NSExpression]", "param_description": "An array containing NSExpression objects that will be used as parameters during the invocation of selector.For a selector taking no parameters, the array should be empty. For a selector taking one or more parameters, the array should contain one NSExpression object which will evaluate to an instance of the appropriate type for each parameter.If there is a mismatch between the number of parameters expected and the number you provide during evaluation, an exception may be raised or missing parameters may simply be replaced by nil (which occurs depends on how many parameters are provided, and whether you have over- or underflow).See init(forFunction:arguments:) for a complete list of arguments."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": ["", ["arguments"]], "return_description": ["An expression that filters a collection using the specified Block."], "return_type": ["Any", "[NSExpression]"]}, "method_name": "init", "method_description": "Creates an NSExpression object that will use the Block for evaluating objects.", "method_declar": "init(block: @escaping (Any?, [NSExpression], NSMutableDictionary?) -> Any, arguments: [NSExpression]?)"}, {"params": [{"param_name": ["forFunction", "name"], "param_type": "String", "param_description": "The name of the function to invoke."}, {"param_name": ["arguments", "parameters"], "param_type": "[Any]", "param_description": "An array containing NSExpression objects that will be used as parameters during the invocation of selector.For a selector taking no parameters, the array should be empty. For a selector taking one or more parameters, the array should contain one NSExpression object which will evaluate to an instance of the appropriate type for each parameter.If there is a mismatch between the number of parameters expected and the number you provide during evaluation, an exception may be raised or missing parameters may simply be replaced by nil (which occurs depends on how many parameters are provided, and whether you have over- or underflow)."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new expression that invokes the function name using the parameters in parameters."], "return_type": []}, "method_name": "init", "method_description": "Returns a new expression that will invoke one of the predefined functions.", "method_declar": "init(forFunction name: String, arguments parameters: [Any])"}, {"params": [{"param_name": ["forFunction", "target"], "param_type": "NSExpression", "param_description": "An NSExpression object which will evaluate an object on which the selector identified by name may be invoked."}, {"param_name": ["selectorName", "name"], "param_type": "String", "param_description": "The name of the method to be invoked."}, {"param_name": ["arguments", "parameters"], "param_type": "[Any]", "param_description": "An array containing NSExpression objects which can be evaluated to provide parameters for the method specified by name."}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": ["An expression which will return the result of invoking the selector named name on the result of evaluating the target expression with the parameters specified by evaluating the elements of parameters."], "return_type": []}, "method_name": "init", "method_description": "Returns an expression which will return the result of invoking on a given target a selector with a given name using given arguments. ", "method_declar": "init(forFunction target: NSExpression, selectorName name: String, arguments parameters: [Any]?)"}, {"params": [{"param_name": ["with", "object"], "param_type": "Any", "param_description": "The object against which the expression is evaluated."}, {"param_name": ["context"], "param_type": "NSMutableDictionary", "param_description": "A dictionary that the expression can use to store temporary state for one predicate evaluation. Can be nil.Note that context is mutable, and that it can only be accessed during the evaluation of the expression. You must not attempt to retain it for use elsewhere. "}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The evaluated object."], "return_type": ["An"]}, "method_name": "expressionValue", "method_description": "Evaluates an expression using a given object and context.", "method_declar": "func expressionValue(with object: Any?, context: NSMutableDictionary?) -> Any?"}, {"params": [], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "allowEvaluation", "method_description": "Force an expression that was securely decoded to allow evaluation.", "method_declar": "func allowEvaluation()"}, {"params": [{"param_name": ["coder"], "param_type": "NSCoder", "param_description": ""}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init?(coder: NSCoder)"}, {"params": [{"param_name": ["forConditional", "predicate"], "param_type": "NSPredicate", "param_description": ""}, {"param_name": ["trueExpression"], "param_type": "NSExpression", "param_description": ""}, {"param_name": ["falseExpression"], "param_type": "NSExpression", "param_description": ""}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(forConditional predicate: NSPredicate, trueExpression: NSExpression, falseExpression: NSExpression)"}, {"params": [{"param_name": ["forKeyPath", "keyPath"], "param_type": "KeyPath<Root, Value>", "param_description": ""}], "class_name": "NSExpression", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "convenience init<Root, Value>(forKeyPath keyPath: KeyPath<Root, Value>)"}], "class_name": "NSExpression", "Vars": [{"var_description": "The arguments for the expression.", "var_type": "[NSExpression]", "is_static": false, "var_name": "arguments"}, {"var_description": "The collection of expressions in an aggregate expression, or the collection element of a subquery expression.", "var_type": "Any", "is_static": false, "var_name": "collection"}, {"var_description": "The constant value of the expression.", "var_type": "Any", "is_static": false, "var_name": "constantValue"}, {"var_description": "The expression type for the expression.", "var_type": "NSExpression.ExpressionType", "is_static": false, "var_name": "expressionType"}, {"var_description": "The function for the expression.", "var_type": "String", "is_static": false, "var_name": "function"}, {"var_description": "The key path for the expression.", "var_type": "String", "is_static": false, "var_name": "keyPath"}, {"var_description": "The operand for the expression.", "var_type": "NSExpression", "is_static": false, "var_name": "operand"}, {"var_description": "The predicate of a subquery expression.", "var_type": "NSPredicate", "is_static": false, "var_name": "predicate"}, {"var_description": "The left expression of an aggregate expression.", "var_type": "NSExpression", "is_static": false, "var_name": "left"}, {"var_description": "The right expression of an aggregate expression.", "var_type": "NSExpression", "is_static": false, "var_name": "right"}, {"var_description": "The variable for the expression.", "var_type": "String", "is_static": false, "var_name": "variable"}, {"var_description": "The block that is executed to evaluate the expression.", "var_type": "(Any,", "is_static": false, "var_name": "expressionBlock"}, {"var_description": "", "var_type": "NSExpression", "is_static": false, "var_name": "`false`"}, {"var_description": "", "var_type": "NSExpression", "is_static": false, "var_name": "`true`"}]}