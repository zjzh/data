{"package_name": "foundation", "subclass_list": [], "class_description": "NSDateComponents encapsulates the components of a date in an extendable, object-oriented manner. It's used to specify a date by providing the temporal components that make up a date and time: hour, minutes, seconds, day, month, year, and so on. You can also use it to specify a duration of time, for example, 5 hours and 16 minutes. An NSDateComponents object is not required to define all the component fields. When a new instance of NSDateComponents is created, the date components are set to NSDateComponentUndefined.\nImportant\nAn NSDateComponents object is meaningless in itself; you need to know what calendar it is interpreted against, and you need to know whether the values are absolute values of the units, or quantities of the units.\nAn instance of NSDateComponents is not responsible for answering questions about a date beyond the information with which it was initialized. For example, if you initialize one with May 4, 2017, its weekday is NSDateComponentUndefined, not Thursday. To get the correct day of the week, you must create a suitable instance of NSCalendar, create an NSDate object using date(from:) and then use components(_:from:) to retrieve the weekday\u2014as illustrated in the following example.\nFor more details, see Calendars, Date Components, and Calendar Units in Date and Time Programming Guide.\nImportant\nThe Swift overlay to the Foundation framework provides the DateComponents structure, which bridges to the NSDateComponents class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["in", "calendar"], "param_type": "Calendar", "param_description": "The calendar for which to use in the calculation."}], "class_name": "NSDateComponents", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the date corresponding to the receiver's values is valid and exists in the given calendar, otherwise false."], "return_type": ["Boo"]}, "method_name": "isValidDate", "method_description": "Returns a Boolean value that indicates whether the current combination of properties represents a date which exists in the specified calendar.", "method_declar": "func isValidDate(in calendar: Calendar) -> Bool"}, {"params": [], "class_name": "NSDateComponents", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The number of week units for the receiver."], "return_type": ["In"]}, "method_name": "week", "method_description": "Returns the number of weeks.DeprecatedUse weekOfYear or weekOfMonth instead, depending on what you intend.", "method_declar": "func week() -> Int"}, {"params": [{"param_name": ["v"], "param_type": "Int", "param_description": "The number of week units."}], "class_name": "NSDateComponents", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "setWeek", "method_description": "Sets the number of weeks.DeprecatedUse weekOfYear or weekOfMonth instead, depending on what you intend.", "method_declar": "func setWeek(_ v: Int)"}, {"params": [{"param_name": ["forComponent", "unit"], "param_type": "NSCalendar.Unit", "param_description": "The calendar unit for which to retrieve its value. Do not pass calendar or timeZone."}], "class_name": "NSDateComponents", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The value for the given calendar unit."], "return_type": ["In"]}, "method_name": "value", "method_description": "Returns the value for a given calendar unit.", "method_declar": "func value(forComponent unit: NSCalendar.Unit) -> Int"}, {"params": [{"param_name": ["value"], "param_type": "Int", "param_description": "The value to set for the unit component."}, {"param_name": ["forComponent", "unit"], "param_type": "NSCalendar.Unit", "param_description": "The calendar unit for which to set value. Do not pass calendar or timeZone."}], "class_name": "NSDateComponents", "is_static": false, "return_value": {"return_name": [], "return_description": ["The value for the given calendar unit."], "return_type": []}, "method_name": "setValue", "method_description": "Sets a value for a given calendar unit.", "method_declar": "func setValue(_ value: Int, forComponent unit: NSCalendar.Unit)"}], "class_name": "NSDateComponents", "Vars": [{"var_description": "The calendar used to interpret the date components.", "var_type": "Calendar", "is_static": false, "var_name": "calendar"}, {"var_description": "The time zone used to interpret the date components.", "var_type": "TimeZone", "is_static": false, "var_name": "timeZone"}, {"var_description": "A Boolean value that indicates whether the current combination of properties represents a date which exists in the current calendar.", "var_type": "Bool", "is_static": false, "var_name": "isValidDate"}, {"var_description": "The date calculated from the current components using the stored calendar.", "var_type": "Date", "is_static": false, "var_name": "date"}, {"var_description": "Specifies a date component without a value.", "var_type": "Int", "is_static": false, "var_name": "NSDateComponentUndefined"}, {"var_description": "Specifies a date component without a value.DeprecatedUse NSDateComponentUndefined instead.", "var_type": "Int", "is_static": false, "var_name": "NSUndefinedDateComponent"}, {"var_description": "The number of eras.", "var_type": "Int", "is_static": false, "var_name": "era"}, {"var_description": "The number of years.", "var_type": "Int", "is_static": false, "var_name": "year"}, {"var_description": "The ISO 8601 week-numbering year.", "var_type": "Int", "is_static": false, "var_name": "yearForWeekOfYear"}, {"var_description": "The number of quarters.", "var_type": "Int", "is_static": false, "var_name": "quarter"}, {"var_description": "The number of months.", "var_type": "Int", "is_static": false, "var_name": "month"}, {"var_description": "A Boolean value that indicates whether the month is a leap month.", "var_type": "Bool", "is_static": false, "var_name": "isLeapMonth"}, {"var_description": "The number of the weekdays.", "var_type": "Int", "is_static": false, "var_name": "weekday"}, {"var_description": "The ordinal number of weekdays.", "var_type": "Int", "is_static": false, "var_name": "weekdayOrdinal"}, {"var_description": "The week number of the months.", "var_type": "Int", "is_static": false, "var_name": "weekOfMonth"}, {"var_description": "The ISO 8601 week date of the year.", "var_type": "Int", "is_static": false, "var_name": "weekOfYear"}, {"var_description": "The number of days.", "var_type": "Int", "is_static": false, "var_name": "day"}, {"var_description": "The number of hour units for the receiver.", "var_type": "Int", "is_static": false, "var_name": "hour"}, {"var_description": "The number of minute units for the receiver.", "var_type": "Int", "is_static": false, "var_name": "minute"}, {"var_description": "The number of second units for the receiver.", "var_type": "Int", "is_static": false, "var_name": "second"}, {"var_description": "The number of nanosecond units for the receiver.", "var_type": "Int", "is_static": false, "var_name": "nanosecond"}]}