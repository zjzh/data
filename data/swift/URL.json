{"class_description": "You can construct URLs and access their parts. For URLs that represent local files, you can also manipulate properties of those files directly, such as changing the file\u2019s last modification date. Finally, you can pass URLs to other APIs to retrieve the contents of those URLs. For example, you can use the URLSession classes to access the contents of remote resources, as described in URL Session Programming Guide.\nURLs are the preferred way to refer to local files. Most objects that read data from or write data to a file have methods that accept a URL instead of a pathname as the file reference. For example, you can get the contents of a local file URL as String by calling func init(contentsOf:encoding) throws, or as a Data by calling func init(contentsOf:options) throws.\n", "Methods": [{"method_description": "", "method_name": "init", "params": [{"param_type": "String", "param_description": "", "param_name": ["fileReferenceLiteralResourceName", "name"]}], "class_name": "URL", "method_declar": "init(fileReferenceLiteralResourceName name: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "Decoder", "param_description": "", "param_name": ["from", "decoder"]}], "class_name": "URL", "method_declar": "init(from decoder: Decoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "encode", "params": [{"param_type": "Encoder", "param_description": "", "param_name": ["to", "encoder"]}], "class_name": "URL", "method_declar": "func encode(to encoder: Encoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Return a collection of resource values identified by the given resource keys.", "method_name": "resourceValues", "params": [{"param_type": "Set<URLResourceKey>", "param_description": "", "param_name": ["forKeys", "keys"]}], "class_name": "URL", "method_declar": "func resourceValues(forKeys keys: Set<URLResourceKey>) throws -> URLResourceValues", "return_value": {"return_description": [], "return_name": [""], "return_type": ["URLResourceValue"]}, "is_static": false}, {"method_description": "Sets the resource value identified by a given resource key.", "method_name": "setResourceValues", "params": [{"param_type": "URLResourceValues", "param_description": "", "param_name": ["values"]}], "class_name": "URL", "method_declar": "mutating func setResourceValues(_ values: URLResourceValues) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the cached resource value identified by a given resource value key from the URL object.", "method_name": "removeCachedResourceValue", "params": [{"param_type": "URLResourceKey", "param_description": "", "param_name": ["forKey", "key"]}], "class_name": "URL", "method_declar": "mutating func removeCachedResourceValue(forKey key: URLResourceKey)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes all cached resource values and all temporary resource values from the URL object.", "method_name": "removeAllCachedResourceValues", "params": [], "class_name": "URL", "method_declar": "mutating func removeAllCachedResourceValues()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Sets a temporary resource value on the URL object.", "method_name": "setTemporaryResourceValue", "params": [{"param_type": "Any", "param_description": "", "param_name": ["value"]}, {"param_type": "URLResourceKey", "param_description": "", "param_name": ["forKey", "key"]}], "class_name": "URL", "method_declar": "mutating func setTemporaryResourceValue(_ value: Any, forKey key: URLResourceKey)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Passes the URL\u2019s path in the file system representation to a closure.", "method_name": "withUnsafeFileSystemRepresentation", "params": [{"param_type": "(UnsafePointer<Int8>) throws -> ResultType", "param_description": "A closure to execute, which receives a C string as its parameter, and returns a value of a type you choose.The parameter passed to the closure is nil if the URL cannot be represented by the file system. For example, if the URL contains an accented character and the file system only supports ASCII, no file system representation is possible.", "param_name": ["block"]}], "class_name": "URL", "method_declar": "func withUnsafeFileSystemRepresentation<ResultType>(_ block: (UnsafePointer<Int8>?) throws -> ResultType) rethrows -> ResultType", "return_value": {"return_description": ["The value returned by your closure, if any."], "return_name": [""], "return_type": ["ResultTyp"]}, "is_static": false}, {"method_description": "Resolves any symlinks in the path of a file URL.", "method_name": "resolveSymlinksInPath", "params": [], "class_name": "URL", "method_declar": "mutating func resolveSymlinksInPath()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Resolves any symlinks in the path of a file URL.", "method_name": "resolvingSymlinksInPath", "params": [], "class_name": "URL", "method_declar": "func resolvingSymlinksInPath() -> URL", "return_value": {"return_description": [], "return_name": [""], "return_type": ["UR"]}, "is_static": false}, {"method_description": "Standardizes the path of a file URL.", "method_name": "standardize", "params": [], "class_name": "URL", "method_declar": "mutating func standardize()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends a path component to the URL.", "method_name": "appendPathComponent", "params": [{"param_type": "String", "param_description": "The path component to add.", "param_name": ["pathComponent"]}], "class_name": "URL", "method_declar": "mutating func appendPathComponent(_ pathComponent: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Appends a path component to the URL.", "method_name": "appendPathComponent", "params": [{"param_type": "String", "param_description": "The path component to add.", "param_name": ["pathComponent"]}, {"param_type": "Bool", "param_description": "Use true if the resulting path is a directory.", "param_name": ["isDirectory"]}], "class_name": "URL", "method_declar": "mutating func appendPathComponent(_ pathComponent: String, isDirectory: Bool)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a URL constructed by appending the given path component to self.", "method_name": "appendingPathComponent", "params": [{"param_type": "String", "param_description": "The path component to add.", "param_name": ["pathComponent"]}], "class_name": "URL", "method_declar": "func appendingPathComponent(_ pathComponent: String) -> URL", "return_value": {"return_description": [], "return_name": [""], "return_type": ["UR"]}, "is_static": false}, {"method_description": "Returns a URL constructed by appending the given path component to self.", "method_name": "appendingPathComponent", "params": [{"param_type": "String", "param_description": "The path component to add.", "param_name": ["pathComponent"]}, {"param_type": "Bool", "param_description": "If true, then a trailing / is added to the resulting path.", "param_name": ["isDirectory"]}], "class_name": "URL", "method_declar": "func appendingPathComponent(_ pathComponent: String, isDirectory: Bool) -> URL", "return_value": {"return_description": [], "return_name": [""], "return_type": ["UR"]}, "is_static": false}, {"method_description": "Appends the given path extension to self.", "method_name": "appendPathExtension", "params": [{"param_type": "String", "param_description": "The extension to append.", "param_name": ["pathExtension"]}], "class_name": "URL", "method_declar": "mutating func appendPathExtension(_ pathExtension: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a URL constructed by appending the given path extension to self.", "method_name": "appendingPathExtension", "params": [{"param_type": "String", "param_description": "The extension to append.", "param_name": ["pathExtension"]}], "class_name": "URL", "method_declar": "func appendingPathExtension(_ pathExtension: String) -> URL", "return_value": {"return_description": [], "return_name": [""], "return_type": ["UR"]}, "is_static": false}, {"method_description": "Returns a URL constructed by removing the last path component of self.", "method_name": "deleteLastPathComponent", "params": [], "class_name": "URL", "method_declar": "mutating func deleteLastPathComponent()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a URL constructed by removing the last path component of self.", "method_name": "deletingLastPathComponent", "params": [], "class_name": "URL", "method_declar": "func deletingLastPathComponent() -> URL", "return_value": {"return_description": [], "return_name": [""], "return_type": ["UR"]}, "is_static": false}, {"method_description": "Returns a URL constructed by removing any path extension.", "method_name": "deletePathExtension", "params": [], "class_name": "URL", "method_declar": "mutating func deletePathExtension()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a URL constructed by removing any path extension.", "method_name": "deletingPathExtension", "params": [], "class_name": "URL", "method_declar": "func deletingPathExtension() -> URL", "return_value": {"return_description": [], "return_name": [""], "return_type": ["UR"]}, "is_static": false}, {"method_description": "Returns bookmark data for the URL, created with specified options and resource values.", "method_name": "bookmarkData", "params": [{"param_type": "URL.BookmarkCreationOptions", "param_description": "", "param_name": ["options"]}, {"param_type": "Set<URLResourceKey>", "param_description": "", "param_name": ["includingResourceValuesForKeys", "keys"]}, {"param_type": "URL = nil", "param_description": "", "param_name": ["relativeTo", "url"]}], "class_name": "URL", "method_declar": "func bookmarkData(options: URL.BookmarkCreationOptions = [], includingResourceValuesForKeys keys: Set<URLResourceKey>? = nil, relativeTo url: URL? = nil) throws -> Data", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Initializes and returns bookmark data derived from an alias file pointed to by a specified URL. ", "method_name": "bookmarkData", "params": [{"param_type": "URL", "param_description": "", "param_name": ["withContentsOf", "url"]}], "class_name": "URL", "method_declar": "static func bookmarkData(withContentsOf url: URL) throws -> Data", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Dat"]}, "is_static": true}, {"method_description": "Creates an alias file on disk at a specified location with specified bookmark data. ", "method_name": "writeBookmarkData", "params": [{"param_type": "Data", "param_description": "", "param_name": ["data"]}, {"param_type": "URL", "param_description": "", "param_name": ["to", "url"]}], "class_name": "URL", "method_declar": "static func writeBookmarkData(_ data: Data, to url: URL) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the resource values for properties identified by a specified array of keys contained in specified bookmark data. ", "method_name": "resourceValues", "params": [{"param_type": "Set<URLResourceKey>", "param_description": "", "param_name": ["forKeys", "keys"]}, {"param_type": "Data", "param_description": "", "param_name": ["fromBookmarkData", "data"]}], "class_name": "URL", "method_declar": "static func resourceValues(forKeys keys: Set<URLResourceKey>, fromBookmarkData data: Data) -> URLResourceValues?", "return_value": {"return_description": [], "return_name": [""], "return_type": ["URLResourceValue"]}, "is_static": true}, {"method_description": "Returns whether the URL\u2019s resource exists and is reachable.", "method_name": "checkResourceIsReachable", "params": [], "class_name": "URL", "method_declar": "func checkResourceIsReachable() throws -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns whether the promised item URL\u2019s resource exists and is reachable.", "method_name": "checkPromisedItemIsReachable", "params": [], "class_name": "URL", "method_declar": "func checkPromisedItemIsReachable() throws -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Gets resource values from URLs of \u2018promised\u2019 items.", "method_name": "promisedItemResourceValues", "params": [{"param_type": "Set<URLResourceKey>", "param_description": "", "param_name": ["forKeys", "keys"]}], "class_name": "URL", "method_declar": "func promisedItemResourceValues(forKeys keys: Set<URLResourceKey>) throws -> URLResourceValues", "return_value": {"return_description": [], "return_name": [""], "return_type": ["URLResourceValue"]}, "is_static": false}, {"method_description": "Given a url created by resolving a bookmark data created with security scope, make the resource referenced by the url accessible to the process.", "method_name": "startAccessingSecurityScopedResource", "params": [], "class_name": "URL", "method_declar": "func startAccessingSecurityScopedResource() -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Revokes the access granted to the url by a prior successful call to the complementary start function.", "method_name": "stopAccessingSecurityScopedResource", "params": [], "class_name": "URL", "method_declar": "func stopAccessingSecurityScopedResource()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "URL", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "URL", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "URL", "method_declar": "static func != (lhs: URL, rhs: URL) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Indicates whether two URLs are the same.", "method_name": "==", "params": [{"param_type": "URL", "param_description": "", "param_name": ["lhs"]}, {"param_type": "URL", "param_description": "", "param_name": ["rhs"]}], "class_name": "URL", "method_declar": "static func == (lhs: URL, rhs: URL) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}], "class_inherit_list": [], "class_name": "URL", "typealias": ["typealias URL.BookmarkResolutionOptions = NSURL.BookmarkResolutionOptions", "typealias URL.BookmarkCreationOptions = NSURL.BookmarkCreationOptions", "typealias URL.ReferenceType = NSURL"], "Vars": [{"var_description": "The data representation of the URL\u2019s relativeString.", "var_type": "Data", "is_static": false, "var_name": "dataRepresentation"}, {"var_description": "The absolute string for the URL.", "var_type": "String", "is_static": false, "var_name": "absoluteString"}, {"var_description": "The absolute URL.", "var_type": "URL", "is_static": false, "var_name": "absoluteURL"}, {"var_description": "The base URL.", "var_type": "URL", "is_static": false, "var_name": "baseURL"}, {"var_description": "The fragment component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil.", "var_type": "String", "is_static": false, "var_name": "fragment"}, {"var_description": "The host component of a URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil.", "var_type": "String", "is_static": false, "var_name": "host"}, {"var_description": "The last path component of the URL, or an empty string if the path is an empty string.", "var_type": "String", "is_static": false, "var_name": "lastPathComponent"}, {"var_description": "The path component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise an empty string.", "var_type": "String", "is_static": false, "var_name": "path"}, {"var_description": "The path components of the URL, or an empty array if the path is an empty string.", "var_type": "[String]", "is_static": false, "var_name": "pathComponents"}, {"var_description": "The path extension of the URL, or an empty string if the path is an empty string.", "var_type": "String", "is_static": false, "var_name": "pathExtension"}, {"var_description": "The port component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil.", "var_type": "Int", "is_static": false, "var_name": "port"}, {"var_description": "The query of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil.", "var_type": "String", "is_static": false, "var_name": "query"}, {"var_description": "The relative path of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil.", "var_type": "String", "is_static": false, "var_name": "relativePath"}, {"var_description": "The relative portion of a URL.", "var_type": "String", "is_static": false, "var_name": "relativeString"}, {"var_description": "The scheme of the URL.", "var_type": "String", "is_static": false, "var_name": "scheme"}, {"var_description": "A version of the URL with any instances of \u201c..\u201d or \u201c.\u201d removed from its path.", "var_type": "URL", "is_static": false, "var_name": "standardized"}, {"var_description": "A standardized version of the path of a file URL.", "var_type": "URL", "is_static": false, "var_name": "standardizedFileURL"}, {"var_description": "The user component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil.", "var_type": "String", "is_static": false, "var_name": "user"}, {"var_description": "The password component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil.", "var_type": "String", "is_static": false, "var_name": "password"}, {"var_description": "A Boolean that is true if the scheme is file:.", "var_type": "Bool", "is_static": false, "var_name": "isFileURL"}, {"var_description": "A Boolean that is true if the URL path represents a directory.", "var_type": "Bool", "is_static": false, "var_name": "hasDirectoryPath"}, {"var_description": "A textual description of the URL.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A textual description of the URL suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A playground quicklook for the URL.", "var_type": "PlaygroundQuickLook", "is_static": false, "var_name": "customPlaygroundQuickLook"}, {"var_description": "The computed hash value for the URL.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}], "class_type": "struct", "interface_list": ["CustomDebugStringConvertible", "CustomPlaygroundQuickLookable", "CustomStringConvertible", "Equatable", "ReferenceConvertible"], "package_name": "foundation", "subclass_list": []}