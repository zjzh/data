{"class_description": "", "Methods": [{"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "IndexSet.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "IndexSet.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "IndexSet.Index", "method_declar": "static func != (lhs: IndexSet.Index, rhs: IndexSet.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "params": [{"param_type": "IndexSet.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "IndexSet.Index", "method_declar": "prefix static func ..< (maximum: IndexSet.Index) -> PartialRangeUpTo<IndexSet.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<IndexSet.Index"]}, "is_static": true}, {"method_description": "Indicates that one index is less than another.", "method_name": "func", "params": [{"param_type": "IndexSet.Index", "param_description": "", "param_name": ["lhs"]}, {"param_type": "IndexSet.Index", "param_description": "", "param_name": ["rhs"]}], "class_name": "IndexSet.Index", "method_declar": "static func < (lhs: IndexSet.Index, rhs: IndexSet.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Indicates that two indexes are equal.", "method_name": "==", "params": [{"param_type": "IndexSet.Index", "param_description": "", "param_name": ["lhs"]}, {"param_type": "IndexSet.Index", "param_description": "", "param_name": ["rhs"]}], "class_name": "IndexSet.Index", "method_declar": "static func == (lhs: IndexSet.Index, rhs: IndexSet.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "params": [{"param_type": "IndexSet.Index", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}], "class_name": "IndexSet.Index", "method_declar": "postfix static func ... (minimum: IndexSet.Index) -> PartialRangeFrom<IndexSet.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<IndexSet.Index"]}, "is_static": true}, {"method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "params": [{"param_type": "IndexSet.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "IndexSet.Index", "method_declar": "prefix static func ... (maximum: IndexSet.Index) -> PartialRangeThrough<IndexSet.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<IndexSet.Index"]}, "is_static": true}, {"method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "params": [{"param_type": "IndexSet.Index", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "IndexSet.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "IndexSet.Index", "method_declar": "static func ... (minimum: IndexSet.Index, maximum: IndexSet.Index) -> ClosedRange<IndexSet.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<IndexSet.Index"]}, "is_static": true}, {"method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "params": [{"param_type": "IndexSet.Index", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "IndexSet.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "IndexSet.Index", "method_declar": "static func ..< (minimum: IndexSet.Index, maximum: IndexSet.Index) -> Range<IndexSet.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<IndexSet.Index"]}, "is_static": true}, {"method_description": "", "method_name": "func", "params": [{"param_type": "IndexSet.Index", "param_description": "", "param_name": ["lhs"]}, {"param_type": "IndexSet.Index", "param_description": "", "param_name": ["rhs"]}], "class_name": "IndexSet.Index", "method_declar": "static func <= (lhs: IndexSet.Index, rhs: IndexSet.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "IndexSet.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "IndexSet.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "IndexSet.Index", "method_declar": "static func <= (lhs: IndexSet.Index, rhs: IndexSet.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "", "method_name": ">", "params": [{"param_type": "IndexSet.Index", "param_description": "", "param_name": ["lhs"]}, {"param_type": "IndexSet.Index", "param_description": "", "param_name": ["rhs"]}], "class_name": "IndexSet.Index", "method_declar": "static func > (lhs: IndexSet.Index, rhs: IndexSet.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "IndexSet.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "IndexSet.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "IndexSet.Index", "method_declar": "static func > (lhs: IndexSet.Index, rhs: IndexSet.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "", "method_name": ">=", "params": [{"param_type": "IndexSet.Index", "param_description": "", "param_name": ["lhs"]}, {"param_type": "IndexSet.Index", "param_description": "", "param_name": ["rhs"]}], "class_name": "IndexSet.Index", "method_declar": "static func >= (lhs: IndexSet.Index, rhs: IndexSet.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "IndexSet.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "IndexSet.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "IndexSet.Index", "method_declar": "static func >= (lhs: IndexSet.Index, rhs: IndexSet.Index) -> Bool", "return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}], "class_inherit_list": [], "class_name": "IndexSet.Index", "typealias": [], "Vars": [{"var_description": "A textual description of the index.", "var_type": "String", "is_static": false, "var_name": "description"}], "class_type": "struct", "interface_list": [], "package_name": "foundation", "subclass_list": []}