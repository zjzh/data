{"class_description": "", "Methods": [{"method_description": "Creates a decimal initialized to 0.", "method_name": "init", "params": [], "class_name": "Decimal", "method_declar": "init()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a decimal initialized with the given sign, exponent, and significand.", "method_name": "init", "params": [{"param_type": "FloatingPointSign", "param_description": "", "param_name": ["sign"]}, {"param_type": "Int", "param_description": "", "param_name": ["exponent"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["significand"]}], "class_name": "Decimal", "method_declar": "init(sign: FloatingPointSign, exponent: Int, significand: Decimal)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a decimal initialized according to the provided characteristics.", "method_name": "init", "params": [{"param_type": "Int32", "param_description": "", "param_name": ["exponent"]}, {"param_type": "UInt32", "param_description": "", "param_name": ["length"]}, {"param_type": "UInt32", "param_description": "", "param_name": ["isNegative"]}, {"param_type": "UInt32", "param_description": "", "param_name": ["isCompact"]}, {"param_type": "UInt32", "param_description": "", "param_name": ["reserved"]}, {"param_type": "(UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16)", "param_description": "", "param_name": ["mantissa"]}], "class_name": "Decimal", "method_declar": "init(_exponent: Int32, _length: UInt32, _isNegative: UInt32, _isCompact: UInt32, _reserved: UInt32, _mantissa: (UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16))", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided floating point value.", "method_name": "init", "params": [{"param_type": "Double", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided floating point value.", "method_name": "init", "params": [{"param_type": "Double", "param_description": "", "param_name": ["floatLiteral", "value"]}], "class_name": "Decimal", "method_declar": "init(floatLiteral value: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new decimal value exactly representing the provided integer.", "method_name": "init", "params": [{"param_type": "BinaryInteger", "param_description": "The integer to convert.", "param_name": ["exactly", "source"]}], "class_name": "Decimal", "method_declar": "init?<T>(exactly source: T) where T : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided integer value.", "method_name": "init", "params": [{"param_type": "Int", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided integer value.", "method_name": "init", "params": [{"param_type": "Int8", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: Int8)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided integer value.", "method_name": "init", "params": [{"param_type": "Int16", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: Int16)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided integer value.", "method_name": "init", "params": [{"param_type": "Int32", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: Int32)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided integer value.", "method_name": "init", "params": [{"param_type": "Int64", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: Int64)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided integer value.", "method_name": "init", "params": [{"param_type": "Int", "param_description": "", "param_name": ["integerLiteral", "value"]}], "class_name": "Decimal", "method_declar": "init(integerLiteral value: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided unsigned integer value.", "method_name": "init", "params": [{"param_type": "UInt", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: UInt)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided unsigned integer value.", "method_name": "init", "params": [{"param_type": "UInt8", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: UInt8)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided unsigned integer value.", "method_name": "init", "params": [{"param_type": "UInt16", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: UInt16)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided unsigned integer value.", "method_name": "init", "params": [{"param_type": "UInt32", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: UInt32)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the provided unsigned integer value.", "method_name": "init", "params": [{"param_type": "UInt64", "param_description": "", "param_name": ["value"]}], "class_name": "Decimal", "method_declar": "init(_ value: UInt64)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and initializes a decimal with the sign and magnitude of the given decimals.", "method_name": "init", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["signOf"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["magnitudeOf", "magnitude"]}], "class_name": "Decimal", "method_declar": "init(signOf: Decimal, magnitudeOf magnitude: Decimal)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Copies the value of a decimal number.", "method_name": "NSDecimalCopy", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["destination"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["source"]}], "class_name": "Decimal", "method_declar": "func NSDecimalCopy(_ destination: UnsafeMutablePointer<Decimal>, _ source: UnsafePointer<Decimal>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a string representation of the decimal value appropriate for the specified locale.", "method_name": "NSDecimalString", "params": [{"param_type": "UnsafePointer<Decimal>", "param_description": "The decimal value to represent.", "param_name": ["dcm"]}, {"param_type": "Any", "param_description": "Either an instance of NSLocale or a dictionary with a string value corresponding to the decimalSeparator key. ", "param_name": ["locale"]}], "class_name": "Decimal", "method_declar": "func NSDecimalString(_ dcm: UnsafePointer<Decimal>, _ locale: Any?) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Multiplies two decimal numbers.", "method_name": "*", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func * (lhs: Decimal, rhs: Decimal) -> Decimal", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Decima"]}, "is_static": true}, {"method_description": "Multiplies two decimal numbers, storing the result in the first number.", "method_name": "*=", "params": [{"param_type": "inout Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func *= (lhs: inout Decimal, rhs: Decimal)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Adds two decimal numbers.", "method_name": "+", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func + (lhs: Decimal, rhs: Decimal) -> Decimal", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Decima"]}, "is_static": true}, {"method_description": "Adds two decimal numbers, storing the result in the first number.", "method_name": "+=", "params": [{"param_type": "inout Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func += (lhs: inout Decimal, rhs: Decimal)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Subtracts one decimal number from another.", "method_name": "-", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func - (lhs: Decimal, rhs: Decimal) -> Decimal", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Decima"]}, "is_static": true}, {"method_description": "Subtracts one decimal number from another, storing the result in the first number.", "method_name": "-=", "params": [{"param_type": "inout Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func -= (lhs: inout Decimal, rhs: Decimal)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Divides one decimal number by another.", "method_name": "/", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func / (lhs: Decimal, rhs: Decimal) -> Decimal", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Decima"]}, "is_static": true}, {"method_description": "Divides one decimal number by another, storing the result in the first number.", "method_name": "/=", "params": [{"param_type": "inout Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func /= (lhs: inout Decimal, rhs: Decimal)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns a decimal number raised to a given power.", "method_name": "pow", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["x"]}, {"param_type": "Int", "param_description": "", "param_name": ["y"]}], "class_name": "Decimal", "method_declar": "func pow(_ x: Decimal, _ y: Int) -> Decimal", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Decima"]}, "is_static": false}, {"method_description": "Negates this decimal.", "method_name": "negate", "params": [], "class_name": "Decimal", "method_declar": "mutating func negate()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Compacts the decimal structure for efficiency.", "method_name": "NSDecimalCompact", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["number"]}], "class_name": "Decimal", "method_declar": "func NSDecimalCompact(_ number: UnsafeMutablePointer<Decimal>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds two decimal values.", "method_name": "NSDecimalAdd", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["result"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["leftOperand"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["rightOperand"]}, {"param_type": "NSDecimalNumber.RoundingMode", "param_description": "", "param_name": ["roundingMode"]}], "class_name": "Decimal", "method_declar": "func NSDecimalAdd(_ result: UnsafeMutablePointer<Decimal>, _ leftOperand: UnsafePointer<Decimal>, _ rightOperand: UnsafePointer<Decimal>, _ roundingMode: NSDecimalNumber.RoundingMode) -> NSDecimalNumber.CalculationError", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumber.CalculationErro"]}, "is_static": false}, {"method_description": "Subtracts one decimal value from another.", "method_name": "NSDecimalSubtract", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["result"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["leftOperand"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["rightOperand"]}, {"param_type": "NSDecimalNumber.RoundingMode", "param_description": "", "param_name": ["roundingMode"]}], "class_name": "Decimal", "method_declar": "func NSDecimalSubtract(_ result: UnsafeMutablePointer<Decimal>, _ leftOperand: UnsafePointer<Decimal>, _ rightOperand: UnsafePointer<Decimal>, _ roundingMode: NSDecimalNumber.RoundingMode) -> NSDecimalNumber.CalculationError", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumber.CalculationErro"]}, "is_static": false}, {"method_description": "Divides one decimal value by another.", "method_name": "NSDecimalDivide", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["result"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["leftOperand"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["rightOperand"]}, {"param_type": "NSDecimalNumber.RoundingMode", "param_description": "", "param_name": ["roundingMode"]}], "class_name": "Decimal", "method_declar": "func NSDecimalDivide(_ result: UnsafeMutablePointer<Decimal>, _ leftOperand: UnsafePointer<Decimal>, _ rightOperand: UnsafePointer<Decimal>, _ roundingMode: NSDecimalNumber.RoundingMode) -> NSDecimalNumber.CalculationError", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumber.CalculationErro"]}, "is_static": false}, {"method_description": "Multiplies two decimal numbers together.", "method_name": "NSDecimalMultiply", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["result"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["leftOperand"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["rightOperand"]}, {"param_type": "NSDecimalNumber.RoundingMode", "param_description": "", "param_name": ["roundingMode"]}], "class_name": "Decimal", "method_declar": "func NSDecimalMultiply(_ result: UnsafeMutablePointer<Decimal>, _ leftOperand: UnsafePointer<Decimal>, _ rightOperand: UnsafePointer<Decimal>, _ roundingMode: NSDecimalNumber.RoundingMode) -> NSDecimalNumber.CalculationError", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumber.CalculationErro"]}, "is_static": false}, {"method_description": "Multiplies a decimal by the specified power of 10.", "method_name": "NSDecimalMultiplyByPowerOf10", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["result"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["number"]}, {"param_type": "Int16", "param_description": "", "param_name": ["power"]}, {"param_type": "NSDecimalNumber.RoundingMode", "param_description": "", "param_name": ["roundingMode"]}], "class_name": "Decimal", "method_declar": "func NSDecimalMultiplyByPowerOf10(_ result: UnsafeMutablePointer<Decimal>, _ number: UnsafePointer<Decimal>, _ power: Int16, _ roundingMode: NSDecimalNumber.RoundingMode) -> NSDecimalNumber.CalculationError", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumber.CalculationErro"]}, "is_static": false}, {"method_description": "Rounds off the decimal value.", "method_name": "NSDecimalRound", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["result"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["number"]}, {"param_type": "Int", "param_description": "", "param_name": ["scale"]}, {"param_type": "NSDecimalNumber.RoundingMode", "param_description": "", "param_name": ["roundingMode"]}], "class_name": "Decimal", "method_declar": "func NSDecimalRound(_ result: UnsafeMutablePointer<Decimal>, _ number: UnsafePointer<Decimal>, _ scale: Int, _ roundingMode: NSDecimalNumber.RoundingMode)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Raises the decimal value to the specified power.", "method_name": "NSDecimalPower", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["result"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["number"]}, {"param_type": "Int", "param_description": "", "param_name": ["power"]}, {"param_type": "NSDecimalNumber.RoundingMode", "param_description": "", "param_name": ["roundingMode"]}], "class_name": "Decimal", "method_declar": "func NSDecimalPower(_ result: UnsafeMutablePointer<Decimal>, _ number: UnsafePointer<Decimal>, _ power: Int, _ roundingMode: NSDecimalNumber.RoundingMode) -> NSDecimalNumber.CalculationError", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumber.CalculationErro"]}, "is_static": false}, {"method_description": "Normalizes the internal format of two decimal numbers to simplify later operations.", "method_name": "NSDecimalNormalize", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["number1"]}, {"param_type": "UnsafeMutablePointer<Decimal>", "param_description": "", "param_name": ["number2"]}, {"param_type": "NSDecimalNumber.RoundingMode", "param_description": "", "param_name": ["roundingMode"]}], "class_name": "Decimal", "method_declar": "func NSDecimalNormalize(_ number1: UnsafeMutablePointer<Decimal>, _ number2: UnsafeMutablePointer<Decimal>, _ roundingMode: NSDecimalNumber.RoundingMode) -> NSDecimalNumber.CalculationError", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumber.CalculationErro"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether one decimal number is strictly less than another.", "method_name": "func", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func < (lhs: Decimal, rhs: Decimal) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two decimal numbers are equal.", "method_name": "==", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Decimal", "param_description": "", "param_name": ["rhs"]}], "class_name": "Decimal", "method_declar": "static func == (lhs: Decimal, rhs: Decimal) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Indicates whether this decimal is equal to the specified one.", "method_name": "isEqual", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["to", "other"]}], "class_name": "Decimal", "method_declar": "func isEqual(to other: Decimal) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Indicates whether this decimal is less than the specified one.", "method_name": "isLess", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["than", "other"]}], "class_name": "Decimal", "method_declar": "func isLess(than other: Decimal) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Indicates whether this decimal is less than or equal to the specified one.", "method_name": "isLessThanOrEqualTo", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["other"]}], "class_name": "Decimal", "method_declar": "func isLessThanOrEqualTo(_ other: Decimal) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this instance should precede the given value in an ascending sort.", "method_name": "isTotallyOrdered", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["belowOrEqualTo", "other"]}], "class_name": "Decimal", "method_declar": "func isTotallyOrdered(belowOrEqualTo other: Decimal) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns the distance from this value to the specified value.", "method_name": "distance", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["to", "other"]}], "class_name": "Decimal", "method_declar": "func distance(to other: Decimal) -> Decimal", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Decima"]}, "is_static": false}, {"method_description": "Returns a new value advanced by the given distance.", "method_name": "advanced", "params": [{"param_type": "Decimal", "param_description": "", "param_name": ["by", "n"]}], "class_name": "Decimal", "method_declar": "func advanced(by n: Decimal) -> Decimal", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Decima"]}, "is_static": false}, {"method_description": "Compares two decimal values.", "method_name": "NSDecimalCompare", "params": [{"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["leftOperand"]}, {"param_type": "UnsafePointer<Decimal>", "param_description": "", "param_name": ["rightOperand"]}], "class_name": "Decimal", "method_declar": "func NSDecimalCompare(_ leftOperand: UnsafePointer<Decimal>, _ rightOperand: UnsafePointer<Decimal>) -> ComparisonResult", "return_value": {"return_description": ["NSOrderedDescending if leftOperand is bigger than rightOperand; NSOrderedAscending if rightOperand is bigger than leftOperand; or NSOrderedSame if the two operands are equal."], "return_name": [""], "return_type": ["ComparisonResul"]}, "is_static": false}, {"method_description": "Encodes this decimal value into the given encoder.", "method_name": "encode", "params": [{"param_type": "Encoder", "param_description": "", "param_name": ["to", "encoder"]}], "class_name": "Decimal", "method_declar": "func encode(to encoder: Encoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new decimal value by decoding from the given decoder.", "method_name": "init", "params": [{"param_type": "Decoder", "param_description": "", "param_name": ["from", "decoder"]}], "class_name": "Decimal", "method_declar": "init(from decoder: Decoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": [], "class_name": "Decimal", "typealias": ["typealias RoundingMode = NSDecimalNumber.RoundingMode", "typealias CalculationError = NSDecimalNumber.CalculationError"], "Vars": [{"var_description": "The sign of the decimal.", "var_type": "FloatingPointSign", "is_static": false, "var_name": "sign"}, {"var_description": "The exponent of the decimal.", "var_type": "Int", "is_static": false, "var_name": "exponent"}, {"var_description": "The significand of the decimal.", "var_type": "Decimal", "is_static": false, "var_name": "significand"}, {"var_description": "The magnitude of this decimal.", "var_type": "Decimal", "is_static": false, "var_name": "magnitude"}, {"var_description": "The IEEE 754 class of this type.", "var_type": "FloatingPointClassification", "is_static": false, "var_name": "floatingPointClass"}, {"var_description": "A Boolean value indicating whether the representation of this decimal is canonical.", "var_type": "Bool", "is_static": false, "var_name": "isCanonical"}, {"var_description": "A Boolean value indicating whether this decimal is zero, subnormal, or normal (not infinity or NaN).", "var_type": "Bool", "is_static": false, "var_name": "isFinite"}, {"var_description": "A Boolean value indicating whether this decimal is infinity.", "var_type": "Bool", "is_static": false, "var_name": "isInfinite"}, {"var_description": "A Boolean value indicating whether this decimal is NaN.", "var_type": "Bool", "is_static": false, "var_name": "isNaN"}, {"var_description": "A Boolean value indicating whether this decimal is normal (not zero, subnormal, infinity, or NaN).", "var_type": "Bool", "is_static": false, "var_name": "isNormal"}, {"var_description": "A Boolean value indicating whether this decimal has a negative sign.", "var_type": "Bool", "is_static": false, "var_name": "isSignMinus"}, {"var_description": "A Boolean value indicating whether this decimal is a signaling NaN.", "var_type": "Bool", "is_static": false, "var_name": "isSignaling"}, {"var_description": "A Boolean value indicating whether this decimal is a signaling NaN.", "var_type": "Bool", "is_static": false, "var_name": "isSignalingNaN"}, {"var_description": "A Boolean value indicating whether this decimal is subnormal.", "var_type": "Bool", "is_static": false, "var_name": "isSubnormal"}, {"var_description": "A Boolean value indicating whether this value is zero.", "var_type": "Bool", "is_static": false, "var_name": "isZero"}, {"var_description": "The greatest representable value that is less than this decimal.", "var_type": "Decimal", "is_static": false, "var_name": "nextDown"}, {"var_description": "The least representable value that is greater than this decimal.", "var_type": "Decimal", "is_static": false, "var_name": "nextUp"}, {"var_description": "The unit in the last place of the decimal.", "var_type": "Decimal", "is_static": false, "var_name": "ulp"}, {"var_description": "The decimal that contains the largest possible non-infinite magnitude for the underlying representation.", "var_type": "Decimal", "is_static": false, "var_name": "greatestFiniteMagnitude"}, {"var_description": "The decimal that contains the smallest possible non-infinite magnitude for the underlying representation.", "var_type": "Decimal", "is_static": false, "var_name": "leastFiniteMagnitude"}, {"var_description": "The decimal value that represents the smallest possible non-zero value for the underlying representation.", "var_type": "Decimal", "is_static": false, "var_name": "leastNonzeroMagnitude"}, {"var_description": "The decimal value that represents the smallest possible normal magnitude for the underlying representation.", "var_type": "Decimal", "is_static": false, "var_name": "leastNormalMagnitude"}, {"var_description": "The mathematical constant pi.", "var_type": "Decimal", "is_static": false, "var_name": "pi"}, {"var_description": "The value that represents \"not a number.\"", "var_type": "Decimal", "is_static": false, "var_name": "nan"}, {"var_description": "A quiet representation of not-a-number.", "var_type": "Decimal", "is_static": false, "var_name": "quietNaN"}, {"var_description": "The radix used by decimal numbers.", "var_type": "Int", "is_static": false, "var_name": "radix"}, {"var_description": "The maximum size of Decimal.", "var_type": "Int32", "is_static": false, "var_name": "NSDecimalMaxSize"}, {"var_description": "Specifies that the number of digits allowed after the decimal separator in a decimal number should not be limited.", "var_type": "Int32", "is_static": false, "var_name": "NSDecimalNoScale"}, {"var_description": "A textual description of the decimal.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "The computed hash value for the decimal.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}], "class_type": "struct", "interface_list": ["Comparable", "CustomStringConvertible", "Decodable", "Encodable", "ExpressibleByFloatLiteral", "ExpressibleByIntegerLiteral", "Hashable", "SignedNumeric", "Strideable"], "package_name": "foundation", "subclass_list": []}