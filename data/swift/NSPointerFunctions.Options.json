{"class_description": "When specifying a value, you can use only one of the options listed in Memory Options,  only one of the options listed in Personality Options, and any number of other options. \n", "Methods": [{"method_description": "", "method_name": "init", "params": [{"param_type": "UInt", "param_description": "", "param_name": ["rawValue"]}], "class_name": "NSPointerFunctions.Options", "method_declar": "init(rawValue: UInt)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": [], "class_name": "NSPointerFunctions.Options", "typealias": [], "Vars": [{"var_description": "Use Mach memory.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "machVirtualMemory"}, {"var_description": "Use free() on removal, calloc() on copy in.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "mallocMemory"}, {"var_description": "Take no action when pointers are deleted.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "opaqueMemory"}, {"var_description": "Use strong write-barriers to backing store; use garbage-collected memory on copy-in.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "strongMemory"}, {"var_description": "Uses weak read and write barriers appropriate for ARC or GC. Using NSPointerFunctionsWeakMemory object references will turn to NULL on last release.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "weakMemory"}, {"var_description": "Equivalent to strongMemory.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "NSMapTableStrongMemory"}, {"var_description": "Equivalent to weakMemory.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "NSMapTableWeakMemory"}, {"var_description": "Use a string hash and strcmp; C-string '%s' style description.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "cStringPersonality"}, {"var_description": "Use unshifted value as hash and equality.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "integerPersonality"}, {"var_description": "Use hash and isEqual methods for hashing and equality comparisons, use the description method for a description.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "objectPersonality"}, {"var_description": "Use shifted pointer for the hash value and direct comparison to determine equality; use the description method for a description.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "objectPointerPersonality"}, {"var_description": "Use shifted pointer for the hash value and direct comparison to determine equality.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "opaquePersonality"}, {"var_description": "Use a memory hash and memcmp (using a size function that you must set\u2014see sizeFunction).", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "structPersonality"}, {"var_description": "Equivalent to objectPointerPersonality.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "NSMapTableObjectPointerPersonality"}, {"var_description": "Use the memory acquire function to allocate and copy items on input (see acquireFunction).", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "copyIn"}, {"var_description": "Equivalent to copyIn.", "var_type": "NSPointerFunctions.Options", "is_static": false, "var_name": "NSMapTableCopyIn"}], "class_type": "struct", "interface_list": ["OptionSet"], "package_name": "foundation", "subclass_list": []}