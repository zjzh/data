{"subclass_list": ["AVAssetDownloadDelegate", "URLSessionDataDelegate", "URLSessionDownloadDelegate", "URLSessionStreamDelegate"], "typealias": [], "class_inherit_list": ["URLSessionDelegate"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the delegate that the task finished transferring data.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionTaskDelegate", "method_declar": "optional func urlSession(_ session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?)", "params": [{"param_type": "URLSession", "param_description": "The session containing the task whose request finished transferring data.", "param_name": ["session"]}, {"param_type": "URLSessionTask", "param_description": "The task whose request finished transferring data.", "param_name": ["task"]}, {"param_type": "Error", "param_description": "If an error occurred, an error object indicating how the transfer failed, otherwise NULL.", "param_name": ["didCompleteWithError", "error"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Tells the delegate that the remote server requested an HTTP redirect.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionTaskDelegate", "method_declar": "optional func urlSession(_ session: URLSession, task: URLSessionTask, willPerformHTTPRedirection response: HTTPURLResponse, newRequest request: URLRequest, completionHandler: @escaping (URLRequest?) -> Void)", "params": [{"param_type": "URLSession", "param_description": "The session containing the task whose request resulted in a redirect.", "param_name": ["session"]}, {"param_type": "URLSessionTask", "param_description": "The task whose request resulted in a redirect.", "param_name": ["task"]}, {"param_type": "HTTPURLResponse", "param_description": "An object containing the server\u2019s response to the original request.", "param_name": ["willPerformHTTPRedirection", "response"]}, {"param_type": "URLRequest", "param_description": "A URL request object filled out with the new location.", "param_name": ["newRequest", "request"]}, {"param_type": "@escaping (URLRequest) -> Void", "param_description": "A block that your handler should call with either the value of the request parameter, a modified URL request object, or NULL to refuse the redirect and return the body of the redirect response.", "param_name": ["completionHandler"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Periodically informs the delegate of the progress of sending body content to the server.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionTaskDelegate", "method_declar": "optional func urlSession(_ session: URLSession, task: URLSessionTask, didSendBodyData bytesSent: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)", "params": [{"param_type": "URLSession", "param_description": "The session containing the data task.", "param_name": ["session"]}, {"param_type": "URLSessionTask", "param_description": "The data task.", "param_name": ["task"]}, {"param_type": "Int64", "param_description": "The number of bytes sent since the last time this delegate method was called.", "param_name": ["didSendBodyData", "bytesSent"]}, {"param_type": "Int64", "param_description": "The total number of bytes sent so far.", "param_name": ["totalBytesSent"]}, {"param_type": "Int64", "param_description": "The expected length of the body data. The URL loading system can determine the length of the upload data in three ways:From the length of the NSData object provided as the upload body.From the length of the file on disk provided as the upload body of an upload task (not a download task).From the Content-Length in the request object, if you explicitly set it.Otherwise, the value is NSURLSessionTransferSizeUnknown (-1) if you provided a stream or body data object, or zero (0) if you did not.", "param_name": ["totalBytesExpectedToSend"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Tells the delegate when a task requires a new request body stream to send to the remote server.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionTaskDelegate", "method_declar": "optional func urlSession(_ session: URLSession, task: URLSessionTask, needNewBodyStream completionHandler: @escaping (InputStream?) -> Void)", "params": [{"param_type": "URLSession", "param_description": "The session containing the task that needs a new body stream.", "param_name": ["session"]}, {"param_type": "URLSessionTask", "param_description": "The task that needs a new body stream.", "param_name": ["task"]}, {"param_type": "@escaping (InputStream) -> Void", "param_description": "A completion handler that your delegate method should call with the new body stream.", "param_name": ["needNewBodyStream", "completionHandler"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Requests credentials from the delegate in response to an authentication request from the remote server.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionTaskDelegate", "method_declar": "optional func urlSession(_ session: URLSession, task: URLSessionTask, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)", "params": [{"param_type": "URLSession", "param_description": "The session containing the task whose request requires authentication.", "param_name": ["session"]}, {"param_type": "URLSessionTask", "param_description": "The task whose request requires authentication.", "param_name": ["task"]}, {"param_type": "URLAuthenticationChallenge", "param_description": "An object that contains the request for authentication.", "param_name": ["didReceive", "challenge"]}, {"param_type": "@escaping (URLSession.AuthChallengeDisposition, URLCredential) -> Void", "param_description": "A handler that your delegate method must call. Its parameters are:disposition\u2014One of several constants that describes how the challenge should be handled.credential\u2014The credential that should be used for authentication if disposition is NSURLSessionAuthChallengeUseCredential; otherwise, NULL.", "param_name": ["completionHandler"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Tells the delegate that a delayed URL session task will now begin loading.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionTaskDelegate", "method_declar": "optional func urlSession(_ session: URLSession, task: URLSessionTask, willBeginDelayedRequest request: URLRequest, completionHandler: @escaping (URLSession.DelayedRequestDisposition, URLRequest?) -> Void)", "params": [{"param_type": "URLSession", "param_description": "The session containing the delayed request.", "param_name": ["session"]}, {"param_type": "URLSessionTask", "param_description": "The task handling the delayed request.", "param_name": ["task"]}, {"param_type": "URLRequest", "param_description": "The request that was delayed.", "param_name": ["willBeginDelayedRequest", "request"]}, {"param_type": "@escaping (URLSession.DelayedRequestDisposition, URLRequest) -> Void", "param_description": "A completion handler to perform the request. The completion handler takes two parameters: a disposition that tells the task how to proceed, and a new request object that is only used if the disposition is URLSession.DelayedRequestDisposition.useNewRequest.", "param_name": ["completionHandler"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the delegate that the task is waiting until suitable connectivity is available before beginning the network load. ", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionTaskDelegate", "method_declar": "optional func urlSession(_ session: URLSession, taskIsWaitingForConnectivity task: URLSessionTask)", "params": [{"param_type": "URLSession", "param_description": "The session that contains the waiting task.", "param_name": ["session"]}, {"param_type": "URLSessionTask", "param_description": "The task that is waiting for a change in connectivity.", "param_name": ["taskIsWaitingForConnectivity", "task"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the delegate that the session finished collecting metrics for the task.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionTaskDelegate", "method_declar": "optional func urlSession(_ session: URLSession, task: URLSessionTask, didFinishCollecting metrics: URLSessionTaskMetrics)", "params": [{"param_type": "URLSession", "param_description": "The session collecting the metrics.", "param_name": ["session"]}, {"param_type": "URLSessionTask", "param_description": "The task whose metrics have been collected.", "param_name": ["task"]}, {"param_type": "URLSessionTaskMetrics", "param_description": "The collected metrics.", "param_name": ["didFinishCollecting", "metrics"]}]}], "class_type": "protocol", "class_name": "URLSessionTaskDelegate", "Vars": [], "interface_list": [], "class_description": "If you\u2019re using download tasks, also implement the methods in the URLSessionDownloadDelegate protocol.\nIf you\u2019re using data or upload tasks, also implement the methods in the URLSessionDataDelegate protocol.\nNote\nYour URLSession object doesn\u2019t need to have a delegate. If no delegate is assigned, a system-provided delegate is used, and you must provide a completion callback to obtain the data.\n", "package_name": "foundation"}