{"subclass_list": [], "typealias": ["typealias URLRequest.CachePolicy = NSURLRequest.CachePolicy", "typealias URLRequest.NetworkServiceType = NSURLRequest.NetworkServiceType", "typealias MutableURLRequest = NSMutableURLRequest", "typealias URLRequest.ReferenceType = NSURLRequest"], "class_inherit_list": [], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Creates and initializes a URL request with the given URL, cache policy, and timeout interval.", "is_static": false, "method_name": "init", "class_name": "URLRequest", "method_declar": "init(url: URL, cachePolicy: URLRequest.CachePolicy = .useProtocolCachePolicy, timeoutInterval: TimeInterval = 60.0)", "params": [{"param_type": "URL", "param_description": "The URL for the request.", "param_name": ["url"]}, {"param_type": "URLRequest.CachePolicy", "param_description": "The cache policy for the request. The default is NSURLRequest.CachePolicy.useProtocolCachePolicy.", "param_name": ["cachePolicy"]}, {"param_type": "TimeInterval = 60.0", "param_description": "The timeout interval for the request. The default is 60.0. See the commentary for the timeoutInterval for more information on timeout intervals.", "param_name": ["timeoutInterval"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Adds one value to the header field.", "is_static": false, "method_name": "addValue", "class_name": "URLRequest", "method_declar": "mutating func addValue(_ value: String, forHTTPHeaderField field: String)", "params": [{"param_type": "String", "param_description": "The value for the header field.", "param_name": ["value"]}, {"param_type": "String", "param_description": "The name of the header field. In keeping with the HTTP RFC, HTTP header field names are case-insensitive.", "param_name": ["forHTTPHeaderField", "field"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets a value for a header field.", "is_static": false, "method_name": "setValue", "class_name": "URLRequest", "method_declar": "mutating func setValue(_ value: String?, forHTTPHeaderField field: String)", "params": [{"param_type": "String", "param_description": "The new value for the header field. Any existing value for the field is replaced by the new value.", "param_name": ["value"]}, {"param_type": "String", "param_description": "The name of the header field to set. In keeping with the HTTP RFC, HTTP header field names are case-insensitive.", "param_name": ["forHTTPHeaderField", "field"]}]}, {"return_value": {"return_name": [""], "return_description": ["The value associated with the header field field,  or nil if there is no corresponding header field."], "return_type": ["Strin"]}, "method_description": "Retrieves a header value.", "is_static": false, "method_name": "value", "class_name": "URLRequest", "method_declar": "func value(forHTTPHeaderField field: String) -> String?", "params": [{"param_type": "String", "param_description": "The header field name to use for the lookup (case-insensitive).", "param_name": ["forHTTPHeaderField", "field"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "is_static": true, "method_name": "!=", "class_name": "URLRequest", "method_declar": "static func != (lhs: URLRequest, rhs: URLRequest) -> Bool", "params": [{"param_type": "URLRequest", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "URLRequest", "param_description": "Another value to compare.", "param_name": ["rhs"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_description": "Indicates whether two URL requests are the same.", "is_static": true, "method_name": "==", "class_name": "URLRequest", "method_declar": "static func == (lhs: URLRequest, rhs: URLRequest) -> Bool", "params": [{"param_type": "URLRequest", "param_description": "", "param_name": ["lhs"]}, {"param_type": "URLRequest", "param_description": "", "param_name": ["rhs"]}]}], "class_type": "struct", "class_name": "URLRequest", "Vars": [{"var_name": "cachePolicy", "var_type": "URLRequest.CachePolicy", "var_description": "The request\u2019s cache policy.", "is_static": false}, {"var_name": "httpMethod", "var_type": "String", "var_description": "The HTTP request method.", "is_static": false}, {"var_name": "url", "var_type": "URL", "var_description": "The URL of the request.", "is_static": false}, {"var_name": "httpBody", "var_type": "Data", "var_description": "The data sent as the message body of a request, such as for an HTTP POST request.", "is_static": false}, {"var_name": "httpBodyStream", "var_type": "InputStream", "var_description": "The stream used to deliver the HTTP body.", "is_static": false}, {"var_name": "mainDocumentURL", "var_type": "URL", "var_description": "The main document URL associated with this request.", "is_static": false}, {"var_name": "allHTTPHeaderFields", "var_type": "[String", "var_description": "A dictionary containing all the request\u2019s HTTP header fields.", "is_static": false}, {"var_name": "timeoutInterval", "var_type": "TimeInterval", "var_description": "The timeout interval of the request.", "is_static": false}, {"var_name": "httpShouldHandleCookies", "var_type": "Bool", "var_description": "A Boolean value indicating whether cookies will be sent with and set for this request.", "is_static": false}, {"var_name": "httpShouldUsePipelining", "var_type": "Bool", "var_description": "A Boolean value indicating whether the request should transmit before the previous response is received.", "is_static": false}, {"var_name": "allowsCellularAccess", "var_type": "Bool", "var_description": "A Boolean value indicating whether the request is allowed to use the built-in cellular radios to satisfy the request.", "is_static": false}, {"var_name": "networkServiceType", "var_type": "URLRequest.NetworkServiceType", "var_description": "The service type associated with this request.", "is_static": false}, {"var_name": "description", "var_type": "String", "var_description": "A textual description of the request.", "is_static": false}, {"var_name": "debugDescription", "var_type": "String", "var_description": "A textual description of the request suitable for debugging.", "is_static": false}, {"var_name": "customMirror", "var_type": "Mirror", "var_description": "A mirror that reflects the request.", "is_static": false}, {"var_name": "hashValue", "var_type": "Int", "var_description": "The computed hash value for the request.", "is_static": false}], "interface_list": ["CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "Hashable", "ReferenceConvertible"], "class_description": "URLRequest encapsulates two basic data elements of a load request: the URL to load, and the policy to use when consulting the URL content cache made available by the implementation.\nImportant\nThis type serves only to encapsulate information about a URL request. You must use other classes such as URLSession to send these requests to a server. See Fetching Website Data into Memory and Uploading Data to a Website for an introduction to these techniques.\n\n\n\n", "package_name": "foundation"}