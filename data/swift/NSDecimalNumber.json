{"class_description": "NSDecimalNumber, an immutable subclass of NSNumber, provides an object-oriented wrapper for doing base-10 arithmetic. An instance can represent any number that can be expressed as mantissa x 10^exponent where mantissa is a decimal integer up to 38 digits long, and exponent is an integer from \u2013128 through 127.\nImportant\nThe Swift overlay to the Foundation framework provides the Decimal structure, which bridges to the NSDecimalNumber class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "Methods": [{"method_description": "Initializes a decimal number to represent a given decimal.", "method_name": "init", "params": [{"param_type": "Decimal", "param_description": "The value of the new object.", "param_name": ["decimal", "dcm"]}], "class_name": "NSDecimalNumber", "method_declar": "init(decimal dcm: Decimal)", "return_value": {"return_description": ["An NSDecimalNumber object initialized to represent decimal."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a decimal number using the given mantissa, exponent, and sign.", "method_name": "init", "params": [{"param_type": "UInt64", "param_description": "The mantissa for the new decimal number object.", "param_name": ["mantissa"]}, {"param_type": "Int16", "param_description": "The exponent for the new decimal number object.", "param_name": ["exponent"]}, {"param_type": "Bool", "param_description": "A Boolean value that specifies whether the sign of the number is negative.", "param_name": ["isNegative", "flag"]}], "class_name": "NSDecimalNumber", "method_declar": "convenience init(mantissa: UInt64, exponent: Int16, isNegative flag: Bool)", "return_value": {"return_description": ["An NSDecimalNumber object initialized using the given mantissa, exponent, and sign."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a decimal number so that its value is equivalent to that in a given numeric string.", "method_name": "init", "params": [{"param_type": "String", "param_description": "", "param_name": ["string", "numberValue"]}], "class_name": "NSDecimalNumber", "method_declar": "convenience init(string numberValue: String?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a decimal number so that its value is equivalent to that in a given numeric string, interpreted using a given locale.", "method_name": "init", "params": [{"param_type": "String", "param_description": "", "param_name": ["string", "numberValue"]}, {"param_type": "Any", "param_description": "A dictionary that defines the locale (specifically the decimalSeparator) to use to interpret the number in numericString. ", "param_name": ["locale"]}], "class_name": "NSDecimalNumber", "method_declar": "convenience init(string numberValue: String?, locale: Any?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds this number to another given number.", "method_name": "adding", "params": [{"param_type": "NSDecimalNumber", "param_description": "The number to add to the receiver.", "param_name": ["decimalNumber"]}], "class_name": "NSDecimalNumber", "method_declar": "func adding(_ decimalNumber: NSDecimalNumber) -> NSDecimalNumber", "return_value": {"return_description": ["A new NSDecimalNumber object whose value is the sum of the receiver and decimalNumber."], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Subtracts another given number from this one.", "method_name": "subtracting", "params": [{"param_type": "NSDecimalNumber", "param_description": "The number to subtract from the receiver.", "param_name": ["decimalNumber"]}], "class_name": "NSDecimalNumber", "method_declar": "func subtracting(_ decimalNumber: NSDecimalNumber) -> NSDecimalNumber", "return_value": {"return_description": ["A new NSDecimalNumber object whose value is decimalNumber subtracted from the receiver."], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Multiplies the number by another given number.", "method_name": "multiplying", "params": [{"param_type": "NSDecimalNumber", "param_description": "The number by which to multiply the receiver.", "param_name": ["by", "decimalNumber"]}], "class_name": "NSDecimalNumber", "method_declar": "func multiplying(by decimalNumber: NSDecimalNumber) -> NSDecimalNumber", "return_value": {"return_description": ["A new NSDecimalNumber object whose value is decimalNumber multiplied by the receiver."], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Divides the number by another given number.", "method_name": "dividing", "params": [{"param_type": "NSDecimalNumber", "param_description": "The number by which to divide the receiver.", "param_name": ["by", "decimalNumber"]}], "class_name": "NSDecimalNumber", "method_declar": "func dividing(by decimalNumber: NSDecimalNumber) -> NSDecimalNumber", "return_value": {"return_description": ["A new NSDecimalNumber object whose value is the value of the receiver divided by decimalNumber."], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Raises the number to a given power.", "method_name": "raising", "params": [{"param_type": "Int", "param_description": "The power to which to raise the receiver.", "param_name": ["toPower", "power"]}], "class_name": "NSDecimalNumber", "method_declar": "func raising(toPower power: Int) -> NSDecimalNumber", "return_value": {"return_description": ["A new NSDecimalNumber object whose value is the value of the receiver raised to the power power."], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Multiplies the number by 10 raised to the given power.", "method_name": "multiplying", "params": [{"param_type": "Int16", "param_description": "", "param_name": ["byPowerOf10", "power"]}], "class_name": "NSDecimalNumber", "method_declar": "func multiplying(byPowerOf10 power: Int16) -> NSDecimalNumber", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Adds this number to another given number using the specified behavior.", "method_name": "adding", "params": [{"param_type": "NSDecimalNumber", "param_description": "", "param_name": ["decimalNumber"]}, {"param_type": "NSDecimalNumberBehaviors", "param_description": "", "param_name": ["withBehavior", "behavior"]}], "class_name": "NSDecimalNumber", "method_declar": "func adding(_ decimalNumber: NSDecimalNumber, withBehavior behavior: NSDecimalNumberBehaviors?) -> NSDecimalNumber", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Subtracts this a given number from this one using the specified behavior.", "method_name": "subtracting", "params": [{"param_type": "NSDecimalNumber", "param_description": "", "param_name": ["decimalNumber"]}, {"param_type": "NSDecimalNumberBehaviors", "param_description": "", "param_name": ["withBehavior", "behavior"]}], "class_name": "NSDecimalNumber", "method_declar": "func subtracting(_ decimalNumber: NSDecimalNumber, withBehavior behavior: NSDecimalNumberBehaviors?) -> NSDecimalNumber", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Multiplies this number by another given number using the specified behavior.", "method_name": "multiplying", "params": [{"param_type": "NSDecimalNumber", "param_description": "", "param_name": ["by", "decimalNumber"]}, {"param_type": "NSDecimalNumberBehaviors", "param_description": "", "param_name": ["withBehavior", "behavior"]}], "class_name": "NSDecimalNumber", "method_declar": "func multiplying(by decimalNumber: NSDecimalNumber, withBehavior behavior: NSDecimalNumberBehaviors?) -> NSDecimalNumber", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Divides this number by another given number using the specified behavior.", "method_name": "dividing", "params": [{"param_type": "NSDecimalNumber", "param_description": "", "param_name": ["by", "decimalNumber"]}, {"param_type": "NSDecimalNumberBehaviors", "param_description": "", "param_name": ["withBehavior", "behavior"]}], "class_name": "NSDecimalNumber", "method_declar": "func dividing(by decimalNumber: NSDecimalNumber, withBehavior behavior: NSDecimalNumberBehaviors?) -> NSDecimalNumber", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Raises the number to a given power using the specified behavior.", "method_name": "raising", "params": [{"param_type": "Int", "param_description": "", "param_name": ["toPower", "power"]}, {"param_type": "NSDecimalNumberBehaviors", "param_description": "", "param_name": ["withBehavior", "behavior"]}], "class_name": "NSDecimalNumber", "method_declar": "func raising(toPower power: Int, withBehavior behavior: NSDecimalNumberBehaviors?) -> NSDecimalNumber", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Multiplies the number by 10 raised to the given power using the specified behavior.", "method_name": "multiplying", "params": [{"param_type": "Int16", "param_description": "", "param_name": ["byPowerOf10", "power"]}, {"param_type": "NSDecimalNumberBehaviors", "param_description": "", "param_name": ["withBehavior", "behavior"]}], "class_name": "NSDecimalNumber", "method_declar": "func multiplying(byPowerOf10 power: Int16, withBehavior behavior: NSDecimalNumberBehaviors?) -> NSDecimalNumber", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Returns a rounded version of the decimal number using the specified rounding behavior.", "method_name": "rounding", "params": [{"param_type": "NSDecimalNumberBehaviors", "param_description": "", "param_name": ["accordingToBehavior", "behavior"]}], "class_name": "NSDecimalNumber", "method_declar": "func rounding(accordingToBehavior behavior: NSDecimalNumberBehaviors?) -> NSDecimalNumber", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDecimalNumbe"]}, "is_static": false}, {"method_description": "Returns a string representation of the decimal number appropriate for the specified locale.", "method_name": "description", "params": [{"param_type": "Any", "param_description": "Either an instance of NSLocale or a dictionary with a string value corresponding to the decimalSeparator key. ", "param_name": ["withLocale", "locale"]}], "class_name": "NSDecimalNumber", "method_declar": "func description(withLocale locale: Any?) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Compares this decimal number and another.", "method_name": "compare", "params": [{"param_type": "NSNumber", "param_description": "The number with which to compare the receiver.This value must not be nil. If this value is nil, the behavior is undefined and may change in future versions of macOS.", "param_name": ["decimalNumber"]}], "class_name": "NSDecimalNumber", "method_declar": "func compare(_ decimalNumber: NSNumber) -> ComparisonResult", "return_value": {"return_description": ["NSOrderedAscending if the value of decimalNumber is greater than the receiver; NSOrderedSame if they\u2019re equal; and NSOrderedDescending if the value of decimalNumber is less than the receiver."], "return_name": [""], "return_type": ["ComparisonResul"]}, "is_static": false}], "class_inherit_list": ["NSNumber"], "class_name": "NSDecimalNumber", "typealias": [], "Vars": [{"var_description": "A decimal number equivalent to the number 1.0.", "var_type": "NSDecimalNumber", "is_static": false, "var_name": "one"}, {"var_description": "A decimal number equivalent to the number 0.0.", "var_type": "NSDecimalNumber", "is_static": false, "var_name": "zero"}, {"var_description": "A decimal number that specifies no number.", "var_type": "NSDecimalNumber", "is_static": false, "var_name": "notANumber"}, {"var_description": "The way arithmetic methods round off and handle error conditions.", "var_type": "NSDecimalNumberBehaviors", "is_static": false, "var_name": "defaultBehavior"}, {"var_description": "The decimal number\u2019s value, expressed as an Decimal structure.", "var_type": "Decimal", "is_static": false, "var_name": "decimalValue"}, {"var_description": "The decimal number\u2019s closest approximate double value.", "var_type": "Double", "is_static": false, "var_name": "doubleValue"}, {"var_description": "A C string containing the Objective-C type for the data contained in the decimal number object.", "var_type": "UnsafePointer<Int8>", "is_static": false, "var_name": "objCType"}, {"var_description": "Returns the largest possible value of a decimal number.", "var_type": "NSDecimalNumber", "is_static": false, "var_name": "maximum"}, {"var_description": "Returns the smallest possible value of a decimal number.", "var_type": "NSDecimalNumber", "is_static": false, "var_name": "minimum"}, {"var_description": "The exception raised if there is an exactness error.", "var_type": "NSExceptionName", "is_static": false, "var_name": "decimalNumberExactnessException"}, {"var_description": "The exception raised on overflow.", "var_type": "NSExceptionName", "is_static": false, "var_name": "decimalNumberOverflowException"}, {"var_description": "The exception raised on underflow.", "var_type": "NSExceptionName", "is_static": false, "var_name": "decimalNumberUnderflowException"}, {"var_description": "The exception raised on divide by zero.", "var_type": "NSExceptionName", "is_static": false, "var_name": "decimalNumberDivideByZeroException"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "ExpressibleByBooleanLiteral", "ExpressibleByFloatLiteral", "ExpressibleByIntegerLiteral", "Hashable"], "package_name": "foundation", "subclass_list": []}