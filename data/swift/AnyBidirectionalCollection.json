{"Methods": [{"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "AnyBidirectionalCollection<Element>", "param_name": ["other"]}], "method_description": "Creates an AnyBidirectionalCollection having the same underlying collection as other.", "is_static": false, "method_name": "init", "method_declar": "init(_ other: AnyBidirectionalCollection<Element>)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "AnyRandomAccessCollection<Element>", "param_name": ["other"]}], "method_description": "Creates an AnyBidirectionalCollection having the same underlying collection as other.", "is_static": false, "method_name": "init", "method_declar": "init(_ other: AnyRandomAccessCollection<Element>)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "AnyCollection<Element>", "param_name": ["other"]}], "method_description": "Creates an AnyBidirectionalCollection having the same underlying collection as other.", "is_static": false, "method_name": "init", "method_declar": "init?(_ other: AnyCollection<Element>)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The collection to wrap.", "param_type": "BidirectionalCollection", "param_name": ["base"]}], "method_description": "Creates a type-erased collection that wraps the given collection.", "is_static": false, "method_name": "init", "method_declar": "init<C>(_ base: C) where Element == C.Element, C : BidirectionalCollection"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The collection to wrap.", "param_type": "RandomAccessCollection", "param_name": ["base"]}], "method_description": "Creates a type-erased collection that wraps the given collection.", "is_static": false, "method_name": "init", "method_declar": "init<C>(_ base: C) where Element == C.Element, C : RandomAccessCollection"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if the sequence contains only elements that satisfy predicate; otherwise, false."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.", "param_type": "(Element) throws -> Bool", "param_name": ["predicate"]}], "method_description": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.", "is_static": false, "method_name": "allSatisfy", "method_declar": "func allSatisfy(_ predicate: (Element) throws -> Bool) rethrows -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["[ElementOfResult]"], "return_description": ["An array of the non-nil results of calling transform with each element of the sequence."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_type": "(Element) throws -> ElementOfResult", "param_name": ["transform"]}], "method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "is_static": false, "method_name": "compactMap", "method_declar": "func compactMap<ElementOfResult>(_ transform: (Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if the element was found in the sequence; otherwise, false."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The element to find in the sequence.", "param_type": "Element", "param_name": ["element"]}], "method_description": "Returns a Boolean value indicating whether the sequence contains the given element.", "is_static": false, "method_name": "contains", "method_declar": "func contains(_ element: Element) -> Bool"}, {"return_value": {"return_name": [""], "return_type": [""], "return_description": ["true if the sequence contains an element that satisfies predicate; otherwise, false."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Element) throws -> Bool", "param_name": ["where", "predicate"]}], "method_description": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.", "is_static": false, "method_name": "contains", "method_declar": "func contains(where predicate: (Element) throws -> Bool) rethrows -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Int"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "AnyBidirectionalCollection<Element>.Index", "param_name": ["from", "start"]}, {"param_description": "", "param_type": "AnyBidirectionalCollection<Element>.Index", "param_name": ["to", "end"]}], "method_description": "", "is_static": false, "method_name": "distance", "method_declar": "func distance(from start: AnyBidirectionalCollection<Element>.Index, to end: AnyBidirectionalCollection<Element>.Index) -> Int"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "(Element) throws -> Bool", "param_name": ["while", "predicate"]}], "method_description": "", "is_static": false, "method_name": "drop", "method_declar": "func drop(while predicate: (Element) throws -> Bool) rethrows -> AnyBidirectionalCollection<Element>"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "Int = 1", "param_name": ["n"]}], "method_description": "", "is_static": false, "method_name": "dropFirst", "method_declar": "func dropFirst(_ n: Int = 1) -> AnyBidirectionalCollection<Element>"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "Int = 1", "param_name": ["n"]}], "method_description": "", "is_static": false, "method_name": "dropLast", "method_declar": "func dropLast(_ n: Int = 1) -> AnyBidirectionalCollection<Element>"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if this sequence and other contain the same elements in the same order."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}], "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "is_static": false, "method_name": "elementsEqual", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Element, OtherSequence.Element) throws -> Bool", "param_name": ["by", "areEquivalent"]}], "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.", "is_static": false, "method_name": "elementsEqual", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence, by areEquivalent: (Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence"}, {"return_value": {"return_name": [""], "return_type": ["EnumeratedSequence<AnyBidirectionalCollection<Element>>"], "return_description": ["A sequence of pairs enumerating the sequence."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "is_static": false, "method_name": "enumerated", "method_declar": "func enumerated() -> EnumeratedSequence<AnyBidirectionalCollection<Element>>"}, {"return_value": {"return_name": [""], "return_type": ["[Element]"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "(Element) throws -> Bool", "param_name": ["isIncluded"]}], "method_description": "", "is_static": false, "method_name": "filter", "method_declar": "func filter(_ isIncluded: (Element) throws -> Bool) rethrows -> [Element]"}, {"return_value": {"return_name": [""], "return_type": [""], "return_description": ["The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_type": "(Element) throws -> Bool", "param_name": ["where", "predicate"]}], "method_description": "Returns the first element of the sequence that satisfies the given predicate.", "is_static": false, "method_name": "first", "method_declar": "func first(where predicate: (Element) throws -> Bool) rethrows -> Element?"}, {"return_value": {"return_name": [""], "return_type": ["AnyIndex"], "return_description": ["The first index where element is found. If element is not found in the collection, returns nil."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "An element to search for in the collection.", "param_type": "Element", "param_name": ["of", "element"]}], "method_description": "Returns the first index where the specified value appears in the collection.", "is_static": false, "method_name": "firstIndex", "method_declar": "func firstIndex(of element: Element) -> AnyIndex?"}, {"return_value": {"return_name": [""], "return_type": [""], "return_description": ["The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Element) throws -> Bool", "param_name": ["where", "predicate"]}], "method_description": "Returns the first index in which an element of the collection satisfies the given predicate.", "is_static": false, "method_name": "firstIndex", "method_declar": "func firstIndex(where predicate: (Element) throws -> Bool) rethrows -> AnyIndex?"}, {"return_value": {"return_name": [""], "return_type": ["Void rethrows"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "(Element) throws -> Void", "param_name": ["body"]}], "method_description": "", "is_static": false, "method_name": "forEach", "method_declar": "func forEach(_ body: (Element) throws -> Void) rethrows"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "inout AnyBidirectionalCollection<Element>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "n"]}], "method_description": "", "is_static": false, "method_name": "formIndex", "method_declar": "func formIndex(_ i: inout AnyBidirectionalCollection<Element>.Index, offsetBy n: Int)"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "inout AnyBidirectionalCollection<Element>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "n"]}, {"param_description": "", "param_type": "AnyBidirectionalCollection<Element>.Index", "param_name": ["limitedBy", "limit"]}], "method_description": "", "is_static": false, "method_name": "formIndex", "method_declar": "func formIndex(_ i: inout AnyBidirectionalCollection<Element>.Index, offsetBy n: Int, limitedBy limit: AnyBidirectionalCollection<Element>.Index) -> Bool"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "inout AnyBidirectionalCollection<Element>.Index", "param_name": ["after", "i"]}], "method_description": "", "is_static": false, "method_name": "formIndex", "method_declar": "func formIndex(after i: inout AnyBidirectionalCollection<Element>.Index)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "inout AnyBidirectionalCollection<Element>.Index", "param_name": ["before", "i"]}], "method_description": "", "is_static": false, "method_name": "formIndex", "method_declar": "func formIndex(before i: inout AnyBidirectionalCollection<Element>.Index)"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>.Index"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "AnyBidirectionalCollection<Element>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "n"]}], "method_description": "", "is_static": false, "method_name": "index", "method_declar": "func index(_ i: AnyBidirectionalCollection<Element>.Index, offsetBy n: Int) -> AnyBidirectionalCollection<Element>.Index"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>.Index"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "AnyBidirectionalCollection<Element>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "n"]}, {"param_description": "", "param_type": "AnyBidirectionalCollection<Element>.Index", "param_name": ["limitedBy", "limit"]}], "method_description": "", "is_static": false, "method_name": "index", "method_declar": "func index(_ i: AnyBidirectionalCollection<Element>.Index, offsetBy n: Int, limitedBy limit: AnyBidirectionalCollection<Element>.Index) -> AnyBidirectionalCollection<Element>.Index?"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>.Index"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "AnyBidirectionalCollection<Element>.Index", "param_name": ["after", "i"]}], "method_description": "", "is_static": false, "method_name": "index", "method_declar": "func index(after i: AnyBidirectionalCollection<Element>.Index) -> AnyBidirectionalCollection<Element>.Index"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>.Index"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "AnyBidirectionalCollection<Element>.Index", "param_name": ["before", "i"]}], "method_description": "", "is_static": false, "method_name": "index", "method_declar": "func index(before i: AnyBidirectionalCollection<Element>.Index) -> AnyBidirectionalCollection<Element>.Index"}, {"return_value": {"return_name": [""], "return_type": ["FlattenSequence<AnyBidirectionalCollection<Element>>"], "return_description": ["A flattened view of the elements of this sequence of sequences."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Returns the elements of this sequence of sequences, concatenated.", "is_static": false, "method_name": "joined", "method_declar": "func joined() -> FlattenSequence<AnyBidirectionalCollection<Element>>"}, {"return_value": {"return_name": [""], "return_type": ["JoinedSequence<AnyBidirectionalCollection<Element>>"], "return_description": ["The joined sequence of elements."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A sequence to insert between each of this sequence\u2019s elements.", "param_type": "Sequence", "param_name": ["separator"]}], "method_description": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.", "is_static": false, "method_name": "joined", "method_declar": "func joined<Separator>(separator: Separator) -> JoinedSequence<AnyBidirectionalCollection<Element>> where Separator : Sequence, Separator.Element == Self.Element.Element"}, {"return_value": {"return_name": [""], "return_type": ["String"], "return_description": ["A single, concatenated string."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_type": "String = \"\"", "param_name": ["separator"]}], "method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "is_static": false, "method_name": "joined", "method_declar": "func joined(separator: String = \"\") -> String"}, {"return_value": {"return_name": [""], "return_type": ["String"], "return_description": ["A single, concatenated string."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_type": "String = \"\"", "param_name": ["separator"]}], "method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "is_static": false, "method_name": "joined", "method_declar": "func joined(separator: String = \"\") -> String"}, {"return_value": {"return_name": [""], "return_type": [""], "return_description": ["The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_type": "(Element) throws -> Bool", "param_name": ["where", "predicate"]}], "method_description": "Returns the last element of the sequence that satisfies the given predicate.", "is_static": false, "method_name": "last", "method_declar": "func last(where predicate: (Element) throws -> Bool) rethrows -> Element?"}, {"return_value": {"return_name": [""], "return_type": ["AnyIndex"], "return_description": ["The last index where element is found. If element is not found in the collection, this method returns nil."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "An element to search for in the collection.", "param_type": "Element", "param_name": ["of", "element"]}], "method_description": "Returns the last index where the specified value appears in the collection.", "is_static": false, "method_name": "lastIndex", "method_declar": "func lastIndex(of element: Element) -> AnyIndex?"}, {"return_value": {"return_name": [""], "return_type": [""], "return_description": ["The index of the last element in the collection that matches predicate, or nil if no elements match."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Element) throws -> Bool", "param_name": ["where", "predicate"]}], "method_description": "Returns the index of the last element in the collection that matches the given predicate.", "is_static": false, "method_name": "lastIndex", "method_declar": "func lastIndex(where predicate: (Element) throws -> Bool) rethrows -> AnyIndex?"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}], "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "is_static": false, "method_name": "lexicographicallyPrecedes", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Element, Element) throws -> Bool", "param_name": ["by", "areInIncreasingOrder"]}], "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.", "is_static": false, "method_name": "lexicographicallyPrecedes", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence, by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>.Iterator"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Returns an iterator over the elements of this collection.", "is_static": false, "method_name": "makeIterator", "method_declar": "func makeIterator() -> AnyBidirectionalCollection<Element>.Iterator"}, {"return_value": {"return_name": [""], "return_type": ["[T]"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "(Element) throws -> T", "param_name": ["transform"]}], "method_description": "", "is_static": false, "method_name": "map", "method_declar": "func map<T>(_ transform: (Element) throws -> T) rethrows -> [T]"}, {"return_value": {"return_name": [""], "return_type": ["[T]"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "(Element) throws -> T", "param_name": ["transform"]}], "method_description": "", "is_static": false, "method_name": "map", "method_declar": "func map<T>(_ transform: (Element) throws -> T) rethrows -> [T]"}, {"return_value": {"return_name": [""], "return_type": ["[T]"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "(Element) throws -> T", "param_name": ["transform"]}], "method_description": "", "is_static": false, "method_name": "map", "method_declar": "func map<T>(_ transform: (Element) throws -> T) rethrows -> [T]"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Returns the maximum element in the sequence.", "is_static": false, "method_name": "max", "method_declar": "@warn_unqualified_access func max() -> Element?"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["The sequence\u2019s maximum element if the sequence is not empty; otherwise, nil."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Element, Element) throws -> Bool", "param_name": ["by", "areInIncreasingOrder"]}], "method_description": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements.", "is_static": false, "method_name": "max", "method_declar": "@warn_unqualified_access func max(by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows -> Element?"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Returns the minimum element in the sequence.", "is_static": false, "method_name": "min", "method_declar": "@warn_unqualified_access func min() -> Element?"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["The sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Element, Element) throws -> Bool", "param_name": ["by", "areInIncreasingOrder"]}], "method_description": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements.", "is_static": false, "method_name": "min", "method_declar": "@warn_unqualified_access func min(by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows -> Element?"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["The first element of the collection if the collection is not empty; otherwise, nil."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Removes and returns the first element of the collection.", "is_static": false, "method_name": "popFirst", "method_declar": "mutating func popFirst() -> Element?"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["The last element of the collection if the collection has one or more elements; otherwise, nil."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Removes and returns the last element of the collection.", "is_static": false, "method_name": "popLast", "method_declar": "mutating func popLast() -> Element?"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "Int = 1", "param_name": ["maxLength"]}], "method_description": "", "is_static": false, "method_name": "prefix", "method_declar": "func prefix(_ maxLength: Int = 1) -> AnyBidirectionalCollection<Element>"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>"], "return_description": ["A subsequence up to, and including, the end position."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "AnyIndex", "param_name": ["through", "position"]}], "method_description": "Returns a subsequence from the start of the collection through the specified position.", "is_static": false, "method_name": "prefix", "method_declar": "func prefix(through position: AnyIndex) -> AnyBidirectionalCollection<Element>"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>"], "return_description": ["A subsequence up to, but not including, the end position."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The \u201cpast the end\u201d index of the resulting subsequence. end must be a valid index of the collection.", "param_type": "AnyIndex", "param_name": ["upTo", "end"]}], "method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "is_static": false, "method_name": "prefix", "method_declar": "func prefix(upTo end: AnyIndex) -> AnyBidirectionalCollection<Element>"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "(Element) throws -> Bool", "param_name": ["while", "predicate"]}], "method_description": "", "is_static": false, "method_name": "prefix", "method_declar": "func prefix(while predicate: (Element) throws -> Bool) rethrows -> AnyBidirectionalCollection<Element>"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["A random element from the collection. If the collection is empty, the method returns nil."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Returns a random element of the collection.", "is_static": false, "method_name": "randomElement", "method_declar": "func randomElement() -> Element?"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["A random element from the collection. If the collection is empty, the method returns nil."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The random number generator to use when choosing a random element.", "param_type": "inout T", "param_name": ["using", "generator"]}], "method_description": "Returns a random element of the collection, using the given generator as a source for randomness.", "is_static": false, "method_name": "randomElement", "method_declar": "func randomElement<T>(using generator: inout T) -> Element? where T : RandomNumberGenerator"}, {"return_value": {"return_name": [""], "return_type": ["Result"], "return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.", "param_type": "Result", "param_name": ["initialResult"]}, {"param_description": "A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.", "param_type": "(Result, Element) throws -> Result", "param_name": ["nextPartialResult"]}], "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "is_static": false, "method_name": "reduce", "method_declar": "func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, Element) throws -> Result) rethrows -> Result"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["The first element of the collection."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Removes and returns the first element of the collection.", "is_static": false, "method_name": "removeFirst", "method_declar": "@discardableResult mutating func removeFirst() -> Element"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.", "param_type": "Int", "param_name": ["k"]}], "method_description": "Removes the specified number of elements from the beginning of the collection.", "is_static": false, "method_name": "removeFirst", "method_declar": "mutating func removeFirst(_ k: Int)"}, {"return_value": {"return_name": [""], "return_type": ["Element"], "return_description": ["The last element of the collection."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Removes and returns the last element of the collection.", "is_static": false, "method_name": "removeLast", "method_declar": "@discardableResult mutating func removeLast() -> Element"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.", "param_type": "Int", "param_name": ["k"]}], "method_description": "Removes the given number of elements from the end of the collection.", "is_static": false, "method_name": "removeLast", "method_declar": "mutating func removeLast(_ k: Int)"}, {"return_value": {"return_name": [""], "return_type": ["ReversedCollection<AnyBidirectionalCollection<Element>>"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Returns a view presenting the elements of the collection in reverse order.", "is_static": false, "method_name": "reversed", "method_declar": "func reversed() -> ReversedCollection<AnyBidirectionalCollection<Element>>"}, {"return_value": {"return_name": [""], "return_type": ["[Element]"], "return_description": ["A shuffled array of this sequence\u2019s elements."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Returns the elements of the sequence, shuffled.", "is_static": false, "method_name": "shuffled", "method_declar": "func shuffled() -> [Element]"}, {"return_value": {"return_name": [""], "return_type": ["[Element]"], "return_description": ["An array of this sequence\u2019s elements in a shuffled order."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The random number generator to use when shuffling the sequence.", "param_type": "inout T", "param_name": ["using", "generator"]}], "method_description": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.", "is_static": false, "method_name": "shuffled", "method_declar": "func shuffled<T>(using generator: inout T) -> [Element] where T : RandomNumberGenerator"}, {"return_value": {"return_name": [""], "return_type": ["[Element]"], "return_description": ["A sorted array of the sequence\u2019s elements."]}, "class_name": "AnyBidirectionalCollection", "params": [], "method_description": "Returns the elements of the sequence, sorted.", "is_static": false, "method_name": "sorted", "method_declar": "func sorted() -> [Element]"}, {"return_value": {"return_name": [""], "return_type": ["[Element]"], "return_description": ["A sorted array of the sequence\u2019s elements."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Element, Element) throws -> Bool", "param_name": ["by", "areInIncreasingOrder"]}], "method_description": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.", "is_static": false, "method_name": "sorted", "method_declar": "func sorted(by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows -> [Element]"}, {"return_value": {"return_name": [""], "return_type": ["[AnyBidirectionalCollection<Element>]"], "return_description": ["An array of subsequences, split from this collection\u2019s elements."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The element that should be split upon.", "param_type": "Element", "param_name": ["separator"]}, {"param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.", "param_type": "Bool = true", "param_name": ["omittingEmptySubsequences"]}], "method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "is_static": false, "method_name": "split", "method_declar": "func split(separator: Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [AnyBidirectionalCollection<Element>]"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}], "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "is_static": false, "method_name": "starts", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix) -> Bool where PossiblePrefix : Sequence, Self.Element == PossiblePrefix.Element"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Element, PossiblePrefix.Element) throws -> Bool", "param_name": ["by", "areEquivalent"]}], "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.", "is_static": false, "method_name": "starts", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix, by areEquivalent: (Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool where PossiblePrefix : Sequence"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>"], "return_description": []}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "", "param_type": "Int", "param_name": ["maxLength"]}], "method_description": "", "is_static": false, "method_name": "suffix", "method_declar": "func suffix(_ maxLength: Int) -> AnyBidirectionalCollection<Element>"}, {"return_value": {"return_name": [""], "return_type": ["AnyBidirectionalCollection<Element>"], "return_description": ["A subsequence starting at the start position."]}, "class_name": "AnyBidirectionalCollection", "params": [{"param_description": "The index at which to start the resulting subsequence. start must be a valid index of the collection.", "param_type": "AnyIndex", "param_name": ["from", "start"]}], "method_description": "Returns a subsequence from the specified position to the end of the collection.", "is_static": false, "method_name": "suffix", "method_declar": "func suffix(from start: AnyIndex) -> AnyBidirectionalCollection<Element>"}], "Vars": [{"var_description": "The number of elements.", "is_static": false, "var_name": "count", "var_type": "Int"}, {"var_description": "The number of elements.", "is_static": false, "var_name": "count", "var_type": "Int"}, {"var_description": "The collection\u2019s \u201cpast the end\u201d position\u2014that is, the position one greater than the last valid subscript argument.", "is_static": false, "var_name": "endIndex", "var_type": "AnyBidirectionalCollection<Element>.Index"}, {"var_description": "The first element of the collection.", "is_static": false, "var_name": "first", "var_type": "Element"}, {"var_description": "The indices that are valid for subscripting the collection, in ascending order.", "is_static": false, "var_name": "indices", "var_type": "DefaultIndices<AnyBidirectionalCollection<Element>>"}, {"var_description": "A Boolean value indicating whether the collection is empty.", "is_static": false, "var_name": "isEmpty", "var_type": "Bool"}, {"var_description": "The last element of the collection.", "is_static": false, "var_name": "last", "var_type": "Element"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "is_static": false, "var_name": "lazy", "var_type": "LazySequence<AnyBidirectionalCollection<Element>>"}, {"var_description": "The position of the first element in a non-empty collection.", "is_static": false, "var_name": "startIndex", "var_type": "AnyBidirectionalCollection<Element>.Index"}, {"var_description": "", "is_static": false, "var_name": "underestimatedCount", "var_type": "Int"}, {"var_description": "", "is_static": false, "var_name": "underestimatedCount", "var_type": "Int"}, {"var_description": "", "is_static": false, "var_name": "underestimatedCount", "var_type": "Int"}], "class_name": "AnyBidirectionalCollection", "interface_list": ["BidirectionalCollection"], "class_description": "An AnyBidirectionalCollection instance forwards its operations to a base collection having the same Element type, hiding the specifics of the underlying collection.\n", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": ["typealias Index = AnyIndex", "typealias Indices = DefaultIndices<AnyBidirectionalCollection<Element>>", "typealias Iterator = AnyIterator<Element>", "typealias SubSequence = AnyBidirectionalCollection<Element>"]}