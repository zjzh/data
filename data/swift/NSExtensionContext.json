{"package_name": "foundation", "subclass_list": [], "class_description": "When a host app sends a request to an app extension, it provides an extension context. For many app extensions, the most important part of the context is the data the user wants to work with, which is contained in the inputItems property.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["withError", "error"], "param_type": "Error", "param_description": "The error object to return. It must be non-nil."}], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "cancelRequest", "method_description": "Tells the host app to cancel the app extension request, with a supplied error.", "method_declar": "func cancelRequest(withError error: Error)"}, {"params": [{"param_name": ["returningItems", "items"], "param_type": "[Any]", "param_description": "An array of result items, each an NSExtensionItem object, to return to the host app."}, {"param_name": ["completionHandler"], "param_type": "((Bool) -> Void) = nil", "param_description": "An optional block to be called when the request completes, performed as a background priority task.The block takes the following parameter:expiredA Boolean value that indicates whether the system is terminating a previous invocation of the completionHandler block.This parameter is true when the system prematurely terminates a completionHandler block that was previously invoked and had not otherwise expired.ImportantIf the system calls your block with an expired value of true, you must immediately suspend your app extension. If you fail to do this, the system terminates your extension\u2019s process.When your app extension exits, all concurrent requests being handled by the extension, serving the same or other host apps, are terminated."}], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void = nil"]}, "method_name": "completeRequest", "method_description": "Tells the host app to complete the app extension request with an array of result items.", "method_declar": "func completeRequest(returningItems items: [Any]?, completionHandler: ((Bool) -> Void)? = nil)"}, {"params": [{"param_name": ["URL"], "param_type": "URL", "param_description": "The URL to open."}, {"param_name": ["completionHandler"], "param_type": "((Bool) -> Void) = nil", "param_description": "A closure to be called when the URL has opened.The closure takes a single parameter, a Boolean value that indicates whether the open operation was successful."}], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void = nil"]}, "method_name": "open", "method_description": "Asks the system to open a URL on behalf of the currently running app extension.", "method_declar": "func open(_ URL: URL, completionHandler: ((Bool) -> Void)? = nil)"}, {"params": [{"param_name": ["for", "displayMode"], "param_type": "NCWidgetDisplayMode", "param_description": "The active display mode of the widget. For possible values, see ."}], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["CGSiz"]}, "method_name": "widgetMaximumSize", "method_description": "Returns the maximum size for the specified widget display mode.", "method_declar": "func widgetMaximumSize(for displayMode: NCWidgetDisplayMode) -> CGSize"}, {"params": [], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "mediaPlayingStarted", "method_description": "Tells the system that the Notification Content app extension began playing a media file.", "method_declar": "func mediaPlayingStarted()"}, {"params": [], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "mediaPlayingPaused", "method_description": "Tells the system that the Notification Content app extension stopped playing a media file. ", "method_declar": "func mediaPlayingPaused()"}, {"params": [], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Strin"]}, "method_name": "interfaceParametersDescription", "method_description": "Returns a human-readable string describing the data that SiriKit displays to the user when you handle an intent. ", "method_declar": "func interfaceParametersDescription() -> String"}, {"params": [{"param_name": ["withBroadcast", "broadcastURL"], "param_type": "URL", "param_description": ""}, {"param_name": ["broadcastConfiguration"], "param_type": "RPBroadcastConfiguration", "param_description": ""}, {"param_name": ["setupInfo"], "param_type": "[String", "param_description": ""}, {"param_name": ["[String"], "param_type": "NSCoding & NSObjectProtocol]", "param_description": ""}], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "completeRequest", "method_description": "", "method_declar": "func completeRequest(withBroadcast broadcastURL: URL, broadcastConfiguration: RPBroadcastConfiguration, setupInfo: [String : NSCoding & NSObjectProtocol]?)"}, {"params": [{"param_name": ["withBroadcast", "broadcastURL"], "param_type": "URL", "param_description": ""}, {"param_name": ["setupInfo"], "param_type": "[String", "param_description": ""}, {"param_name": ["[String"], "param_type": "NSCoding & NSObjectProtocol]", "param_description": ""}], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "completeRequest", "method_description": "", "method_declar": "func completeRequest(withBroadcast broadcastURL: URL, setupInfo: [String : NSCoding & NSObjectProtocol]?)"}, {"params": [], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "dismissNotificationContentExtension", "method_description": "", "method_declar": "func dismissNotificationContentExtension()"}, {"params": [{"param_name": ["completion", "handler"], "param_type": "@escaping (String, String, UIImage) -> Void", "param_description": ""}], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "loadBroadcastingApplicationInfo", "method_description": "", "method_declar": "func loadBroadcastingApplicationInfo(completion handler: @escaping (String, String, UIImage?) -> Void)"}, {"params": [], "class_name": "NSExtensionContext", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "performNotificationDefaultAction", "method_description": "", "method_declar": "func performNotificationDefaultAction()"}], "class_name": "NSExtensionContext", "Vars": [{"var_description": "The largest display mode the widget supports.", "var_type": "NCWidgetDisplayMode", "is_static": false, "var_name": "widgetLargestAvailableDisplayMode"}, {"var_description": "The active display mode of the widget.", "var_type": "NCWidgetDisplayMode", "is_static": false, "var_name": "widgetActiveDisplayMode"}, {"var_description": "The list of input NSExtensionItem objects associated with the context.", "var_type": "[Any]", "is_static": false, "var_name": "inputItems"}, {"var_description": "The minimum size for a Siri hosted view.", "var_type": "CGSize", "is_static": false, "var_name": "hostedViewMinimumAllowedSize"}, {"var_description": "The maximum size for a Siri hosted view.", "var_type": "CGSize", "is_static": false, "var_name": "hostedViewMaximumAllowedSize"}, {"var_description": "", "var_type": "String", "is_static": false, "var_name": "NSExtensionItemsAndErrorsKey"}, {"var_description": "Posted when the extension\u2019s host app moves from the inactive to the active state.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSExtensionHostDidBecomeActive"}, {"var_description": "Posted when the extension\u2019s host app moves from the active to the inactive state.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSExtensionHostWillResignActive"}, {"var_description": "Posted when the extension\u2019s host app begins running in the background.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSExtensionHostDidEnterBackground"}, {"var_description": "Posted when the extension\u2019s host app begins running in the foreground.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSExtensionHostWillEnterForeground"}, {"var_description": "", "var_type": "[UNNotificationAction]", "is_static": false, "var_name": "notificationActions"}]}