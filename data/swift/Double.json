{"class_description": "", "Methods": [{"method_description": "Returns a random value within the specified range.", "method_name": "random", "params": [{"param_type": "Range<Double>", "param_description": "The range in which to create a random value. range must be finite and non-empty.", "param_name": ["in", "range"]}], "class_name": "Double", "method_declar": "static func random(in range: Range<Double>) -> Double", "return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "method_name": "random", "params": [{"param_type": "Range<Double>", "param_description": "The range in which to create a random value. range must be finite and non-empty.", "param_name": ["in", "range"]}, {"param_type": "inout T", "param_description": "The random number generator to use when creating the new random value.", "param_name": ["using", "generator"]}], "class_name": "Double", "method_declar": "static func random<T>(in range: Range<Double>, using generator: inout T) -> Double where T : RandomNumberGenerator", "return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns a random value within the specified range.", "method_name": "random", "params": [{"param_type": "ClosedRange<Double>", "param_description": "The range in which to create a random value. Must be finite.", "param_name": ["in", "range"]}], "class_name": "Double", "method_declar": "static func random(in range: ClosedRange<Double>) -> Double", "return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "method_name": "random", "params": [{"param_type": "ClosedRange<Double>", "param_description": "The range in which to create a random value. Must be finite.", "param_name": ["in", "range"]}, {"param_type": "inout T", "param_description": "The random number generator to use when creating the new random value.", "param_name": ["using", "generator"]}], "class_name": "Double", "method_declar": "static func random<T>(in range: ClosedRange<Double>, using generator: inout T) -> Double where T : RandomNumberGenerator", "return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "", "method_name": "+", "params": [{"param_type": "Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func + (lhs: Double, rhs: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "", "method_name": "-", "params": [{"param_type": "Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func - (lhs: Double, rhs: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "", "method_name": "*", "params": [{"param_type": "Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func * (lhs: Double, rhs: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "", "method_name": "/", "params": [{"param_type": "Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func / (lhs: Double, rhs: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "", "method_name": "+=", "params": [{"param_type": "inout Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func += (lhs: inout Double, rhs: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "", "method_name": "-=", "params": [{"param_type": "inout Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func -= (lhs: inout Double, rhs: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "", "method_name": "*=", "params": [{"param_type": "inout Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func *= (lhs: inout Double, rhs: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "", "method_name": "/=", "params": [{"param_type": "inout Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func /= (lhs: inout Double, rhs: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "params": [{"param_type": "Double", "param_description": "", "param_name": ["x"]}, {"param_type": "Double", "param_description": "", "param_name": ["y"]}], "class_name": "Double", "method_declar": "static func == (x: Double, y: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func == (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func != (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "func", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func < (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "func", "params": [{"param_type": "Double", "param_description": "", "param_name": ["x"]}, {"param_type": "Double", "param_description": "", "param_name": ["y"]}], "class_name": "Double", "method_declar": "static func < (x: Double, y: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func <= (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func <= (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func > (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func > (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func >= (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func >= (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "", "method_name": "-", "params": [{"param_type": "Double", "param_description": "", "param_name": ["x"]}], "class_name": "Double", "method_declar": "prefix static func - (x: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns the additive inverse of the specified value.", "method_name": "-", "params": [{"param_type": "Double", "param_description": "", "param_name": ["operand"]}], "class_name": "Double", "method_declar": "prefix static func - (operand: Double) -> Double", "return_value": {"return_description": ["The additive inverse of the argument."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns the given number unchanged.", "method_name": "+", "params": [{"param_type": "Double", "param_description": "", "param_name": ["x"]}], "class_name": "Double", "method_declar": "prefix static func + (x: Double) -> Double", "return_value": {"return_description": ["The given argument without any changes."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "params": [{"param_type": "Double", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Double", "method_declar": "prefix static func ..< (maximum: Double) -> PartialRangeUpTo<Double>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<Double>"]}, "is_static": true}, {"method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "params": [{"param_type": "Double", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Double", "method_declar": "prefix static func ... (maximum: Double) -> PartialRangeThrough<Double>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<Double>"]}, "is_static": true}, {"method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "params": [{"param_type": "Double", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}], "class_name": "Double", "method_declar": "postfix static func ... (minimum: Double) -> PartialRangeFrom<Double>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<Double>"]}, "is_static": true}, {"method_description": "Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.", "method_name": "addingProduct", "params": [{"param_type": "Double", "param_description": "One of the values to multiply before adding to this value.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "The other value to multiply.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "func addingProduct(_ lhs: Double, _ rhs: Double) -> Double", "return_value": {"return_description": ["The product of lhs and rhs, added to this value."], "return_name": [""], "return_type": ["Double"]}, "is_static": false}, {"method_description": "Adds the product of the two given values to this value in place, computed without intermediate rounding.", "method_name": "addProduct", "params": [{"param_type": "Double", "param_description": "One of the values to multiply before adding to this value.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "The other value to multiply.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "mutating func addProduct(_ lhs: Double, _ rhs: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the square root of the value, rounded to a representable value.", "method_name": "squareRoot", "params": [], "class_name": "Double", "method_declar": "func squareRoot() -> Double", "return_value": {"return_description": ["The square root of the value."], "return_name": [""], "return_type": ["Double"]}, "is_static": false}, {"method_description": "Replaces this value with its square root, rounded to a representable value.", "method_name": "formSquareRoot", "params": [], "class_name": "Double", "method_declar": "mutating func formSquareRoot()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the remainder of this value divided by the given value.", "method_name": "remainder", "params": [{"param_type": "Double", "param_description": "The value to use when dividing this value.", "param_name": ["dividingBy", "other"]}], "class_name": "Double", "method_declar": "func remainder(dividingBy other: Double) -> Double", "return_value": {"return_description": ["The remainder of this value divided by other."], "return_name": [""], "return_type": ["Double"]}, "is_static": false}, {"method_description": "Replaces this value with the remainder of itself divided by the given value.", "method_name": "formRemainder", "params": [{"param_type": "Double", "param_description": "The value to use when dividing this value.", "param_name": ["dividingBy", "other"]}], "class_name": "Double", "method_declar": "mutating func formRemainder(dividingBy other: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the remainder of this value divided by the given value using truncating division.", "method_name": "truncatingRemainder", "params": [{"param_type": "Double", "param_description": "The value to use when dividing this value.", "param_name": ["dividingBy", "other"]}], "class_name": "Double", "method_declar": "func truncatingRemainder(dividingBy other: Double) -> Double", "return_value": {"return_description": ["The remainder of this value divided by other using truncating division."], "return_name": [""], "return_type": ["Double"]}, "is_static": false}, {"method_description": "Replaces this value with the remainder of itself divided by the given value using truncating division.", "method_name": "formTruncatingRemainder", "params": [{"param_type": "Double", "param_description": "The value to use when dividing this value.", "param_name": ["dividingBy", "other"]}], "class_name": "Double", "method_declar": "mutating func formTruncatingRemainder(dividingBy other: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces this value with its additive inverse.", "method_name": "negate", "params": [], "class_name": "Double", "method_declar": "mutating func negate()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces this value with its additive inverse.", "method_name": "negate", "params": [], "class_name": "Double", "method_declar": "mutating func negate()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns this value rounded to an integral value using \u201cschoolbook rounding.\u201d", "method_name": "rounded", "params": [], "class_name": "Double", "method_declar": "func rounded() -> Double", "return_value": {"return_description": ["The nearest integral value, or, if two integral values are equally close, the integral value with greater magnitude."], "return_name": [""], "return_type": ["Double"]}, "is_static": false}, {"method_description": "Returns this value rounded to an integral value using the specified rounding rule.", "method_name": "rounded", "params": [{"param_type": "FloatingPointRoundingRule", "param_description": "The rounding rule to use.", "param_name": ["rule"]}], "class_name": "Double", "method_declar": "func rounded(_ rule: FloatingPointRoundingRule) -> Double", "return_value": {"return_description": ["The integral value found by rounding using rule."], "return_name": [""], "return_type": ["Double"]}, "is_static": false}, {"method_description": "Rounds this value to an integral value using \u201cschoolbook rounding.\u201d", "method_name": "round", "params": [], "class_name": "Double", "method_declar": "mutating func round()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Rounds the value to an integral value using the specified rounding rule.", "method_name": "round", "params": [{"param_type": "FloatingPointRoundingRule", "param_description": "The rounding rule to use.", "param_name": ["rule"]}], "class_name": "Double", "method_declar": "mutating func round(_ rule: FloatingPointRoundingRule)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "+", "params": [{"param_type": "Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func + (lhs: Double, rhs: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "", "method_name": "-", "params": [{"param_type": "Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func - (lhs: Double, rhs: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "", "method_name": "*", "params": [{"param_type": "Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func * (lhs: Double, rhs: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "", "method_name": "/", "params": [{"param_type": "Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func / (lhs: Double, rhs: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "", "method_name": "+=", "params": [{"param_type": "inout Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func += (lhs: inout Double, rhs: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "", "method_name": "-=", "params": [{"param_type": "inout Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func -= (lhs: inout Double, rhs: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "", "method_name": "*=", "params": [{"param_type": "inout Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func *= (lhs: inout Double, rhs: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "", "method_name": "/=", "params": [{"param_type": "inout Double", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func /= (lhs: inout Double, rhs: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "params": [{"param_type": "Double", "param_description": "", "param_name": ["x"]}, {"param_type": "Double", "param_description": "", "param_name": ["y"]}], "class_name": "Double", "method_declar": "static func == (x: Double, y: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func == (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func != (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "func", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func < (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "func", "params": [{"param_type": "Double", "param_description": "", "param_name": ["x"]}, {"param_type": "Double", "param_description": "", "param_name": ["y"]}], "class_name": "Double", "method_declar": "static func < (x: Double, y: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func <= (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func <= (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func > (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func > (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func >= (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Double", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Double", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Double", "method_declar": "static func >= (lhs: Double, rhs: Double) -> Bool", "return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "", "method_name": "-", "params": [{"param_type": "Double", "param_description": "", "param_name": ["x"]}], "class_name": "Double", "method_declar": "prefix static func - (x: Double) -> Double", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns the additive inverse of the specified value.", "method_name": "-", "params": [{"param_type": "Double", "param_description": "", "param_name": ["operand"]}], "class_name": "Double", "method_declar": "prefix static func - (operand: Double) -> Double", "return_value": {"return_description": ["The additive inverse of the argument."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns the given number unchanged.", "method_name": "+", "params": [{"param_type": "Double", "param_description": "", "param_name": ["x"]}], "class_name": "Double", "method_declar": "prefix static func + (x: Double) -> Double", "return_value": {"return_description": ["The given argument without any changes."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "params": [{"param_type": "Double", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Double", "method_declar": "prefix static func ..< (maximum: Double) -> PartialRangeUpTo<Double>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<Double>"]}, "is_static": true}, {"method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "params": [{"param_type": "Double", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Double", "method_declar": "prefix static func ... (maximum: Double) -> PartialRangeThrough<Double>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<Double>"]}, "is_static": true}, {"method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "params": [{"param_type": "Double", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}], "class_name": "Double", "method_declar": "postfix static func ... (minimum: Double) -> PartialRangeFrom<Double>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<Double>"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether this instance is equal to the given value.", "method_name": "isEqual", "params": [{"param_type": "Double", "param_description": "The value to compare with this value.", "param_name": ["to", "other"]}], "class_name": "Double", "method_declar": "func isEqual(to other: Double) -> Bool", "return_value": {"return_description": ["true if other has the same value as this instance; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this instance is less than the given value.", "method_name": "isLess", "params": [{"param_type": "Double", "param_description": "The value to compare with this value.", "param_name": ["than", "other"]}], "class_name": "Double", "method_declar": "func isLess(than other: Double) -> Bool", "return_value": {"return_description": ["true if other is less than this value; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this instance is less than or equal to the given value.", "method_name": "isLessThanOrEqualTo", "params": [{"param_type": "Double", "param_description": "The value to compare with this value.", "param_name": ["other"]}], "class_name": "Double", "method_declar": "func isLessThanOrEqualTo(_ other: Double) -> Bool", "return_value": {"return_description": ["true if other is less than this value; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.", "method_name": "isTotallyOrdered", "params": [{"param_type": "Double", "param_description": "A floating-point value to compare to this value.", "param_name": ["belowOrEqualTo", "other"]}], "class_name": "Double", "method_declar": "func isTotallyOrdered(belowOrEqualTo other: Double) -> Bool", "return_value": {"return_description": ["true if this value is ordered below or the same as other in a total ordering of the floating-point type; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns the lesser of the two given values.", "method_name": "minimum", "params": [{"param_type": "Double", "param_description": "A floating-point value.", "param_name": ["x"]}, {"param_type": "Double", "param_description": "Another floating-point value.", "param_name": ["y"]}], "class_name": "Double", "method_declar": "static func minimum(_ x: Double, _ y: Double) -> Double", "return_value": {"return_description": ["The minimum of x and y, or whichever is a number if the other is NaN."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns the value with lesser magnitude.", "method_name": "minimumMagnitude", "params": [{"param_type": "Double", "param_description": "A floating-point value.", "param_name": ["x"]}, {"param_type": "Double", "param_description": "Another floating-point value.", "param_name": ["y"]}], "class_name": "Double", "method_declar": "static func minimumMagnitude(_ x: Double, _ y: Double) -> Double", "return_value": {"return_description": ["Whichever of x or y has lesser magnitude, or whichever is a number if the other is NaN."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns the greater of the two given values.", "method_name": "maximum", "params": [{"param_type": "Double", "param_description": "A floating-point value.", "param_name": ["x"]}, {"param_type": "Double", "param_description": "Another floating-point value.", "param_name": ["y"]}], "class_name": "Double", "method_declar": "static func maximum(_ x: Double, _ y: Double) -> Double", "return_value": {"return_description": ["The greater of x and y, or whichever is a number if the other is NaN."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Returns the value with greater magnitude.", "method_name": "maximumMagnitude", "params": [{"param_type": "Double", "param_description": "A floating-point value.", "param_name": ["x"]}, {"param_type": "Double", "param_description": "Another floating-point value.", "param_name": ["y"]}], "class_name": "Double", "method_declar": "static func maximumMagnitude(_ x: Double, _ y: Double) -> Double", "return_value": {"return_description": ["Whichever of x or y has greater magnitude, or whichever is a number if the other is NaN."], "return_name": [""], "return_type": ["Double"]}, "is_static": true}, {"method_description": "Encodes this value into the given encoder.", "method_name": "encode", "params": [{"param_type": "Encoder", "param_description": "The encoder to write data to.", "param_name": ["to", "encoder"]}], "class_name": "Double", "method_declar": "func encode(to encoder: Encoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "params": [{"param_type": "Double", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "Double", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Double", "method_declar": "static func ..< (minimum: Double, maximum: Double) -> Range<Double>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Double>"]}, "is_static": true}, {"method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "params": [{"param_type": "Double", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "Double", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Double", "method_declar": "static func ... (minimum: Double, maximum: Double) -> ClosedRange<Double>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Double>"]}, "is_static": true}, {"method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "params": [{"param_type": "inout Hasher", "param_description": "The hasher to use when combining the components of this instance.", "param_name": ["into", "hasher"]}], "class_name": "Double", "method_declar": "func hash(into hasher: inout Hasher)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a new value advanced by the given distance.", "method_name": "advanced", "params": [{"param_type": "Double", "param_description": "The distance to advance this value.", "param_name": ["by", "amount"]}], "class_name": "Double", "method_declar": "func advanced(by amount: Double) -> Double", "return_value": {"return_description": ["A new value that is amount added to this value."], "return_name": [""], "return_type": ["Double"]}, "is_static": false}, {"method_description": "Returns the distance from this value to the specified value.", "method_name": "distance", "params": [{"param_type": "Double", "param_description": "A value to calculate the distance to.", "param_name": ["to", "other"]}], "class_name": "Double", "method_declar": "func distance(to other: Double) -> Double", "return_value": {"return_description": ["The distance between this value and other."], "return_name": [""], "return_type": ["Double"]}, "is_static": false}], "class_inherit_list": [], "class_name": "Double", "typealias": [], "Vars": [{"var_description": "The magnitude of this value.", "var_type": "Double", "is_static": false, "var_name": "magnitude"}, {"var_description": "The sign of the floating-point value.", "var_type": "FloatingPointSign", "is_static": false, "var_name": "sign"}, {"var_description": "The unit in the last place of this value.", "var_type": "Double", "is_static": false, "var_name": "ulp"}, {"var_description": "The significand of the floating-point value.", "var_type": "Double", "is_static": false, "var_name": "significand"}, {"var_description": "The exponent of the floating-point value.", "var_type": "Int", "is_static": false, "var_name": "exponent"}, {"var_description": "The least representable value that compares greater than this value.", "var_type": "Double", "is_static": false, "var_name": "nextUp"}, {"var_description": "The greatest representable value that compares less than this value.", "var_type": "Double", "is_static": false, "var_name": "nextDown"}, {"var_description": "The floating-point value with the same sign and exponent as this value, but with a significand of 1.0.", "var_type": "Double", "is_static": false, "var_name": "binade"}, {"var_description": "The mathematical constant pi.", "var_type": "Double", "is_static": false, "var_name": "pi"}, {"var_description": "Positive infinity.", "var_type": "Double", "is_static": false, "var_name": "infinity"}, {"var_description": "The greatest finite number representable by this type.", "var_type": "Double", "is_static": false, "var_name": "greatestFiniteMagnitude"}, {"var_description": "A quiet NaN (\u201cnot a number\u201d).", "var_type": "Double", "is_static": false, "var_name": "nan"}, {"var_description": "A signaling NaN (\u201cnot a number\u201d).", "var_type": "Double", "is_static": false, "var_name": "signalingNaN"}, {"var_description": "The unit in the last place of 1.0.", "var_type": "Double", "is_static": false, "var_name": "ulpOfOne"}, {"var_description": "The unit in the last place of 1.0.", "var_type": "Double", "is_static": false, "var_name": "ulpOfOne"}, {"var_description": "The least positive number.", "var_type": "Double", "is_static": false, "var_name": "leastNonzeroMagnitude"}, {"var_description": "The least positive normal number.", "var_type": "Double", "is_static": false, "var_name": "leastNormalMagnitude"}, {"var_description": "The bit pattern of the value\u2019s encoding.", "var_type": "UInt64", "is_static": false, "var_name": "bitPattern"}, {"var_description": "The raw encoding of the value\u2019s significand field.", "var_type": "UInt64", "is_static": false, "var_name": "significandBitPattern"}, {"var_description": "The number of bits required to represent the value\u2019s significand.", "var_type": "Int", "is_static": false, "var_name": "significandWidth"}, {"var_description": "The raw encoding of the value\u2019s exponent field.", "var_type": "UInt", "is_static": false, "var_name": "exponentBitPattern"}, {"var_description": "The available number of fractional significand bits.", "var_type": "Int", "is_static": false, "var_name": "significandBitCount"}, {"var_description": "The number of bits used to represent the type\u2019s exponent.", "var_type": "Int", "is_static": false, "var_name": "exponentBitCount"}, {"var_description": "The radix, or base of exponentiation, for this floating-point type.", "var_type": "Int", "is_static": false, "var_name": "radix"}, {"var_description": "A Boolean value indicating whether the instance is equal to zero.", "var_type": "Bool", "is_static": false, "var_name": "isZero"}, {"var_description": "A Boolean value indicating whether this instance is finite.", "var_type": "Bool", "is_static": false, "var_name": "isFinite"}, {"var_description": "A Boolean value indicating whether the instance is infinite.", "var_type": "Bool", "is_static": false, "var_name": "isInfinite"}, {"var_description": "A Boolean value indicating whether the instance is NaN (\u201cnot a number\u201d).", "var_type": "Bool", "is_static": false, "var_name": "isNaN"}, {"var_description": "A Boolean value indicating whether the instance is a signaling NaN.", "var_type": "Bool", "is_static": false, "var_name": "isSignalingNaN"}, {"var_description": "A Boolean value indicating whether this instance is normal.", "var_type": "Bool", "is_static": false, "var_name": "isNormal"}, {"var_description": "A Boolean value indicating whether the instance is subnormal.", "var_type": "Bool", "is_static": false, "var_name": "isSubnormal"}, {"var_description": "A Boolean value indicating whether the instance\u2019s representation is in the canonical form.", "var_type": "Bool", "is_static": false, "var_name": "isCanonical"}, {"var_description": "The classification of this value.", "var_type": "FloatingPointClassification", "is_static": false, "var_name": "floatingPointClass"}, {"var_description": "A textual representation of the value.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A textual representation of the value, suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the Double instance.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "", "var_type": "MLDataValue", "is_static": false, "var_name": "dataValue"}, {"var_description": "", "var_type": "MLDataValue.ValueType", "is_static": false, "var_name": "dataValueType"}], "class_type": "struct", "interface_list": ["BinaryFloatingPoint", "CKRecordValueProtocol", "CustomDebugStringConvertible", "CustomPlaygroundQuickLookable", "CustomReflectable", "CustomStringConvertible", "ExpressibleByIntegerLiteral", "Hashable", "LosslessStringConvertible", "Strideable"], "package_name": "foundation", "subclass_list": []}