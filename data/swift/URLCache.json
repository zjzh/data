{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [], "return_description": ["The initialized cache object."], "return_type": []}, "method_description": "Creates an URL cache object with the specified values.", "is_static": false, "method_name": "init", "class_name": "URLCache", "method_declar": "init(memoryCapacity: Int, diskCapacity: Int, diskPath path: String?)", "params": [{"param_type": "Int", "param_description": "The memory capacity of the cache, in bytes.", "param_name": ["memoryCapacity"]}, {"param_type": "Int", "param_description": "The disk capacity of the cache, in bytes.", "param_name": ["diskCapacity"]}, {"param_type": "String", "param_description": "In macOS, path is the location at which to store the on-disk cache.In iOS, path is the name of a subdirectory of the application\u2019s default cache directory in which to store the on-disk cache (the subdirectory is created if it does not exist).", "param_name": ["diskPath", "path"]}]}, {"return_value": {"return_name": [""], "return_description": ["The cached URL response for request, or nil if no response has been cached."], "return_type": ["CachedURLRespons"]}, "method_description": "Returns the cached URL response in the cache for the specified URL request.", "is_static": false, "method_name": "cachedResponse", "class_name": "URLCache", "method_declar": "func cachedResponse(for request: URLRequest) -> CachedURLResponse?", "params": [{"param_type": "URLRequest", "param_description": "The URL request whose cached response is desired.", "param_name": ["for", "request"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Stores a cached URL response for a specified request.", "is_static": false, "method_name": "storeCachedResponse", "class_name": "URLCache", "method_declar": "func storeCachedResponse(_ cachedResponse: CachedURLResponse, for request: URLRequest)", "params": [{"param_type": "CachedURLResponse", "param_description": "The cached URL response to store.", "param_name": ["cachedResponse"]}, {"param_type": "URLRequest", "param_description": "The request for which the cached URL response is being stored.", "param_name": ["for", "request"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Gets the cached URL response for a data task, passing it to the provided completion handler.", "is_static": false, "method_name": "getCachedResponse", "class_name": "URLCache", "method_declar": "func getCachedResponse(for dataTask: URLSessionDataTask, completionHandler: @escaping (CachedURLResponse?) -> Void)", "params": [{"param_type": "URLSessionDataTask", "param_description": "The data task whose cached URL response is desired.", "param_name": ["for", "dataTask"]}, {"param_type": "@escaping (CachedURLResponse) -> Void", "param_description": "A completion handler that receives the cached URL response for the data task's request, or nil if no response is found in the cache.", "param_name": ["completionHandler"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Stores a cached URL response for a specified data task.", "is_static": false, "method_name": "storeCachedResponse", "class_name": "URLCache", "method_declar": "func storeCachedResponse(_ cachedResponse: CachedURLResponse, for dataTask: URLSessionDataTask)", "params": [{"param_type": "CachedURLResponse", "param_description": "The cached URL response to store for this data task.", "param_name": ["cachedResponse"]}, {"param_type": "URLSessionDataTask", "param_description": "The data task whose response is to be cached.", "param_name": ["for", "dataTask"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the cached URL response for a specified URL request.", "is_static": false, "method_name": "removeCachedResponse", "class_name": "URLCache", "method_declar": "func removeCachedResponse(for request: URLRequest)", "params": [{"param_type": "URLRequest", "param_description": "The URL request whose cached URL response should be removed. If there is no corresponding cached URL response, no action is taken.", "param_name": ["for", "request"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the cached URL response for a specified data task.", "is_static": false, "method_name": "removeCachedResponse", "class_name": "URLCache", "method_declar": "func removeCachedResponse(for dataTask: URLSessionDataTask)", "params": [{"param_type": "URLSessionDataTask", "param_description": "A task whose URL request's corresponding cached URL response should be removed. If there is no corresponding cached URL response, no action is taken.", "param_name": ["for", "dataTask"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Clears the given cache of any cached responses since the provided date.", "is_static": false, "method_name": "removeCachedResponses", "class_name": "URLCache", "method_declar": "func removeCachedResponses(since date: Date)", "params": [{"param_type": "Date", "param_description": "The earliest date of responses that should remain in the cache. Any responses with dates later than this parameter should be removed.", "param_name": ["since", "date"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Clears the receiver\u2019s cache, removing all stored cached URL responses.", "is_static": false, "method_name": "removeAllCachedResponses", "class_name": "URLCache", "method_declar": "func removeAllCachedResponses()", "params": []}], "class_type": "class", "class_name": "URLCache", "Vars": [{"var_name": "shared", "var_type": "URLCache", "var_description": "The shared URL cache instance.", "is_static": false}, {"var_name": "currentDiskUsage", "var_type": "Int", "var_description": "The current size of the on-disk cache, in bytes.", "is_static": false}, {"var_name": "diskCapacity", "var_type": "Int", "var_description": "The capacity of the on-disk cache, in bytes.", "is_static": false}, {"var_name": "currentMemoryUsage", "var_type": "Int", "var_description": "The current size of the in-memory cache, in bytes.", "is_static": false}, {"var_name": "memoryCapacity", "var_type": "Int", "var_description": "The capacity of the in-memory cache, in bytes.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "The URLCache class implements the caching of responses to URL load requests by mapping NSURLRequest objects to CachedURLResponse objects. It provides a composite in-memory and on-disk cache, and lets you manipulate the sizes of both the in-memory and on-disk portions. You can also control the path where cache data is stored persistently.\nNote\nIn iOS, the on-disk cache may be purged when the system runs low on disk space, but only when your app is not running.\nIn iOS 8 and later, and macOS 10.10 and later, URLCache is thread safe.\nAlthough URLCache instance methods can safely be called from multiple execution contexts at the same time, be aware that methods like  cachedResponse(for:) and storeCachedResponse(_:for:) have an unavoidable race condition when attempting to read or write responses for the same request.\nSubclasses of URLCache must implement overridden methods in such a thread safe manner.\nThe URLCache class is meant to be used as-is, but you can subclass it if you have specific needs. For example, you might want to screen which responses are cached, or reimplement the storage mechanism for security or other reasons.\nWhen overriding methods of this class, be aware that methods that take a task parameter are preferred by the system to those that do not. Therefore, you should override the task-based methods when subclassing, as follows:\nStoring responses in the cache \u2014 Override the task-based storeCachedResponse(_:for:), instead of or in addition to the request-based storeCachedResponse(_:for:).\nGetting responses from the cache \u2014 Override getCachedResponse(for:completionHandler:), instead of or in addition to cachedResponse(for:).\nRemoving cached responses \u2014 Override the task-based removeCachedResponse(for:), instead of or in addition to the request-based removeCachedResponse(for:).\n", "package_name": "foundation"}