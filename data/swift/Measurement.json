{"package_name": "foundation", "subclass_list": [], "class_description": "Measurements support a large set of operators, including +, -, *, /, and a full set of comparison operators.\n", "class_type": "struct", "typealias": ["typealias Measurement<UnitType>.ReferenceType = NSMeasurement"], "interface_list": ["Comparable", "CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "ReferenceConvertible"], "class_inherit_list": [], "Methods": [{"params": [{"param_name": ["value"], "param_type": "Double", "param_description": ""}, {"param_name": ["unit"], "param_type": "UnitType", "param_description": ""}], "class_name": "Measurement", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Create a Measurement given a specified value and unit.", "method_declar": "init(value: Double, unit: UnitType)"}, {"params": [{"param_name": ["to", "otherUnit"], "param_type": "UnitType", "param_description": "A unit of the same Dimension."}], "class_name": "Measurement", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "convert", "method_description": "Converts the measurement to the specified unit.", "method_declar": "mutating func convert(to otherUnit: UnitType)"}, {"params": [{"param_name": ["to", "otherUnit"], "param_type": "UnitType", "param_description": "A unit of the same Dimension."}], "class_name": "Measurement", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A converted measurement."], "return_type": ["Measurement<UnitType"]}, "method_name": "converted", "method_description": "Returns a new measurement created by converting to the specified unit.", "method_declar": "func converted(to otherUnit: UnitType) -> Measurement<UnitType>"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": "Another value to compare."}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "!=", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_declar": "static func != (lhs: Measurement<UnitType>, rhs: Measurement<UnitType>) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Double", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": ["A measurement of value lhs * rhs.value with the same unit as rhs."], "return_type": ["Measurement<UnitType"]}, "method_name": "*", "method_description": "Multiply a scalar value by a measurement.", "method_declar": "static func * (lhs: Double, rhs: Measurement<UnitType>) -> Measurement<UnitType>"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Double", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": ["A measurement of value lhs.value * rhs with the same unit as lhs."], "return_type": ["Measurement<UnitType"]}, "method_name": "*", "method_description": "Multiply a measurement by a scalar value.", "method_declar": "static func * (lhs: Measurement<UnitType>, rhs: Double) -> Measurement<UnitType>"}, {"params": [{"param_name": ["maximum"], "param_type": "Measurement<UnitType>", "param_description": "The upper bound for the range."}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["PartialRangeUpTo<Measurement<UnitType>"]}, "method_name": "..", "method_description": "Returns a partial range up to, but not including, its upper bound.", "method_declar": "prefix static func ..< (maximum: Measurement<UnitType>) -> PartialRangeUpTo<Measurement<UnitType>>"}, {"params": [{"param_name": ["lhs"], "param_type": "Double", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": ["A measurement of value lhs / rhs.value with the same unit as rhs."], "return_type": ["Measurement<UnitType"]}, "method_name": "/", "method_description": "Divide a scalar value by a measurement.", "method_declar": "static func / (lhs: Double, rhs: Measurement<UnitType>) -> Measurement<UnitType>"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Double", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": ["A measurement of value lhs.value / rhs with the same unit as lhs."], "return_type": ["Measurement<UnitType"]}, "method_name": "/", "method_description": "Divide a measurement by a scalar value.", "method_declar": "static func / (lhs: Measurement<UnitType>, rhs: Double) -> Measurement<UnitType>"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<Unit>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<RightHandSideType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": ["true if the measurements can be compared and the lhs is less than the rhs converted value."], "return_type": ["Bool"]}, "method_name": "func", "method_description": "Compare two measurements of the same Unit.", "method_declar": "static func < <LeftHandSideType, RightHandSideType>(lhs: Measurement<LeftHandSideType>, rhs: Measurement<RightHandSideType>) -> Bool where LeftHandSideType : Unit, RightHandSideType : Unit"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": "Another value to compare."}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "func", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_declar": "static func <= (lhs: Measurement<UnitType>, rhs: Measurement<UnitType>) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<Unit>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<RightHandSideType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": ["true if the measurements are equal."], "return_type": ["Bool"]}, "method_name": "==", "method_description": "Compare two measurements of the same Dimension.", "method_declar": "static func == <LeftHandSideType, RightHandSideType>(lhs: Measurement<LeftHandSideType>, rhs: Measurement<RightHandSideType>) -> Bool where LeftHandSideType : Unit, RightHandSideType : Unit"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": "Another value to compare."}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": ">", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_declar": "static func > (lhs: Measurement<UnitType>, rhs: Measurement<UnitType>) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": "Another value to compare."}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_type": ["Boo"]}, "method_name": ">=", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_declar": "static func >= (lhs: Measurement<UnitType>, rhs: Measurement<UnitType>) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<Unit>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<RightHandSideType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": ["true if the measurements can be compared and the lhs is less than the rhs converted value."], "return_type": ["Bool"]}, "method_name": "func", "method_description": "Compare two measurements of the same Unit.", "method_declar": "static func < <LeftHandSideType, RightHandSideType>(lhs: Measurement<LeftHandSideType>, rhs: Measurement<RightHandSideType>) -> Bool where LeftHandSideType : Unit, RightHandSideType : Unit"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<Unit>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<RightHandSideType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": ["true if the measurements are equal."], "return_type": ["Bool"]}, "method_name": "==", "method_description": "Compare two measurements of the same Dimension.", "method_declar": "static func == <LeftHandSideType, RightHandSideType>(lhs: Measurement<LeftHandSideType>, rhs: Measurement<RightHandSideType>) -> Bool where LeftHandSideType : Unit, RightHandSideType : Unit"}, {"params": [{"param_name": ["from", "decoder"], "param_type": "Decoder", "param_description": ""}], "class_name": "Measurement", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(from decoder: Decoder) throws"}, {"params": [{"param_name": ["to", "encoder"], "param_type": "Encoder", "param_description": ""}], "class_name": "Measurement", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "", "method_declar": "func encode(to encoder: Encoder) throws"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Measurement<UnitType"]}, "method_name": "+", "method_description": "", "method_declar": "static func + (lhs: Measurement<UnitType>, rhs: Measurement<UnitType>) -> Measurement<UnitType>"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Measurement<UnitType"]}, "method_name": "+", "method_description": "", "method_declar": "static func + (lhs: Measurement<UnitType>, rhs: Measurement<UnitType>) -> Measurement<UnitType>"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Measurement<UnitType"]}, "method_name": "-", "method_description": "", "method_declar": "static func - (lhs: Measurement<UnitType>, rhs: Measurement<UnitType>) -> Measurement<UnitType>"}, {"params": [{"param_name": ["lhs"], "param_type": "Measurement<UnitType>", "param_description": ""}, {"param_name": ["rhs"], "param_type": "Measurement<UnitType>", "param_description": ""}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Measurement<UnitType"]}, "method_name": "-", "method_description": "", "method_declar": "static func - (lhs: Measurement<UnitType>, rhs: Measurement<UnitType>) -> Measurement<UnitType>"}, {"params": [{"param_name": ["minimum"], "param_type": "Measurement<UnitType>", "param_description": "The lower bound for the range."}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["PartialRangeFrom<Measurement<UnitType>"]}, "method_name": "...", "method_description": "Returns a partial range extending upward from a lower bound.", "method_declar": "postfix static func ... (minimum: Measurement<UnitType>) -> PartialRangeFrom<Measurement<UnitType>>"}, {"params": [{"param_name": ["maximum"], "param_type": "Measurement<UnitType>", "param_description": "The upper bound for the range."}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["PartialRangeThrough<Measurement<UnitType>"]}, "method_name": "...", "method_description": "Returns a partial range up to, and including, its upper bound.", "method_declar": "prefix static func ... (maximum: Measurement<UnitType>) -> PartialRangeThrough<Measurement<UnitType>>"}, {"params": [{"param_name": ["minimum"], "param_type": "Measurement<UnitType>", "param_description": "The lower bound for the range."}, {"param_name": ["maximum"], "param_type": "Measurement<UnitType>", "param_description": "The upper bound for the range."}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["ClosedRange<Measurement<UnitType>"]}, "method_name": "...", "method_description": "Returns a closed range that contains both of its bounds.", "method_declar": "static func ... (minimum: Measurement<UnitType>, maximum: Measurement<UnitType>) -> ClosedRange<Measurement<UnitType>>"}, {"params": [{"param_name": ["minimum"], "param_type": "Measurement<UnitType>", "param_description": "The lower bound for the range."}, {"param_name": ["maximum"], "param_type": "Measurement<UnitType>", "param_description": "The upper bound for the range."}], "class_name": "Measurement", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Range<Measurement<UnitType>"]}, "method_name": "..", "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_declar": "static func ..< (minimum: Measurement<UnitType>, maximum: Measurement<UnitType>) -> Range<Measurement<UnitType>>"}], "class_name": "Measurement", "Vars": [{"var_description": "The unit component of the Measurement.", "var_type": "UnitType", "is_static": false, "var_name": "unit"}, {"var_description": "The value component of the Measurement.", "var_type": "Double", "is_static": false, "var_name": "value"}, {"var_description": "A textual description of the measurement.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A textual description of the measurement suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the date interval.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "The computed hash value for the date interval.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}]}