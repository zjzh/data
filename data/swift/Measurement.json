{"class_description": "Measurements support a large set of operators, including +, -, *, /, and a full set of comparison operators.\n", "Methods": [{"method_description": "Compare two measurements of the same Unit.", "method_name": "func", "params": [{"param_type": "Measurement<Unit>", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Measurement<RightHandSideType>", "param_description": "", "param_name": ["rhs"]}], "class_name": "Measurement", "method_declar": "static func < <LeftHandSideType, RightHandSideType>(lhs: Measurement<LeftHandSideType>, rhs: Measurement<RightHandSideType>) -> Bool where LeftHandSideType : Unit, RightHandSideType : Unit", "return_value": {"return_description": ["true if the measurements can be compared and the lhs is less than the rhs converted value."], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Compare two measurements of the same Dimension.", "method_name": "==", "params": [{"param_type": "Measurement<Unit>", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Measurement<RightHandSideType>", "param_description": "", "param_name": ["rhs"]}], "class_name": "Measurement", "method_declar": "static func == <LeftHandSideType, RightHandSideType>(lhs: Measurement<LeftHandSideType>, rhs: Measurement<RightHandSideType>) -> Bool where LeftHandSideType : Unit, RightHandSideType : Unit", "return_value": {"return_description": ["true if the measurements are equal."], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Compare two measurements of the same Unit.", "method_name": "func", "params": [{"param_type": "Measurement<Unit>", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Measurement<RightHandSideType>", "param_description": "", "param_name": ["rhs"]}], "class_name": "Measurement", "method_declar": "static func < <LeftHandSideType, RightHandSideType>(lhs: Measurement<LeftHandSideType>, rhs: Measurement<RightHandSideType>) -> Bool where LeftHandSideType : Unit, RightHandSideType : Unit", "return_value": {"return_description": ["true if the measurements can be compared and the lhs is less than the rhs converted value."], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Compare two measurements of the same Dimension.", "method_name": "==", "params": [{"param_type": "Measurement<Unit>", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Measurement<RightHandSideType>", "param_description": "", "param_name": ["rhs"]}], "class_name": "Measurement", "method_declar": "static func == <LeftHandSideType, RightHandSideType>(lhs: Measurement<LeftHandSideType>, rhs: Measurement<RightHandSideType>) -> Bool where LeftHandSideType : Unit, RightHandSideType : Unit", "return_value": {"return_description": ["true if the measurements are equal."], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}], "class_inherit_list": [], "class_name": "Measurement", "typealias": [], "Vars": [], "class_type": "struct", "interface_list": ["Comparable", "CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "ReferenceConvertible"], "package_name": "foundation", "subclass_list": []}