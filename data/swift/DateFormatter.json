{"class_description": "Instances of DateFormatter create string representations of NSDate objects, and convert textual representations of dates and times into NSDate objects. For user-visible representations of dates and times, DateFormatter provides a variety of localized presets and configuration options. For fixed format representations of dates and times, you can specify a custom format string.\nWhen working with date representations in ISO 8601 format, use ISO8601DateFormatter instead.\nTo represent an interval between two NSDate objects, use DateIntervalFormatter instead.\nTo represent a quantity of time specified by an NSDateComponents object, use DateComponentsFormatter instead.\nWhen displaying a date to a user, you set the dateStyle and timeStyle properties of the date formatter according to your particular needs. For example, if you want to show the month, day, and year without showing the time, you would set the dateStyle property to DateFormatter.Style.long and the timeStyle property to DateFormatter.Style.none. Conversely, if you want to show only the time, you would set the dateStyle property to DateFormatter.Style.none and the timeStyle property to DateFormatter.Style.short. Based on the values of the dateStyle and timeStyle properties, DateFormatter provides a representation of a specified date that is appropriate for a given locale.\nIf you need to define a format that cannot be achieved using the predefined styles, you can use the setLocalizedDateFormatFromTemplate(_:) to specify a localized date format from a template.\nImportant\nIn macOS 10.12 and later or iOS 10 and later, use the ISO8601DateFormatter class when working with ISO 8601 date representations.\nWhen working with fixed format dates, such as RFC 3339, you set the dateFormat property to specify a format string. For most fixed formats, you should also set the locale property to a POSIX locale (\"en_US_POSIX\"), and set the timeZone property to UTC.\nFor more information, see Technical Q&A QA1480 \u201cNSDateFormatter and Internet Dates\u201d.\nOn iOS 7 and later NSDateFormatter is thread safe.\nIn macOS 10.9 and later NSDateFormatter is thread safe so long as you are using the modern behavior in a 64-bit app.\nOn earlier versions of the operating system, or when using the legacy formatter behavior or running in 32-bit in macOS, NSDateFormatter is not thread safe, and you therefore must not mutate a date formatter simultaneously from multiple threads.\n", "Methods": [], "class_inherit_list": ["Formatter"], "class_name": "DateFormatter", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}