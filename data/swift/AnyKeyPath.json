{"Methods": [{"return_value": {"return_name": [""], "return_type": ["AnyKeyPath"], "return_description": ["A key path from the root of this key path and the value type of path, if path can be appended. If path can\u2019t be appended, returns nil."]}, "class_name": "AnyKeyPath", "params": [{"param_description": "The key path to append.", "param_type": "AnyKeyPath", "param_name": ["path"]}], "method_description": "Returns a new key path created by appending the given key path to this one.", "is_static": false, "method_name": "appending", "method_declar": "func appending(path: AnyKeyPath) -> AnyKeyPath?"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AnyKeyPath", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}], "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "is_static": false, "method_name": "hash", "method_declar": "final func hash(into hasher: inout Hasher)"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "AnyKeyPath", "params": [{"param_description": "A value to compare.", "param_type": "AnyKeyPath", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "AnyKeyPath", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether two values are not equal.", "is_static": true, "method_name": "!=", "method_declar": "static func != (lhs: AnyKeyPath, rhs: AnyKeyPath) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "AnyKeyPath", "params": [{"param_description": "", "param_type": "AnyKeyPath", "param_name": ["a"]}, {"param_description": "", "param_type": "AnyKeyPath", "param_name": ["b"]}], "method_description": "", "is_static": true, "method_name": "==", "method_declar": "static func == (a: AnyKeyPath, b: AnyKeyPath) -> Bool"}], "Vars": [{"var_description": "The hash value.", "is_static": false, "var_name": "hashValue", "var_type": "Int"}, {"var_description": "The root type for this key path.", "is_static": false, "var_name": "rootType", "var_type": "Any.Type"}, {"var_description": "The value type for this key path.", "is_static": false, "var_name": "valueType", "var_type": "Any.Type"}], "class_name": "AnyKeyPath", "interface_list": ["_AppendKeyPath", "Hashable"], "class_description": "", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "class", "typealias": []}