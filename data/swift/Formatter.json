{"package_name": "foundation", "subclass_list": [], "class_description": "The Foundation framework provides several concrete subclasses of Formatter, including ByteCountFormatter, DateFormatter, DateComponentsFormatter, DateIntervalFormatter, EnergyFormatter, LengthFormatter, MassFormatter, NumberFormatter, and PersonNameComponentsFormatter.\nNSFormatter is intended for subclassing. A custom formatter can restrict the input and enhance the display of data in novel ways. For example, you could have a custom formatter that ensures that serial numbers entered by a user conform to predefined formats. Before you decide to create a custom formatter, make sure that you cannot configure the public subclasses to satisfy your requirements.\nFor instructions on how to create your own custom formatter, see Creating a Custom Formatter.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCoding", "NSCopying"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["for", "obj"], "param_type": "Any", "param_description": ""}], "class_name": "Formatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An NSString object that textually represents object for display. Returns nil if object is not of the correct class."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "The default implementation of this method raises an exception.", "method_declar": "func string(for obj: Any?) -> String?"}, {"params": [{"param_name": ["for", "obj"], "param_type": "Any", "param_description": ""}, {"param_name": ["withDefaultAttributes", "attrs"], "param_type": "[NSAttributedString.Key", "param_description": ""}, {"param_name": ["[NSAttributedString.Key"], "param_type": "Any] = nil", "param_description": ""}], "class_name": "Formatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An attributed string that represents anObject."], "return_type": ["NSAttributedStrin"]}, "method_name": "attributedString", "method_description": "The default implementation returns nil to indicate that the formatter object does not provide an attributed string.", "method_declar": "func attributedString(for obj: Any, withDefaultAttributes attrs: [NSAttributedString.Key : Any]? = nil) -> NSAttributedString?"}, {"params": [{"param_name": ["for", "obj"], "param_type": "Any", "param_description": ""}], "class_name": "Formatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An NSString object that is used for editing the textual representation of anObject."], "return_type": ["Strin"]}, "method_name": "editingString", "method_description": "The default implementation of this method invokes string(for:).", "method_declar": "func editingString(for obj: Any) -> String?"}, {"params": [{"param_name": ["obj"], "param_type": "AutoreleasingUnsafeMutablePointer<AnyObject>", "param_description": ""}, {"param_name": ["for", "string"], "param_type": "String", "param_description": "The string to parse."}, {"param_name": ["errorDescription", "error"], "param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": "If non-nil, if there is a error during the conversion, upon return contains an NSString object that describes the problem."}], "class_name": "Formatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the conversion from string to cell content object was successful, otherwise false."], "return_type": ["Boo"]}, "method_name": "getObjectValue", "method_description": "The default implementation of this method raises an exception.", "method_declar": "func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, for string: String, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool"}, {"params": [{"param_name": ["partialString"], "param_type": "String", "param_description": "The text currently in a cell."}, {"param_name": ["newEditingString", "newString"], "param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": "If partialString needs to be modified, upon return contains the replacement string."}, {"param_name": ["errorDescription", "error"], "param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": "If non-nil, if validation fails contains an NSString object that describes the problem."}], "class_name": "Formatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if partialString is an acceptable value, otherwise false."], "return_type": ["Boo"]}, "method_name": "isPartialStringValid", "method_description": "Returns a Boolean value that indicates whether a partial string is valid.", "method_declar": "func isPartialStringValid(_ partialString: String, newEditingString newString: AutoreleasingUnsafeMutablePointer<NSString?>?, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool"}, {"params": [{"param_name": ["partialStringPtr"], "param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": "The new string to validate."}, {"param_name": ["proposedSelectedRange", "proposedSelRangePtr"], "param_type": "NSRangePointer", "param_description": "The selection range that will be used if the string is accepted or replaced."}, {"param_name": ["originalString", "origString"], "param_type": "String", "param_description": "The original string, before the proposed change."}, {"param_name": ["originalSelectedRange", "origSelRange"], "param_type": "NSRange", "param_description": "The selection range over which the change is to take place.If the user change is a deletion, origSelRange contains the range of the deleted characters."}, {"param_name": ["errorDescription", "error"], "param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": "If non-nil, if validation fails contains an NSString object that describes the problem."}], "class_name": "Formatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if partialStringPtr is acceptable, otherwise false."], "return_type": ["Boo"]}, "method_name": "isPartialStringValid", "method_description": "This method should be implemented in subclasses that want to validate user changes to a string in a field, where the user changes are not necessarily at the end of the string, and preserve the selection (or set a different one, such as selecting the erroneous part of the string the user has typed).", "method_declar": "func isPartialStringValid(_ partialStringPtr: AutoreleasingUnsafeMutablePointer<NSString>, proposedSelectedRange proposedSelRangePtr: NSRangePointer?, originalString origString: String, originalSelectedRange origSelRange: NSRange, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool"}], "class_name": "Formatter", "Vars": []}