{"Methods": [{"return_value": {"return_name": [""], "return_type": ["String"], "return_description": ["A string representation of the scalar."]}, "class_name": "Unicode.Scalar", "params": [{"param_description": "Pass true if you need the result to use only ASCII characters; otherwise, pass false.", "param_type": "Bool", "param_name": ["asASCII", "forceASCII"]}], "method_description": "Returns a string representation of the Unicode scalar.", "is_static": false, "method_name": "escaped", "method_declar": "func escaped(asASCII forceASCII: Bool) -> String"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}], "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "is_static": false, "method_name": "hash", "method_declar": "func hash(into hasher: inout Hasher)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "An output stream.", "param_type": "inout Target", "param_name": ["to", "target"]}], "method_description": "Writes the textual representation of the Unicode scalar into the given output stream.", "is_static": false, "method_name": "write", "method_declar": "func write<Target>(to target: inout Target) where Target : TextOutputStream"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "A value to compare.", "param_type": "Unicode.Scalar", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Unicode.Scalar", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether two values are not equal.", "is_static": true, "method_name": "!=", "method_declar": "static func != (lhs: Unicode.Scalar, rhs: Unicode.Scalar) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeFrom<Unicode.Scalar>"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "The lower bound for the range.", "param_type": "Unicode.Scalar", "param_name": ["minimum"]}], "method_description": "Returns a partial range extending upward from a lower bound.", "is_static": true, "method_name": "...", "method_declar": "postfix static func ... (minimum: Unicode.Scalar) -> PartialRangeFrom<Unicode.Scalar>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeThrough<Unicode.Scalar>"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "The upper bound for the range.", "param_type": "Unicode.Scalar", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, and including, its upper bound.", "is_static": true, "method_name": "...", "method_declar": "prefix static func ... (maximum: Unicode.Scalar) -> PartialRangeThrough<Unicode.Scalar>"}, {"return_value": {"return_name": [""], "return_type": ["ClosedRange<Unicode.Scalar>"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "The lower bound for the range.", "param_type": "Unicode.Scalar", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "Unicode.Scalar", "param_name": ["maximum"]}], "method_description": "Returns a closed range that contains both of its bounds.", "is_static": true, "method_name": "...", "method_declar": "static func ... (minimum: Unicode.Scalar, maximum: Unicode.Scalar) -> ClosedRange<Unicode.Scalar>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeUpTo<Unicode.Scalar>"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "The upper bound for the range.", "param_type": "Unicode.Scalar", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, but not including, its upper bound.", "is_static": true, "method_name": "..", "method_declar": "prefix static func ..< (maximum: Unicode.Scalar) -> PartialRangeUpTo<Unicode.Scalar>"}, {"return_value": {"return_name": [""], "return_type": ["Range<Unicode.Scalar>"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "The lower bound for the range.", "param_type": "Unicode.Scalar", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "Unicode.Scalar", "param_name": ["maximum"]}], "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "is_static": true, "method_name": "..", "method_declar": "static func ..< (minimum: Unicode.Scalar, maximum: Unicode.Scalar) -> Range<Unicode.Scalar>"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "", "param_type": "Unicode.Scalar", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Unicode.Scalar", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "func", "method_declar": "static func < (lhs: Unicode.Scalar, rhs: Unicode.Scalar) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "A value to compare.", "param_type": "Unicode.Scalar", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Unicode.Scalar", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func <= (lhs: Unicode.Scalar, rhs: Unicode.Scalar) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "", "param_type": "Unicode.Scalar", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Unicode.Scalar", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "==", "method_declar": "static func == (lhs: Unicode.Scalar, rhs: Unicode.Scalar) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Unicode.Scalar", "params": [{"param_description": "A value to compare.", "param_type": "Unicode.Scalar", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Unicode.Scalar", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "is_static": true, "method_name": ">", "method_declar": "static func > (lhs: Unicode.Scalar, rhs: Unicode.Scalar) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."]}, "class_name": "Unicode.Scalar", "params": [{"param_description": "A value to compare.", "param_type": "Unicode.Scalar", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Unicode.Scalar", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "is_static": true, "method_name": ">=", "method_declar": "static func >= (lhs: Unicode.Scalar, rhs: Unicode.Scalar) -> Bool"}], "Vars": [{"var_description": "A mirror that reflects the Unicode.Scalar instance.", "is_static": false, "var_name": "customMirror", "var_type": "Mirror"}, {"var_description": "An escaped textual representation of the Unicode scalar, suitable for debugging.", "is_static": false, "var_name": "debugDescription", "var_type": "String"}, {"var_description": "A textual representation of the Unicode scalar.", "is_static": false, "var_name": "description", "var_type": "String"}, {"var_description": "A Boolean value indicating whether the Unicode scalar is an ASCII character.", "is_static": false, "var_name": "isASCII", "var_type": "Bool"}, {"var_description": "", "is_static": false, "var_name": "utf16", "var_type": "Unicode.Scalar.UTF16View"}, {"var_description": "A numeric representation of the Unicode scalar.", "is_static": false, "var_name": "value", "var_type": "UInt32"}], "class_name": "Unicode.Scalar", "interface_list": ["Comparable", "CustomDebugStringConvertible", "CustomPlaygroundQuickLookable", "CustomReflectable", "CustomStringConvertible", "Equatable", "ExpressibleByUnicodeScalarLiteral", "Hashable", "LosslessStringConvertible", "TextOutputStreamable"], "class_description": "The Unicode.Scalar type, representing a single Unicode scalar value, is the element type of a string\u2019s unicodeScalars collection.\nYou can create a Unicode.Scalar instance by using a string literal that contains a single character representing exactly one Unicode scalar value.\nYou can also create Unicode scalar values directly from their numeric representation.\n", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}