{"class_description": "An XMLDocument object can have multiple child nodes but only one element, the root element. Any other node must be a XMLNode object representing a comment or a processing instruction. If you attempt to add any other kind of child node to an XMLDocument object, such as an attribute, namespace, another document object, or an element other than the root, XMLDocument raises an exception. If you add a valid child node and that object already has a parent, XMLDocument raises an exception. An XMLDocument object may also have document-global attributes, such as XML version, character encoding, referenced DTD, and MIME type. \nThe initializers of the XMLDocument class read an external source of XML, whether it be a local file or remote website, parse it, and process it into the tree representation. You can also construct an XMLDocument programmatically. There are accessor methods for getting and setting document attributes, methods for transforming documents using XSLT, a method for dynamically validating a document, and methods for printing out the content of an XMLDocument as XML, XHTML, HTML, or plain text.\nThe XMLDocument class is thread-safe as long as any given instance is used only in one thread.\nTo subclass NSXMLDocument you need to override the primary initializer, init(data:options:), and the methods listed below. In most cases, you need only invoke the superclass implementation, adding any subclass-specific code before or after the invocation, as necessary. \nrootElement()\nsetChildren(_:)\nremoveChild(at:)\ninsertChild(_:at:)\ncharacterEncoding\ncharacterEncoding\ndocumentContentKind\ndocumentContentKind\ndtd\nsetDTD:\nmimeType\nsetMIMEType:\nisStandalone\nisStandalone\nversion\nsetURI:\nversion\nBy default NSXMLDocument implements the NSObject isEqual(_:) method to perform a deep comparison: two NSXMLDocument objects are not considered equal unless they have the same name, same child nodes, same attributes, and so on. The comparison does not consider the parent node (and hence the node\u2019s location). If you want a different standard of comparison, override isEqual:. \nBecause of the architecture and data model of NSXML, when it parses and processes a source of XML it cannot know about your subclass unless you override the class method replacementClass(for:) to return your custom class in place of an NSXML class. If your custom class has no direct NSXML counterpart\u2014for example, it is a subclass of NSXMLNode that represents CDATA sections\u2014then you can walk the tree after it has been created and insert the new node where appropriate. \n", "Methods": [{"method_description": "Initializes and returns an NSXMLDocument object created from the XML or HTML contents of a URL-referenced source", "method_name": "init", "params": [{"param_type": "URL", "param_description": "An NSURL object specifying a URL source.", "param_name": ["contentsOf", "url"]}, {"param_type": "XMLNode.Options = []", "param_description": "A bit mask for input options. You can specify multiple options by bit-OR'ing them. See Constants for a list of valid input options.", "param_name": ["options", "mask"]}], "class_name": "XMLDocument", "method_declar": "convenience init(contentsOf url: URL, options mask: XMLNode.Options = []) throws", "return_value": {"return_description": ["An initialized NSXMLDocument object, or  nil if initialization fails because of parsing errors or other reasons. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes and returns an NSXMLDocument object created from an NSData object.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "A data object with XML content.", "param_name": ["data"]}, {"param_type": "XMLNode.Options = []", "param_description": "A bit mask for input options. You can specify multiple options by bit-OR'ing them. See Constants for a list of valid input options.", "param_name": ["options", "mask"]}], "class_name": "XMLDocument", "method_declar": "init(data: Data, options mask: XMLNode.Options = []) throws", "return_value": {"return_description": ["An initialized NSXMLDocument object, or  nil if initialization fails because of parsing errors or other reasons. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": " Returns an NSXMLDocument object initialized with a single child, the root element.", "method_name": "init", "params": [{"param_type": "XMLElement", "param_description": "", "param_name": ["rootElement", "element"]}], "class_name": "XMLDocument", "method_declar": "init(rootElement element: XMLElement?)", "return_value": {"return_description": ["An initialized NSXMLDocument object, or  nil if initialization fails for any reason. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes and returns an NSXMLDocument object created from a string containing XML markup text.", "method_name": "init", "params": [{"param_type": "String", "param_description": "A string object containing XML markup text.", "param_name": ["xmlString", "string"]}, {"param_type": "XMLNode.Options = []", "param_description": "A bit mask for input options. You can specify multiple options by bit-OR'ing them. See Constants for a list of valid input options.", "param_name": ["options", "mask"]}], "class_name": "XMLDocument", "method_declar": "convenience init(xmlString string: String, options mask: XMLNode.Options = []) throws", "return_value": {"return_description": ["An initialized NSXMLDocument object, or nil if initialization fails because of parsing errors or other reasons. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Overridden by subclasses to substitute a custom class for an NSXML class that the parser uses to create node instances.", "method_name": "replacementClass", "params": [{"param_type": "AnyClass", "param_description": "", "param_name": ["for", "cls"]}], "class_name": "XMLDocument", "method_declar": "class func replacementClass(for cls: AnyClass) -> AnyClass", "return_value": {"return_description": ["The substituted class."], "return_name": [""], "return_type": ["AnyClas"]}, "is_static": false}, {"method_description": "Returns the root element of the receiver.", "method_name": "rootElement", "params": [], "class_name": "XMLDocument", "method_declar": "func rootElement() -> XMLElement?", "return_value": {"return_description": ["The root element of the receiver."], "return_name": [""], "return_type": ["XMLElemen"]}, "is_static": false}, {"method_description": "Set the root element of the receiver. ", "method_name": "setRootElement", "params": [{"param_type": "XMLElement", "param_description": "An XMLNode object that is to be the root element.", "param_name": ["root"]}], "class_name": "XMLDocument", "method_declar": "func setRootElement(_ root: XMLElement)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds a child node after the last of the receiver\u2019s existing children.", "method_name": "addChild", "params": [{"param_type": "XMLNode", "param_description": "The XMLNode object to be added.", "param_name": ["child"]}], "class_name": "XMLDocument", "method_declar": "func addChild(_ child: XMLNode)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Inserts a node object at specified position in the receiver\u2019s array of children.", "method_name": "insertChild", "params": [{"param_type": "XMLNode", "param_description": "The XMLNode object to be inserted. The added node must be an NSXMLNode object representing a comment, processing instruction, or the root element.", "param_name": ["child"]}, {"param_type": "Int", "param_description": "An integer specifying the index of the children array to insert child. The indexes of children after the new child are incremented. If index is less than zero or greater than the number of children, an out-of-bounds exception is raised. ", "param_name": ["at", "index"]}], "class_name": "XMLDocument", "method_declar": "func insertChild(_ child: XMLNode, at index: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Inserts an array of children at a specified position in the receiver\u2019s array of children.", "method_name": "insertChildren", "params": [{"param_type": "[XMLNode]", "param_description": "An array of XMLNode objects representing comments, processing instructions, or the root element. ", "param_name": ["children"]}, {"param_type": "Int", "param_description": "An integer identifying the location in the receiver's children array for insertion. The indexes of children after the new child are increased by [children count]. If index is less than zero or greater than the number of children, an out-of-bounds exception is raised.", "param_name": ["at", "index"]}], "class_name": "XMLDocument", "method_declar": "func insertChildren(_ children: [XMLNode], at index: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the child node of the receiver located at a specified position in its array of children.", "method_name": "removeChild", "params": [{"param_type": "Int", "param_description": "An integer identifying the position of an child in the receiver's array. If index is less than zero or greater than the number of children minus one, an out-of-bounds exception is raised.", "param_name": ["at", "index"]}], "class_name": "XMLDocument", "method_declar": "func removeChild(at index: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces the child node of the receiver located at a specified position in its array of children with another node.", "method_name": "replaceChild", "params": [{"param_type": "Int", "param_description": "An integer identifying a position in the receiver's array of children. If index is less than zero or greater than the number of children minus one, an out-of-bounds exception is raised.", "param_name": ["at", "index"]}, {"param_type": "XMLNode", "param_description": "An XMLNode object to replace the one at index; it must represent a comment, a processing instruction, or the root element. ", "param_name": ["with", "node"]}], "class_name": "XMLDocument", "method_declar": "func replaceChild(at index: Int, with node: XMLNode)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Sets the child nodes of the receiver.", "method_name": "setChildren", "params": [{"param_type": "[XMLNode]", "param_description": "An array of XMLNode objects. Each of these objects must represent comments, processing instructions, or the root element; otherwise, an exception is raised. Pass in nil to remove all children.", "param_name": ["children"]}], "class_name": "XMLDocument", "method_declar": "func setChildren(_ children: [XMLNode]?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Applies the XSLT pattern rules and templates (specified as a data object) to the receiver and returns a document object containing transformed XML or HTML markup.", "method_name": "object", "params": [{"param_type": "Data", "param_description": "A data object containing the XSLT pattern rules and templates.", "param_name": ["byApplyingXSLT", "xslt"]}, {"param_type": "[String", "param_description": "A dictionary containing NSString key-value pairs that are passed as runtime parameters to the XSLT processor. Pass in nil if you have no parameters to pass. NoteSeveral XML websites discuss XSLT parameters, including O'Reilly Media\u2019s http://www.xml.com.", "param_name": ["arguments"]}, {"param_type": "String]", "param_description": "", "param_name": ["[String"]}], "class_name": "XMLDocument", "method_declar": "func object(byApplyingXSLT xslt: Data, arguments: [String : String]?) throws -> Any", "return_value": {"return_description": ["Depending on intended output, the method returns an NSXMLDocument object or an NSData data containing transformed XML or HTML markup. If the message is supposed to create plain text or RTF, then an NSData object is returned, otherwise an XML document object. The method returns  nil if XSLT processing did not succeed. "], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Applies the XSLT pattern rules and templates (specified as a string) to the receiver and returns a document object containing transformed XML or HTML markup.", "method_name": "object", "params": [{"param_type": "String", "param_description": "A string object containing the XSLT pattern rules and templates.", "param_name": ["byApplyingXSLTString", "xslt"]}, {"param_type": "[String", "param_description": "A dictionary containing NSString key-value pairs that are passed as runtime parameters to the XSLT processor. Pass in nil if you have no parameters to pass. NoteSeveral XML websites discuss XSLT parameters, including O'Reilly Media\u2019s http://www.xml.com.", "param_name": ["arguments"]}, {"param_type": "String]", "param_description": "", "param_name": ["[String"]}], "class_name": "XMLDocument", "method_declar": "func object(byApplyingXSLTString xslt: String, arguments: [String : String]?) throws -> Any", "return_value": {"return_description": ["Depending on intended output, the method returns an NSXMLDocument object or an NSData data containing transformed XML or HTML markup. If the message is supposed to create plain text or RTF, then an NSData object is returned, otherwise an XML document object. The method returns  nil if XSLT processing did not succeed. "], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Applies the XSLT pattern rules and templates located at a specified URL to the receiver and returns a document object containing transformed XML markup or an NSData object containing plain text, RTF text, and so on.", "method_name": "objectByApplyingXSLT", "params": [{"param_type": "URL", "param_description": "An NSURL object specifying a valid URL.", "param_name": ["at", "xsltURL"]}, {"param_type": "[String", "param_description": "A dictionary containing NSString key-value pairs that are passed as runtime parameters to the XSLT processor. Pass in nil if you have no parameters to pass. NoteSeveral XML websites discuss XSLT parameters, including O'Reilly Media\u2019s http://www.xml.com.", "param_name": ["arguments", "argument"]}, {"param_type": "String]", "param_description": "", "param_name": ["[String"]}], "class_name": "XMLDocument", "method_declar": "func objectByApplyingXSLT(at xsltURL: URL, arguments argument: [String : String]?) throws -> Any", "return_value": {"return_description": ["Depending on intended output, the returns an NSXMLDocument object or an NSData data containing transformed XML or HTML markup. If the message is supposed to create plain text or RTF, then an NSData object is returned, otherwise an XML document object. The method returns  nil if XSLT processing did not succeed. "], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Returns the XML string representation of the receiver\u2014that is, the entire document\u2014encapsulated in a data object.", "method_name": "xmlData", "params": [{"param_type": "XMLNode.Options = []", "param_description": "One or more options (bit-OR'd if multiple) to affect the output of the document; see Constants for the valid output options.", "param_name": ["options"]}], "class_name": "XMLDocument", "method_declar": "func xmlData(options: XMLNode.Options = []) -> Data", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Validates the document against the governing schema and returns whether the document conforms to the schema.", "method_name": "validate", "params": [], "class_name": "XMLDocument", "method_declar": "func validate() throws", "return_value": {"return_description": ["true if the validation operation succeeded, otherwise false."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [], "class_name": "XMLDocument", "method_declar": "init()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": ["XMLNode"], "class_name": "XMLDocument", "typealias": [], "Vars": [{"var_description": "Sets the character encoding of the receiver to encoding, ", "var_type": "String", "is_static": false, "var_name": "characterEncoding"}, {"var_description": "Sets the kind of output content for the receiver.", "var_type": "XMLDocument.ContentKind", "is_static": false, "var_name": "documentContentKind"}, {"var_description": "Returns an XMLDTD object representing the internal DTD associated with the receiver.", "var_type": "XMLDTD", "is_static": false, "var_name": "dtd"}, {"var_description": "Sets a Boolean value that specifies whether the receiver represents a standalone XML document.", "var_type": "Bool", "is_static": false, "var_name": "isStandalone"}, {"var_description": "Returns the MIME type for the receiver.", "var_type": "String", "is_static": false, "var_name": "mimeType"}, {"var_description": "Sets the version of the receiver\u2019s XML.", "var_type": "String", "is_static": false, "var_name": "version"}, {"var_description": "Returns the XML string representation of the receiver\u2014that is, the entire document\u2014encapsulated in a data object. ", "var_type": "Data", "is_static": false, "var_name": "xmlData"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}