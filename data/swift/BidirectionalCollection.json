{"class_description": "Bidirectional collections offer traversal backward from any valid index, not including a collection\u2019s startIndex. Bidirectional collections can therefore offer additional operations, such as a last property that provides efficient access to the last element and a reversed() method that presents the elements in reverse order. In addition, bidirectional collections have more efficient implementations of some sequence and collection methods, such as suffix(_:).\nTo add BidirectionalProtocol conformance to your custom types, implement the index(before:) method in addition to the requirements of the Collection protocol.\nIndices that are moved forward and backward in a bidirectional collection move by the same amount in each direction. That is, for any index i into a bidirectional collection c:\nIf i >= c.startIndex && i < c.endIndex, c.index(before: c.index(after: i)) == i.\nIf i > c.startIndex && i <= c.endIndex c.index(after: c.index(before: i)) == i.\n", "Methods": [], "class_inherit_list": ["Collection"], "class_name": "BidirectionalCollection", "typealias": [], "Vars": [], "class_type": "protocol", "interface_list": [], "package_name": "swift", "subclass_list": ["RandomAccessCollection", "StringProtocol"]}