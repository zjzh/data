{"class_description": "The ContiguousArray type is a specialized array that always stores its elements in a contiguous region of memory. This contrasts with Array, which can store its elements in either a contiguous region of memory or an NSArray instance if its Element type is a class or @objc protocol.\nIf your array\u2019s Element type is a class or @objc protocol and you do not need to bridge the array to NSArray or pass the array to Objective-C APIs, using ContiguousArray may be more efficient and have more predictable performance than Array. If the array\u2019s Element type is a struct or enumeration, Array and ContiguousArray should have similar efficiency.\nFor more information about using arrays, see Array and ArraySlice, with which ContiguousArray shares most properties and methods.\n", "Methods": [{"method_description": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.", "method_name": "allSatisfy", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.", "param_name": ["predicate"]}], "class_name": "ContiguousArray", "method_declar": "func allSatisfy(_ predicate: (Element) throws -> Bool) rethrows -> Bool", "return_value": {"return_description": ["true if the sequence contains only elements that satisfy predicate; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "method_name": "compactMap", "params": [{"param_type": "(Element) throws -> ElementOfResult", "param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_name": ["transform"]}], "class_name": "ContiguousArray", "method_declar": "func compactMap<ElementOfResult>(_ transform: (Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]", "return_value": {"return_description": ["An array of the non-nil results of calling transform with each element of the sequence."], "return_name": [""], "return_type": ["[ElementOfResult]"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence contains the given element.", "method_name": "contains", "params": [{"param_type": "Element", "param_description": "The element to find in the sequence.", "param_name": ["element"]}], "class_name": "ContiguousArray", "method_declar": "func contains(_ element: Element) -> Bool", "return_value": {"return_description": ["true if the element was found in the sequence; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.", "method_name": "contains", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_name": ["where", "predicate"]}], "class_name": "ContiguousArray", "method_declar": "func contains(where predicate: (Element) throws -> Bool) rethrows -> Bool", "return_value": {"return_description": ["true if the sequence contains an element that satisfies predicate; otherwise, false."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the distance between two indices.", "method_name": "distance", "params": [{"param_type": "Int", "param_description": "A valid index of the collection.", "param_name": ["from", "start"]}, {"param_type": "Int", "param_description": "Another valid index of the collection. If end is equal to start, the result is zero.", "param_name": ["to", "end"]}], "class_name": "ContiguousArray", "method_declar": "func distance(from start: Int, to end: Int) -> Int", "return_value": {"return_description": ["The distance between start and end."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.", "method_name": "drop", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.", "param_name": ["while", "predicate"]}], "class_name": "ContiguousArray", "method_declar": "func drop(while predicate: (Element) throws -> Bool) rethrows -> ArraySlice<Element>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ArraySlice<Element>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "params": [{"param_type": "Int = 1", "param_description": "The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "ContiguousArray", "method_declar": "func dropFirst(_ k: Int = 1) -> ArraySlice<Element>", "return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": [""], "return_type": ["ArraySlice<Element>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "params": [{"param_type": "Int", "param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "ContiguousArray", "method_declar": "func dropLast(_ k: Int) -> ArraySlice<Element>", "return_value": {"return_description": ["A subsequence that leaves off k elements from the end."], "return_name": [""], "return_type": ["ArraySlice<Element>"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "method_name": "elementsEqual", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "ContiguousArray", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence and other contain the same elements in the same order."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.", "method_name": "elementsEqual", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}, {"param_type": "(Element, OtherSequence.Element) throws -> Bool", "param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_name": ["by", "areEquivalent"]}], "class_name": "ContiguousArray", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence, by areEquivalent: (Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence", "return_value": {"return_description": ["true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "params": [], "class_name": "ContiguousArray", "method_declar": "func enumerated() -> EnumeratedSequence<ContiguousArray<Element>>", "return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<ContiguousArray<Element>>"]}, "is_static": false}, {"method_description": "Returns the first element of the sequence that satisfies the given predicate.", "method_name": "first", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_name": ["where", "predicate"]}], "class_name": "ContiguousArray", "method_declar": "func first(where predicate: (Element) throws -> Bool) rethrows -> Element?", "return_value": {"return_description": ["The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the first index where the specified value appears in the collection.", "method_name": "firstIndex", "params": [{"param_type": "Element", "param_description": "An element to search for in the collection.", "param_name": ["of", "element"]}], "class_name": "ContiguousArray", "method_declar": "func firstIndex(of element: Element) -> Int?", "return_value": {"return_description": ["The first index where element is found. If element is not found in the collection, returns nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns the first index in which an element of the collection satisfies the given predicate.", "method_name": "firstIndex", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_name": ["where", "predicate"]}], "class_name": "ContiguousArray", "method_declar": "func firstIndex(where predicate: (Element) throws -> Bool) rethrows -> Int?", "return_value": {"return_description": ["The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Calls the given closure on each element in the sequence in the same order as a for-in loop.", "method_name": "forEach", "params": [{"param_type": "(Element) throws -> Void", "param_description": "A closure that takes an element of the sequence as a parameter.", "param_name": ["body"]}], "class_name": "ContiguousArray", "method_declar": "func forEach(_ body: (Element) throws -> Void) rethrows", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void rethrows"]}, "is_static": false}, {"method_description": "Offsets the given index by the specified distance.", "method_name": "formIndex", "params": [{"param_type": "inout Int", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_name": ["offsetBy", "distance"]}], "class_name": "ContiguousArray", "method_declar": "func formIndex(_ i: inout Int, offsetBy distance: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Offsets the given index by the specified distance, or so that it equals the given limiting index.", "method_name": "formIndex", "params": [{"param_type": "inout Int", "param_description": "A valid index of the collection.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_name": ["offsetBy", "distance"]}, {"param_type": "Int", "param_description": "A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.", "param_name": ["limitedBy", "limit"]}], "class_name": "ContiguousArray", "method_declar": "func formIndex(_ i: inout Int, offsetBy distance: Int, limitedBy limit: Int) -> Bool", "return_value": {"return_description": ["true if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Replaces the given index with its successor.", "method_name": "formIndex", "params": [{"param_type": "inout Int", "param_description": "A valid index of the collection. i must be less than endIndex.", "param_name": ["after", "i"]}], "class_name": "ContiguousArray", "method_declar": "func formIndex(after i: inout Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces the given index with its predecessor.", "method_name": "formIndex", "params": [{"param_type": "inout Int", "param_description": "A valid index of the collection. i must be greater than startIndex.", "param_name": ["before", "i"]}], "class_name": "ContiguousArray", "method_declar": "func formIndex(before i: inout Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "params": [{"param_type": "inout Hasher", "param_description": "The hasher to use when combining the components of this instance.", "param_name": ["into", "hasher"]}], "class_name": "ContiguousArray", "method_declar": "func hash(into hasher: inout Hasher)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an index that is the specified distance from the given index.", "method_name": "index", "params": [{"param_type": "Int", "param_description": "A valid index of the array.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i.", "param_name": ["offsetBy", "distance"]}], "class_name": "ContiguousArray", "method_declar": "func index(_ i: Int, offsetBy distance: Int) -> Int", "return_value": {"return_description": ["An index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:)."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.", "method_name": "index", "params": [{"param_type": "Int", "param_description": "A valid index of the array.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The distance to offset i.", "param_name": ["offsetBy", "distance"]}, {"param_type": "Int", "param_description": "A valid index of the collection to use as a limit. If distance > 0, limit has no effect if it is less than i. Likewise, if distance < 0, limit has no effect if it is greater than i.", "param_name": ["limitedBy", "limit"]}], "class_name": "ContiguousArray", "method_declar": "func index(_ i: Int, offsetBy distance: Int, limitedBy limit: Int) -> Int?", "return_value": {"return_description": ["An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns the position immediately after the given index.", "method_name": "index", "params": [{"param_type": "Int", "param_description": "A valid index of the collection. i must be less than endIndex.", "param_name": ["after", "i"]}], "class_name": "ContiguousArray", "method_declar": "func index(after i: Int) -> Int", "return_value": {"return_description": ["The index immediately after i."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns the position immediately before the given index.", "method_name": "index", "params": [{"param_type": "Int", "param_description": "A valid index of the collection. i must be greater than startIndex.", "param_name": ["before", "i"]}], "class_name": "ContiguousArray", "method_declar": "func index(before i: Int) -> Int", "return_value": {"return_description": ["The index immediately before i."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns the elements of this sequence of sequences, concatenated.", "method_name": "joined", "params": [], "class_name": "ContiguousArray", "method_declar": "func joined() -> FlattenSequence<ContiguousArray<Element>>", "return_value": {"return_description": ["A flattened view of the elements of this sequence of sequences."], "return_name": [""], "return_type": ["FlattenSequence<ContiguousArray<Element>>"]}, "is_static": false}, {"method_description": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.", "method_name": "joined", "params": [{"param_type": "Sequence", "param_description": "A sequence to insert between each of this sequence\u2019s elements.", "param_name": ["separator"]}], "class_name": "ContiguousArray", "method_declar": "func joined<Separator>(separator: Separator) -> JoinedSequence<ContiguousArray<Element>> where Separator : Sequence, Separator.Element == Self.Element.Element", "return_value": {"return_description": ["The joined sequence of elements."], "return_name": [""], "return_type": ["JoinedSequence<ContiguousArray<Element>>"]}, "is_static": false}, {"method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "params": [{"param_type": "String = \"\"", "param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_name": ["separator"]}], "class_name": "ContiguousArray", "method_declar": "func joined(separator: String = \"\") -> String", "return_value": {"return_description": ["A single, concatenated string."], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "params": [{"param_type": "String = \"\"", "param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_name": ["separator"]}], "class_name": "ContiguousArray", "method_declar": "func joined(separator: String = \"\") -> String", "return_value": {"return_description": ["A single, concatenated string."], "return_name": [""], "return_type": ["String"]}, "is_static": false}, {"method_description": "Returns the last element of the sequence that satisfies the given predicate.", "method_name": "last", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_name": ["where", "predicate"]}], "class_name": "ContiguousArray", "method_declar": "func last(where predicate: (Element) throws -> Bool) rethrows -> Element?", "return_value": {"return_description": ["The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the last index where the specified value appears in the collection.", "method_name": "lastIndex", "params": [{"param_type": "Element", "param_description": "An element to search for in the collection.", "param_name": ["of", "element"]}], "class_name": "ContiguousArray", "method_declar": "func lastIndex(of element: Element) -> Int?", "return_value": {"return_description": ["The last index where element is found. If element is not found in the collection, this method returns nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns the index of the last element in the collection that matches the given predicate.", "method_name": "lastIndex", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_name": ["where", "predicate"]}], "class_name": "ContiguousArray", "method_declar": "func lastIndex(where predicate: (Element) throws -> Bool) rethrows -> Int?", "return_value": {"return_description": ["The index of the last element in the collection that matches predicate, or nil if no elements match."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "method_name": "lexicographicallyPrecedes", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "ContiguousArray", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.", "method_name": "lexicographicallyPrecedes", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}, {"param_type": "(Element, Element) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "ContiguousArray", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence, by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns an iterator over the elements of the collection.", "method_name": "makeIterator", "params": [], "class_name": "ContiguousArray", "method_declar": "func makeIterator() -> IndexingIterator<ContiguousArray<Element>>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexingIterator<ContiguousArray<Element>>"]}, "is_static": false}, {"method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "params": [{"param_type": "(Element) throws -> T", "param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_name": ["transform"]}], "class_name": "ContiguousArray", "method_declar": "func map<T>(_ transform: (Element) throws -> T) rethrows -> [T]", "return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["[T]"]}, "is_static": false}, {"method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "params": [{"param_type": "(Element) throws -> T", "param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_name": ["transform"]}], "class_name": "ContiguousArray", "method_declar": "func map<T>(_ transform: (Element) throws -> T) rethrows -> [T]", "return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["[T]"]}, "is_static": false}, {"method_description": "Returns the maximum element in the sequence.", "method_name": "max", "params": [], "class_name": "ContiguousArray", "method_declar": "@warn_unqualified_access func max() -> Element?", "return_value": {"return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "max", "params": [{"param_type": "(Element, Element) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "ContiguousArray", "method_declar": "@warn_unqualified_access func max(by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows -> Element?", "return_value": {"return_description": ["The sequence\u2019s maximum element if the sequence is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Returns the minimum element in the sequence.", "method_name": "min", "params": [], "class_name": "ContiguousArray", "method_declar": "@warn_unqualified_access func min() -> Element?", "return_value": {"return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "min", "params": [{"param_type": "(Element, Element) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "ContiguousArray", "method_declar": "@warn_unqualified_access func min(by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows -> Element?", "return_value": {"return_description": ["The sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don\u2019t match.", "method_name": "partition", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.", "param_name": ["by", "belongsInSecondPartition"]}], "class_name": "ContiguousArray", "method_declar": "mutating func partition(by belongsInSecondPartition: (Element) throws -> Bool) rethrows -> Int", "return_value": {"return_description": ["The index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection\u2019s endIndex."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don\u2019t match.", "method_name": "partition", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.", "param_name": ["by", "belongsInSecondPartition"]}], "class_name": "ContiguousArray", "method_declar": "mutating func partition(by belongsInSecondPartition: (Element) throws -> Bool) rethrows -> Int", "return_value": {"return_description": ["The index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection\u2019s endIndex."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Removes and returns the last element of the collection.", "method_name": "popLast", "params": [], "class_name": "ContiguousArray", "method_declar": "mutating func popLast() -> Element?", "return_value": {"return_description": ["The last element of the collection if the collection is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "ContiguousArray", "method_declar": "func prefix(_ maxLength: Int) -> ArraySlice<Element>", "return_value": {"return_description": ["A subsequence starting at the beginning of this collection with at most maxLength elements."], "return_name": [""], "return_type": ["ArraySlice<Element>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection through the specified position.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "", "param_name": ["through", "position"]}], "class_name": "ContiguousArray", "method_declar": "func prefix(through position: Int) -> ArraySlice<Element>", "return_value": {"return_description": ["A subsequence up to, and including, the end position."], "return_name": [""], "return_type": ["ArraySlice<Element>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "The \u201cpast the end\u201d index of the resulting subsequence. end must be a valid index of the collection.", "param_name": ["upTo", "end"]}], "class_name": "ContiguousArray", "method_declar": "func prefix(upTo end: Int) -> ArraySlice<Element>", "return_value": {"return_description": ["A subsequence up to, but not including, the end position."], "return_name": [""], "return_type": ["ArraySlice<Element>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.", "method_name": "prefix", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.", "param_name": ["while", "predicate"]}], "class_name": "ContiguousArray", "method_declar": "func prefix(while predicate: (Element) throws -> Bool) rethrows -> ArraySlice<Element>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ArraySlice<Element>"]}, "is_static": false}, {"method_description": "Returns a random element of the collection.", "method_name": "randomElement", "params": [], "class_name": "ContiguousArray", "method_declar": "func randomElement() -> Element?", "return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Returns a random element of the collection, using the given generator as a source for randomness.", "method_name": "randomElement", "params": [{"param_type": "inout T", "param_description": "The random number generator to use when choosing a random element.", "param_name": ["using", "generator"]}], "class_name": "ContiguousArray", "method_declar": "func randomElement<T>(using generator: inout T) -> Element? where T : RandomNumberGenerator", "return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "params": [{"param_type": "Result", "param_description": "The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.", "param_name": ["initialResult"]}, {"param_type": "(Result, Element) throws -> Result", "param_description": "A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.", "param_name": ["nextPartialResult"]}], "class_name": "ContiguousArray", "method_declar": "func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, Element) throws -> Result) rethrows -> Result", "return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["Result"]}, "is_static": false}, {"method_description": "Removes and returns the element at the specified position.", "method_name": "remove", "params": [{"param_type": "Int", "param_description": "The position of the element to remove. index must be a valid index of the array.", "param_name": ["at", "index"]}], "class_name": "ContiguousArray", "method_declar": "@discardableResult mutating func remove(at index: Int) -> Element", "return_value": {"return_description": ["The element at the specified index."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Removes and returns the element at the specified position.", "method_name": "remove", "params": [{"param_type": "Int", "param_description": "The position of the element to remove. index must be a valid index of the array.", "param_name": ["at", "index"]}], "class_name": "ContiguousArray", "method_declar": "@discardableResult mutating func remove(at index: Int) -> Element", "return_value": {"return_description": ["The element at the specified index."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Removes all elements from the array.", "method_name": "removeAll", "params": [{"param_type": "Bool = false", "param_description": "Pass true to keep the existing capacity of the array after removing its elements. The default value is false.", "param_name": ["keepingCapacity", "keepCapacity"]}], "class_name": "ContiguousArray", "method_declar": "mutating func removeAll(keepingCapacity keepCapacity: Bool = false)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes all elements from the array.", "method_name": "removeAll", "params": [{"param_type": "Bool = false", "param_description": "Pass true to keep the existing capacity of the array after removing its elements. The default value is false.", "param_name": ["keepingCapacity", "keepCapacity"]}], "class_name": "ContiguousArray", "method_declar": "mutating func removeAll(keepingCapacity keepCapacity: Bool = false)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes all the elements that satisfy the given predicate.", "method_name": "removeAll", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.", "param_name": ["where", "shouldBeRemoved"]}], "class_name": "ContiguousArray", "method_declar": "mutating func removeAll(where shouldBeRemoved: (Element) throws -> Bool) rethrows", "return_value": {"return_description": [], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Removes all the elements that satisfy the given predicate.", "method_name": "removeAll", "params": [{"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.", "param_name": ["where", "shouldBeRemoved"]}], "class_name": "ContiguousArray", "method_declar": "mutating func removeAll(where shouldBeRemoved: (Element) throws -> Bool) rethrows", "return_value": {"return_description": [], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Removes and returns the first element of the collection.", "method_name": "removeFirst", "params": [], "class_name": "ContiguousArray", "method_declar": "@discardableResult mutating func removeFirst() -> Element", "return_value": {"return_description": ["The removed element."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Removes the specified number of elements from the beginning of the collection.", "method_name": "removeFirst", "params": [{"param_type": "Int", "param_description": "The number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.", "param_name": ["k"]}], "class_name": "ContiguousArray", "method_declar": "mutating func removeFirst(_ k: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes and returns the last element of the collection.", "method_name": "removeLast", "params": [], "class_name": "ContiguousArray", "method_declar": "@discardableResult mutating func removeLast() -> Element", "return_value": {"return_description": ["The last element of the collection."], "return_name": [""], "return_type": ["Element"]}, "is_static": false}, {"method_description": "Removes the specified number of elements from the end of the collection.", "method_name": "removeLast", "params": [{"param_type": "Int", "param_description": "The number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.", "param_name": ["k"]}], "class_name": "ContiguousArray", "method_declar": "mutating func removeLast(_ k: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the elements in the specified subrange from the collection.", "method_name": "removeSubrange", "params": [{"param_type": "Range<Int>", "param_description": "The range of the collection to be removed. The bounds of the range must be valid indices of the collection.", "param_name": ["bounds"]}], "class_name": "ContiguousArray", "method_declar": "mutating func removeSubrange(_ bounds: Range<Int>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes the elements in the specified subrange from the collection.", "method_name": "removeSubrange", "params": [{"param_type": "RangeExpression", "param_description": "The range of the collection to be removed. The bounds of the range must be valid indices of the collection.", "param_name": ["bounds"]}], "class_name": "ContiguousArray", "method_declar": "mutating func removeSubrange<R>(_ bounds: R) where R : RangeExpression, Self.Index == R.Bound", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Reserves enough space to store the specified number of elements.", "method_name": "reserveCapacity", "params": [{"param_type": "Int", "param_description": "The requested number of elements to store.", "param_name": ["minimumCapacity"]}], "class_name": "ContiguousArray", "method_declar": "mutating func reserveCapacity(_ minimumCapacity: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Reserves enough space to store the specified number of elements.", "method_name": "reserveCapacity", "params": [{"param_type": "Int", "param_description": "The requested number of elements to store.", "param_name": ["minimumCapacity"]}], "class_name": "ContiguousArray", "method_declar": "mutating func reserveCapacity(_ minimumCapacity: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Reverses the elements of the collection in place.", "method_name": "reverse", "params": [], "class_name": "ContiguousArray", "method_declar": "mutating func reverse()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a view presenting the elements of the collection in reverse order.", "method_name": "reversed", "params": [], "class_name": "ContiguousArray", "method_declar": "func reversed() -> ReversedCollection<ContiguousArray<Element>>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ReversedCollection<ContiguousArray<Element>>"]}, "is_static": false}, {"method_description": "Shuffles the collection in place.", "method_name": "shuffle", "params": [], "class_name": "ContiguousArray", "method_declar": "mutating func shuffle()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Shuffles the collection in place, using the given generator as a source for randomness.", "method_name": "shuffle", "params": [{"param_type": "inout T", "param_description": "The random number generator to use when shuffling the collection.", "param_name": ["using", "generator"]}], "class_name": "ContiguousArray", "method_declar": "mutating func shuffle<T>(using generator: inout T) where T : RandomNumberGenerator", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the elements of the sequence, shuffled.", "method_name": "shuffled", "params": [], "class_name": "ContiguousArray", "method_declar": "func shuffled() -> [Element]", "return_value": {"return_description": ["A shuffled array of this sequence\u2019s elements."], "return_name": [""], "return_type": ["[Element]"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.", "method_name": "shuffled", "params": [{"param_type": "inout T", "param_description": "The random number generator to use when shuffling the sequence.", "param_name": ["using", "generator"]}], "class_name": "ContiguousArray", "method_declar": "func shuffled<T>(using generator: inout T) -> [Element] where T : RandomNumberGenerator", "return_value": {"return_description": ["An array of this sequence\u2019s elements in a shuffled order."], "return_name": [""], "return_type": ["[Element]"]}, "is_static": false}, {"method_description": "Sorts the collection in place.", "method_name": "sort", "params": [], "class_name": "ContiguousArray", "method_declar": "mutating func sort()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Sorts the collection in place, using the given predicate as the comparison between elements.", "method_name": "sort", "params": [{"param_type": "(Element, Element) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. If areInIncreasingOrder throws an error during the sort, the elements may be in a different order, but none will be lost.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "ContiguousArray", "method_declar": "mutating func sort(by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool rethrows"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, sorted.", "method_name": "sorted", "params": [], "class_name": "ContiguousArray", "method_declar": "func sorted() -> [Element]", "return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Element]"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.", "method_name": "sorted", "params": [{"param_type": "(Element, Element) throws -> Bool", "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_name": ["by", "areInIncreasingOrder"]}], "class_name": "ContiguousArray", "method_declar": "func sorted(by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows -> [Element]", "return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Element]"]}, "is_static": false}, {"method_description": "Returns the longest possible subsequences of the collection, in order, that don\u2019t contain elements satisfying the given predicate.", "method_name": "split", "params": [{"param_type": "Int", "param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_name": ["maxSplits"]}, {"param_type": "Bool", "param_description": "If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.", "param_name": ["omittingEmptySubsequences"]}, {"param_type": "(Element) throws -> Bool", "param_description": "A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.", "param_name": ["whereSeparator", "isSeparator"]}], "class_name": "ContiguousArray", "method_declar": "func split(maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true, whereSeparator isSeparator: (Element) throws -> Bool) rethrows -> [ArraySlice<Element>]", "return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": [""]}, "is_static": false}, {"method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "method_name": "split", "params": [{"param_type": "Element", "param_description": "The element that should be split upon.", "param_name": ["separator"]}, {"param_type": "Int", "param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_name": ["maxSplits"]}, {"param_type": "Bool = true", "param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.", "param_name": ["omittingEmptySubsequences"]}], "class_name": "ContiguousArray", "method_declar": "func split(separator: Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Element>]", "return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": ["[ArraySlice<Element>]"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "method_name": "starts", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["with", "possiblePrefix"]}], "class_name": "ContiguousArray", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix) -> Bool where PossiblePrefix : Sequence, Self.Element == PossiblePrefix.Element", "return_value": {"return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.", "method_name": "starts", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["with", "possiblePrefix"]}, {"param_type": "(Element, PossiblePrefix.Element) throws -> Bool", "param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_name": ["by", "areEquivalent"]}], "class_name": "ContiguousArray", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix, by areEquivalent: (Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool where PossiblePrefix : Sequence", "return_value": {"return_description": ["true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.", "method_name": "suffix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "ContiguousArray", "method_declar": "func suffix(_ maxLength: Int) -> ArraySlice<Element>", "return_value": {"return_description": ["A subsequence terminating at the end of the collection with at most maxLength elements."], "return_name": [""], "return_type": ["ArraySlice<Element>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the specified position to the end of the collection.", "method_name": "suffix", "params": [{"param_type": "Int", "param_description": "The index at which to start the resulting subsequence. start must be a valid index of the collection.", "param_name": ["from", "start"]}], "class_name": "ContiguousArray", "method_declar": "func suffix(from start: Int) -> ArraySlice<Element>", "return_value": {"return_description": ["A subsequence starting at the start position."], "return_name": [""], "return_type": ["ArraySlice<Element>"]}, "is_static": false}, {"method_description": "Exchanges the values at the specified indices of the collection.", "method_name": "swapAt", "params": [{"param_type": "Int", "param_description": "The index of the first value to swap.", "param_name": ["i"]}, {"param_type": "Int", "param_description": "The index of the second value to swap.", "param_name": ["j"]}], "class_name": "ContiguousArray", "method_declar": "mutating func swapAt(_ i: Int, _ j: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Calls a closure with a pointer to the array\u2019s contiguous storage.", "method_name": "withUnsafeBufferPointer", "params": [{"param_type": "(UnsafeBufferPointer<Element>) throws -> R", "param_description": "A closure with an UnsafeBufferPointer parameter that points to the contiguous storage for the array.  If body has a return value, that value is also used as the return value for the withUnsafeBufferPointer(_:) method. The pointer argument is valid only for the duration of the method\u2019s execution.", "param_name": ["body"]}], "class_name": "ContiguousArray", "method_declar": "func withUnsafeBufferPointer<R>(_ body: (UnsafeBufferPointer<Element>) throws -> R) rethrows -> R", "return_value": {"return_description": ["The return value, if any, of the body closure parameter."], "return_name": [""], "return_type": ["R"]}, "is_static": false}, {"method_description": "Calls the given closure with a pointer to the underlying bytes of the array\u2019s contiguous storage.", "method_name": "withUnsafeBytes", "params": [{"param_type": "(UnsafeRawBufferPointer) throws -> R", "param_description": "A closure with an UnsafeRawBufferPointer parameter that points to the contiguous storage for the array. If no such storage exists, it is created. If body has a return value, that value is also used as the return value for the withUnsafeBytes(_:) method. The argument is valid only for the duration of the closure\u2019s execution.", "param_name": ["body"]}], "class_name": "ContiguousArray", "method_declar": "func withUnsafeBytes<R>(_ body: (UnsafeRawBufferPointer) throws -> R) rethrows -> R", "return_value": {"return_description": ["The return value, if any, of the body closure parameter."], "return_name": [""], "return_type": ["R"]}, "is_static": false}, {"method_description": "Calls the given closure with a pointer to the array\u2019s mutable contiguous storage.", "method_name": "withUnsafeMutableBufferPointer", "params": [{"param_type": "(inout UnsafeMutableBufferPointer<Element>) throws -> R", "param_description": "A closure with an UnsafeMutableBufferPointer parameter that points to the contiguous storage for the array. If body has a return value, that value is also used as the return value for the withUnsafeMutableBufferPointer(_:) method. The pointer argument is valid only for the duration of the method\u2019s execution.", "param_name": ["body"]}], "class_name": "ContiguousArray", "method_declar": "mutating func withUnsafeMutableBufferPointer<R>(_ body: (inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R", "return_value": {"return_description": ["The return value, if any, of the body closure parameter."], "return_name": [""], "return_type": ["R"]}, "is_static": false}, {"method_description": "Calls the given closure with a pointer to the underlying bytes of the array\u2019s mutable contiguous storage.", "method_name": "withUnsafeMutableBytes", "params": [{"param_type": "(UnsafeMutableRawBufferPointer) throws -> R", "param_description": "A closure with an UnsafeMutableRawBufferPointer parameter that points to the contiguous storage for the array. If no such storage exists, it is created. If body has a return value, that value is also used as the return value for the withUnsafeMutableBytes(_:) method. The argument is valid only for the duration of the closure\u2019s execution.", "param_name": ["body"]}], "class_name": "ContiguousArray", "method_declar": "mutating func withUnsafeMutableBytes<R>(_ body: (UnsafeMutableRawBufferPointer) throws -> R) rethrows -> R", "return_value": {"return_description": ["The return value, if any, of the body closure parameter."], "return_name": [""], "return_type": ["R"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "ContiguousArray<Element>", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "ContiguousArray<Element>", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "ContiguousArray", "method_declar": "static func != (lhs: ContiguousArray<Element>, rhs: ContiguousArray<Element>) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Creates a new collection by concatenating the elements of a sequence and a collection.", "method_name": "+", "params": [{"param_type": "Sequence", "param_description": "A collection or finite sequence.", "param_name": ["lhs"]}, {"param_type": "ContiguousArray<Element>", "param_description": "A range-replaceable collection.", "param_name": ["rhs"]}], "class_name": "ContiguousArray", "method_declar": "static func + <Other>(lhs: Other, rhs: ContiguousArray<Element>) -> ContiguousArray<Element> where Other : Sequence, Self.Element == Other.Element", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ContiguousArray<Element>"]}, "is_static": true}, {"method_description": "Creates a new collection by concatenating the elements of a collection and a sequence.", "method_name": "+", "params": [{"param_type": "ContiguousArray<Element>", "param_description": "A range-replaceable collection.", "param_name": ["lhs"]}, {"param_type": "Sequence", "param_description": "A collection or finite sequence.", "param_name": ["rhs"]}], "class_name": "ContiguousArray", "method_declar": "static func + <Other>(lhs: ContiguousArray<Element>, rhs: Other) -> ContiguousArray<Element> where Other : Sequence, Self.Element == Other.Element", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ContiguousArray<Element>"]}, "is_static": true}, {"method_description": "Creates a new collection by concatenating the elements of two collections.", "method_name": "+", "params": [{"param_type": "ContiguousArray<Element>", "param_description": "A range-replaceable collection.", "param_name": ["lhs"]}, {"param_type": "RangeReplaceableCollection", "param_description": "Another range-replaceable collection.", "param_name": ["rhs"]}], "class_name": "ContiguousArray", "method_declar": "static func + <Other>(lhs: ContiguousArray<Element>, rhs: Other) -> ContiguousArray<Element> where Other : RangeReplaceableCollection, Self.Element == Other.Element", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ContiguousArray<Element>"]}, "is_static": true}, {"method_description": "Appends the elements of a sequence to a range-replaceable collection.", "method_name": "+=", "params": [{"param_type": "inout ContiguousArray<Element>", "param_description": "The array to append to.", "param_name": ["lhs"]}, {"param_type": "Sequence", "param_description": "A collection or finite sequence.", "param_name": ["rhs"]}], "class_name": "ContiguousArray", "method_declar": "static func += <Other>(lhs: inout ContiguousArray<Element>, rhs: Other) where Other : Sequence, Self.Element == Other.Element", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two arrays contain the same elements in the same order.", "method_name": "==", "params": [{"param_type": "ContiguousArray<Element>", "param_description": "An array to compare.", "param_name": ["lhs"]}, {"param_type": "ContiguousArray<Element>", "param_description": "Another array to compare.", "param_name": ["rhs"]}], "class_name": "ContiguousArray", "method_declar": "static func == (lhs: ContiguousArray<Element>, rhs: ContiguousArray<Element>) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}], "class_inherit_list": [], "class_name": "ContiguousArray", "typealias": [], "Vars": [{"var_description": "The total number of elements that the array can contain without allocating new storage.", "var_type": "Int", "is_static": false, "var_name": "capacity"}, {"var_description": "The number of elements in the array.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "The number of elements in the array.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "A mirror that reflects the array.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "A textual representation of the array and its elements, suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A textual representation of the array and its elements.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "The array\u2019s \u201cpast the end\u201d position\u2014that is, the position one greater than the last valid subscript argument.", "var_type": "Int", "is_static": false, "var_name": "endIndex"}, {"var_description": "The first element of the collection.", "var_type": "Element", "is_static": false, "var_name": "first"}, {"var_description": "The indices that are valid for subscripting the collection, in ascending order.", "var_type": "Range<Int>", "is_static": false, "var_name": "indices"}, {"var_description": "A Boolean value indicating whether the collection is empty.", "var_type": "Bool", "is_static": false, "var_name": "isEmpty"}, {"var_description": "The last element of the collection.", "var_type": "Element", "is_static": false, "var_name": "last"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<ContiguousArray<Element>>", "is_static": false, "var_name": "lazy"}, {"var_description": "The position of the first element in a nonempty array.", "var_type": "Int", "is_static": false, "var_name": "startIndex"}, {"var_description": "A value less than or equal to the number of elements in the collection.", "var_type": "Int", "is_static": false, "var_name": "underestimatedCount"}, {"var_description": "A value less than or equal to the number of elements in the collection.", "var_type": "Int", "is_static": false, "var_name": "underestimatedCount"}], "class_type": "struct", "interface_list": ["CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "MutableCollection", "RandomAccessCollection", "RangeReplaceableCollection"], "package_name": "foundation", "subclass_list": []}