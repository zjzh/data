{"Methods": [{"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "One of the values to multiply before adding to this value.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "The other value to multiply.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Adds the product of the two given values to this value in place, computed without intermediate rounding.", "is_static": false, "method_name": "addProduct", "method_declar": "mutating func addProduct(_ lhs: Float80, _ rhs: Float80)"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The product of lhs and rhs, added to this value."]}, "class_name": "Float80", "params": [{"param_description": "One of the values to multiply before adding to this value.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "The other value to multiply.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.", "is_static": false, "method_name": "addingProduct", "method_declar": "func addingProduct(_ lhs: Float80, _ rhs: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["A new value that is amount added to this value."]}, "class_name": "Float80", "params": [{"param_description": "The distance to advance this value.", "param_type": "Float80", "param_name": ["by", "amount"]}], "method_description": "Returns a new value advanced by the given distance.", "is_static": false, "method_name": "advanced", "method_declar": "func advanced(by amount: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The distance between this value and other."]}, "class_name": "Float80", "params": [{"param_description": "A value to calculate the distance to.", "param_type": "Float80", "param_name": ["to", "other"]}], "method_description": "Returns the distance from this value to the specified value.", "is_static": false, "method_name": "distance", "method_declar": "func distance(to other: Float80) -> Float80"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "The value to use when dividing this value.", "param_type": "Float80", "param_name": ["dividingBy", "other"]}], "method_description": "Replaces this value with the remainder of itself divided by the given value.", "is_static": false, "method_name": "formRemainder", "method_declar": "mutating func formRemainder(dividingBy other: Float80)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [], "method_description": "Replaces this value with its square root, rounded to a representable value.", "is_static": false, "method_name": "formSquareRoot", "method_declar": "mutating func formSquareRoot()"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "The value to use when dividing this value.", "param_type": "Float80", "param_name": ["dividingBy", "other"]}], "method_description": "Replaces this value with the remainder of itself divided by the given value using truncating division.", "is_static": false, "method_name": "formTruncatingRemainder", "method_declar": "mutating func formTruncatingRemainder(dividingBy other: Float80)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}], "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "is_static": false, "method_name": "hash", "method_declar": "func hash(into hasher: inout Hasher)"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if other has the same value as this instance; otherwise, false."]}, "class_name": "Float80", "params": [{"param_description": "The value to compare with this value.", "param_type": "Float80", "param_name": ["to", "other"]}], "method_description": "Returns a Boolean value indicating whether this instance is equal to the given value.", "is_static": false, "method_name": "isEqual", "method_declar": "func isEqual(to other: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if other is less than this value; otherwise, false."]}, "class_name": "Float80", "params": [{"param_description": "The value to compare with this value.", "param_type": "Float80", "param_name": ["than", "other"]}], "method_description": "Returns a Boolean value indicating whether this instance is less than the given value.", "is_static": false, "method_name": "isLess", "method_declar": "func isLess(than other: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if other is less than this value; otherwise, false."]}, "class_name": "Float80", "params": [{"param_description": "The value to compare with this value.", "param_type": "Float80", "param_name": ["other"]}], "method_description": "Returns a Boolean value indicating whether this instance is less than or equal to the given value.", "is_static": false, "method_name": "isLessThanOrEqualTo", "method_declar": "func isLessThanOrEqualTo(_ other: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if this value is ordered below or the same as other in a total ordering of the floating-point type; otherwise, false."]}, "class_name": "Float80", "params": [{"param_description": "A floating-point value to compare to this value.", "param_type": "Float80", "param_name": ["belowOrEqualTo", "other"]}], "method_description": "Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.", "is_static": false, "method_name": "isTotallyOrdered", "method_declar": "func isTotallyOrdered(belowOrEqualTo other: Float80) -> Bool"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [], "method_description": "Replaces this value with its additive inverse.", "is_static": false, "method_name": "negate", "method_declar": "mutating func negate()"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [], "method_description": "Replaces this value with its additive inverse.", "is_static": false, "method_name": "negate", "method_declar": "mutating func negate()"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The remainder of this value divided by other."]}, "class_name": "Float80", "params": [{"param_description": "The value to use when dividing this value.", "param_type": "Float80", "param_name": ["dividingBy", "other"]}], "method_description": "Returns the remainder of this value divided by the given value.", "is_static": false, "method_name": "remainder", "method_declar": "func remainder(dividingBy other: Float80) -> Float80"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [], "method_description": "Rounds this value to an integral value using \u201cschoolbook rounding.\u201d", "is_static": false, "method_name": "round", "method_declar": "mutating func round()"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "The rounding rule to use.", "param_type": "FloatingPointRoundingRule", "param_name": ["rule"]}], "method_description": "Rounds the value to an integral value using the specified rounding rule.", "is_static": false, "method_name": "round", "method_declar": "mutating func round(_ rule: FloatingPointRoundingRule)"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The nearest integral value, or, if two integral values are equally close, the integral value with greater magnitude."]}, "class_name": "Float80", "params": [], "method_description": "Returns this value rounded to an integral value using \u201cschoolbook rounding.\u201d", "is_static": false, "method_name": "rounded", "method_declar": "func rounded() -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The integral value found by rounding using rule."]}, "class_name": "Float80", "params": [{"param_description": "The rounding rule to use.", "param_type": "FloatingPointRoundingRule", "param_name": ["rule"]}], "method_description": "Returns this value rounded to an integral value using the specified rounding rule.", "is_static": false, "method_name": "rounded", "method_declar": "func rounded(_ rule: FloatingPointRoundingRule) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The square root of the value."]}, "class_name": "Float80", "params": [], "method_description": "Returns the square root of the value, rounded to a representable value.", "is_static": false, "method_name": "squareRoot", "method_declar": "func squareRoot() -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The remainder of this value divided by other using truncating division."]}, "class_name": "Float80", "params": [{"param_description": "The value to use when dividing this value.", "param_type": "Float80", "param_name": ["dividingBy", "other"]}], "method_description": "Returns the remainder of this value divided by the given value using truncating division.", "is_static": false, "method_name": "truncatingRemainder", "method_declar": "func truncatingRemainder(dividingBy other: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The greater of x and y, or whichever is a number if the other is NaN."]}, "class_name": "Float80", "params": [{"param_description": "A floating-point value.", "param_type": "Float80", "param_name": ["x"]}, {"param_description": "Another floating-point value.", "param_type": "Float80", "param_name": ["y"]}], "method_description": "Returns the greater of the two given values.", "is_static": true, "method_name": "maximum", "method_declar": "static func maximum(_ x: Float80, _ y: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["Whichever of x or y has greater magnitude, or whichever is a number if the other is NaN."]}, "class_name": "Float80", "params": [{"param_description": "A floating-point value.", "param_type": "Float80", "param_name": ["x"]}, {"param_description": "Another floating-point value.", "param_type": "Float80", "param_name": ["y"]}], "method_description": "Returns the value with greater magnitude.", "is_static": true, "method_name": "maximumMagnitude", "method_declar": "static func maximumMagnitude(_ x: Float80, _ y: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The minimum of x and y, or whichever is a number if the other is NaN."]}, "class_name": "Float80", "params": [{"param_description": "A floating-point value.", "param_type": "Float80", "param_name": ["x"]}, {"param_description": "Another floating-point value.", "param_type": "Float80", "param_name": ["y"]}], "method_description": "Returns the lesser of the two given values.", "is_static": true, "method_name": "minimum", "method_declar": "static func minimum(_ x: Float80, _ y: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["Whichever of x or y has lesser magnitude, or whichever is a number if the other is NaN."]}, "class_name": "Float80", "params": [{"param_description": "A floating-point value.", "param_type": "Float80", "param_name": ["x"]}, {"param_description": "Another floating-point value.", "param_type": "Float80", "param_name": ["y"]}], "method_description": "Returns the value with lesser magnitude.", "is_static": true, "method_name": "minimumMagnitude", "method_declar": "static func minimumMagnitude(_ x: Float80, _ y: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["A random value within the bounds of range."]}, "class_name": "Float80", "params": [{"param_description": "The range in which to create a random value. Must be finite.", "param_type": "ClosedRange<Float80>", "param_name": ["in", "range"]}], "method_description": "Returns a random value within the specified range.", "is_static": true, "method_name": "random", "method_declar": "static func random(in range: ClosedRange<Float80>) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["A random value within the bounds of range."]}, "class_name": "Float80", "params": [{"param_description": "The range in which to create a random value. range must be finite and non-empty.", "param_type": "Range<Float80>", "param_name": ["in", "range"]}], "method_description": "Returns a random value within the specified range.", "is_static": true, "method_name": "random", "method_declar": "static func random(in range: Range<Float80>) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["A random value within the bounds of range."]}, "class_name": "Float80", "params": [{"param_description": "The range in which to create a random value. Must be finite.", "param_type": "ClosedRange<Float80>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout T", "param_name": ["using", "generator"]}], "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "is_static": true, "method_name": "random", "method_declar": "static func random<T>(in range: ClosedRange<Float80>, using generator: inout T) -> Float80 where T : RandomNumberGenerator"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["A random value within the bounds of range."]}, "class_name": "Float80", "params": [{"param_description": "The range in which to create a random value. range must be finite and non-empty.", "param_type": "Range<Float80>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout T", "param_name": ["using", "generator"]}], "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "is_static": true, "method_name": "random", "method_declar": "static func random<T>(in range: Range<Float80>, using generator: inout T) -> Float80 where T : RandomNumberGenerator"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "A value to compare.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether two values are not equal.", "is_static": true, "method_name": "!=", "method_declar": "static func != (lhs: Float80, rhs: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "*", "method_declar": "static func * (lhs: Float80, rhs: Float80) -> Float80"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "inout Float80", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "*=", "method_declar": "static func *= (lhs: inout Float80, rhs: Float80)"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The given argument without any changes."]}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "Float80", "param_name": ["x"]}], "method_description": "Returns the given number unchanged.", "is_static": true, "method_name": "+", "method_declar": "prefix static func + (x: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "+", "method_declar": "static func + (lhs: Float80, rhs: Float80) -> Float80"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "inout Float80", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "+=", "method_declar": "static func += (lhs: inout Float80, rhs: Float80)"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": ["The additive inverse of the argument."]}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "Float80", "param_name": ["operand"]}], "method_description": "Returns the additive inverse of the specified value.", "is_static": true, "method_name": "-", "method_declar": "prefix static func - (operand: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "Float80", "param_name": ["x"]}], "method_description": "", "is_static": true, "method_name": "-", "method_declar": "prefix static func - (x: Float80) -> Float80"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "-", "method_declar": "static func - (lhs: Float80, rhs: Float80) -> Float80"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "inout Float80", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "-=", "method_declar": "static func -= (lhs: inout Float80, rhs: Float80)"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeFrom<Float80>"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "The lower bound for the range.", "param_type": "Float80", "param_name": ["minimum"]}], "method_description": "Returns a partial range extending upward from a lower bound.", "is_static": true, "method_name": "...", "method_declar": "postfix static func ... (minimum: Float80) -> PartialRangeFrom<Float80>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeThrough<Float80>"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "The upper bound for the range.", "param_type": "Float80", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, and including, its upper bound.", "is_static": true, "method_name": "...", "method_declar": "prefix static func ... (maximum: Float80) -> PartialRangeThrough<Float80>"}, {"return_value": {"return_name": [""], "return_type": ["ClosedRange<Float80>"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "The lower bound for the range.", "param_type": "Float80", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "Float80", "param_name": ["maximum"]}], "method_description": "Returns a closed range that contains both of its bounds.", "is_static": true, "method_name": "...", "method_declar": "static func ... (minimum: Float80, maximum: Float80) -> ClosedRange<Float80>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeUpTo<Float80>"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "The upper bound for the range.", "param_type": "Float80", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, but not including, its upper bound.", "is_static": true, "method_name": "..", "method_declar": "prefix static func ..< (maximum: Float80) -> PartialRangeUpTo<Float80>"}, {"return_value": {"return_name": [""], "return_type": ["Range<Float80>"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "The lower bound for the range.", "param_type": "Float80", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "Float80", "param_name": ["maximum"]}], "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "is_static": true, "method_name": "..", "method_declar": "static func ..< (minimum: Float80, maximum: Float80) -> Range<Float80>"}, {"return_value": {"return_name": [""], "return_type": ["Float80"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "/", "method_declar": "static func / (lhs: Float80, rhs: Float80) -> Float80"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "inout Float80", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "/=", "method_declar": "static func /= (lhs: inout Float80, rhs: Float80)"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "A value to compare.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func < (lhs: Float80, rhs: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "Float80", "param_name": ["x"]}, {"param_description": "", "param_type": "Float80", "param_name": ["y"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func < (x: Float80, y: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "A value to compare.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func <= (lhs: Float80, rhs: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "A value to compare.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func <= (lhs: Float80, rhs: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "A value to compare.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether two values are equal.", "is_static": true, "method_name": "==", "method_declar": "static func == (lhs: Float80, rhs: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "", "param_type": "Float80", "param_name": ["x"]}, {"param_description": "", "param_type": "Float80", "param_name": ["y"]}], "method_description": "Returns a Boolean value indicating whether two values are equal.", "is_static": true, "method_name": "==", "method_declar": "static func == (x: Float80, y: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "A value to compare.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "is_static": true, "method_name": ">", "method_declar": "static func > (lhs: Float80, rhs: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "A value to compare.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "is_static": true, "method_name": ">", "method_declar": "static func > (lhs: Float80, rhs: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "Float80", "params": [{"param_description": "A value to compare.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "is_static": true, "method_name": ">=", "method_declar": "static func >= (lhs: Float80, rhs: Float80) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."]}, "class_name": "Float80", "params": [{"param_description": "A value to compare.", "param_type": "Float80", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Float80", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "is_static": true, "method_name": ">=", "method_declar": "static func >= (lhs: Float80, rhs: Float80) -> Bool"}], "Vars": [{"var_description": "The floating-point value with the same sign and exponent as this value, but with a significand of 1.0.", "is_static": false, "var_name": "binade", "var_type": "Float80"}, {"var_description": "A textual representation of the value, suitable for debugging.", "is_static": false, "var_name": "debugDescription", "var_type": "String"}, {"var_description": "A textual representation of the value.", "is_static": false, "var_name": "description", "var_type": "String"}, {"var_description": "The exponent of the floating-point value.", "is_static": false, "var_name": "exponent", "var_type": "Int"}, {"var_description": "The raw encoding of the value\u2019s exponent field.", "is_static": false, "var_name": "exponentBitPattern", "var_type": "UInt"}, {"var_description": "The classification of this value.", "is_static": false, "var_name": "floatingPointClass", "var_type": "FloatingPointClassification"}, {"var_description": "A Boolean value indicating whether the instance\u2019s representation is in the canonical form.", "is_static": false, "var_name": "isCanonical", "var_type": "Bool"}, {"var_description": "A Boolean value indicating whether this instance is finite.", "is_static": false, "var_name": "isFinite", "var_type": "Bool"}, {"var_description": "A Boolean value indicating whether the instance is infinite.", "is_static": false, "var_name": "isInfinite", "var_type": "Bool"}, {"var_description": "A Boolean value indicating whether the instance is NaN (\u201cnot a number\u201d).", "is_static": false, "var_name": "isNaN", "var_type": "Bool"}, {"var_description": "A Boolean value indicating whether this instance is normal.", "is_static": false, "var_name": "isNormal", "var_type": "Bool"}, {"var_description": "A Boolean value indicating whether the instance is a signaling NaN.", "is_static": false, "var_name": "isSignalingNaN", "var_type": "Bool"}, {"var_description": "A Boolean value indicating whether the instance is subnormal.", "is_static": false, "var_name": "isSubnormal", "var_type": "Bool"}, {"var_description": "A Boolean value indicating whether the instance is equal to zero.", "is_static": false, "var_name": "isZero", "var_type": "Bool"}, {"var_description": "The magnitude of this value.", "is_static": false, "var_name": "magnitude", "var_type": "Float80"}, {"var_description": "The greatest representable value that compares less than this value.", "is_static": false, "var_name": "nextDown", "var_type": "Float80"}, {"var_description": "The least representable value that compares greater than this value.", "is_static": false, "var_name": "nextUp", "var_type": "Float80"}, {"var_description": "The sign of the floating-point value.", "is_static": false, "var_name": "sign", "var_type": "FloatingPointSign"}, {"var_description": "The significand of the floating-point value.", "is_static": false, "var_name": "significand", "var_type": "Float80"}, {"var_description": "The raw encoding of the value\u2019s significand field.", "is_static": false, "var_name": "significandBitPattern", "var_type": "UInt64"}, {"var_description": "The number of bits required to represent the value\u2019s significand.", "is_static": false, "var_name": "significandWidth", "var_type": "Int"}, {"var_description": "The unit in the last place of this value.", "is_static": false, "var_name": "ulp", "var_type": "Float80"}, {"var_description": "The number of bits used to represent the type\u2019s exponent.", "is_static": false, "var_name": "exponentBitCount", "var_type": "Int"}, {"var_description": "The greatest finite number representable by this type.", "is_static": false, "var_name": "greatestFiniteMagnitude", "var_type": "Float80"}, {"var_description": "Positive infinity.", "is_static": false, "var_name": "infinity", "var_type": "Float80"}, {"var_description": "The least positive number.", "is_static": false, "var_name": "leastNonzeroMagnitude", "var_type": "Float80"}, {"var_description": "The least positive normal number.", "is_static": false, "var_name": "leastNormalMagnitude", "var_type": "Float80"}, {"var_description": "A quiet NaN (\u201cnot a number\u201d).", "is_static": false, "var_name": "nan", "var_type": "Float80"}, {"var_description": "The mathematical constant pi.", "is_static": false, "var_name": "pi", "var_type": "Float80"}, {"var_description": "The radix, or base of exponentiation, for this floating-point type.", "is_static": false, "var_name": "radix", "var_type": "Int"}, {"var_description": "A signaling NaN (\u201cnot a number\u201d).", "is_static": false, "var_name": "signalingNaN", "var_type": "Float80"}, {"var_description": "The available number of fractional significand bits.", "is_static": false, "var_name": "significandBitCount", "var_type": "Int"}, {"var_description": "The unit in the last place of 1.0.", "is_static": false, "var_name": "ulpOfOne", "var_type": "Float80"}, {"var_description": "The unit in the last place of 1.0.", "is_static": false, "var_name": "ulpOfOne", "var_type": "Float80"}], "class_name": "Float80", "interface_list": ["BinaryFloatingPoint", "CustomDebugStringConvertible", "CustomStringConvertible", "ExpressibleByIntegerLiteral", "Hashable", "LosslessStringConvertible", "Strideable"], "class_description": "", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}