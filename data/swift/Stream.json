{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Creates and returns by reference an NSInputStream object and NSOutputStream object for a socket connection with a given host on a given port.", "is_static": false, "method_name": "getStreamsTo", "class_name": "Stream", "method_declar": "class func getStreamsTo(_ host: Host, port: Int, inputStream: AutoreleasingUnsafeMutablePointer<InputStream?>?, outputStream: AutoreleasingUnsafeMutablePointer<OutputStream?>?)", "params": [{"param_type": "Host", "param_description": "The host to which to connect.", "param_name": ["host"]}, {"param_type": "Int", "param_description": "The port to connect to on host.", "param_name": ["port"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<InputStream>", "param_description": "Upon return, contains the input stream. If nil is passed, the stream object is not created.", "param_name": ["inputStream"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<OutputStream>", "param_description": "Upon return, contains the output stream. If nil is passed, the stream object is not created.", "param_name": ["outputStream"]}]}, {"return_value": {"return_name": [""], "return_description": ["The receiver\u2019s property for the key key."], "return_type": ["An"]}, "method_description": "Returns the receiver\u2019s property for a given key.", "is_static": false, "method_name": "property", "class_name": "Stream", "method_declar": "func property(forKey key: Stream.PropertyKey) -> Any?", "params": [{"param_type": "Stream.PropertyKey", "param_description": "The key for one of the receiver's properties. See Constants for a description of the available property-key constants and associated values.", "param_name": ["forKey", "key"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the value is accepted by the receiver, otherwise false."], "return_type": ["Boo"]}, "method_description": "Attempts to set the value of a given property of the receiver and returns a Boolean value that indicates whether the value is accepted by the receiver.", "is_static": false, "method_name": "setProperty", "class_name": "Stream", "method_declar": "func setProperty(_ property: Any?, forKey key: Stream.PropertyKey) -> Bool", "params": [{"param_type": "Any", "param_description": "The value for key.", "param_name": ["property"]}, {"param_type": "Stream.PropertyKey", "param_description": "The key for one of the receiver's properties. See Constants for a description of the available property-key constants and expected values.", "param_name": ["forKey", "key"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Opens the receiving stream.", "is_static": false, "method_name": "open", "class_name": "Stream", "method_declar": "func open()", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Closes the receiver.", "is_static": false, "method_name": "close", "class_name": "Stream", "method_declar": "func close()", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Schedules the receiver on a given run loop in a given mode.", "is_static": false, "method_name": "schedule", "class_name": "Stream", "method_declar": "func schedule(in aRunLoop: RunLoop, forMode mode: RunLoop.Mode)", "params": [{"param_type": "RunLoop", "param_description": "The run loop on which to schedule the receiver.", "param_name": ["in", "aRunLoop"]}, {"param_type": "RunLoop.Mode", "param_description": "The mode for the run loop.", "param_name": ["forMode", "mode"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the receiver from a given run loop running in a given mode.", "is_static": false, "method_name": "remove", "class_name": "Stream", "method_declar": "func remove(from aRunLoop: RunLoop, forMode mode: RunLoop.Mode)", "params": [{"param_type": "RunLoop", "param_description": "The run loop on which the receiver was scheduled.", "param_name": ["from", "aRunLoop"]}, {"param_type": "RunLoop.Mode", "param_description": "The mode for the run loop.", "param_name": ["forMode", "mode"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Creates and returns by reference a bound pair of input and output streams.", "is_static": false, "method_name": "getBoundStreams", "class_name": "Stream", "method_declar": "class func getBoundStreams(withBufferSize bufferSize: Int, inputStream: AutoreleasingUnsafeMutablePointer<InputStream?>?, outputStream: AutoreleasingUnsafeMutablePointer<OutputStream?>?)", "params": [{"param_type": "Int", "param_description": "", "param_name": ["withBufferSize", "bufferSize"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<InputStream>", "param_description": "On return, contains an input stream. ", "param_name": ["inputStream"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<OutputStream>", "param_description": "On return, contains an output stream.", "param_name": ["outputStream"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "", "is_static": false, "method_name": "getStreamsToHost", "class_name": "Stream", "method_declar": "class func getStreamsToHost(withName hostname: String, port: Int, inputStream: AutoreleasingUnsafeMutablePointer<InputStream?>?, outputStream: AutoreleasingUnsafeMutablePointer<OutputStream?>?)", "params": [{"param_type": "String", "param_description": "", "param_name": ["withName", "hostname"]}, {"param_type": "Int", "param_description": "", "param_name": ["port"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<InputStream>", "param_description": "", "param_name": ["inputStream"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<OutputStream>", "param_description": "", "param_name": ["outputStream"]}]}], "class_type": "class", "class_name": "Stream", "Vars": [{"var_name": "delegate", "var_type": "StreamDelegate", "var_description": "Sets the receiver\u2019s delegate.", "is_static": false}, {"var_name": "streamStatus", "var_type": "Stream.Status", "var_description": "Returns the receiver\u2019s status.", "is_static": false}, {"var_name": "streamError", "var_type": "Error", "var_description": "Returns an NSError object representing the stream error. ", "is_static": false}, {"var_name": "NSStreamSocketSSLErrorDomain", "var_type": "String", "var_description": "The error domain used by NSError when reporting SSL errors.", "is_static": false}, {"var_name": "NSStreamSOCKSErrorDomain", "var_type": "String", "var_description": "The error domain used by NSError when reporting SOCKS errors.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "This class's interface is common to all Cocoa stream classes, including its concrete subclasses InputStream and OutputStream.\nStream objects provide an easy way to read and write data to and from a variety of media in a device-independent way. You can create stream objects for data located in memory, in a file, or on a network (using sockets), and you can use stream objects without loading all of the data into memory at once. \nBy default, Stream instances that are not file-based are non-seekable, one-way streams (although custom seekable subclasses are possible). Once the data has been provided or consumed, the data cannot be retrieved from the stream. \nNSStream is an abstract class, incapable of instantiation and intended to be subclassed. It publishes a programmatic interface that all subclasses must adopt and provide implementations for. The two Apple-provided concrete subclasses of NSStream, InputStream and OutputStream, are suitable for most purposes. However, there might be situations when you want a peer subclass to NSInputStream and NSOutputStream. For example, you might want a class that implements a full-duplex (two-way) stream, or a class whose instances are capable of seeking through a stream.\nAll subclasses must fully implement the following methods, which are presented in functional pairs:\nopen() and close()\nImplement open() to open the stream for reading or writing and make the stream available to the client directly or, if the stream object is scheduled on a run loop, to the delegate. Implement close() to close the stream and remove the stream object from the run loop, if necessary. A closed stream should still be able to accept new properties and report its current properties. Once a stream is closed, it cannot be reopened. \ndelegate and delegate\nReturn and set the delegate. By a default, a stream object must be its own delegate; so a delegate message with an argument of nil should restore this delegate. Do not retain the delegate to prevent retain cycles.\nTo learn about delegates and delegation, read \"Delegation\" in Cocoa Fundamentals Guide.\nschedule(in:forMode:) and remove(from:forMode:)\nImplement schedule(in:forMode:) to schedule the stream object on the specified run loop for the specified mode. Implement remove(from:forMode:) to remove the object from the run loop. See the documentation of the RunLoop class for details. Once the stream object for an open stream is scheduled on a run loop, it is the responsibility of the subclass as it processes stream data to send stream(_:handle:) messages to its delegate.\nproperty(forKey:) and setProperty(_:forKey:)\nImplement these methods to return and set, respectively, the property value for the specified key. You may add custom properties, but be sure to handle all properties defined by NSStream as well.\nstreamStatus and streamError\nImplement streamStatus to return the current status of the stream as a NSStreamStatus constant; you may define new NSStreamStatus constants, but be sure to handle the NSStream-defined constants properly. ImplementstreamError to return an NSError object representing the current error. You might decide to return a custom NSError object that can provide complete and localized information about the error.\n", "package_name": "foundation"}