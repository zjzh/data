{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [], "return_description": ["A new authentication challenge object, based on an existing challenge."], "return_type": []}, "method_description": "Creates an authentication challenge from an existing challenge instance.", "is_static": false, "method_name": "init", "class_name": "URLAuthenticationChallenge", "method_declar": "init(authenticationChallenge challenge: URLAuthenticationChallenge, sender: URLAuthenticationChallengeSender)", "params": [{"param_type": "URLAuthenticationChallenge", "param_description": "The challenge that you want to copy. Usually, this is a challenge received by an existing URLProtocol subclass that you are subclassing.", "param_name": ["authenticationChallenge", "challenge"]}, {"param_type": "URLAuthenticationChallengeSender", "param_description": "The sender that you want to use for the new object. Typically, the sender is the instance of your custom URLProtocol subclass that called this method.", "param_name": ["sender"]}]}, {"return_value": {"return_name": [], "return_description": ["A new authentication challenge object, with the given properties."], "return_type": []}, "method_description": "Initializes an authentication challenge from parameters you provide.", "is_static": false, "method_name": "init", "class_name": "URLAuthenticationChallenge", "method_declar": "init(protectionSpace space: URLProtectionSpace, proposedCredential credential: URLCredential?, previousFailureCount: Int, failureResponse response: URLResponse?, error: Error?, sender: URLAuthenticationChallengeSender)", "params": [{"param_type": "URLProtectionSpace", "param_description": "The protection space for the authentication challenge. This provides additional information about the authentication request, such as the host, port, authentication realm, and so on.", "param_name": ["protectionSpace", "space"]}, {"param_type": "URLCredential", "param_description": "The proposed credential, or nil.", "param_name": ["proposedCredential", "credential"]}, {"param_type": "Int", "param_description": "The total number of previous failures for this request, including failures for other protection spaces.", "param_name": ["previousFailureCount"]}, {"param_type": "URLResponse", "param_description": "An instance of URLResponse containing the server response that caused you to generate an authentication challenge, or nil if no response object is applicable to the challenge.", "param_name": ["failureResponse", "response"]}, {"param_type": "Error", "param_description": "An NSError instance describing the authentication failure, or nil if it is not applicable to the challenge.", "param_name": ["error"]}, {"param_type": "URLAuthenticationChallengeSender", "param_description": "The object that initiated the authentication challenge (typically, the object that called this method).", "param_name": ["sender"]}]}], "class_type": "class", "class_name": "URLAuthenticationChallenge", "Vars": [{"var_name": "protectionSpace", "var_type": "URLProtectionSpace", "var_description": "The receiver\u2019s protection space.", "is_static": false}, {"var_name": "failureResponse", "var_type": "URLResponse", "var_description": "The URL response object representing the last authentication failure.", "is_static": false}, {"var_name": "previousFailureCount", "var_type": "Int", "var_description": "The receiver\u2019s count of failed authentication attempts.", "is_static": false}, {"var_name": "proposedCredential", "var_type": "URLCredential", "var_description": "The proposed credential for this challenge.", "is_static": false}, {"var_name": "error", "var_type": "Error", "var_description": "The error object representing the last authentication failure.", "is_static": false}, {"var_name": "sender", "var_type": "URLAuthenticationChallengeSender", "var_description": "The sender of the challenge.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSSecureCoding"], "class_description": "Your app receives authentication challenges in various URLSession, NSURLConnection, and NSURLDownload delegate methods, such as urlSession(_:task:didReceive:completionHandler:). These objects provide the information you\u2019ll need when deciding how to handle a server\u2019s request for authentication.\nAt the core of that authentication challenge is a protection space that defines the type of authentication being requested, the host and port number, the networking protocol, and (where applicable) the authentication realm (a group of related URLs on the same server that share a single set of credentials).\n", "package_name": "foundation"}