{"package_name": "foundation", "subclass_list": [], "class_description": "An NSMeasurement object represents a quantity and unit of measure. The NSMeasurement class provides a programmatic interface to converting measurements into different units, as well as calculating the sum or difference between two measurements.\nNSMeasurement objects are initialized with an Unit object and double value. NSMeasurement objects are immutable, and cannot be changed after being created.\nYou can use the MeasurementFormatter class to create localized string representations of NSMeasurement objects.\nImportant\nThe Swift overlay to the Foundation framework provides the Measurement structure, which bridges to the NSMeasurement class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["doubleValue"], "param_type": "Double", "param_description": ""}, {"param_name": ["unit"], "param_type": "Unit", "param_description": "The unit of measure."}], "class_name": "NSMeasurement", "is_static": false, "return_value": {"return_name": [], "return_description": ["A measurement initialized to have the specified double-precision floating-point value and unit."], "return_type": []}, "method_name": "init", "method_description": "Initializes a new measurement with a specified double-precision floating-point value and unit.", "method_declar": "init(doubleValue: Double, unit: Unit)"}, {"params": [{"param_name": ["to", "unit"], "param_type": "Unit", "param_description": ""}], "class_name": "NSMeasurement", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "canBeConverted", "method_description": "Indicates whether the measurement can be converted to the given unit.", "method_declar": "func canBeConverted(to unit: Unit) -> Bool"}, {"params": [{"param_name": ["to", "unit"], "param_type": "Unit", "param_description": "The unit to convert the measurement into."}], "class_name": "NSMeasurement", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new measurement with a value calculated by converting into the new unit."], "return_type": ["Measurement<Unit"]}, "method_name": "converting", "method_description": "Returns a measurement created by converting the receiver to the specified unit.", "method_declar": "func converting(to unit: Unit) -> Measurement<Unit>"}, {"params": [{"param_name": ["measurement"], "param_type": "Measurement<Unit>", "param_description": "The measurement to be added."}], "class_name": "NSMeasurement", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new measurement with a value equal to the receiver\u2019s value plus the value of the specified measurement converted into the unit of the receiver."], "return_type": ["Measurement<Unit"]}, "method_name": "adding", "method_description": "Returns a new measurement by adding the receiver to the specified measurement.", "method_declar": "func adding(_ measurement: Measurement<Unit>) -> Measurement<Unit>"}, {"params": [{"param_name": ["measurement"], "param_type": "Measurement<Unit>", "param_description": "The measurement to be subtracted."}], "class_name": "NSMeasurement", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new measurement with a value equal to the receiver\u2019s value minus the value of the specified measurement converted into the unit of the receiver."], "return_type": ["Measurement<Unit"]}, "method_name": "subtracting", "method_description": "Returns a new measurement by subtracting the specified measurement from the receiver.", "method_declar": "func subtracting(_ measurement: Measurement<Unit>) -> Measurement<Unit>"}], "class_name": "NSMeasurement", "Vars": [{"var_description": "The unit of measure.", "var_type": "Unit", "is_static": false, "var_name": "unit"}, {"var_description": "The measurement value, represented as a double-precision floating-point number.", "var_type": "Double", "is_static": false, "var_name": "doubleValue"}]}