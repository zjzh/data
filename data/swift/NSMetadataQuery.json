{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [""], "return_description": ["true when successful; otherwise, false."], "return_type": ["Boo"]}, "method_description": "Attempts to start the query.", "is_static": false, "method_name": "start", "class_name": "NSMetadataQuery", "method_declar": "func start() -> Bool", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Stops the receiver\u2019s current query from gathering any further results.", "is_static": false, "method_name": "stop", "class_name": "NSMetadataQuery", "method_declar": "func stop()", "params": []}, {"return_value": {"return_name": [""], "return_description": ["The query result at the position specified by index. By default, this method returns an NSMetadataItem object representing the requested result; however, the query\u2019s delegate can substitute this object with an instance of a different class."], "return_type": ["An"]}, "method_description": "Returns the query result at a specific index.", "is_static": false, "method_name": "result", "class_name": "NSMetadataQuery", "method_declar": "func result(at idx: Int) -> Any", "params": [{"param_type": "Int", "param_description": "", "param_name": ["at", "idx"]}]}, {"return_value": {"return_name": [""], "return_description": ["Index of result in the query result array."], "return_type": ["In"]}, "method_description": "Returns the index of a query result object in the receiver\u2019s results array.", "is_static": false, "method_name": "index", "class_name": "NSMetadataQuery", "method_declar": "func index(ofResult result: Any) -> Int", "params": [{"param_type": "Any", "param_description": "The query result object being inquired about.", "param_name": ["ofResult", "result"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Enumerates the current set of results using the given block.", "is_static": false, "method_name": "enumerateResults", "class_name": "NSMetadataQuery", "method_declar": "func enumerateResults(_ block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)", "params": [{"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to execute for each current result.", "param_name": ["block"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Enumerates the current set of results using the given options and block.", "is_static": false, "method_name": "enumerateResults", "class_name": "NSMetadataQuery", "method_declar": "func enumerateResults(options opts: NSEnumerationOptions = [], using block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)", "params": [{"param_type": "NSEnumerationOptions", "param_description": "Options for the enumeration. For a complete list of options, see NSEnumerationOptions. ", "param_name": ["options", "opts"]}, {"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to execute for each current result.", "param_name": ["using", "block"]}]}, {"return_value": {"return_name": [""], "return_description": ["Value for attributeName in the result object at index in the query result array."], "return_type": ["An"]}, "method_description": "Returns the value for the attribute name attrName at the index in the results specified by idx.", "is_static": false, "method_name": "value", "class_name": "NSMetadataQuery", "method_declar": "func value(ofAttribute attrName: String, forResultAt idx: Int) -> Any?", "params": [{"param_type": "String", "param_description": "", "param_name": ["ofAttribute", "attrName"]}, {"param_type": "Int", "param_description": "", "param_name": ["forResultAt", "idx"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Enables updates to the query results.", "is_static": false, "method_name": "enableUpdates", "class_name": "NSMetadataQuery", "method_declar": "func enableUpdates()", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Disables updates to the query results.", "is_static": false, "method_name": "disableUpdates", "class_name": "NSMetadataQuery", "method_declar": "func disableUpdates()", "params": []}], "class_type": "class", "class_name": "NSMetadataQuery", "Vars": [{"var_name": "searchScopes", "var_type": "[Any]", "var_description": "An array containing the search scopes.", "is_static": false}, {"var_name": "predicate", "var_type": "NSPredicate", "var_description": "The predicate used to filter query results.", "is_static": false}, {"var_name": "sortDescriptors", "var_type": "[NSSortDescriptor]", "var_description": "An array of sort descriptor objects.", "is_static": false}, {"var_name": "valueListAttributes", "var_type": "[String]", "var_description": "An array of attributes whose values are gathered by the query.", "is_static": false}, {"var_name": "groupingAttributes", "var_type": "[String]", "var_description": "An array of grouping attributes. (read-only)", "is_static": false}, {"var_name": "notificationBatchingInterval", "var_type": "TimeInterval", "var_description": "The interval at which notification of updated results occurs.", "is_static": false}, {"var_name": "delegate", "var_type": "NSMetadataQueryDelegate", "var_description": "The query\u2019s delegate.", "is_static": false}, {"var_name": "searchItems", "var_type": "[Any]", "var_description": "An array of objects that define the query\u2019s scope.", "is_static": false}, {"var_name": "isStarted", "var_type": "Bool", "var_description": "A Boolean value that indicates whether the query has started. (read-only)", "is_static": false}, {"var_name": "isGathering", "var_type": "Bool", "var_description": "A Boolean value that indicates whether the receiver is in the initial gathering phase of the query. (read-only)", "is_static": false}, {"var_name": "isStopped", "var_type": "Bool", "var_description": "A Boolean value that indicates whether the query has stopped.", "is_static": false}, {"var_name": "results", "var_type": "[Any]", "var_description": "An array containing the query\u2019s results.", "is_static": false}, {"var_name": "resultCount", "var_type": "Int", "var_description": "The number of results returned by the query. (read-only)", "is_static": false}, {"var_name": "groupedResults", "var_type": "[NSMetadataQueryResultGroup]", "var_description": "An array containing hierarchical groups of query results. (read-only)", "is_static": false}, {"var_name": "valueLists", "var_type": "[String", "var_description": "A dictionary containing the value lists generated by the query.", "is_static": false}, {"var_name": "operationQueue", "var_type": "OperationQueue", "var_description": "The queue on which query result notifications are posted.", "is_static": false}, {"var_name": "NSMetadataQueryUserHomeScope", "var_type": "String", "var_description": "Search the user\u2019s home directory.", "is_static": false}, {"var_name": "NSMetadataQueryLocalComputerScope", "var_type": "String", "var_description": "Search all local mounted volumes, including the user home directory. The user\u2019s home directory is searched even if it is a remote volume.", "is_static": false}, {"var_name": "NSMetadataQueryNetworkScope", "var_type": "String", "var_description": "Search all user-mounted remote volumes.", "is_static": false}, {"var_name": "NSMetadataQueryUbiquitousDocumentsScope", "var_type": "String", "var_description": "Search all files in the Documents directories of the app\u2019s iCloud container directories.", "is_static": false}, {"var_name": "NSMetadataQueryUbiquitousDataScope", "var_type": "String", "var_description": "Search all files not in the Documents directories of the app\u2019s iCloud container directories.", "is_static": false}, {"var_name": "NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope", "var_type": "String", "var_description": "Search for documents outside the app\u2019s container. This search can locate iCloud documents that the user previously opened using a document picker view controller. This lets your app access the documents again without requiring direct user interaction. The result\u2019s NSMetadataItemURLKey attributes return security-scoped NSURLs. For more information on working with security-scoped URLs, see Security-Scoped URLs in NSURL.", "is_static": false}, {"var_name": "NSMetadataQueryIndexedLocalComputerScope", "var_type": "String", "var_description": "Search all indexed local mounted volumes including the current user\u2019s home directory (even if the home directory is remote).", "is_static": false}, {"var_name": "NSMetadataQueryIndexedNetworkScope", "var_type": "String", "var_description": "Search all indexed user-mounted remote volumes.", "is_static": false}, {"var_name": "NSMetadataQueryResultContentRelevanceAttribute", "var_type": "String", "var_description": "", "is_static": false}, {"var_name": "NSMetadataQueryUpdateAddedItemsKey", "var_type": "String", "var_description": "The key for retrieving an array of items added to the query result. By default, this array contains NSMetadataItem objects, representing the query\u2019s results; however, the query\u2019s delegate can substitute these objects with instances of a different class.", "is_static": false}, {"var_name": "NSMetadataQueryUpdateChangedItemsKey", "var_type": "String", "var_description": "The key for retrieving an array of items that have changed in the query result. By default, this array contains NSMetadataItem objects, representing the query\u2019s results; however, the query\u2019s delegate can substitute these objects with instances of a different class.", "is_static": false}, {"var_name": "NSMetadataQueryUpdateRemovedItemsKey", "var_type": "String", "var_description": "The key for retrieving an array of items removed from the query result. By default, this array contains NSMetadataItem objects, representing the query\u2019s results; however, the query\u2019s delegate can substitute these objects with instances of a different class.", "is_static": false}, {"var_name": "NSMetadataQueryDidFinishGathering", "var_type": "NSNotification.Name", "var_description": "Posted when the receiver has finished with the initial result-gathering phase of the query.", "is_static": false}, {"var_name": "NSMetadataQueryDidStartGathering", "var_type": "NSNotification.Name", "var_description": "Posted when the receiver begins with the initial result-gathering phase of the query.", "is_static": false}, {"var_name": "NSMetadataQueryDidUpdate", "var_type": "NSNotification.Name", "var_description": "Posted when the receiver\u2019s results have changed during the live-update phase of the query.", "is_static": false}, {"var_name": "NSMetadataQueryGatheringProgress", "var_type": "NSNotification.Name", "var_description": "Posted as the receiver is collecting results during the initial result-gathering phase of the query.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "The NSMetadataQuery class encapsulates the functionality provided by the MDQuery opaque type for querying the Spotlight metadata.\nNSMetadataQuery objects provide metadata query results in several ways:\nAs individual attribute values for requested attributes.\nAs value lists that contain the distinct values for given attributes in the query results.\nAs a result array proxy, containing all the query results. This is suitable for use with Cocoa bindings.\nAs a hierarchical collection of results, grouping together items with the same values for specified grouping attributes. This is also suitable for use with Cocoa bindings.\nQueries have two phases: the initial gathering phase that collects all currently matching results and a second live-update phase.\nBy default, the receiver has no limitation on its search scope. Use the searchScopes property to customize.\nBy default, notification of updated results occurs at 1.0 seconds. Use the notificationBatchingInterval property to customize.\nYou must set a predicate with the predicate property before starting a query.\n", "package_name": "foundation"}