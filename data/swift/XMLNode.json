{"class_description": "Node objects can be of different kinds, corresponding to the following markup constructs in an XML document: element, attribute, text, processing instruction, namespace, and comment. In addition, a document-node object (specifically, an instance of XMLDocument) represents an XML document in its entirety. XMLNode objects can also represent document type declarations as well as declarations in Document Type Definitions (DTDs). Class factory methods of XMLNode enable you to create nodes of each kind. Only document, element, and DTD nodes may have child nodes. \nAmong the XML family of classes (excluding XMLParser) the XMLNode class is the base class. Inheriting from it are the classes XMLElement, XMLDocument, XMLDTD, and XMLDTDNode. XMLNode specifies the interface common to all XML node objects and defines common node behavior and attributes, for example hierarchy level, node name and value, tree traversal, and the ability to emit representative XML markup text.\nYou can subclass XMLNode if you want nodes of kinds different from the supported ones, You can also create a subclass with more specialized attributes or behavior than XMLNode.\nTo subclass XMLNode you need to override the primary initializer, init(kind:options:), and the methods listed below. In most cases, you need only invoke the superclass implementation, adding any subclass-specific code before or after the invocation, as necessary.\nkind\nparent\nname\nchild(at:)\nname\nchildCount\nobjectValue\nchildren\nobjectValue\ndetach()\nstringValue\nlocalName\nsetStringValue(_:resolvingEntities:)\nprefix\nindex\nuri\nBy default XMLNode implements the NSObject isEqual(_:) method to perform a deep comparison: two XMLNode objects are not considered equal unless they have the same name, same child nodes, same attributes, and so on. The comparison looks at the node and its children, but does not include the node\u2019s parent. If you want a different standard of comparison, override isEqual:. \nBecause of the architecture and data model of NSXML, when it parses and processes a source of XML it cannot know about your subclass unless you override the XMLDocument class method replacementClass(for:) to return your custom class in place of an NSXML class. If your custom class has no direct NSXML counterpart\u2014for example, it is a subclass of XMLNode that represents CDATA sections\u2014then you can walk the tree after it has been created and insert the new node where appropriate.\n", "Methods": [{"method_description": "Returns an NSXMLNode instance initialized with the constant indicating node kind.", "method_name": "init", "params": [{"param_type": "XMLNode.Kind", "param_description": "An enum constant of type XMLNode.Kind that indicates the type of node. See Constants for a list of valid NSXMLNodeKind constants.", "param_name": ["kind"]}], "class_name": "XMLNode", "method_declar": "convenience init(kind: XMLNode.Kind)", "return_value": {"return_description": ["An NSXMLNode object initialized with kind or nil if the object couldn't be created. If kind is not a valid NSXMLNodeKind constant, the method returns an NSXMLNode object of kind NSXMLInvalidKind. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an NSXMLNode instance initialized with the constant indicating node kind and one or more initialization options.", "method_name": "init", "params": [{"param_type": "XMLNode.Kind", "param_description": "An enum constant of type XMLNode.Kind that indicates the type of node. See Constants for a list of valid NSXMLNodeKind constants.", "param_name": ["kind"]}, {"param_type": "XMLNode.Options = []", "param_description": "One or more constants that specify initialization options; if there are multiple constants, bit-OR them together. These options request operations on the represented XML related to fidelity (for example, preserving entities), quoting style, handling of empty elements, and other things. See Constants for a list of valid node-initialization constants. ", "param_name": ["options"]}], "class_name": "XMLNode", "method_declar": "init(kind: XMLNode.Kind, options: XMLNode.Options = [])", "return_value": {"return_description": ["An NSXMLNode object initialized with the given kind and options, or nil if the object couldn't be created. If kind is not a valid NSXMLNodeKind constant, the method returns an NSXMLNode object of kind NSXMLInvalidKind. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an NSXMLNode instance initialized with the constant indicating node kind.", "method_name": "init", "params": [{"param_type": "XMLNode.Kind", "param_description": "An enum constant of type XMLNode.Kind that indicates the type of node. See Constants for a list of valid NSXMLNodeKind constants.", "param_name": ["kind"]}], "class_name": "XMLNode", "method_declar": "convenience init(kind: XMLNode.Kind)", "return_value": {"return_description": ["An NSXMLNode object initialized with kind or nil if the object couldn't be created. If kind is not a valid NSXMLNodeKind constant, the method returns an NSXMLNode object of kind NSXMLInvalidKind. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an NSXMLNode instance initialized with the constant indicating node kind and one or more initialization options.", "method_name": "init", "params": [{"param_type": "XMLNode.Kind", "param_description": "An enum constant of type XMLNode.Kind that indicates the type of node. See Constants for a list of valid NSXMLNodeKind constants.", "param_name": ["kind"]}, {"param_type": "XMLNode.Options = []", "param_description": "One or more constants that specify initialization options; if there are multiple constants, bit-OR them together. These options request operations on the represented XML related to fidelity (for example, preserving entities), quoting style, handling of empty elements, and other things. See Constants for a list of valid node-initialization constants. ", "param_name": ["options"]}], "class_name": "XMLNode", "method_declar": "init(kind: XMLNode.Kind, options: XMLNode.Options = [])", "return_value": {"return_description": ["An NSXMLNode object initialized with the given kind and options, or nil if the object couldn't be created. If kind is not a valid NSXMLNodeKind constant, the method returns an NSXMLNode object of kind NSXMLInvalidKind. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an NSXMLNode instance initialized with the constant indicating node kind and one or more initialization options.", "method_name": "init", "params": [{"param_type": "XMLNode.Kind", "param_description": "An enum constant of type XMLNode.Kind that indicates the type of node. See Constants for a list of valid NSXMLNodeKind constants.", "param_name": ["kind"]}, {"param_type": "XMLNode.Options = []", "param_description": "One or more constants that specify initialization options; if there are multiple constants, bit-OR them together. These options request operations on the represented XML related to fidelity (for example, preserving entities), quoting style, handling of empty elements, and other things. See Constants for a list of valid node-initialization constants. ", "param_name": ["options"]}], "class_name": "XMLNode", "method_declar": "init(kind: XMLNode.Kind, options: XMLNode.Options = [])", "return_value": {"return_description": ["An NSXMLNode object initialized with the given kind and options, or nil if the object couldn't be created. If kind is not a valid NSXMLNodeKind constant, the method returns an NSXMLNode object of kind NSXMLInvalidKind. "], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "XMLNode", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying"], "package_name": "foundation", "subclass_list": []}