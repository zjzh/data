{"package_name": "foundation", "subclass_list": [], "class_description": "Starting in iOS 11, item providers play a central role in drag and drop, and in copy/paste. They continue to play a role with app extensions.\nAll completion blocks used in the NSItemProvider class are called by the system on an internal queue. When using an item provider with drag and drop, ensure that user-interface updates take place on the main queue as follows:\n\nAn app extension typically encounters item providers when examining the attachments property of an NSExtensionItem object. During that examination, the extension can use the hasItemConformingToTypeIdentifier(_:) method to look for data that it recognizes. Item providers use Uniform Type Identifier (UTI) values to identify the data they contain. After finding a type of data that your extension can use, it calls the loadItem(forTypeIdentifier:options:completionHandler:) method to load the actual data, which is delivered to the provided completion handler.\nYou can create item providers to vend data to another process. An extension that modifies an original data item can create a new NSItemProvider object to send back to the host app. When creating data items, you specify your data object and the type of that object. You can optionally use the previewImageHandler property to generate a preview image for your data.\nA single item provider may use custom blocks to provide its data in many different formats. When configuring an item provider, use the registerItem(forTypeIdentifier:loadHandler:) method to register your blocks and the formats each one supports. When a client requests data in a particular format, the item provider executes the corresponding block, which is then responsible for coercing the data to the appropriate type and returning it to the client.\n", "class_type": "class", "typealias": ["typealias CompletionHandler = (NSSecureCoding?, Error?) -> Void", "typealias LoadHandler = (NSItemProvider.CompletionHandler?, AnyClass?, [AnyHashable : Any]?) -> Void"], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["contentsOf", "fileURL"], "param_type": "URL!", "param_description": "The URL of the file to use for the item provider\u2019s data. The item provider uses the filename extension to determine the UTI for the associated data."}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [], "return_description": ["An item provider for the specified file or nil if an error occurred."], "return_type": []}, "method_name": "init", "method_description": "Provides data backed by the contents of an existing file. The system uses the URL\u2019s filename extension to select an appropriate UTI.", "method_declar": "convenience init?(contentsOf fileURL: URL!)"}, {"params": [{"param_name": ["item"], "param_type": "NSSecureCoding", "param_description": "An object containing the data you want to provide. You may specify nil for this parameter and register items and types later. "}, {"param_name": ["typeIdentifier"], "param_type": "String", "param_description": "A string that represents the UTI of the item. If item is not nil, this parameter must not be nil."}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [], "return_description": ["An item provider for the specified item."], "return_type": []}, "method_name": "init", "method_description": "Initializes an item provider with an object, according to the NSItemProvider type coercion policy.", "method_declar": "init(item: NSSecureCoding?, typeIdentifier: String?)"}, {"params": [], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Instantiates an empty item provider to which you can later register a data or file representation.", "method_declar": "init()"}, {"params": [{"param_name": ["object"], "param_type": "NSItemProviderWriting", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initializes a new item provider, employing a specified object\u2019s type identifiers to specify the data representations eligible to be loaded by the provider.", "method_declar": "convenience init(object: NSItemProviderWriting)"}, {"params": [{"param_name": ["ofClass", "aClass"], "param_type": "NSItemProviderReading.Type", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "canLoadObject", "method_description": "Returns a Boolean value indicating whether an item provider can load objects of a given class.", "method_declar": "func canLoadObject(ofClass aClass: NSItemProviderReading.Type) -> Bool"}, {"params": [{"param_name": ["typeIdentifier"], "param_type": "String", "param_description": "A string that represents the desired UTI."}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "hasItemConformingToTypeIdentifier", "method_description": "A convenience method equivalent to the hasRepresentationConforming(toTypeIdentifier:fileOptions:) method, but with the fileOptions parameter set to a value of 0.", "method_declar": "func hasItemConformingToTypeIdentifier(_ typeIdentifier: String) -> Bool"}, {"params": [{"param_name": ["forTypeIdentifier", "typeIdentifier"], "param_type": "String", "param_description": "A string that represents the desired UTI."}, {"param_name": ["options"], "param_type": "[AnyHashable", "param_description": "A dictionary of keys and values that provide information about the item, such as the size of an image. (See NSItemProviderPreferredImageSizeKey for a key you can use.)"}, {"param_name": ["[AnyHashable"], "param_type": "Any]", "param_description": ""}, {"param_name": ["completionHandler"], "param_type": "NSItemProvider.CompletionHandler = nil", "param_description": "A completion handler block to execute with the results. For information about the format of this block, see NSItemProvider.CompletionHandler."}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "loadItem", "method_description": "Loads the item\u2019s data and coerces it (as needed) to the specified type.", "method_declar": "func loadItem(forTypeIdentifier typeIdentifier: String, options: [AnyHashable : Any]? = nil, completionHandler: NSItemProvider.CompletionHandler? = nil)"}, {"params": [{"param_name": ["forTypeIdentifier", "typeIdentifier"], "param_type": "String", "param_description": ""}, {"param_name": ["completionHandler"], "param_type": "@escaping (Data, Error) -> Void", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Progres"]}, "method_name": "loadDataRepresentation", "method_description": "Asynchronously copies the provided, typed data into a Data object, returning a Progress object.", "method_declar": "func loadDataRepresentation(forTypeIdentifier typeIdentifier: String, completionHandler: @escaping (Data?, Error?) -> Void) -> Progress"}, {"params": [{"param_name": ["forTypeIdentifier", "typeIdentifier"], "param_type": "String", "param_description": ""}, {"param_name": ["completionHandler"], "param_type": "@escaping (URL, Error) -> Void", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Progres"]}, "method_name": "loadFileRepresentation", "method_description": "Asynchronously writes a copy of the provided, typed data to a temporary file, returning a Progress object.", "method_declar": "func loadFileRepresentation(forTypeIdentifier typeIdentifier: String, completionHandler: @escaping (URL?, Error?) -> Void) -> Progress"}, {"params": [{"param_name": ["forTypeIdentifier", "typeIdentifier"], "param_type": "String", "param_description": ""}, {"param_name": ["completionHandler"], "param_type": "@escaping (URL, Bool, Error) -> Void", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Progres"]}, "method_name": "loadInPlaceFileRepresentation", "method_description": "Asynchronously opens a file in place, if doing so is possible, returning a Progress object.", "method_declar": "func loadInPlaceFileRepresentation(forTypeIdentifier typeIdentifier: String, completionHandler: @escaping (URL?, Bool, Error?) -> Void) -> Progress"}, {"params": [{"param_name": ["ofClass", "aClass"], "param_type": "NSItemProviderReading.Type", "param_description": ""}, {"param_name": ["completionHandler"], "param_type": "@escaping (NSItemProviderReading, Error) -> Void", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Progres"]}, "method_name": "loadObject", "method_description": "Asynchronously loads an object of a specified class to an item provider, returning a Progress object.", "method_declar": "func loadObject(ofClass aClass: NSItemProviderReading.Type, completionHandler: @escaping (NSItemProviderReading?, Error?) -> Void) -> Progress"}, {"params": [{"param_name": ["toTypeIdentifier", "typeIdentifier"], "param_type": "String", "param_description": ""}, {"param_name": ["fileOptions"], "param_type": "NSItemProviderFileOptions = []", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "hasRepresentationConforming", "method_description": "Returns a Boolean value indicating whether an item provider contains a data representation conforming to a specified uniform type identifier (UTI) and to specified open-in-place behavior.", "method_declar": "func hasRepresentationConforming(toTypeIdentifier typeIdentifier: String, fileOptions: NSItemProviderFileOptions = []) -> Bool"}, {"params": [{"param_name": ["fileOptions"], "param_type": "NSItemProviderFileOptions = []", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["[String"]}, "method_name": "registeredTypeIdentifiers", "method_description": "Returns an array with a subset of type identifiers for the item provider, according to the specified file options, listed in the same order in which they were registered.", "method_declar": "func registeredTypeIdentifiers(fileOptions: NSItemProviderFileOptions = []) -> [String]"}, {"params": [{"param_name": ["forTypeIdentifier", "typeIdentifier"], "param_type": "String", "param_description": ""}, {"param_name": ["visibility"], "param_type": "NSItemProviderRepresentationVisibility", "param_description": ""}, {"param_name": ["loadHandler"], "param_type": "@escaping ((Data, Error) -> Void) -> Progress", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Progress"]}, "method_name": "registerDataRepresentation", "method_description": "Registers a data-backed representation for an item, specifiying item visibility and a load handler.", "method_declar": "func registerDataRepresentation(forTypeIdentifier typeIdentifier: String, visibility: NSItemProviderRepresentationVisibility, loadHandler: @escaping ((Data?, Error?) -> Void) -> Progress?)"}, {"params": [{"param_name": ["forTypeIdentifier", "typeIdentifier"], "param_type": "String", "param_description": ""}, {"param_name": ["fileOptions"], "param_type": "NSItemProviderFileOptions", "param_description": ""}, {"param_name": ["visibility"], "param_type": "NSItemProviderRepresentationVisibility", "param_description": ""}, {"param_name": ["loadHandler"], "param_type": "@escaping ((URL, Bool, Error) -> Void) -> Progress", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Progress"]}, "method_name": "registerFileRepresentation", "method_description": "Registers a file-backed representation for an item, specifying file options, item visibility, and a load handler.", "method_declar": "func registerFileRepresentation(forTypeIdentifier typeIdentifier: String, fileOptions: NSItemProviderFileOptions = [], visibility: NSItemProviderRepresentationVisibility, loadHandler: @escaping ((URL?, Bool, Error?) -> Void) -> Progress?)"}, {"params": [{"param_name": ["object"], "param_type": "NSItemProviderWriting", "param_description": ""}, {"param_name": ["visibility"], "param_type": "NSItemProviderRepresentationVisibility", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "registerObject", "method_description": "Adds representations of a specified object to an item provider, based on the object\u2019s implementation of the NSItemProviderWriting protocol and adhering to a visibility specification.", "method_declar": "func registerObject(_ object: NSItemProviderWriting, visibility: NSItemProviderRepresentationVisibility)"}, {"params": [{"param_name": ["ofClass", "aClass"], "param_type": "NSItemProviderWriting.Type", "param_description": ""}, {"param_name": ["visibility"], "param_type": "NSItemProviderRepresentationVisibility", "param_description": ""}, {"param_name": ["loadHandler"], "param_type": "@escaping ((NSItemProviderWriting, Error) -> Void) -> Progress", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Progress"]}, "method_name": "registerObject", "method_description": "Lazily adds representations of a specified object to an item provider, based on the object\u2019s implementation of the NSItemProviderWriting protocol and adhering to a visibility specification.", "method_declar": "func registerObject(ofClass aClass: NSItemProviderWriting.Type, visibility: NSItemProviderRepresentationVisibility, loadHandler: @escaping ((NSItemProviderWriting?, Error?) -> Void) -> Progress?)"}, {"params": [{"param_name": ["forTypeIdentifier", "typeIdentifier"], "param_type": "String", "param_description": "A string that represents the desired UTI."}, {"param_name": ["loadHandler"], "param_type": "@escaping NSItemProvider.LoadHandler", "param_description": "A block capable of returning the data item as the specified type. For information about implementing this block, see NSItemProvider.LoadHandler."}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "registerItem", "method_description": "Lazily registers an item, according to the NSItemProvider type coercion policy.", "method_declar": "func registerItem(forTypeIdentifier typeIdentifier: String, loadHandler: @escaping NSItemProvider.LoadHandler)"}, {"params": [{"param_name": ["options"], "param_type": "[AnyHashable", "param_description": "A dictionary of keys and values that provide information about the item, such as the size of an image. For a list of possible keys, see Options Dictionary Key. "}, {"param_name": ["[AnyHashable"], "param_type": "Any]!", "param_description": ""}, {"param_name": ["Any]!", "=", "["], "param_type": "]", "param_description": ""}, {"param_name": ["completionHandler"], "param_type": "NSItemProvider.CompletionHandler!", "param_description": "A completion handler block to execute with the results. The first parameter of this block must be a parameter of type NSData, NSURL, UIImage (in iOS), or NSImage (in macOS) for receiving the image data. For more information about implementing the block, see NSItemProvider.CompletionHandler."}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "loadPreviewImage", "method_description": "Loads the preview image for the item that is represented by the item provider.", "method_declar": "func loadPreviewImage(options: [AnyHashable : Any]! = [:], completionHandler: NSItemProvider.CompletionHandler!)"}, {"params": [{"param_name": ["ofClass"], "param_type": "T.Type", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "method_name": "canLoadObject", "method_description": "", "method_declar": "func canLoadObject<T>(ofClass: T.Type) -> Bool where T : _ObjectiveCBridgeable, T._ObjectiveCType : NSItemProviderReading"}, {"params": [{"param_name": ["ofClass"], "param_type": "ObjectiveCBridgeable.ObjectiveCBridgeableype", "param_description": ""}, {"param_name": ["completionHandler"], "param_type": "@escaping (T, Error) -> Void", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Progress"]}, "method_name": "loadObject", "method_description": "", "method_declar": "func loadObject<T>(ofClass: T.Type, completionHandler: @escaping (T?, Error?) -> Void) -> Progress where T : _ObjectiveCBridgeable, T._ObjectiveCType : NSItemProviderReading"}, {"params": [{"param_name": ["share"], "param_type": "CKShare", "param_description": ""}, {"param_name": ["container"], "param_type": "CKContainer", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "registerCloudKitShare", "method_description": "", "method_declar": "func registerCloudKitShare(_ share: CKShare, container: CKContainer)"}, {"params": [{"param_name": ["preparationHandler"], "param_type": "@escaping ((CKShare, CKContainer, Error) -> Void) -> Void", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "registerCloudKitShare", "method_description": "", "method_declar": "func registerCloudKitShare(preparationHandler: @escaping ((CKShare?, CKContainer?, Error?) -> Void) -> Void)"}, {"params": [{"param_name": ["ofClass"], "param_type": "ObjectiveCBridgeable.ObjectiveCBridgeableype", "param_description": ""}, {"param_name": ["visibility"], "param_type": "NSItemProviderRepresentationVisibility", "param_description": ""}, {"param_name": ["loadHandler"], "param_type": "@escaping ((T, Error) -> Void) -> Progress", "param_description": ""}], "class_name": "NSItemProvider", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Progress"]}, "method_name": "registerObject", "method_description": "", "method_declar": "func registerObject<T>(ofClass: T.Type, visibility: NSItemProviderRepresentationVisibility, loadHandler: @escaping ((T?, Error?) -> Void) -> Progress?) where T : _ObjectiveCBridgeable, T._ObjectiveCType : NSItemProviderWriting"}], "class_name": "NSItemProvider", "Vars": [{"var_description": "The filename to use when writing the provided data to a file on disk.", "var_type": "String", "is_static": false, "var_name": "suggestedName"}, {"var_description": "Returns the array of type identifiers for the item provider, listed in the same order in which they were registered.", "var_type": "[String]", "is_static": false, "var_name": "registeredTypeIdentifiers"}, {"var_description": "The custom preview image handler block for the item provider.", "var_type": "NSItemProvider.LoadHandler", "is_static": false, "var_name": "previewImageHandler"}, {"var_description": "The rectangle (in screen coordinates) occupied by the item in the host app\u2019s source window.", "var_type": "NSRect", "is_static": false, "var_name": "sourceFrame"}, {"var_description": "The rectangle (in screen coordinates) of the item\u2019s visible content.", "var_type": "NSRect", "is_static": false, "var_name": "containerFrame"}, {"var_description": "The ideal presentation size of the item.", "var_type": "CGSize", "is_static": false, "var_name": "preferredPresentationSize"}, {"var_description": "The preferred style for presenting the item provider's data.", "var_type": "NSItemProvider.PreferredPresentationStyle", "is_static": false, "var_name": "preferredPresentationStyle"}, {"var_description": "A key provided to the options dictionary to indicate a preferred image size.", "var_type": "String", "is_static": false, "var_name": "NSItemProviderPreferredImageSizeKey"}, {"var_description": "A key whose value is an item of type kUTTypePropertyList. The item contains an NSDictionary that contains the object returned by the JavaScript code to its completion function.", "var_type": "String", "is_static": false, "var_name": "NSExtensionJavaScriptPreprocessingResultsKey"}, {"var_description": "A key whose value is an item of type kUTTypePropertyList. The item contains an NSDictionary that contains the arguments to be passed to a JavaScript finalize method.", "var_type": "String", "is_static": false, "var_name": "NSExtensionJavaScriptFinalizeArgumentKey"}, {"var_description": "The error domain associated with the NSItemProvider class.", "var_type": "String", "is_static": false, "var_name": "errorDomain"}, {"var_description": "", "var_type": "Data", "is_static": false, "var_name": "teamData"}]}