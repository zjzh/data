{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [""], "return_description": ["The array associated with the specified key, or nil if the key was not found or its value is not an NSArray object."], "return_type": ["[Any"]}, "method_description": "Returns the array associated with the specified key.", "is_static": false, "method_name": "array", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func array(forKey aKey: String) -> [Any]?", "params": [{"param_type": "String", "param_description": "A key in the key-value store.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [""], "return_description": ["If a Boolean value is associated with the specified key, that value is returned. If the key was not found, this method returns false."], "return_type": ["Boo"]}, "method_description": "Returns the Boolean value associated with the specified key.", "is_static": false, "method_name": "bool", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func bool(forKey aKey: String) -> Bool", "params": [{"param_type": "String", "param_description": "A key in the key-value store.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [""], "return_description": ["The data object associated with the specified key or nil if the key was not found or its value is not an NSData object."], "return_type": ["Dat"]}, "method_description": "Returns the data object associated with the specified key.", "is_static": false, "method_name": "data", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func data(forKey aKey: String) -> Data?", "params": [{"param_type": "String", "param_description": "A key in the key-value store.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [["[String"]], "return_description": ["The dictionary object associated with the specified key or nil if the key was not found or its value is not an NSDictionary object."], "return_type": ["Any"]}, "method_description": "Returns the dictionary object associated with the specified key.", "is_static": false, "method_name": "dictionary", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func dictionary(forKey aKey: String) -> [String : Any]?", "params": [{"param_type": "String", "param_description": "A key in the key-value store.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [""], "return_description": ["The double value associated with the specified key or 0 if the key was not found. If the key exists but does not contain a numerical value, this method returns 0. "], "return_type": ["Doubl"]}, "method_description": "Returns the double value associated with the specified key.", "is_static": false, "method_name": "double", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func double(forKey aKey: String) -> Double", "params": [{"param_type": "String", "param_description": "A key in the key-value store.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [""], "return_description": ["The long long value associated with the specified key or 0 if the key was not found. If the key exists but does not contain a numerical value, this method returns 0. "], "return_type": ["Int6"]}, "method_description": "Returns the long long value associated with the specified key.", "is_static": false, "method_name": "longLong", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func longLong(forKey aKey: String) -> Int64", "params": [{"param_type": "String", "param_description": "A key in the key-value store.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [""], "return_description": ["The object associated with the specified key or nil if the key was not found. "], "return_type": ["An"]}, "method_description": "Returns the object associated with the specified key.", "is_static": false, "method_name": "object", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func object(forKey aKey: String) -> Any?", "params": [{"param_type": "String", "param_description": "A key in the key-value store.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [""], "return_description": ["The string associated with the specified key or nil if the key was not found or its value is not an NSString object. "], "return_type": ["Strin"]}, "method_description": "Returns the string associated with the specified key.", "is_static": false, "method_name": "string", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func string(forKey aKey: String) -> String?", "params": [{"param_type": "String", "param_description": "A key in the key-value store.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets an array object for the specified key in the key-value store. ", "is_static": false, "method_name": "set", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func set(_ anArray: [Any]?, forKey aKey: String)", "params": [{"param_type": "[Any]", "param_description": "An array whose contents can be stored in a property list format. In other words, the objects in the array must be of the types NSNumber, NSString, NSDate, NSData, NSArray, or NSDictionary. The total size (in bytes) of the array and its contents must not exceed the per-key size limits.", "param_name": ["anArray"]}, {"param_type": "String", "param_description": "The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets a Boolean value for the specified key in the key-value store. ", "is_static": false, "method_name": "set", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func set(_ value: Bool, forKey aKey: String)", "params": [{"param_type": "Bool", "param_description": "The Boolean value to store. ", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding. ", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets a data object for the specified key in the key-value store. ", "is_static": false, "method_name": "set", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func set(_ aData: Data?, forKey aKey: String)", "params": [{"param_type": "Data", "param_description": "The data object to store. The total size of this data object (including any object overhead) must not exceed 1 MB.", "param_name": ["aData"]}, {"param_type": "String", "param_description": "The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets a dictionary object for the specified key in the key-value store. ", "is_static": false, "method_name": "set", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func set(_ aDictionary: [String : Any]?, forKey aKey: String)", "params": [{"param_type": "[String", "param_description": "A dictionary whose contents can be stored in a property list format. In other words, the objects in the dictionary must be of the types NSNumber, NSString, NSDate, NSData, NSArray, or NSDictionary. The total size (in bytes) of the dictionary and its contents must not exceed the per-key size limits.", "param_name": ["aDictionary"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[String"]}, {"param_type": "String", "param_description": "The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets a double value for the specified key in the key-value store. ", "is_static": false, "method_name": "set", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func set(_ value: Double, forKey aKey: String)", "params": [{"param_type": "Double", "param_description": "The double value to store.", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets a long long value for the specified key in the key-value store.", "is_static": false, "method_name": "set", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func set(_ value: Int64, forKey aKey: String)", "params": [{"param_type": "Int64", "param_description": "The long long value to store.", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets an object for the specified key in the key-value store.", "is_static": false, "method_name": "set", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func set(_ anObject: Any?, forKey aKey: String)", "params": [{"param_type": "Any", "param_description": "The object you want to store. The type of the object must be one of the property list types: NSNumber, NSString, NSDate, NSData, NSArray, or NSDictionary. The total size (in bytes) of the object must not exceed the per-key size limits.", "param_name": ["anObject"]}, {"param_type": "String", "param_description": "The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets a string object for the specified key in the key-value store. ", "is_static": false, "method_name": "set", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func set(_ aString: String?, forKey aKey: String)", "params": [{"param_type": "String", "param_description": "The string you want to store. The total size (in bytes) of the string must not exceed the per-key size limits.", "param_name": ["aString"]}, {"param_type": "String", "param_description": "The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the in-memory and on-disk keys and values were synchronized, or false if an error occurred. For example, this method returns false if an app was not built with the proper entitlement requests."], "return_type": ["Boo"]}, "method_description": "Explicitly synchronizes in-memory keys and values with those stored on disk.", "is_static": false, "method_name": "synchronize", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func synchronize() -> Bool", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the value associated with the specified key from the key-value store.", "is_static": false, "method_name": "removeObject", "class_name": "NSUbiquitousKeyValueStore", "method_declar": "func removeObject(forKey aKey: String)", "params": [{"param_type": "String", "param_description": "The key corresponding to the value you want to remove. ", "param_name": ["forKey", "aKey"]}]}], "class_type": "class", "class_name": "NSUbiquitousKeyValueStore", "Vars": [{"var_name": "`default`", "var_type": "NSUbiquitousKeyValueStore", "var_description": "Returns the shared iCloud key-value store object.", "is_static": false}, {"var_name": "dictionaryRepresentation", "var_type": "[String", "var_description": "A dictionary containing all of the key-value pairs in the key-value store.", "is_static": false}, {"var_name": "NSUbiquitousKeyValueStoreChangeReasonKey", "var_type": "String", "var_description": "", "is_static": false}, {"var_name": "NSUbiquitousKeyValueStoreChangedKeysKey", "var_type": "String", "var_description": "", "is_static": false}, {"var_name": "NSUbiquitousKeyValueStoreServerChange", "var_type": "Int", "var_description": "", "is_static": false}, {"var_name": "NSUbiquitousKeyValueStoreInitialSyncChange", "var_type": "Int", "var_description": "", "is_static": false}, {"var_name": "NSUbiquitousKeyValueStoreQuotaViolationChange", "var_type": "Int", "var_description": "", "is_static": false}, {"var_name": "NSUbiquitousKeyValueStoreAccountChange", "var_type": "Int", "var_description": "", "is_static": false}, {"var_name": "didChangeExternallyNotification", "var_type": "NSNotification.Name", "var_description": "Posted when the value of one or more keys in the local key-value store changed due to incoming data pushed from iCloud.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "Use the iCloud key-value store to make preference, configuration, and app-state data available to every instance of your app on every device connected to a user\u2019s iCloud account. You can store scalar values such as BOOL, as well as values containing any of the property list object types: NSNumber, NSString, NSDate, NSData, NSArray, and NSDictionary.\nChanges your app writes to the key-value store object are initially held in memory, then written to disk by the system at appropriate times. If you write to the key-value store object when the user is not signed into an iCloud account, the data is stored locally until the next synchronization opportunity. When the user signs into an iCloud account, the system automatically reconciles your local, on-disk keys and values with those on the iCloud server.\nAny device running your app, and attached to the same iCloud account, can upload key-value changes to iCloud. To keep track of such changes, register for the didChangeExternallyNotification notification during app launch. Then, obtain the keys and values from iCloud (which may be newer than those that are local) by calling the synchronize() method. You need not call the synchronize() method again during your app\u2019s life cycle, unless your app design requires fast-as-possible upload to iCloud after you change a value.\nFor more information on adopting key-value storage in your app, see Designing for Key-Value Data in iCloud in iCloud Design Guide.\nAvoid using this class for data that is essential to your app\u2019s behavior when offline; instead, store such data directly into the local user defaults database.\nThe total amount of space available in your app\u2019s key-value store, for a given user, is 1 MB. There is a per-key value size limit of 1 MB, and a maximum of 1024 keys. If you attempt to write data that exceeds these quotas, the write attempt fails and no change is made to your iCloud key-value storage. In this scenario, the system posts the  didChangeExternallyNotification notification with a change reason of NSUbiquitousKeyValueStoreQuotaViolationChange.\nThe maximum length for key strings for the iCloud key-value store is 64 bytes using UTF8 encoding. Attempting to write a value to a longer key name results in a runtime error.\nTo use this class, you must distribute your app through the App Store or Mac App Store, and you must request the com.apple.developer.ubiquity-kvstore-identifier entitlement in your Xcode project. For more on this, see Configuring Common Key-Value Storage for Multiple Apps in iCloud Design Guide.\nThis class is not meant to be subclassed.\n", "package_name": "foundation"}