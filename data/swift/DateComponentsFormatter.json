{"package_name": "foundation", "subclass_list": [], "class_description": "An DateComponentsFormatter object takes quantities of time and formats them as a user-readable string. Use a date components formatter to create strings for your app\u2019s interface. The formatter object has many options for creating both abbreviated and expanded strings. The formatter takes the current user\u2019s locale and language into account when generating strings.\nTo use this class, create an instance, configure its properties, and call one of its methods to generate an appropriate string. The properties of this class let you configure the calendar and specify the date and time units you want displayed in the resulting string. Listing 1 shows how to configure a formatter to create the string \u201cAbout 5 minutes remaining\u201d. \nConfiguring a formatter object\nThe methods of this class may be called safely from any thread of your app. It is also safe to share a single instance of this class from multiple threads, with the caveat that you should not change the configuration of the object while another thread is using it to generate a string. \n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["Formatter"], "Methods": [{"params": [{"param_name": ["from", "components"], "param_type": "DateComponents", "param_description": "A date components object containing the date and time information to format. The allowedUnits property determines which date components are actually used to generate the string. All other date components are ignored. This parameter must not be nil."}], "class_name": "DateComponentsFormatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A formatted string representing the specified date information."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a formatted string based on the specified date component information.", "method_declar": "func string(from components: DateComponents) -> String?"}, {"params": [{"param_name": ["for", "obj"], "param_type": "Any", "param_description": "An object containing the date and time information to format. The object in this parameter must be a NSDateComponents object; if it is not, the method raises an exception. This parameter must not be nil."}], "class_name": "DateComponentsFormatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A formatted string representing the specified date information."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a formatted string based on the date information in the specified object.", "method_declar": "func string(for obj: Any?) -> String?"}, {"params": [{"param_name": ["from", "startDate"], "param_type": "Date", "param_description": "The start time. This parameter must not be nil."}, {"param_name": ["to", "endDate"], "param_type": "Date", "param_description": "The end time. This parameter must not be nil."}], "class_name": "DateComponentsFormatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A formatted string representing the specified time information."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a formatted string based on the time difference between two dates. ", "method_declar": "func string(from startDate: Date, to endDate: Date) -> String?"}, {"params": [{"param_name": ["from", "ti"], "param_type": "TimeInterval", "param_description": "The time interval, measured in seconds. The value must be a finite number. Negative numbers are treated as positive numbers when creating the string."}], "class_name": "DateComponentsFormatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A formatted string representing the specified time interval."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a formatted string based on the specified number of seconds.", "method_declar": "func string(from ti: TimeInterval) -> String?"}, {"params": [{"param_name": ["from", "components"], "param_type": "DateComponents", "param_description": "The value to format. "}, {"param_name": ["unitsStyle"], "param_type": "DateComponentsFormatter.UnitsStyle", "param_description": "The style for the resulting units. Use this parameter to specify whether you want to the resulting string to use an abbreviated or more spelled out format.  "}], "class_name": "DateComponentsFormatter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string containing the localized date and time information."], "return_type": ["Strin"]}, "method_name": "localizedString", "method_description": "Returns a localized string based on the specified date components and style option.", "method_declar": "class func localizedString(from components: DateComponents, unitsStyle: DateComponentsFormatter.UnitsStyle) -> String?"}, {"params": [{"param_name": ["obj"], "param_type": "AutoreleasingUnsafeMutablePointer<AnyObject>", "param_description": ""}, {"param_name": ["for", "string"], "param_type": "String", "param_description": ""}, {"param_name": ["errorDescription", "error"], "param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_description": ""}], "class_name": "DateComponentsFormatter", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "getObjectValue", "method_description": "", "method_declar": "func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, for string: String, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool"}], "class_name": "DateComponentsFormatter", "Vars": [{"var_description": "The bitmask of calendrical units such as day and month to include in the output string.", "var_type": "NSCalendar.Unit", "is_static": false, "var_name": "allowedUnits"}, {"var_description": "A Boolean indicating whether non-integer units may be used for values.", "var_type": "Bool", "is_static": false, "var_name": "allowsFractionalUnits"}, {"var_description": "The default calendar to use when formatting date components. ", "var_type": "Calendar", "is_static": false, "var_name": "calendar"}, {"var_description": "A Boolean value indicating whether to collapse the largest unit into smaller units when a certain threshold is met.", "var_type": "Bool", "is_static": false, "var_name": "collapsesLargestUnit"}, {"var_description": "A Boolean value indicating whether the resulting phrase reflects an inexact time value.", "var_type": "Bool", "is_static": false, "var_name": "includesApproximationPhrase"}, {"var_description": "A Boolean value indicating whether output strings reflect the amount of time remaining. ", "var_type": "Bool", "is_static": false, "var_name": "includesTimeRemainingPhrase"}, {"var_description": "The maximum number of time units to include in the output string.", "var_type": "Int", "is_static": false, "var_name": "maximumUnitCount"}, {"var_description": "The formatting style for unit names. ", "var_type": "DateComponentsFormatter.UnitsStyle", "is_static": false, "var_name": "unitsStyle"}, {"var_description": "The formatting style for units whose value is 0.", "var_type": "DateComponentsFormatter.ZeroFormattingBehavior", "is_static": false, "var_name": "zeroFormattingBehavior"}, {"var_description": "", "var_type": "Formatter.Context", "is_static": false, "var_name": "formattingContext"}, {"var_description": "", "var_type": "Date", "is_static": false, "var_name": "referenceDate"}]}