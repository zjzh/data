{"subclass_list": ["URLSessionTaskDelegate"], "typealias": [], "class_inherit_list": ["NSObjectProtocol"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the URL session that the session has been invalidated.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionDelegate", "method_declar": "optional func urlSession(_ session: URLSession, didBecomeInvalidWithError error: Error?)", "params": [{"param_type": "URLSession", "param_description": "The session object that was invalidated.", "param_name": ["session"]}, {"param_type": "Error", "param_description": "The error that caused invalidation, or nil if the invalidation was explicit.", "param_name": ["didBecomeInvalidWithError", "error"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the delegate that all messages enqueued for a session have been delivered.", "is_static": false, "method_name": "urlSessionDidFinishEvents", "class_name": "URLSessionDelegate", "method_declar": "optional func urlSessionDidFinishEvents(forBackgroundURLSession session: URLSession)", "params": [{"param_type": "URLSession", "param_description": "The session that no longer has any outstanding requests.", "param_name": ["forBackgroundURLSession", "session"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Requests credentials from the delegate in response to a session-level authentication request from the remote server.", "is_static": false, "method_name": "urlSession", "class_name": "URLSessionDelegate", "method_declar": "optional func urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)", "params": [{"param_type": "URLSession", "param_description": "The session containing the task that requested authentication.", "param_name": ["session"]}, {"param_type": "URLAuthenticationChallenge", "param_description": "An object that contains the request for authentication.", "param_name": ["didReceive", "challenge"]}, {"param_type": "@escaping (URLSession.AuthChallengeDisposition, URLCredential) -> Void", "param_description": "A handler that your delegate method must call. This completion handler takes the following parameters::disposition\u2014One of several constants that describes how the challenge should be handled.credential\u2014The credential that should be used for authentication if disposition is NSURLSessionAuthChallengeUseCredential, otherwise NULL.", "param_name": ["completionHandler"]}]}], "class_type": "protocol", "class_name": "URLSessionDelegate", "Vars": [], "interface_list": [], "class_description": "In addition to the methods defined in this protocol, most delegates should also implement some or all of the methods in the URLSessionTaskDelegate, URLSessionDataDelegate, and URLSessionDownloadDelegate protocols to handle task-level events. These include events like the beginning and end of individual tasks, and periodic progress updates from data or download tasks.\nNote\nYour URLSession object doesn\u2019t need to have a delegate. If no delegate is assigned, a system-provided delegate is used, and you must provide a completion callback to obtain the data.\n", "package_name": "foundation"}