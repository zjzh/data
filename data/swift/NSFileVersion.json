{"package_name": "foundation", "subclass_list": [], "class_description": "Use the methods of this class to access, create, and manage file revisions in your app.\nEach file version instance contains metadata about a single revision, including the location of the associated file, the modification date of the revision, and whether the revision is discardable.\nIn Mac apps, you can use file version objects to track changes to a local file over time and to prevent the loss of data during editing. When managing local versions, the document architecture creates versions at specific points in the lifetime of your application. Your application can also create versions explicitly at times that your application designates as appropriate. \nIn addition to managing local files, the system also uses this class to manage cloud-based files. For files in the cloud, there is usually only one version of the file at any given time. However, additional file versions may be created in cases where two different computers attempt to save the file to the cloud at the same time. In that case, one file is chosen as the current version and any other versions are tagged as being in conflict with the original. Conflict versions are reported to the appropriate file presenter objects and should be resolved as soon as possible so that the corresponding files can be removed from the cloud.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the file whose version object you want. "}], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The version object representing the current version of the file or nil if there is no such file. "], "return_type": ["NSFileVersio"]}, "method_name": "currentVersionOfItem", "method_description": "Returns the most recent version object for the file at the specified URL.", "method_declar": "class func currentVersionOfItem(at url: URL) -> NSFileVersion?"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the file whose versions you want. "}], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An array of file version objects or nil if there is no such file. The array does not contain the version object returned by the currentVersionOfItem(at:) method."], "return_type": ["[NSFileVersion"]}, "method_name": "otherVersionsOfItem", "method_description": "Returns all versions of the specified file except the current version. ", "method_declar": "class func otherVersionsOfItem(at url: URL) -> [NSFileVersion]?"}, {"params": [{"param_name": ["itemAt", "url"], "param_type": "URL", "param_description": "The URL of the file whose version you want. "}, {"param_name": ["forPersistentIdentifier", "persistentIdentifier"], "param_type": "Any", "param_description": "The persistent ID of the NSFileVersion object you want. "}], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The file version object with the specified ID or nil if no such version object exists. "], "return_type": ["NSFileVersio"]}, "method_name": "version", "method_description": "Returns the version of the file that has the specified persistent ID.", "method_declar": "class func version(itemAt url: URL, forPersistentIdentifier persistentIdentifier: Any) -> NSFileVersion?"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the file whose contents you want to save. "}], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A URL identifying the temporary directory in which to create a the new file. You must delete the directory specified by this URL after you have created the file and moved it to its proper location. "], "return_type": ["UR"]}, "method_name": "temporaryDirectoryURLForNewVersionOfItem", "method_description": "Creates and returns a temporary directory to use for saving the contents of the file. ", "method_declar": "class func temporaryDirectoryURLForNewVersionOfItem(at url: URL) -> URL"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The location at which to store the new file version. "}, {"param_name": ["withContentsOf", "contentsURL"], "param_type": "URL", "param_description": "The URL that specifies the file to use for the version contents. "}, {"param_name": ["options"], "param_type": "NSFileVersion.AddingOptions = []", "param_description": "Specify 0 for this parameter if you want to create a copy of the file at the location specified by the url parameter. Alternatively, specify one of the constants described in NSFileVersion.AddingOptions. "}], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The file version object representing the new version or nil if an error occurred."], "return_type": ["NSFileVersio"]}, "method_name": "addOfItem", "method_description": "Creates a version of the file at the specified location. ", "method_declar": "class func addOfItem(at url: URL, withContentsOf contentsURL: URL, options: NSFileVersion.AddingOptions = []) throws -> NSFileVersion"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the file that has associated version objects.  "}], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An array of NSFileVersion objects that represent the versions in conflict or nil if the file at URL does not exist. "], "return_type": ["[NSFileVersion"]}, "method_name": "unresolvedConflictVersionsOfItem", "method_description": "Returns an array of version objects that are currently in conflict for the specified URL.", "method_declar": "class func unresolvedConflictVersionsOfItem(at url: URL) -> [NSFileVersion]?"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The file whose contents you want to replace. If the file at this URL does not exist, a new file is created at the location."}, {"param_name": ["options"], "param_type": "NSFileVersion.ReplacingOptions = []", "param_description": "Specify 0 to overwrite the file in place; otherwise, specify one of the constants described in NSFileVersion.ReplacingOptions."}], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The URL of the file that was written, which may be different than the one specified in the url parameter. "], "return_type": ["UR"]}, "method_name": "replaceItem", "method_description": "Replace the contents of the specified file with the contents of the current version\u2019s file. ", "method_declar": "func replaceItem(at url: URL, options: NSFileVersion.ReplacingOptions = []) throws -> URL"}, {"params": [], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if this version was removed successfully or false if it was not."], "return_type": []}, "method_name": "remove", "method_description": "Remove this version object and its associated file from the version store. ", "method_declar": "func remove() throws"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": ""}], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [], "return_description": ["true if the older file versions were removed successfully or false if an error occurred."], "return_type": []}, "method_name": "removeOtherVersionsOfItem", "method_description": "Removes all versions of a file, except the current one, from the version store.", "method_declar": "class func removeOtherVersionsOfItem(at url: URL) throws"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": ""}, {"param_name": ["completionHandler"], "param_type": "@escaping ([NSFileVersion], Error) -> Void", "param_description": ""}], "class_name": "NSFileVersion", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "getNonlocalVersionsOfItem", "method_description": "", "method_declar": "class func getNonlocalVersionsOfItem(at url: URL, completionHandler: @escaping ([NSFileVersion]?, Error?) -> Void)"}], "class_name": "NSFileVersion", "Vars": [{"var_description": "The URL identifying the location of the file associated with the file version object.", "var_type": "URL", "is_static": false, "var_name": "url"}, {"var_description": "The string containing the user-presentable name of the file version.", "var_type": "String", "is_static": false, "var_name": "localizedName"}, {"var_description": "The user-presentable name of the computer on which the revision was saved.", "var_type": "String", "is_static": false, "var_name": "localizedNameOfSavingComputer"}, {"var_description": "The modification date of the version.", "var_type": "Date", "is_static": false, "var_name": "modificationDate"}, {"var_description": "The identifier for this version of the file. ", "var_type": "NSCoding", "is_static": false, "var_name": "persistentIdentifier"}, {"var_description": "A Boolean value that specifies whether the system can delete the associated file at some future time.", "var_type": "Bool", "is_static": false, "var_name": "isDiscardable"}, {"var_description": "A Boolean value indicating whether the contents of the version are in conflict with the contents of another version.", "var_type": "Bool", "is_static": false, "var_name": "isConflict"}, {"var_description": "A Boolean value that indicates the version object is not in conflict (true) or is in conflict (false).", "var_type": "Bool", "is_static": false, "var_name": "isResolved"}, {"var_description": "", "var_type": "Bool", "is_static": false, "var_name": "hasLocalContents"}, {"var_description": "", "var_type": "Bool", "is_static": false, "var_name": "hasThumbnail"}, {"var_description": "", "var_type": "PersonNameComponents", "is_static": false, "var_name": "originatorNameComponents"}]}