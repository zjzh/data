{"class_description": "With a RawRepresentable type, you can switch back and forth between a custom type and an associated RawValue type without losing the value of the original RawRepresentable type. Using the raw value of a conforming type streamlines interoperation with Objective-C and legacy APIs and simplifies conformance to other protocols, such as Equatable, Comparable, and Hashable.\nThe RawRepresentable protocol is seen mainly in two categories of types: enumerations with raw value types and option sets.\nFor any enumeration with a string, integer, or floating-point raw type, the Swift compiler automatically adds RawRepresentable conformance. When defining your own custom enumeration, you give it a raw type by specifying the raw type as the first item in the enumeration\u2019s type inheritance list. You can also use literals to specify values for one or more cases.\nFor example, the Counter enumeration defined here has an Int raw value type and gives the first case a raw value of 1:\nYou can create a Counter instance from an integer value between 1 and 5 by using the init?(rawValue:) initializer declared in the RawRepresentable protocol. This initializer is failable because although every case of the Counter type has a corresponding Int value, there are many Int values that don\u2019t correspond to a case of Counter.\nOption sets all conform to RawRepresentable by inheritance using the OptionSet protocol. Whether using an option set or creating your own, you use the raw value of an option set instance to store the instance\u2019s bitfield. The raw value must therefore be of a type that conforms to the FixedWidthInteger protocol, such as UInt8 or Int. For example, the Direction type defines an option set for the four directions you can move in a game.\nUnlike enumerations, option sets provide a nonfailable init(rawValue:) initializer to convert from a raw value, because option sets don\u2019t have an enumerated list of all possible cases. Option set values have a one-to-one correspondence with their associated raw values.\nIn the case of the Directions option set, an instance can contain zero, one, or more of the four defined directions. This example declares a constant with three currently allowed moves. The raw value of the allowedMoves instance is the result of the bitwise OR of its three members\u2019 raw values:\nOption sets use bitwise operations on their associated raw values to implement their mathematical set operations. For example, the contains() method on allowedMoves performs a bitwise AND operation to check whether the option set contains an element.\n", "Methods": [], "class_inherit_list": [], "class_name": "RawRepresentable", "typealias": [], "Vars": [], "class_type": "protocol", "interface_list": [], "package_name": "swift", "subclass_list": ["OptionSet"]}