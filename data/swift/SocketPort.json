{"subclass_list": [], "typealias": [], "class_inherit_list": ["Port"], "Methods": [{"return_value": {"return_name": [], "return_description": ["An initialized local TCP/IP socket port of type SOCK_STREAM."], "return_type": []}, "method_description": "Initializes the receiver as a local TCP/IP socket of type SOCK_STREAM.", "is_static": false, "method_name": "init", "class_name": "SocketPort", "method_declar": "convenience init()", "params": []}, {"return_value": {"return_name": [], "return_description": ["An initialized local TCP/IP socket of type SOCK_STREAM, listening on port port."], "return_type": []}, "method_description": "Initializes the receiver as a local TCP/IP socket of type SOCK_STREAM, listening on a specified port number.", "is_static": false, "method_name": "init", "class_name": "SocketPort", "method_declar": "convenience init?(tcpPort port: UInt16)", "params": [{"param_type": "UInt16", "param_description": "The port number for the newly created socket port to listen on. If port is 0, the system will assign a port number.", "param_name": ["tcpPort", "port"]}]}, {"return_value": {"return_name": [], "return_description": ["A local socket port initialized with the provided arguments."], "return_type": []}, "method_description": "Initializes the receiver as a local socket with the provided arguments.", "is_static": false, "method_name": "init", "class_name": "SocketPort", "method_declar": "init?(protocolFamily family: Int32, socketType type: Int32, protocol: Int32, address: Data)", "params": [{"param_type": "Int32", "param_description": "The protocol family for the socket port. Possible values are defined in <sys/socket.h>, such as AF_LOCAL, AF_INET, and AF_INET6.", "param_name": ["protocolFamily", "family"]}, {"param_type": "Int32", "param_description": "The type of socket.", "param_name": ["socketType", "type"]}, {"param_type": "Int32", "param_description": "The specific protocol to use from the the protocol family.", "param_name": ["protocol"]}, {"param_type": "Data", "param_description": "The family-specific socket address for the receiver copied into an NSData object.", "param_name": ["address"]}]}, {"return_value": {"return_name": [], "return_description": ["A local socket port initialized with the provided socket."], "return_type": []}, "method_description": "Initializes the receiver with a previously created local socket.", "is_static": false, "method_name": "init", "class_name": "SocketPort", "method_declar": "init?(protocolFamily family: Int32, socketType type: Int32, protocol: Int32, socket sock: SocketNativeHandle)", "params": [{"param_type": "Int32", "param_description": "The protocol family for the provided socket. Possible values are defined in <sys/socket.h>, such as AF_LOCAL, AF_INET, and AF_INET6.", "param_name": ["protocolFamily", "family"]}, {"param_type": "Int32", "param_description": "The type of the provided socket.", "param_name": ["socketType", "type"]}, {"param_type": "Int32", "param_description": "The specific protocol the provided socket uses.", "param_name": ["protocol"]}, {"param_type": "SocketNativeHandle", "param_description": "The previously created socket.", "param_name": ["socket", "sock"]}]}, {"return_value": {"return_name": [], "return_description": ["A TCP/IP socket port of type SOCK_STREAM that can connect to the remote host hostName on port port."], "return_type": []}, "method_description": "Initializes the receiver as a TCP/IP socket of type SOCK_STREAM that can connect to a remote host on a specified port.", "is_static": false, "method_name": "init", "class_name": "SocketPort", "method_declar": "convenience init?(remoteWithTCPPort port: UInt16, host hostName: String?)", "params": [{"param_type": "UInt16", "param_description": "The port to connect to.", "param_name": ["remoteWithTCPPort", "port"]}, {"param_type": "String", "param_description": "The host name to connect to. hostName may be either a host name or an IPv4-style address. ", "param_name": ["host", "hostName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Initializes the receiver as a remote socket with the provided arguments.", "is_static": false, "method_name": "init", "class_name": "SocketPort", "method_declar": "init(remoteWithProtocolFamily family: Int32, socketType type: Int32, protocol: Int32, address: Data)", "params": [{"param_type": "Int32", "param_description": "The protocol family for the socket port. Possible values are defined in <sys/socket.h>, such as AF_LOCAL, AF_INET, and AF_INET6.", "param_name": ["remoteWithProtocolFamily", "family"]}, {"param_type": "Int32", "param_description": "The type of socket.", "param_name": ["socketType", "type"]}, {"param_type": "Int32", "param_description": "The specific protocol to use from the the protocol family.", "param_name": ["protocol"]}, {"param_type": "Data", "param_description": "The family-specific socket address for the receiver copied into an NSData object.", "param_name": ["address"]}]}], "class_type": "class", "class_name": "SocketPort", "Vars": [{"var_name": "address", "var_type": "Data", "var_description": "The receiver\u2019s socket address structure stored inside an NSData object.", "is_static": false}, {"var_name": "`protocol`", "var_type": "Int32", "var_description": "The protocol that the receiver uses for communication.", "is_static": false}, {"var_name": "protocolFamily", "var_type": "Int32", "var_description": "The protocol family that the receiver uses for communication.", "is_static": false}, {"var_name": "socket", "var_type": "SocketNativeHandle", "var_description": "The receiver\u2019s native socket identifier on the platform.", "is_static": false}, {"var_name": "socketType", "var_type": "Int32", "var_description": "The receiver\u2019s socket type.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "A SocketPort object can be used as an endpoint for distributed object connections. Companion classes, NSMachPort and MessagePort, allow for local (on the same machine) communication only. The SocketPort class allows for both local and remote communication, but may be more expensive than the others for the local case.\nNote\nThe SocketPort class conforms to the NSCoding protocol, but only supports coding by an NSPortCoder. Port and its other subclasses do not support archiving.\n", "package_name": "foundation"}