{"class_description": "Each index in an index path represents the index into an array of children from one node in the tree to another, deeper, node.\n", "Methods": [{"method_description": "Returns a Boolean that is true if the first index path is less than the second when comparing elements in depth-first traversal order.", "method_name": "func", "params": [{"param_type": "IndexPath", "param_description": "", "param_name": ["lhs"]}, {"param_type": "IndexPath", "param_description": "", "param_name": ["rhs"]}], "class_name": "IndexPath", "method_declar": "static func < (lhs: IndexPath, rhs: IndexPath) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean that is true if all nodes of the first index path are equal to those of the second in order.", "method_name": "==", "params": [{"param_type": "IndexPath", "param_description": "", "param_name": ["lhs"]}, {"param_type": "IndexPath", "param_description": "", "param_name": ["rhs"]}], "class_name": "IndexPath", "method_declar": "static func == (lhs: IndexPath, rhs: IndexPath) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Removes and returns the first element of the collection.", "method_name": "removeFirst", "params": [], "class_name": "IndexPath", "method_declar": "@discardableResult mutating func removeFirst() -> Int", "return_value": {"return_description": ["The first element of the collection."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Removes the specified number of elements from the beginning of the collection.", "method_name": "removeFirst", "params": [{"param_type": "Int", "param_description": "The number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.", "param_name": ["k"]}], "class_name": "IndexPath", "method_declar": "mutating func removeFirst(_ k: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes and returns the last element of the collection.", "method_name": "removeLast", "params": [], "class_name": "IndexPath", "method_declar": "@discardableResult mutating func removeLast() -> Int", "return_value": {"return_description": ["The last element of the collection."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Removes the given number of elements from the end of the collection.", "method_name": "removeLast", "params": [{"param_type": "Int", "param_description": "The number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.", "param_name": ["k"]}], "class_name": "IndexPath", "method_declar": "mutating func removeLast(_ k: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes and returns the first element of the collection.", "method_name": "popFirst", "params": [], "class_name": "IndexPath", "method_declar": "mutating func popFirst() -> Int?", "return_value": {"return_description": ["The first element of the collection if the collection is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Removes and returns the last element of the collection.", "method_name": "popLast", "params": [], "class_name": "IndexPath", "method_declar": "mutating func popLast() -> Int?", "return_value": {"return_description": ["The last element of the collection if the collection has one or more elements; otherwise, nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns the maximum element in the sequence.", "method_name": "max", "params": [], "class_name": "IndexPath", "method_declar": "@warn_unqualified_access func max() -> Int?", "return_value": {"return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns the minimum element in the sequence.", "method_name": "min", "params": [], "class_name": "IndexPath", "method_declar": "@warn_unqualified_access func min() -> Int?", "return_value": {"return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Compares this index path to another in depth-first traversal order.", "method_name": "compare", "params": [{"param_type": "IndexPath", "param_description": "", "param_name": ["other"]}], "class_name": "IndexPath", "method_declar": "func compare(_ other: IndexPath) -> ComparisonResult", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "params": [{"param_type": "Int = 1", "param_description": "The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "IndexPath", "method_declar": "func dropFirst(_ k: Int = 1) -> IndexPath", "return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": [""], "return_type": ["IndexPath"]}, "is_static": false}, {"method_description": "Return a new index path containing all but the last element.", "method_name": "dropLast", "params": [], "class_name": "IndexPath", "method_declar": "func dropLast() -> IndexPath", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexPath"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "params": [{"param_type": "Int", "param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "IndexPath", "method_declar": "func dropLast(_ k: Int) -> IndexPath", "return_value": {"return_description": ["A subsequence that leaves off k elements from the end."], "return_name": [""], "return_type": ["IndexPath"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "method_name": "elementsEqual", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "IndexPath", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence and other contain the same elements in the same order."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "params": [], "class_name": "IndexPath", "method_declar": "func enumerated() -> EnumeratedSequence<IndexPath>", "return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<IndexPath>"]}, "is_static": false}, {"method_description": "Returns the index that follows the given index.", "method_name": "index", "params": [{"param_type": "IndexPath.Index", "param_description": "", "param_name": ["after", "i"]}], "class_name": "IndexPath", "method_declar": "func index(after i: IndexPath.Index) -> IndexPath.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexPath.Index"]}, "is_static": false}, {"method_description": "Returns the index that precedes the given index.", "method_name": "index", "params": [{"param_type": "IndexPath.Index", "param_description": "", "param_name": ["before", "i"]}], "class_name": "IndexPath", "method_declar": "func index(before i: IndexPath.Index) -> IndexPath.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexPath.Index"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "method_name": "lexicographicallyPrecedes", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "IndexPath", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns an iterator over the nodes of the index path.", "method_name": "makeIterator", "params": [], "class_name": "IndexPath", "method_declar": "func makeIterator() -> IndexingIterator<IndexPath>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexingIterator<IndexPath>"]}, "is_static": false}, {"method_description": "Returns the maximum element in the sequence.", "method_name": "max", "params": [], "class_name": "IndexPath", "method_declar": "@warn_unqualified_access func max() -> Int?", "return_value": {"return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Returns the minimum element in the sequence.", "method_name": "min", "params": [], "class_name": "IndexPath", "method_declar": "@warn_unqualified_access func min() -> Int?", "return_value": {"return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Removes and returns the first element of the collection.", "method_name": "popFirst", "params": [], "class_name": "IndexPath", "method_declar": "mutating func popFirst() -> Int?", "return_value": {"return_description": ["The first element of the collection if the collection is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Removes and returns the last element of the collection.", "method_name": "popLast", "params": [], "class_name": "IndexPath", "method_declar": "mutating func popLast() -> Int?", "return_value": {"return_description": ["The last element of the collection if the collection has one or more elements; otherwise, nil."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Removes and returns the first element of the collection.", "method_name": "removeFirst", "params": [], "class_name": "IndexPath", "method_declar": "@discardableResult mutating func removeFirst() -> Int", "return_value": {"return_description": ["The first element of the collection."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Removes the specified number of elements from the beginning of the collection.", "method_name": "removeFirst", "params": [{"param_type": "Int", "param_description": "The number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.", "param_name": ["k"]}], "class_name": "IndexPath", "method_declar": "mutating func removeFirst(_ k: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes and returns the last element of the collection.", "method_name": "removeLast", "params": [], "class_name": "IndexPath", "method_declar": "@discardableResult mutating func removeLast() -> Int", "return_value": {"return_description": ["The last element of the collection."], "return_name": [""], "return_type": ["Int"]}, "is_static": false}, {"method_description": "Removes the given number of elements from the end of the collection.", "method_name": "removeLast", "params": [{"param_type": "Int", "param_description": "The number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.", "param_name": ["k"]}], "class_name": "IndexPath", "method_declar": "mutating func removeLast(_ k: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a view presenting the elements of the collection in reverse order.", "method_name": "reversed", "params": [], "class_name": "IndexPath", "method_declar": "func reversed() -> ReversedCollection<IndexPath>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ReversedCollection<IndexPath>"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, sorted.", "method_name": "sorted", "params": [], "class_name": "IndexPath", "method_declar": "func sorted() -> [Int]", "return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Int]"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "method_name": "starts", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["with", "possiblePrefix"]}], "class_name": "IndexPath", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix) -> Bool where PossiblePrefix : Sequence, Self.Element == PossiblePrefix.Element", "return_value": {"return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "params": [{"param_type": "Int = 1", "param_description": "The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "IndexPath", "method_declar": "func dropFirst(_ k: Int = 1) -> IndexPath", "return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": [""], "return_type": ["IndexPath"]}, "is_static": false}, {"method_description": "Return a new index path containing all but the last element.", "method_name": "dropLast", "params": [], "class_name": "IndexPath", "method_declar": "func dropLast() -> IndexPath", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexPath"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "params": [{"param_type": "Int", "param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "IndexPath", "method_declar": "func dropLast(_ k: Int) -> IndexPath", "return_value": {"return_description": ["A subsequence that leaves off k elements from the end."], "return_name": [""], "return_type": ["IndexPath"]}, "is_static": false}, {"method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "params": [], "class_name": "IndexPath", "method_declar": "func enumerated() -> EnumeratedSequence<IndexPath>", "return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<IndexPath>"]}, "is_static": false}, {"method_description": "Returns an iterator over the nodes of the index path.", "method_name": "makeIterator", "params": [], "class_name": "IndexPath", "method_declar": "func makeIterator() -> IndexingIterator<IndexPath>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexingIterator<IndexPath>"]}, "is_static": false}, {"method_description": "Returns the elements of the sequence, sorted.", "method_name": "sorted", "params": [], "class_name": "IndexPath", "method_declar": "func sorted() -> [Int]", "return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Int]"]}, "is_static": false}, {"method_description": "Returns a view presenting the elements of the collection in reverse order.", "method_name": "reversed", "params": [], "class_name": "IndexPath", "method_declar": "func reversed() -> ReversedCollection<IndexPath>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ReversedCollection<IndexPath>"]}, "is_static": false}, {"method_description": "Compares this index path to another in depth-first traversal order.", "method_name": "compare", "params": [{"param_type": "IndexPath", "param_description": "", "param_name": ["other"]}], "class_name": "IndexPath", "method_declar": "func compare(_ other: IndexPath) -> ComparisonResult", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "method_name": "lexicographicallyPrecedes", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "IndexPath", "method_declar": "func lexicographicallyPrecedes<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean that is true if the first index path is less than the second when comparing elements in depth-first traversal order.", "method_name": "func", "params": [{"param_type": "IndexPath", "param_description": "", "param_name": ["lhs"]}, {"param_type": "IndexPath", "param_description": "", "param_name": ["rhs"]}], "class_name": "IndexPath", "method_declar": "static func < (lhs: IndexPath, rhs: IndexPath) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean that is true if all nodes of the first index path are equal to those of the second in order.", "method_name": "==", "params": [{"param_type": "IndexPath", "param_description": "", "param_name": ["lhs"]}, {"param_type": "IndexPath", "param_description": "", "param_name": ["rhs"]}], "class_name": "IndexPath", "method_declar": "static func == (lhs: IndexPath, rhs: IndexPath) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "method_name": "starts", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["with", "possiblePrefix"]}], "class_name": "IndexPath", "method_declar": "func starts<PossiblePrefix>(with possiblePrefix: PossiblePrefix) -> Bool where PossiblePrefix : Sequence, Self.Element == PossiblePrefix.Element", "return_value": {"return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "method_name": "elementsEqual", "params": [{"param_type": "Sequence", "param_description": "A sequence to compare to this sequence.", "param_name": ["other"]}], "class_name": "IndexPath", "method_declar": "func elementsEqual<OtherSequence>(_ other: OtherSequence) -> Bool where OtherSequence : Sequence, Self.Element == OtherSequence.Element", "return_value": {"return_description": ["true if this sequence and other contain the same elements in the same order."], "return_name": [""], "return_type": ["Bool"]}, "is_static": false}, {"method_description": "Returns the index that follows the given index.", "method_name": "index", "params": [{"param_type": "IndexPath.Index", "param_description": "", "param_name": ["after", "i"]}], "class_name": "IndexPath", "method_declar": "func index(after i: IndexPath.Index) -> IndexPath.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexPath.Index"]}, "is_static": false}, {"method_description": "Returns the index that precedes the given index.", "method_name": "index", "params": [{"param_type": "IndexPath.Index", "param_description": "", "param_name": ["before", "i"]}], "class_name": "IndexPath", "method_declar": "func index(before i: IndexPath.Index) -> IndexPath.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexPath.Index"]}, "is_static": false}], "class_inherit_list": [], "class_name": "IndexPath", "typealias": [], "Vars": [{"var_description": "A mirror that reflects the index path.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "A textual description of the index path suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A textual description of the index path.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "One past the index of the last node in the index path.", "var_type": "IndexPath.Index", "is_static": false, "var_name": "endIndex"}, {"var_description": "The computed hash value for the index path.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}, {"var_description": "A Boolean value indicating whether the collection is empty.", "var_type": "Bool", "is_static": false, "var_name": "isEmpty"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<IndexPath>", "is_static": false, "var_name": "lazy"}, {"var_description": "The index of the first node in the index path.", "var_type": "IndexPath.Index", "is_static": false, "var_name": "startIndex"}, {"var_description": "A Boolean value indicating whether the collection is empty.", "var_type": "Bool", "is_static": false, "var_name": "isEmpty"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<IndexPath>", "is_static": false, "var_name": "lazy"}, {"var_description": "The index of the first node in the index path.", "var_type": "IndexPath.Index", "is_static": false, "var_name": "startIndex"}, {"var_description": "One past the index of the last node in the index path.", "var_type": "IndexPath.Index", "is_static": false, "var_name": "endIndex"}, {"var_description": "A textual description of the index path.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A textual description of the index path suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the index path.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "The computed hash value for the index path.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}], "class_type": "struct", "interface_list": ["Comparable", "CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "MutableCollection", "RandomAccessCollection", "ReferenceConvertible"], "package_name": "foundation", "subclass_list": []}