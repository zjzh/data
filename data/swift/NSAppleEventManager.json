{"package_name": "foundation", "subclass_list": [], "class_description": "Cocoa provides built-in scriptability support that uses scriptability information supplied by an application to automatically convert Apple events into script command objects that perform the desired operation. However, some applications may want to perform more basic Apple event handling, in which an application registers handlers for the Apple events it can process, then calls on the Apple Event Manager to dispatch received Apple events to the appropriate handler. NSAppleEventManager supports these mechanisms by providing methods to register and remove handlers and to dispatch Apple events to the appropriate handler, if one exists. For related information, see How Cocoa Applications Handle Apple Events\nEach application has at most one instance of NSAppleEventManager. To obtain a reference to it, you call the class method shared(), which creates the instance if it doesn\u2019t already exist.\nFor information about the Apple Event Manager, see Apple Event Manager and Apple Events Programming Guide.\n", "class_type": "class", "typealias": ["typealias SuspensionID = OpaquePointer"], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [], "class_name": "NSAppleEventManager", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSAppleEventManage"]}, "method_name": "shared", "method_description": "Returns the single instance of NSAppleEventManager, creating it first if it doesn\u2019t exist.", "method_declar": "class func shared() -> NSAppleEventManager"}, {"params": [{"param_name": ["forEventClass", "eventClass"], "param_type": "AEEventClass", "param_description": ""}, {"param_name": ["andEventID", "eventID"], "param_type": "AEEventID", "param_description": ""}], "class_name": "NSAppleEventManager", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "removeEventHandler", "method_description": "If an Apple event handler has been registered for the event specified by eventClass and eventID, removes it.", "method_declar": "func removeEventHandler(forEventClass eventClass: AEEventClass, andEventID eventID: AEEventID)"}, {"params": [{"param_name": ["handler"], "param_type": "Any", "param_description": ""}, {"param_name": ["andSelector", "handleEventSelector"], "param_type": "Selector", "param_description": ""}, {"param_name": ["forEventClass", "eventClass"], "param_type": "AEEventClass", "param_description": ""}, {"param_name": ["andEventID", "eventID"], "param_type": "AEEventID", "param_description": ""}], "class_name": "NSAppleEventManager", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "setEventHandler", "method_description": "Registers the Apple event handler specified by handler for the event specified by eventClass and eventID.", "method_declar": "func setEventHandler(_ handler: Any, andSelector handleEventSelector: Selector, forEventClass eventClass: AEEventClass, andEventID eventID: AEEventID)"}, {"params": [{"param_name": ["theAppleEvent"], "param_type": "UnsafePointer<AppleEvent>", "param_description": ""}, {"param_name": ["withRawReply", "theReply"], "param_type": "UnsafeMutablePointer<AppleEvent>", "param_description": ""}, {"param_name": ["handlerRefCon"], "param_type": "SRefCon", "param_description": ""}], "class_name": "NSAppleEventManager", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["OSEr"]}, "method_name": "dispatchRawAppleEvent", "method_description": "Causes the Apple event specified by theAppleEvent to be dispatched to the appropriate Apple event handler, if one has been registered by calling setEventHandler(_:andSelector:forEventClass:andEventID:).", "method_declar": "func dispatchRawAppleEvent(_ theAppleEvent: UnsafePointer<AppleEvent>, withRawReply theReply: UnsafeMutablePointer<AppleEvent>, handlerRefCon: SRefCon) -> OSErr"}, {"params": [{"param_name": ["forSuspensionID", "suspensionID"], "param_type": "NSAppleEventManager.SuspensionID", "param_description": ""}], "class_name": "NSAppleEventManager", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSAppleEventDescripto"]}, "method_name": "appleEvent", "method_description": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), returns the descriptor for the event whose handling was suspended.", "method_declar": "func appleEvent(forSuspensionID suspensionID: NSAppleEventManager.SuspensionID) -> NSAppleEventDescriptor"}, {"params": [{"param_name": ["forSuspensionID", "suspensionID"], "param_type": "NSAppleEventManager.SuspensionID", "param_description": ""}], "class_name": "NSAppleEventManager", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSAppleEventDescripto"]}, "method_name": "replyAppleEvent", "method_description": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), returns the corresponding reply event descriptor.", "method_declar": "func replyAppleEvent(forSuspensionID suspensionID: NSAppleEventManager.SuspensionID) -> NSAppleEventDescriptor"}, {"params": [{"param_name": ["withSuspensionID", "suspensionID"], "param_type": "NSAppleEventManager.SuspensionID", "param_description": ""}], "class_name": "NSAppleEventManager", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "resume", "method_description": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), signal that handling of the suspended event may now continue.", "method_declar": "func resume(withSuspensionID suspensionID: NSAppleEventManager.SuspensionID)"}, {"params": [{"param_name": ["suspensionID"], "param_type": "NSAppleEventManager.SuspensionID", "param_description": ""}], "class_name": "NSAppleEventManager", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "setCurrentAppleEventAndReplyEventWithSuspensionID", "method_description": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), sets the values that will be returned by subsequent invocations of currentAppleEvent and currentReplyAppleEvent to be the event whose handling was suspended and its corresponding reply event, respectively.", "method_declar": "func setCurrentAppleEventAndReplyEventWithSuspensionID(_ suspensionID: NSAppleEventManager.SuspensionID)"}, {"params": [], "class_name": "NSAppleEventManager", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSAppleEventManager.SuspensionI"]}, "method_name": "suspendCurrentAppleEvent", "method_description": "Suspends the handling of the current event and returns an ID that must be used to resume the handling of the event if an Apple event is being handled on the current thread.", "method_declar": "func suspendCurrentAppleEvent() -> NSAppleEventManager.SuspensionID?"}], "class_name": "NSAppleEventManager", "Vars": [{"var_description": "Returns the descriptor for currentAppleEvent if an Apple event is being handled on the current thread.", "var_type": "NSAppleEventDescriptor", "is_static": false, "var_name": "currentAppleEvent"}, {"var_description": "Returns the corresponding reply event descriptor if an Apple event is being handled on the current thread.", "var_type": "NSAppleEventDescriptor", "is_static": false, "var_name": "currentReplyAppleEvent"}, {"var_description": "Specifies that an event-processing operation should continue until a timeout occurs based on a value determined by the Apple Event Manager (about 1 minute). Not currently used by applications.", "var_type": "Double", "is_static": false, "var_name": "NSAppleEventTimeOutDefault"}, {"var_description": "Specifies that the application is willing to wait indefinitely for the current operation to complete. Not currently used by applications.", "var_type": "Double", "is_static": false, "var_name": "NSAppleEventTimeOutNone"}]}