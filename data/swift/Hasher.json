{"Methods": [{"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Hasher", "params": [{"param_description": "A value to add to the hasher.", "param_type": "Hashable", "param_name": ["value"]}], "method_description": "Adds the given value to this hasher, mixing its essential parts into the hasher state.", "is_static": false, "method_name": "combine", "method_declar": "mutating func combine<H>(_ value: H) where H : Hashable"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "Hasher", "params": [{"param_description": "A raw memory buffer.", "param_type": "UnsafeRawBufferPointer", "param_name": ["bytes"]}], "method_description": "Adds the contents of the given buffer to this hasher, mixing it into the hasher state.", "is_static": false, "method_name": "combine", "method_declar": "mutating func combine(bytes: UnsafeRawBufferPointer)"}, {"return_value": {"return_name": [""], "return_type": ["Int"], "return_description": ["The hash value calculated by the hasher."]}, "class_name": "Hasher", "params": [], "method_description": "Finalizes the hasher state and returns the hash value.", "is_static": false, "method_name": "finalize", "method_declar": "func finalize() -> Int"}], "Vars": [], "class_name": "Hasher", "interface_list": [], "class_description": "Hasher can be used to map an arbitrary sequence of bytes to an integer hash value. You can feed data to the hasher using a series of calls to mutating combine methods. When you\u2019ve finished feeding the hasher, the hash value can be retrieved by calling finalize():\nWithin the execution of a Swift program, Hasher guarantees that finalizing it will always produce the same hash value as long as it is fed the exact same sequence of bytes. However, the underlying hash algorithm is designed to exhibit avalanche effects: slight changes to the seed or the input byte sequence will typically produce drastic changes in the generated hash value.\nNote\nDo not save or otherwise reuse hash values across executions of your program. Hasher is usually randomly seeded, which means it will return different values on every new execution of your program. The hash algorithm implemented by Hasher may itself change between any two versions of the standard library.\n", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}