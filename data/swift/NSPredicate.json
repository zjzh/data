{"package_name": "foundation", "subclass_list": [], "class_description": "Predicates represent logical conditions, which you can use to filter collections of objects. Although it's common to create predicates directly from instances of NSComparisonPredicate,  NSCompoundPredicate, and NSExpression, you often create predicates from a format string which is parsed by the class methods on NSPredicate. Examples of predicate format strings include:\nSimple comparisons, such as grade == \"7\" or firstName like \"Shaffiq\"\nCase and diacritic insensitive lookups, such as name contains[cd] \"itroen\"\nLogical operations, such as (firstName like \"Mark\") OR (lastName like \"Adderley\")\nTemporal range constraints, such as date between {$YESTERDAY, $TOMORROW}.\nRelational conditions, such as group.name like \"work*\"\nAggregate operations, such as @sum.items.price < 1000\nFor a complete syntax reference, refer to the Predicate Programming Guide.\nYou can also create predicates that include variables using the evaluate(with:substitutionVariables:) method, so that the predicate can be predefined before substituting concrete values at runtime.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["format", "predicateFormat"], "param_type": "String", "param_description": "The format string for the new predicate."}, {"param_name": ["argumentArray", "arguments"], "param_type": "[Any]", "param_description": "The arguments to substitute into predicateFormat. Values are substituted in the order they appear in the array."}], "class_name": "NSPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new predicate by substituting the values in arguments into predicateFormat, and parsing the result."], "return_type": []}, "method_name": "init", "method_description": "Initializes a predicate by substituting the values in a given array into a format string and parsing the result.", "method_declar": "init(format predicateFormat: String, argumentArray arguments: [Any]?)"}, {"params": [{"param_name": ["format", "predicateFormat"], "param_type": "String", "param_description": "The format string for the new predicate."}, {"param_name": ["arguments", "argList"], "param_type": "CVaListPointer", "param_description": "The arguments to substitute into predicateFormat. Values are substituted in the order they appear in the argument list."}], "class_name": "NSPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new predicate by substituting the values in argList into predicateFormat and parsing the result."], "return_type": []}, "method_name": "init", "method_description": "Initializes a predicate by substituting the values in an argument list into a format string and parsing the result.", "method_declar": "init(format predicateFormat: String, arguments argList: CVaListPointer)"}, {"params": [{"param_name": ["variables"], "param_type": "[String", "param_description": "The substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver."}, {"param_name": ["[String"], "param_type": "Any]", "param_description": ""}], "class_name": "NSPredicate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A copy of the receiver with the predicate's variables substituted by values specified in variables."], "return_type": ["Sel"]}, "method_name": "withSubstitutionVariables", "method_description": "Returns a copy of the predicate with the predicate's variables substituted by values specified in a given substitution variables dictionary.", "method_declar": "func withSubstitutionVariables(_ variables: [String : Any]) -> Self"}, {"params": [{"param_name": ["value"], "param_type": "Bool", "param_description": "The Boolean value to which the new predicate should evaluate."}], "class_name": "NSPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": ["A predicate that always evaluates to value."], "return_type": []}, "method_name": "init", "method_description": "Creates and returns a predicate that always evaluates to a given Boolean value.", "method_declar": "init(value: Bool)"}, {"params": [{"param_name": ["block"], "param_type": "@escaping (Any", "param_description": "The block is applied to the object to be evaluated.The block takes two arguments:evaluatedObjectThe object to be evaluated.bindingsThe substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver.The block returns true if the evaluatedObject evaluates to true, otherwise false."}, {"param_name": ["[String"], "param_type": "Any]) -> Bool", "param_description": ""}], "class_name": "NSPredicate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new predicate by that evaluates objects using block."], "return_type": ["Bool"]}, "method_name": "init", "method_description": "Initializes a predicate that evaluates using a specified block object and bindings dictionary.", "method_declar": "init(block: @escaping (Any?, [String : Any]?) -> Bool)"}, {"params": [{"param_name": ["fromMetadataQueryString", "queryString"], "param_type": "String", "param_description": "A metadata query string."}], "class_name": "NSPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initializes a predicate with a metadata query string.", "method_declar": "init?(fromMetadataQueryString queryString: String)"}, {"params": [{"param_name": ["with", "object"], "param_type": "Any", "param_description": "The object against which to evaluate the predicate."}], "class_name": "NSPredicate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if object matches the conditions specified by the predicate, otherwise false."], "return_type": ["Boo"]}, "method_name": "evaluate", "method_description": "Returns a Boolean value indicating whether the specified object matches the conditions specified by the predicate.", "method_declar": "func evaluate(with object: Any?) -> Bool"}, {"params": [{"param_name": ["with", "object"], "param_type": "Any", "param_description": "The object against which to evaluate the predicate."}, {"param_name": ["substitutionVariables", "bindings"], "param_type": "[String", "param_description": ""}, {"param_name": ["[String"], "param_type": "Any]", "param_description": ""}], "class_name": "NSPredicate", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if object matches the conditions specified by the predicate after substituting in the values in variables for any replacement tokens, otherwise false."], "return_type": ["Boo"]}, "method_name": "evaluate", "method_description": "Returns a Boolean value indicating whether the specified object matches the conditions specified by the predicate after substituting in the values in a given variables dictionary.", "method_declar": "func evaluate(with object: Any?, substitutionVariables bindings: [String : Any]?) -> Bool"}, {"params": [], "class_name": "NSPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "allowEvaluation", "method_description": "Forces a predicate that was securely decoded to allow evaluation.", "method_declar": "func allowEvaluation()"}], "class_name": "NSPredicate", "Vars": [{"var_description": "The predicate's format string.", "var_type": "String", "is_static": false, "var_name": "predicateFormat"}]}