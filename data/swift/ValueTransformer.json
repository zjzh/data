{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Registers the provided value transformer with a given identifier.", "is_static": false, "method_name": "setValueTransformer", "class_name": "ValueTransformer", "method_declar": "class func setValueTransformer(_ transformer: ValueTransformer?, forName name: NSValueTransformerName)", "params": [{"param_type": "ValueTransformer", "param_description": "The transformer to register.", "param_name": ["transformer"]}, {"param_type": "NSValueTransformerName", "param_description": "The name for transformer.", "param_name": ["forName", "name"]}]}, {"return_value": {"return_name": [], "return_description": ["The value transformer identified by name in the shared registry, or nil if not found."], "return_type": []}, "method_description": "Returns the value transformer identified by a given identifier.", "is_static": false, "method_name": "init", "class_name": "ValueTransformer", "method_declar": "init?(forName name: NSValueTransformerName)", "params": [{"param_type": "NSValueTransformerName", "param_description": "The transformer identifier.", "param_name": ["forName", "name"]}]}, {"return_value": {"return_name": [""], "return_description": ["An array of all the registered value transformers."], "return_type": ["[NSValueTransformerName"]}, "method_description": "Returns an array of all the registered value transformers.", "is_static": false, "method_name": "valueTransformerNames", "class_name": "ValueTransformer", "method_declar": "class func valueTransformerNames() -> [NSValueTransformerName]", "params": []}, {"return_value": {"return_name": [""], "return_description": ["true if the receiver supports reverse value transformations, otherwise false."], "return_type": ["Boo"]}, "method_description": "Returns a Boolean value that indicates whether the receiver can reverse a transformation.", "is_static": false, "method_name": "allowsReverseTransformation", "class_name": "ValueTransformer", "method_declar": "class func allowsReverseTransformation() -> Bool", "params": []}, {"return_value": {"return_name": [""], "return_description": ["The class of the value returned by the receiver for a forward transformation."], "return_type": ["AnyClas"]}, "method_description": "Returns the class of the value returned by the receiver for a forward transformation.", "is_static": false, "method_name": "transformedValueClass", "class_name": "ValueTransformer", "method_declar": "class func transformedValueClass() -> AnyClass", "params": []}, {"return_value": {"return_name": [""], "return_description": ["The result of transforming value."], "return_type": ["An"]}, "method_description": "Returns the result of transforming a given value. ", "is_static": false, "method_name": "transformedValue", "class_name": "ValueTransformer", "method_declar": "func transformedValue(_ value: Any?) -> Any?", "params": [{"param_type": "Any", "param_description": "The value to transform.", "param_name": ["value"]}]}, {"return_value": {"return_name": [""], "return_description": ["The reverse transformation of value. "], "return_type": ["An"]}, "method_description": "Returns the result of the reverse transformation of a given value. ", "is_static": false, "method_name": "reverseTransformedValue", "class_name": "ValueTransformer", "method_declar": "func reverseTransformedValue(_ value: Any?) -> Any?", "params": [{"param_type": "Any", "param_description": "The value to reverse transform.", "param_name": ["value"]}]}], "class_type": "class", "class_name": "ValueTransformer", "Vars": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "You create a value transformer by subclassing ValueTransformer and overriding the necessary methods to provide the required custom transformation. You then register the value transformer using the setValueTransformer(_:forName:) method, so that other parts of your app can access it by name with init(forName:).\nUse the transformedValue(_:) method to transform a value from one representation into another. If a value transformer designates that its transformation is reversible by returning true for allowsReverseTransformation(), you can also use the reverseTransformedValue(_:) to perform the transformation in reverse. For example, reversing the characters in a string is a reversible operation, whereas changing the characters in a string to be uppercase is a nonreversible operation.\nA value transformer can take inputs of one type and return a value of a different type. For example,  a value transformer could take an NSImage or UIImage object and return an NSData object containing the PNG representation of that image.\nThe following example defines a new value transformer that takes an object and returns a string based on the object\u2019\u0080\u0099s class type. This transformer isn't reversible because it doesn't make sense to transform a class name into an object.\n", "package_name": "foundation"}