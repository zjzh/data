{"Methods": [{"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UnsafePointer", "params": [], "method_description": "Deallocates the memory block previously allocated at this pointer.", "is_static": false, "method_name": "deallocate", "method_declar": "func deallocate()"}, {"return_value": {"return_name": [""], "return_type": ["Result"], "return_description": ["The return value, if any, of the body closure parameter."]}, "class_name": "UnsafePointer", "params": [{"param_description": "The type to temporarily bind the memory referenced by this pointer. The type T must be the same size and be layout compatible with the pointer\u2019s Pointee type.", "param_type": "T.Type", "param_name": ["to", "type"]}, {"param_description": "The number of instances of Pointee to bind to type.", "param_type": "Int", "param_name": ["capacity", "count"]}, {"param_description": "A closure that takes a  typed pointer to the same memory as this pointer, only bound to type T. The closure\u2019s pointer argument is valid only for the duration of the closure\u2019s execution. If body has a return value, that value is also used as the return value for the withMemoryRebound(to:capacity:_:) method.", "param_type": "(UnsafePointer<T>) throws -> Result", "param_name": ["body"]}], "method_description": "Executes the given closure while temporarily binding the specified number of instances to the given type.", "is_static": false, "method_name": "withMemoryRebound", "method_declar": "func withMemoryRebound<T, Result>(to type: T.Type, capacity count: Int, _ body: (UnsafePointer<T>) throws -> Result) rethrows -> Result"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "A value to compare.", "param_type": "UnsafePointer<Pointee>", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UnsafePointer<Pointee>", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether two values are not equal.", "is_static": true, "method_name": "!=", "method_declar": "static func != (lhs: UnsafePointer<Pointee>, rhs: UnsafePointer<Pointee>) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["UnsafePointer<Pointee>"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "", "param_type": "Int", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UnsafePointer<Pointee>", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "+", "method_declar": "static func + (lhs: Int, rhs: UnsafePointer<Pointee>) -> UnsafePointer<Pointee>"}, {"return_value": {"return_name": [""], "return_type": ["UnsafePointer<Pointee>"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "", "param_type": "UnsafePointer<Pointee>", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Int", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "+", "method_declar": "static func + (lhs: UnsafePointer<Pointee>, rhs: Int) -> UnsafePointer<Pointee>"}, {"return_value": {"return_name": [""], "return_type": ["Int"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "", "param_type": "UnsafePointer<Pointee>", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UnsafePointer<Pointee>", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "-", "method_declar": "static func - (lhs: UnsafePointer<Pointee>, rhs: UnsafePointer<Pointee>) -> Int"}, {"return_value": {"return_name": [""], "return_type": ["UnsafePointer<Pointee>"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "", "param_type": "UnsafePointer<Pointee>", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Int", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "-", "method_declar": "static func - (lhs: UnsafePointer<Pointee>, rhs: Int) -> UnsafePointer<Pointee>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeFrom<UnsafePointer<Pointee>>"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "The lower bound for the range.", "param_type": "UnsafePointer<Pointee>", "param_name": ["minimum"]}], "method_description": "Returns a partial range extending upward from a lower bound.", "is_static": true, "method_name": "...", "method_declar": "postfix static func ... (minimum: UnsafePointer<Pointee>) -> PartialRangeFrom<UnsafePointer<Pointee>>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeThrough<UnsafePointer<Pointee>>"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "The upper bound for the range.", "param_type": "UnsafePointer<Pointee>", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, and including, its upper bound.", "is_static": true, "method_name": "...", "method_declar": "prefix static func ... (maximum: UnsafePointer<Pointee>) -> PartialRangeThrough<UnsafePointer<Pointee>>"}, {"return_value": {"return_name": [""], "return_type": ["ClosedRange<UnsafePointer<Pointee>>"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "The lower bound for the range.", "param_type": "UnsafePointer<Pointee>", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "UnsafePointer<Pointee>", "param_name": ["maximum"]}], "method_description": "Returns a closed range that contains both of its bounds.", "is_static": true, "method_name": "...", "method_declar": "static func ... (minimum: UnsafePointer<Pointee>, maximum: UnsafePointer<Pointee>) -> ClosedRange<UnsafePointer<Pointee>>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeUpTo<UnsafePointer<Pointee>>"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "The upper bound for the range.", "param_type": "UnsafePointer<Pointee>", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, but not including, its upper bound.", "is_static": true, "method_name": "..", "method_declar": "prefix static func ..< (maximum: UnsafePointer<Pointee>) -> PartialRangeUpTo<UnsafePointer<Pointee>>"}, {"return_value": {"return_name": [""], "return_type": ["Range<UnsafePointer<Pointee>>"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "The lower bound for the range.", "param_type": "UnsafePointer<Pointee>", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "UnsafePointer<Pointee>", "param_name": ["maximum"]}], "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "is_static": true, "method_name": "..", "method_declar": "static func ..< (minimum: UnsafePointer<Pointee>, maximum: UnsafePointer<Pointee>) -> Range<UnsafePointer<Pointee>>"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "", "param_type": "UnsafePointer<Pointee>", "param_name": ["x"]}, {"param_description": "", "param_type": "UnsafePointer<Pointee>", "param_name": ["y"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func < (x: UnsafePointer<Pointee>, y: UnsafePointer<Pointee>) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "A value to compare.", "param_type": "UnsafePointer<Pointee>", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UnsafePointer<Pointee>", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func <= (lhs: UnsafePointer<Pointee>, rhs: UnsafePointer<Pointee>) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "", "param_type": "UnsafePointer<Pointee>", "param_name": ["x"]}, {"param_description": "", "param_type": "UnsafePointer<Pointee>", "param_name": ["y"]}], "method_description": "Returns a Boolean value indicating whether two values are equal.", "is_static": true, "method_name": "==", "method_declar": "static func == (x: UnsafePointer<Pointee>, y: UnsafePointer<Pointee>) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UnsafePointer", "params": [{"param_description": "A value to compare.", "param_type": "UnsafePointer<Pointee>", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UnsafePointer<Pointee>", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "is_static": true, "method_name": ">", "method_declar": "static func > (lhs: UnsafePointer<Pointee>, rhs: UnsafePointer<Pointee>) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."]}, "class_name": "UnsafePointer", "params": [{"param_description": "A value to compare.", "param_type": "UnsafePointer<Pointee>", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UnsafePointer<Pointee>", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "is_static": true, "method_name": ">=", "method_declar": "static func >= (lhs: UnsafePointer<Pointee>, rhs: UnsafePointer<Pointee>) -> Bool"}], "Vars": [{"var_description": "", "is_static": false, "var_name": "customPlaygroundQuickLook", "var_type": "PlaygroundQuickLook"}, {"var_description": "Accesses the instance referenced by this pointer.", "is_static": false, "var_name": "pointee", "var_type": "Pointee"}], "class_name": "UnsafePointer", "interface_list": ["Comparable", "CustomDebugStringConvertible", "CustomPlaygroundQuickLookable", "CustomReflectable", "CVarArg", "Equatable", "Hashable", "Strideable"], "class_description": "You use instances of the UnsafePointer type to access data of a specific type in memory. The type of data that a pointer can access is the pointer\u2019s Pointee type. UnsafePointer provides no automated memory management or alignment guarantees. You are responsible for handling the life cycle of any memory you work with through unsafe pointers to avoid leaks or undefined behavior.\nMemory that you manually manage can be either untyped or bound to a specific type. You use the UnsafePointer type to access and manage memory that has been bound to a specific type.\nThe memory referenced by an UnsafePointer instance can be in one of several states. Many pointer operations must only be applied to pointers with memory in a specific state\u2014you must keep track of the state of the memory you are working with and understand the changes to that state that different operations perform. Memory can be untyped and uninitialized, bound to a type and uninitialized, or bound to a type and initialized to a value. Finally, memory that was allocated previously may have been deallocated, leaving existing pointers referencing unallocated memory.\nMemory that has just been allocated through a typed pointer or has been deinitialized is in an uninitialized state. Uninitialized memory must be initialized before it can be accessed for reading.\nInitialized memory has a value that can be read using a pointer\u2019s pointee property or through subscript notation. In the following example, ptr is a pointer to memory initialized with a value of 23:\nWhen you access memory through an UnsafePointer instance, the Pointee type must be consistent with the bound type of the memory. If you do need to access memory that is bound to one type as a different type, Swift\u2019s pointer types provide type-safe ways to temporarily or permanently change the bound type of the memory, or to load typed instances directly from raw memory.\nAn UnsafePointer<UInt8> instance allocated with eight bytes of memory, uint8Pointer, will be used for the examples below.\nWhen you only need to temporarily access a pointer\u2019s memory as a different type, use the withMemoryRebound(to:capacity:) method. For example, you can use this method to call an API that expects a pointer to a different type that is layout compatible with your pointer\u2019s Pointee. The following code temporarily rebinds the memory that uint8Pointer references from UInt8 to Int8 to call the imported C strlen function.\nWhen you need to permanently rebind memory to a different type, first obtain a raw pointer to the memory and then call the bindMemory(to:capacity:) method on the raw pointer. The following example binds the memory referenced by uint8Pointer to one instance of the UInt64 type:\nAfter rebinding the memory referenced by uint8Pointer to UInt64, accessing that pointer\u2019s referenced memory as a UInt8 instance is undefined.\nAlternatively, you can access the same memory as a different type without rebinding through untyped memory access, so long as the bound type and the destination type are trivial types. Convert your pointer to an UnsafeRawPointer instance and then use the raw pointer\u2019s load(fromByteOffset:as:) method to read values.\nPointer arithmetic with a typed pointer is counted in strides of the pointer\u2019s Pointee type. When you add to or subtract from an UnsafePointer instance, the result is a new pointer of the same type, offset by that number of instances of the Pointee type.\nYou can also use subscript notation to access the value in memory at a specific offset.\nWhen calling a function or method with an UnsafePointer parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift\u2019s implicit bridging to pass a compatible pointer.\nFor example, the printInt(atAddress:) function in the following code sample expects an UnsafePointer<Int> instance as its first parameter:\nAs is typical in Swift, you can call the printInt(atAddress:) function with an UnsafePointer instance. This example passes intPointer, a pointer to an Int value, to print(address:).\nBecause a mutable typed pointer can be implicitly cast to an immutable pointer with the same Pointee type when passed as a parameter, you can also call printInt(atAddress:) with an UnsafeMutablePointer instance.\nAlternatively, you can use Swift\u2019s implicit bridging to pass a pointer to an instance or to the elements of an array. The following example passes a pointer to the value variable by using inout syntax:\nAn immutable pointer to the elements of an array is implicitly created when you pass the array as an argument. This example uses implicit bridging to pass a pointer to the elements of numbers when calling printInt(atAddress:).\nYou can also use inout syntax to pass a mutable pointer to the elements of an array. Because printInt(atAddress:) requires an immutable pointer, although this is syntactically valid, it isn\u2019t necessary.\nNo matter which way you call printInt(atAddress:), Swift\u2019s type safety guarantees that you can only pass a pointer to the type required by the function\u2014in this case, a pointer to an Int.\nImportant\nThe pointer created through implicit bridging of an instance or of an array\u2019s elements is only valid during the execution of the called function. Escaping the pointer to use after the execution of the function is undefined behavior. In particular, do not use implicit bridging when calling an UnsafePointer initializer.\n", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}