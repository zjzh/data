{"package_name": "foundation", "subclass_list": [], "class_description": "TimeZone defines the behavior of a time zone. Time zone values represent geopolitical regions. Consequently, these values have names for these regions. Time zone values also represent a temporal offset, either plus or minus, from Greenwich Mean Time (GMT) and an abbreviation (such as PST for Pacific Standard Time).\nTimeZone provides two static functions to get time zone values: current and autoupdatingCurrent. The autoupdatingCurrent time zone automatically tracks updates made by the user.\nNote that time zone database entries such as \u201cAmerica/Los_Angeles\u201d are IDs, not names. An example of a time zone name is \u201cPacific Daylight Time\u201d. Although many TimeZone functions include the word \u201cname\u201d, they refer to IDs.\nCocoa does not provide any API to change the time zone of the computer, or of other applications.\n", "class_type": "struct", "typealias": ["typealias TimeZone.ReferenceType = NSTimeZone"], "interface_list": ["CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "Hashable", "ReferenceConvertible"], "class_inherit_list": [], "Methods": [{"params": [{"param_name": ["secondsFromGMT", "seconds"], "param_type": "Int", "param_description": "The number of seconds from GMT."}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": ["A time zone, or nil if a valid time zone could not be created from seconds."], "return_type": []}, "method_name": "init", "method_description": "Returns a time zone initialized with a specific number of seconds from GMT.", "method_declar": "init?(secondsFromGMT seconds: Int)"}, {"params": [{"param_name": ["for", "date"], "param_type": "Date = Date()", "param_description": "The date to use for the calculation. The default value is the current date."}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Strin"]}, "method_name": "abbreviation", "method_description": "Returns the abbreviation for the time zone at a given date.", "method_declar": "func abbreviation(for date: Date = Date()) -> String?"}, {"params": [{"param_name": ["for", "date"], "param_type": "Date = Date()", "param_description": "The date to use for the calculation. The default value is the current date."}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["In"]}, "method_name": "secondsFromGMT", "method_description": "The current difference in seconds between the time zone and Greenwich Mean Time.", "method_declar": "func secondsFromGMT(for date: Date = Date()) -> Int"}, {"params": [{"param_name": ["for", "date"], "param_type": "Date = Date()", "param_description": "The date to use for the calculation. The default value is the current date."}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "isDaylightSavingTime", "method_description": "Returns a Boolean value that indicates whether the receiver uses daylight saving time at a given date.", "method_declar": "func isDaylightSavingTime(for date: Date = Date()) -> Bool"}, {"params": [{"param_name": ["for", "date"], "param_type": "Date = Date()", "param_description": "The date to use for the calculation. The default value is the current date."}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["TimeInterva"]}, "method_name": "daylightSavingTimeOffset", "method_description": "Returns the daylight saving time offset for a given date.", "method_declar": "func daylightSavingTimeOffset(for date: Date = Date()) -> TimeInterval"}, {"params": [{"param_name": ["after", "date"], "param_type": "Date", "param_description": "A date."}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The next daylight saving time transition after date. Depending on the time zone, this function may return a change of the time zone\u2019s offset from GMT. Returns nil if the time zone of the receiver does not observe daylight savings time as of date."], "return_type": ["Dat"]}, "method_name": "nextDaylightSavingTimeTransition", "method_description": "Returns the next daylight saving time transition after a given date.", "method_declar": "func nextDaylightSavingTimeTransition(after date: Date) -> Date?"}, {"params": [{"param_name": ["lhs"], "param_type": "TimeZone", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "TimeZone", "param_description": "Another value to compare."}], "class_name": "TimeZone", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "!=", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_declar": "static func != (lhs: TimeZone, rhs: TimeZone) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "TimeZone", "param_description": ""}, {"param_name": ["rhs"], "param_type": "TimeZone", "param_description": ""}], "class_name": "TimeZone", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "==", "method_description": "Indicates whether two time zones are the same.", "method_declar": "static func == (lhs: TimeZone, rhs: TimeZone) -> Bool"}, {"params": [{"param_name": ["for", "style"], "param_type": "NSTimeZone.NameStyle", "param_description": ""}, {"param_name": ["locale"], "param_type": "Locale", "param_description": ""}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Strin"]}, "method_name": "localizedName", "method_description": "Returns the name of the receiver localized for a given locale.", "method_declar": "func localizedName(for style: NSTimeZone.NameStyle, locale: Locale?) -> String?"}, {"params": [{"param_name": ["from", "decoder"], "param_type": "Decoder", "param_description": ""}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init(from decoder: Decoder) throws"}, {"params": [{"param_name": ["to", "encoder"], "param_type": "Encoder", "param_description": ""}], "class_name": "TimeZone", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "", "method_declar": "func encode(to encoder: Encoder) throws"}], "class_name": "TimeZone", "Vars": [{"var_description": "The time zone currently used by the system, automatically updating to the user\u2019s current preference.", "var_type": "TimeZone", "is_static": false, "var_name": "autoupdatingCurrent"}, {"var_description": "The time zone currently used by the system.", "var_type": "TimeZone", "is_static": false, "var_name": "current"}, {"var_description": "Returns an array of strings listing the identifier of all the time zones known to the system.", "var_type": "[String]", "is_static": false, "var_name": "knownTimeZoneIdentifiers"}, {"var_description": "Returns the mapping of abbreviations to time zone identifiers.", "var_type": "[String", "is_static": false, "var_name": "abbreviationDictionary"}, {"var_description": "The geopolitical region identifier that identifies the time zone.", "var_type": "String", "is_static": false, "var_name": "identifier"}, {"var_description": "Returns the time zone data version.", "var_type": "String", "is_static": false, "var_name": "timeZoneDataVersion"}, {"var_description": "The date of the next (after the current instant) daylight saving time transition for the time zone. ", "var_type": "Date", "is_static": false, "var_name": "nextDaylightSavingTimeTransition"}, {"var_description": "A textual description of the time zone.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A textual description of the time zone suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the time zone.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "The computed hash value of the time zone.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}]}