{"class_description": "The Numeric protocol provides a suitable basis for arithmetic on scalar values, such as integers and floating-point numbers. You can write generic methods that operate on any numeric type in the standard library by using the Numeric protocol as a generic constraint.\nThe following example declares a method that calculates the total of any sequence with Numeric elements.\nThe sum() method is now available on any sequence or collection with numeric values, whether it is an array of Double or a countable range of Int.\nTo add Numeric protocol conformance to your own custom type, implement the required mutating methods. Extensions to Numeric provide default implementations for the protocol\u2019s nonmutating methods based on the mutating variants.\n", "Methods": [], "class_inherit_list": ["Equatable", "ExpressibleByIntegerLiteral"], "class_name": "Numeric", "typealias": [], "Vars": [], "class_type": "protocol", "interface_list": [], "package_name": "swift", "subclass_list": ["BinaryInteger", "SignedNumeric"]}