{"package_name": "foundation", "subclass_list": [], "class_description": "You identify on-demand resources during development by creating string identifiers known as tags and assigning one or more tags to each resource. An NSBundleResourceRequest object manages the resources marked by one or more tags.\nYou use the resource request to inform the system when the managed tags are needed and when you have finished accessing them. The resource request manages the downloading of any resources marked with the managed tags that are not already on the device and informs your app when the resources are ready for use.\nThe system will not attempt to purge the resources marked with a tag from on-device storage as long as at least one NSBundleResourceRequest object is managing the tag. Apps can access resources after the completion handler of either beginAccessingResources(completionHandler:) or conditionallyBeginAccessingResources(completionHandler:) is called successfully. Management ends after a call to endAccessingResources() or after the resource request object is deallocated.\nOther properties and methods let you track the progress of a download, change the priority of a download, and check whether the resources marked by a set of tags are already on the device. Methods in Bundle indicate to the system the relative importance of preserving a tag in memory after it is no longer in use. For more information, see setPreservationPriority(_:forTags:) and preservationPriority(forTag:).\nImportant\nAn NSBundleResourceRequest object can only be used for one successful resource request.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "ProgressReporting"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["tags"], "param_type": "Set<String>", "param_description": "A set of strings, with each string specifying a tag assigned to resources stored in the main bundle. The value must not be nil."}], "class_name": "NSBundleResourceRequest", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized resource request."], "return_type": []}, "method_name": "init", "method_description": "Initializes a resource request for managing the on-demand resources marked with any of the set of specified tags. The managed resources are loaded into the main bundle.", "method_declar": "convenience init(tags: Set<String>)"}, {"params": [{"param_name": ["tags"], "param_type": "Set<String>", "param_description": "A set of strings, with each string specifying a tag assigned to resources stored in bundle. The value must not be nil."}, {"param_name": ["bundle"], "param_type": "Bundle", "param_description": "The bundle used to store the loaded resources. Pass nil for the main bundle. The bundle must be the same as the one used in the Xcode project for all the resources marked with the specified tags."}], "class_name": "NSBundleResourceRequest", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized resource request."], "return_type": []}, "method_name": "init", "method_description": "Initializes a resource request for managing the on-demand resources marked with any of the set of specified tags. The managed resources are loaded into the specified bundle.", "method_declar": "init(tags: Set<String>, bundle: Bundle)"}, {"params": [{"param_name": ["completionHandler"], "param_type": "@escaping (Error) -> Void", "param_description": "A block called when the resources have finished downloading or if an error occurs. The resources are not available until the completion handler is called with error set to nil.The block takes the following parameter:errorSet to nil if the resources are downloaded successfully; otherwise this parameter holds an NSError object describing the problem that occurred. Errors are usually due to a lack of free space or problems connecting with the App Store."}], "class_name": "NSBundleResourceRequest", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "beginAccessingResources", "method_description": "Requests access to the resources marked with the managed tags. If any of the resources are not on the device, they are requested from the App Store.", "method_declar": "func beginAccessingResources(completionHandler: @escaping (Error?) -> Void)"}, {"params": [{"param_name": ["completionHandler"], "param_type": "@escaping (Bool) -> Void", "param_description": "A block called when the availability of the resources has been checked.The block takes the following parameter:resourcesAvailableReturns true if all of the resources marked with the tags managed by the request are already on the device. Returns false if any of the resources are not on the device."}], "class_name": "NSBundleResourceRequest", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "conditionallyBeginAccessingResources", "method_description": "Checks whether the resources marked with the tags managed by the request are already on the device. If all of the resources are on the device, you can begin accessing those resources.", "method_declar": "func conditionallyBeginAccessingResources(completionHandler: @escaping (Bool) -> Void)"}, {"params": [], "class_name": "NSBundleResourceRequest", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "endAccessingResources", "method_description": "Informs the system that you have finished accessing the resources marked with the tags managed by the request.", "method_declar": "func endAccessingResources()"}], "class_name": "NSBundleResourceRequest", "Vars": [{"var_description": "A reference to the bundle used for storing the downloaded resources. (read-only)", "var_type": "Bundle", "is_static": false, "var_name": "bundle"}, {"var_description": "A set of strings, with each string specifying a tag used to mark on-demand resources managed by the request. (read-only)", "var_type": "Set<String>", "is_static": false, "var_name": "tags"}, {"var_description": "A hint to the system of the relative priority of the resource request.", "var_type": "Double", "is_static": false, "var_name": "loadingPriority"}, {"var_description": "", "var_type": "Double", "is_static": false, "var_name": "NSBundleResourceRequestLoadingPriorityUrgent"}, {"var_description": "A reference to the progress object associated with the specified resource request. (read-only)", "var_type": "Progress", "is_static": false, "var_name": "progress"}, {"var_description": "The end of the range of error codes reserved for bundle errors.", "var_type": "Int", "is_static": false, "var_name": "NSBundleErrorMaximum"}, {"var_description": "The start of the range of error codes reserved for bundle errors.", "var_type": "Int", "is_static": false, "var_name": "NSBundleErrorMinimum"}, {"var_description": "The application exceeded the amount of on-demand resources content in use at one time.", "var_type": "Int", "is_static": false, "var_name": "NSBundleOnDemandResourceExceededMaximumSizeError"}, {"var_description": "The application specified a tag that the system couldn\u2019t find in the application tag manifest.", "var_type": "Int", "is_static": false, "var_name": "NSBundleOnDemandResourceInvalidTagError"}, {"var_description": "Insufficient space available to download the requested on-demand resources.", "var_type": "Int", "is_static": false, "var_name": "NSBundleOnDemandResourceOutOfSpaceError"}, {"var_description": "Posted after the system detects that the amount of available disk space is getting low. The notification is posted to the default notification center.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSBundleResourceRequestLowDiskSpace"}]}