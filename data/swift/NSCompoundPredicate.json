{"package_name": "foundation", "subclass_list": [], "class_description": "Use NSCompoundPredicate to create an AND or OR compound predicate of zero or more other predicates, or the NOT of a single predicate. For the logical AND and OR operations:\nAn AND predicate with no subpredicates evaluates to true.\nAn OR predicate with no subpredicates evaluates to false.\nA compound predicate with one or more subpredicates evaluates to the truth of its subpredicates.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSPredicate"], "Methods": [{"params": [{"param_name": ["andPredicateWithSubpredicates", "subpredicates"], "param_type": "[NSPredicate]", "param_description": "An array of NSPredicate objects."}], "class_name": "NSCompoundPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new predicate formed by AND-ing the predicates specified by subpredicates."], "return_type": []}, "method_name": "init", "method_description": "Returns a new predicate formed by AND-ing the predicates in a given array.", "method_declar": "init(andPredicateWithSubpredicates subpredicates: [NSPredicate])"}, {"params": [{"param_name": ["notPredicateWithSubpredicate", "predicate"], "param_type": "NSPredicate", "param_description": "A predicate."}], "class_name": "NSCompoundPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new predicate formed by NOT-ing the predicate specified by predicate."], "return_type": []}, "method_name": "init", "method_description": "Returns a new predicate formed by NOT-ing a given predicate.", "method_declar": "init(notPredicateWithSubpredicate predicate: NSPredicate)"}, {"params": [{"param_name": ["orPredicateWithSubpredicates", "subpredicates"], "param_type": "[NSPredicate]", "param_description": "An array of NSPredicate objects."}], "class_name": "NSCompoundPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": ["A new predicate formed by OR-ing the predicates specified by subpredicates."], "return_type": []}, "method_name": "init", "method_description": "Returns a new predicate formed by OR-ing the predicates in a given array.", "method_declar": "init(orPredicateWithSubpredicates subpredicates: [NSPredicate])"}, {"params": [{"param_name": ["type"], "param_type": "NSCompoundPredicate.LogicalType", "param_description": "The type of the new predicate."}, {"param_name": ["subpredicates"], "param_type": "[NSPredicate]", "param_description": "An array of NSPredicate objects."}], "class_name": "NSCompoundPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": ["The receiver initialized with its type set to type and subpredicates array to subpredicates."], "return_type": []}, "method_name": "init", "method_description": "Returns the receiver initialized to a given type using predicates from a given array.", "method_declar": "init(type: NSCompoundPredicate.LogicalType, subpredicates: [NSPredicate])"}, {"params": [{"param_name": ["coder"], "param_type": "NSCoder", "param_description": ""}], "class_name": "NSCompoundPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init?(coder: NSCoder)"}], "class_name": "NSCompoundPredicate", "Vars": [{"var_description": "The predicate type for the receiver.", "var_type": "NSCompoundPredicate.LogicalType", "is_static": false, "var_name": "compoundPredicateType"}, {"var_description": "The receiver\u2019s subpredicates.", "var_type": "[Any]", "is_static": false, "var_name": "subpredicates"}]}