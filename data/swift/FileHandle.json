{"class_description": "You use file handle objects to access data associated with files, sockets, pipes, and devices. For files, you can read, write, and seek within the file. For sockets, pipes, and devices, you can use a file handle object to monitor the device and process data asynchronously.\nMost creation methods for FileHandle cause the file handle object to take ownership of the associated file descriptor. This means that the file handle object both creates the file descriptor and is responsible for closing it later, usually when the file handle object itself is deallocated. If you want to use a file handle object with a file descriptor that you created, use the init(fileDescriptor:) method or use the init(fileDescriptor:closeOnDealloc:) method and pass false for the flag parameter.\nWhen using a file handle object to communicate asynchronously with a socket, you must initiate the corresponding operations from a thread with an active run loop. Although the read, accept, and wait operations themselves are performed asynchronously on background threads, the file handle uses a run loop source to monitor the operations and notify your code appropriately. Therefore, you must call those methods from your application\u2019s main thread or from any thread where you have configured a run loop and are using it to process events.\nFor more information about configuring and using run loops, see Threading Programming Guide.  \n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "FileHandle", "typealias": [], "Vars": [{"var_description": "Raised by NSFileHandle if attempts to determine file-handle type fail or if attempts to read from a file or channel fail.", "var_type": "NSExceptionName", "is_static": false, "var_name": "fileHandleOperationException"}, {"var_description": "This notification is posted when an NSFileHandle object establishes a socket connection between two processes, creates an NSFileHandle object for one end of the connection, and makes this object available to observers by putting it in the userInfo dictionary.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSFileHandleConnectionAccepted"}, {"var_description": "This notification is posted when the file handle determines that data is currently available for reading in a file or at a communications channel.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSFileHandleDataAvailable"}, {"var_description": "This notification is posted when the file handle reads all data in the file or, if a communications channel, until the other process signals the end of data.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSFileHandleReadToEndOfFileCompletion"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSSecureCoding"], "package_name": "foundation", "subclass_list": []}