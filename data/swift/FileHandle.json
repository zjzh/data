{"package_name": "foundation", "subclass_list": [], "class_description": "You use file handle objects to access data associated with files, sockets, pipes, and devices. For files, you can read, write, and seek within the file. For sockets, pipes, and devices, you can use a file handle object to monitor the device and process data asynchronously.\nMost creation methods for FileHandle cause the file handle object to take ownership of the associated file descriptor. This means that the file handle object both creates the file descriptor and is responsible for closing it later, usually when the file handle object itself is deallocated. If you want to use a file handle object with a file descriptor that you created, use the init(fileDescriptor:) method or use the init(fileDescriptor:closeOnDealloc:) method and pass false for the flag parameter.\nWhen using a file handle object to communicate asynchronously with a socket, you must initiate the corresponding operations from a thread with an active run loop. Although the read, accept, and wait operations themselves are performed asynchronously on background threads, the file handle uses a run loop source to monitor the operations and notify your code appropriately. Therefore, you must call those methods from your application\u2019s main thread or from any thread where you have configured a run loop and are using it to process events.\nFor more information about configuring and using run loops, see Threading Programming Guide.  \n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["forReadingAtPath", "path"], "param_type": "String", "param_description": "The path to the file, device, or named socket to access."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized file handle object or nil if no file exists at path."], "return_type": []}, "method_name": "init", "method_description": "Returns a file handle initialized for reading the file, device, or named socket at the specified path.", "method_declar": "convenience init?(forReadingAtPath path: String)"}, {"params": [{"param_name": ["forReadingFrom", "url"], "param_type": "URL", "param_description": "The URL of the file, device, or named socket to access."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized file handle object or nil if no file exists at url."], "return_type": []}, "method_name": "init", "method_description": "Returns a file handle initialized for reading the file, device, or named socket at the specified URL.", "method_declar": "convenience init(forReadingFrom url: URL) throws"}, {"params": [{"param_name": ["forWritingAtPath", "path"], "param_type": "String", "param_description": "The path to the file, device, or named socket to access."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized file handle object or nil if no file exists at path."], "return_type": []}, "method_name": "init", "method_description": "Returns a file handle initialized for writing to the file, device, or named socket at the specified path.", "method_declar": "convenience init?(forWritingAtPath path: String)"}, {"params": [{"param_name": ["forWritingTo", "url"], "param_type": "URL", "param_description": "The URL of the file, device, or named socket to access."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized file handle object or nil if no file exists at url."], "return_type": []}, "method_name": "init", "method_description": "Returns a file handle initialized for writing to the file, device, or named socket at the specified URL.", "method_declar": "convenience init(forWritingTo url: URL) throws"}, {"params": [{"param_name": ["forUpdatingAtPath", "path"], "param_type": "String", "param_description": "The path to the file, device, or named socket to access."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized file handle object or nil if no file exists at path."], "return_type": []}, "method_name": "init", "method_description": "Returns a file handle initialized for reading and writing to the file, device, or named socket at the specified path.", "method_declar": "convenience init?(forUpdatingAtPath path: String)"}, {"params": [{"param_name": ["forUpdating", "url"], "param_type": "URL", "param_description": "The URL of the file, device, or named socket to access."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized file handle object or nil if no file exists at url."], "return_type": []}, "method_name": "init", "method_description": "Returns a file handle initialized for reading and writing to the file, device, or named socket at the specified URL.", "method_declar": "convenience init(forUpdating url: URL) throws"}, {"params": [{"param_name": ["fileDescriptor", "fd"], "param_type": "Int32", "param_description": "The POSIX file descriptor with which to initialize the file handle. This descriptor represents an open file or socket that you created previously. For example, when creating a file handle for a socket, you would pass the value returned by the socket function."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": ["A file handle initialized with fileDescriptor."], "return_type": []}, "method_name": "init", "method_description": "Initializes and returns a file handle object associated with the specified file descriptor.", "method_declar": "convenience init(fileDescriptor fd: Int32)"}, {"params": [{"param_name": ["fileDescriptor", "fd"], "param_type": "Int32", "param_description": "The POSIX file descriptor with which to initialize the file handle."}, {"param_name": ["closeOnDealloc", "closeopt"], "param_type": "Bool", "param_description": ""}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": ["An initialized file handle object."], "return_type": []}, "method_name": "init", "method_description": "Initializes and returns a file handle object associated with the specified file descriptor and deallocation policy.", "method_declar": "init(fileDescriptor fd: Int32, closeOnDealloc closeopt: Bool)"}, {"params": [], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The data available through the receiver up to maximum size that can be represented by an NSData object or, if a communications channel, until an end-of-file indicator is returned."], "return_type": ["Dat"]}, "method_name": "readDataToEndOfFile", "method_description": "Synchronously reads the available data up to the end of file or maximum number of bytes.", "method_declar": "func readDataToEndOfFile() -> Data"}, {"params": [{"param_name": ["ofLength", "length"], "param_type": "Int", "param_description": "The number of bytes to read from the receiver."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The data available through the receiver up to a maximum of length bytes, or the maximum size that can be represented by an NSData object, whichever is the smaller."], "return_type": ["Dat"]}, "method_name": "readData", "method_description": "Synchronously reads data up to the specified number of bytes.", "method_declar": "func readData(ofLength length: Int) -> Data"}, {"params": [{"param_name": ["data"], "param_type": "Data", "param_description": "The data to be written."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "write", "method_description": "Synchronously writes the specified data to the receiver.", "method_declar": "func write(_ data: Data)"}, {"params": [], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "acceptConnectionInBackgroundAndNotify", "method_description": "Accepts a socket connection (for stream-type sockets only) in the background and creates a file handle for the \u201cnear\u201d (client) end of the communications channel.", "method_declar": "func acceptConnectionInBackgroundAndNotify()"}, {"params": [{"param_name": ["forModes", "modes"], "param_type": "[RunLoop.Mode]", "param_description": "The runloop modes in which the connection accepted notification can be posted."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "acceptConnectionInBackgroundAndNotify", "method_description": "Accepts a socket connection (for stream-type sockets only) in the background and creates a file handle for the \u201cnear\u201d (client) end of the communications channel.", "method_declar": "func acceptConnectionInBackgroundAndNotify(forModes modes: [RunLoop.Mode]?)"}, {"params": [], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "readInBackgroundAndNotify", "method_description": "Reads from the file or communications channel in the background and posts a notification when finished.", "method_declar": "func readInBackgroundAndNotify()"}, {"params": [{"param_name": ["forModes", "modes"], "param_type": "[RunLoop.Mode]", "param_description": "The runloop modes in which the read completion notification can be posted."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "readInBackgroundAndNotify", "method_description": "Reads from the file or communications channel in the background and posts a notification when finished.", "method_declar": "func readInBackgroundAndNotify(forModes modes: [RunLoop.Mode]?)"}, {"params": [], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "readToEndOfFileInBackgroundAndNotify", "method_description": "Reads to the end of file from the file or communications channel in the background and posts a notification when finished.", "method_declar": "func readToEndOfFileInBackgroundAndNotify()"}, {"params": [{"param_name": ["forModes", "modes"], "param_type": "[RunLoop.Mode]", "param_description": "The runloop modes in which the read completion notification can be posted."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "readToEndOfFileInBackgroundAndNotify", "method_description": "Reads to the end of file from the file or communications channel in the background and posts a notification when finished.", "method_declar": "func readToEndOfFileInBackgroundAndNotify(forModes modes: [RunLoop.Mode]?)"}, {"params": [], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "waitForDataInBackgroundAndNotify", "method_description": "Asynchronously checks to see if data is available.", "method_declar": "func waitForDataInBackgroundAndNotify()"}, {"params": [{"param_name": ["forModes", "modes"], "param_type": "[RunLoop.Mode]", "param_description": "The runloop modes in which the data available notification can be posted."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "waitForDataInBackgroundAndNotify", "method_description": "Asynchronously checks to see if data is available.", "method_declar": "func waitForDataInBackgroundAndNotify(forModes modes: [RunLoop.Mode]?)"}, {"params": [], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The file offset with the file pointer at the end of the file. This is therefore equal to the size of the file."], "return_type": ["UInt6"]}, "method_name": "seekToEndOfFile", "method_description": "Puts the file pointer at the end of the file referenced by the receiver and returns the new file offset.", "method_declar": "func seekToEndOfFile() -> UInt64"}, {"params": [{"param_name": ["toFileOffset", "offset"], "param_type": "UInt64", "param_description": "The offset to seek to."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "seek", "method_description": "Moves the file pointer to the specified offset within the file represented by the receiver.", "method_declar": "func seek(toFileOffset offset: UInt64)"}, {"params": [], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "closeFile", "method_description": "Disallows further access to the represented file or communications channel and signals end of file on communications channels that permit writing.", "method_declar": "func closeFile()"}, {"params": [], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "synchronizeFile", "method_description": "Causes all in-memory data and attributes of the file represented by the receiver to be written to permanent storage.", "method_declar": "func synchronizeFile()"}, {"params": [{"param_name": ["atOffset", "offset"], "param_type": "UInt64", "param_description": "The offset within the file that will mark the new end of the file."}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "truncateFile", "method_description": "Truncates or extends the file represented by the receiver to a specified offset within the file and puts the file pointer at that position.", "method_declar": "func truncateFile(atOffset offset: UInt64)"}, {"params": [{"param_name": ["coder"], "param_type": "NSCoder", "param_description": ""}], "class_name": "FileHandle", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init?(coder: NSCoder)"}], "class_name": "FileHandle", "Vars": [{"var_description": "Returns the file handle associated with the standard error file.", "var_type": "FileHandle", "is_static": false, "var_name": "standardError"}, {"var_description": "Returns the file handle associated with the standard input file.", "var_type": "FileHandle", "is_static": false, "var_name": "standardInput"}, {"var_description": "Returns the file handle associated with the standard output file.", "var_type": "FileHandle", "is_static": false, "var_name": "standardOutput"}, {"var_description": "Returns a file handle associated with a null device.", "var_type": "FileHandle", "is_static": false, "var_name": "nullDevice"}, {"var_description": "The POSIX file descriptor associated with the receiver.", "var_type": "Int32", "is_static": false, "var_name": "fileDescriptor"}, {"var_description": "The data currently available in the receiver.", "var_type": "Data", "is_static": false, "var_name": "availableData"}, {"var_description": "The block to use for reading the contents of the file handle asynchronously.", "var_type": "((FileHandle)", "is_static": false, "var_name": "readabilityHandler"}, {"var_description": "The block to use for writing the contents of the file handle asynchronously.", "var_type": "((FileHandle)", "is_static": false, "var_name": "writeabilityHandler"}, {"var_description": "The position of the file pointer within the file represented by the receiver.", "var_type": "UInt64", "is_static": false, "var_name": "offsetInFile"}, {"var_description": "A key in the userinfo dictionary in a NSFileHandleConnectionAccepted notification.", "var_type": "String", "is_static": false, "var_name": "NSFileHandleNotificationFileHandleItem"}, {"var_description": "A key in the userinfo dictionary in a readCompletionNotification and NSFileHandleReadToEndOfFileCompletion.", "var_type": "String", "is_static": false, "var_name": "NSFileHandleNotificationDataItem"}, {"var_description": "Currently unused.", "var_type": "String", "is_static": false, "var_name": "NSFileHandleNotificationMonitorModes"}, {"var_description": "Raised by NSFileHandle if attempts to determine file-handle type fail or if attempts to read from a file or channel fail.", "var_type": "NSExceptionName", "is_static": false, "var_name": "fileHandleOperationException"}, {"var_description": "This notification is posted when an NSFileHandle object establishes a socket connection between two processes, creates an NSFileHandle object for one end of the connection, and makes this object available to observers by putting it in the userInfo dictionary.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSFileHandleConnectionAccepted"}, {"var_description": "This notification is posted when the file handle determines that data is currently available for reading in a file or at a communications channel.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSFileHandleDataAvailable"}, {"var_description": "This notification is posted when the file handle reads the data currently available in a file or at a communications channel.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "readCompletionNotification"}, {"var_description": "This notification is posted when the file handle reads all data in the file or, if a communications channel, until the other process signals the end of data.", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSFileHandleReadToEndOfFileCompletion"}]}