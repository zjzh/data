{"subclass_list": ["NSURLConnectionDataDelegate", "NSURLConnectionDownloadDelegate"], "typealias": [], "class_inherit_list": ["NSObjectProtocol"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Tells the delegate that the connection will send a request for an authentication challenge.", "is_static": false, "method_name": "connection", "class_name": "NSURLConnectionDelegate", "method_declar": "optional func connection(_ connection: NSURLConnection, willSendRequestFor challenge: URLAuthenticationChallenge)", "params": [{"param_type": "NSURLConnection", "param_description": "The connection sending the message.", "param_name": ["connection"]}, {"param_type": "URLAuthenticationChallenge", "param_description": "The authentication challenge for which a request is being sent.", "param_name": ["willSendRequestFor", "challenge"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the delegate if able to respond to a protection space\u2019s form of authentication, otherwise false."], "return_type": ["Boo"]}, "method_description": "Sent to determine whether the delegate is able to respond to a protection space\u2019s form of authentication.", "is_static": false, "method_name": "connection", "class_name": "NSURLConnectionDelegate", "method_declar": "optional func connection(_ connection: NSURLConnection, canAuthenticateAgainstProtectionSpace protectionSpace: URLProtectionSpace) -> Bool", "params": [{"param_type": "NSURLConnection", "param_description": "The connection sending the message.", "param_name": ["connection"]}, {"param_type": "URLProtectionSpace", "param_description": "The protection space that generates an authentication challenge.", "param_name": ["canAuthenticateAgainstProtectionSpace", "protectionSpace"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent when a connection cancels an authentication challenge.", "is_static": false, "method_name": "connection", "class_name": "NSURLConnectionDelegate", "method_declar": "optional func connection(_ connection: NSURLConnection, didCancel challenge: URLAuthenticationChallenge)", "params": [{"param_type": "NSURLConnection", "param_description": "The connection sending the message.", "param_name": ["connection"]}, {"param_type": "URLAuthenticationChallenge", "param_description": "The challenge that was canceled.", "param_name": ["didCancel", "challenge"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent when a connection must authenticate a challenge in order to download its request.", "is_static": false, "method_name": "connection", "class_name": "NSURLConnectionDelegate", "method_declar": "optional func connection(_ connection: NSURLConnection, didReceive challenge: URLAuthenticationChallenge)", "params": [{"param_type": "NSURLConnection", "param_description": "The connection sending the message.", "param_name": ["connection"]}, {"param_type": "URLAuthenticationChallenge", "param_description": "The challenge that connection must authenticate in order to download its request.", "param_name": ["didReceive", "challenge"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_description": "Sent to determine whether the URL loader should use the credential storage for authenticating the connection.", "is_static": false, "method_name": "connectionShouldUseCredentialStorage", "class_name": "NSURLConnectionDelegate", "method_declar": "optional func connectionShouldUseCredentialStorage(_ connection: NSURLConnection) -> Bool", "params": [{"param_type": "NSURLConnection", "param_description": "The connection sending the message.", "param_name": ["connection"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent when a connection fails to load its request successfully.", "is_static": false, "method_name": "connection", "class_name": "NSURLConnectionDelegate", "method_declar": "optional func connection(_ connection: NSURLConnection, didFailWithError error: Error)", "params": [{"param_type": "NSURLConnection", "param_description": "The connection sending the message.", "param_name": ["connection"]}, {"param_type": "Error", "param_description": "An error object containing details of why the connection failed to load the request successfully.", "param_name": ["didFailWithError", "error"]}]}], "class_type": "protocol", "class_name": "NSURLConnectionDelegate", "Vars": [], "interface_list": [], "class_description": "Delegates of NSURLConnection objects should implement either the NSURLConnectionDataDelegate or NSURLConnectionDownloadDelegate protocol in addition to the NSURLConnectionDelegate protocol. Specifically:\nIf you are using NSURLConnection in conjunction with Newsstand Kit\u2019s download(with:) method, the delegate class should implement the NSURLConnectionDownloadDelegate protocol.\nOtherwise, the delegate class should implement the NSURLConnectionDataDelegate protocol.\nDelegates that wish to perform custom authentication handling should implement the connection(_:willSendRequestFor:) method, which is the preferred mechanism for responding to authentication challenges. (See URLAuthenticationChallenge for more information on authentication challenges.) If connection(_:willSendRequestFor:) is not implemented, the older, deprecated methods connection(_:canAuthenticateAgainstProtectionSpace:), connection(_:didReceive:), and connection(_:didCancel:) are called instead.\nThe connection(_:didFailWithError:) method is called at most once if an error occurs during the loading of a resource. The connectionShouldUseCredentialStorage(_:) method is called once, just before the loading of a resource begins. \n", "package_name": "foundation"}