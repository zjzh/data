{"class_description": "Don\u2019t instantiate a URLProtocol subclass directly. Instead, create subclasses for any custom protocols or URL schemes that your app supports. When a download starts, the system creates the appropriate protocol object to handle the corresponding URL request. You define your protocol class and call the registerClass(_:) class method during your app\u2019s launch time so that the system is aware of your protocol.\nNote\nYou cannot use this class to define custom URL schemes and protocols in watchOS 2 and later.\nTo support the customization of protocol-specific requests, create extensions to the URLRequest class to provide any custom API that you need. You can store and retrieve protocol-specific request data by using URLProtocol\u2019s class methods property(forKey:in:) and setProperty(_:forKey:in:).\nCreate a URLResponse for each request your subclass processes successfully. You may want to create a custom URLResponse class to provide protocol specific information.\n\nWhen overriding methods of this class, be aware that methods that take a task parameter are preferred by the system to those that do not. Therefore, you should override the task-based methods when subclassing, as follows:\nInitialization \u2014 Override init(task:cachedResponse:client:) instead of or in addition to init(request:cachedResponse:client:). Also override the task-based canInit(with:) instead of or in addition to the request-based canInit(with:).\n\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "URLProtocol", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}