{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [], "return_description": ["The initialized protocol object."], "return_type": []}, "method_description": "Creates a URL protocol instance to handle the request.", "is_static": false, "method_name": "init", "class_name": "URLProtocol", "method_declar": "init(request: URLRequest, cachedResponse: CachedURLResponse?, client: URLProtocolClient?)", "params": [{"param_type": "URLRequest", "param_description": "The URL request for the URL protocol object. This request is retained.", "param_name": ["request"]}, {"param_type": "CachedURLResponse", "param_description": "A cached response for the request; it may be nil if there is no existing cached response for the request.", "param_name": ["cachedResponse"]}, {"param_type": "URLProtocolClient", "param_description": "An object that provides an implementation of the URLProtocolClient protocol that this instance uses to communicate with the URL Loading System. This client object is retained.", "param_name": ["client"]}]}, {"return_value": {"return_name": [], "return_description": ["The initialized protocol object."], "return_type": []}, "method_description": "Creates a URL protocol instance to handle the task.", "is_static": false, "method_name": "init", "class_name": "URLProtocol", "method_declar": "convenience init(task: URLSessionTask, cachedResponse: CachedURLResponse?, client: URLProtocolClient?)", "params": [{"param_type": "URLSessionTask", "param_description": "A task containing a URL request to be performed by the protocol.", "param_name": ["task"]}, {"param_type": "CachedURLResponse", "param_description": "A cached response for the task; may be nil if there is no existing cached response for the task.", "param_name": ["cachedResponse"]}, {"param_type": "URLProtocolClient", "param_description": "An object that provides an implementation of the URLProtocolClient protocol that this instance uses to communicate with the URL loading system. This client object is retained.", "param_name": ["client"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the registration is successful, false otherwise. The only failure condition is if protocolClass is not a subclass of URLProtocol."], "return_type": ["Boo"]}, "method_description": "Attempts to register a subclass of URLProtocol, making it visible to the URL loading system.", "is_static": false, "method_name": "registerClass", "class_name": "URLProtocol", "method_declar": "class func registerClass(_ protocolClass: AnyClass) -> Bool", "params": [{"param_type": "AnyClass", "param_description": "The subclass to register.", "param_name": ["protocolClass"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Unregisters the specified subclass of URLProtocol.", "is_static": false, "method_name": "unregisterClass", "class_name": "URLProtocol", "method_declar": "class func unregisterClass(_ protocolClass: AnyClass)", "params": [{"param_type": "AnyClass", "param_description": "The subclass of URLProtocol to unregister.", "param_name": ["protocolClass"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the protocol subclass can handle request, otherwise false."], "return_type": ["Boo"]}, "method_description": "Determines whether the protocol subclass can handle the specified request.", "is_static": false, "method_name": "canInit", "class_name": "URLProtocol", "method_declar": "class func canInit(with request: URLRequest) -> Bool", "params": [{"param_type": "URLRequest", "param_description": "The request to be handled.", "param_name": ["with", "request"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_description": "Determines whether the protocol subclass can handle the specified task.", "is_static": false, "method_name": "canInit", "class_name": "URLProtocol", "method_declar": "class func canInit(with task: URLSessionTask) -> Bool", "params": [{"param_type": "URLSessionTask", "param_description": "A URL session task containing the request to be handled.", "param_name": ["with", "task"]}]}, {"return_value": {"return_name": [""], "return_description": ["The property associated with key, or nil if no property has been stored for key."], "return_type": ["An"]}, "method_description": "Fetches the property associated with the specified key in the specified request.", "is_static": false, "method_name": "property", "class_name": "URLProtocol", "method_declar": "class func property(forKey key: String, in request: URLRequest) -> Any?", "params": [{"param_type": "String", "param_description": "The key of the desired property.", "param_name": ["forKey", "key"]}, {"param_type": "URLRequest", "param_description": "The request whose properties are to be queried.", "param_name": ["in", "request"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the property associated with the specified key in the specified request.", "is_static": false, "method_name": "setProperty", "class_name": "URLProtocol", "method_declar": "class func setProperty(_ value: Any, forKey key: String, in request: NSMutableURLRequest)", "params": [{"param_type": "Any", "param_description": "The value to set for the specified property.", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key for the specified property.", "param_name": ["forKey", "key"]}, {"param_type": "NSMutableURLRequest", "param_description": "The request for which to create the property.", "param_name": ["in", "request"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the property associated with the specified key in the specified request.", "is_static": false, "method_name": "removeProperty", "class_name": "URLProtocol", "method_declar": "class func removeProperty(forKey key: String, in request: NSMutableURLRequest)", "params": [{"param_type": "String", "param_description": "The key whose value should be removed.", "param_name": ["forKey", "key"]}, {"param_type": "NSMutableURLRequest", "param_description": "The request from which to remove the property value.", "param_name": ["in", "request"]}]}, {"return_value": {"return_name": [""], "return_description": ["The canonical form of request."], "return_type": ["URLReques"]}, "method_description": "Returns a canonical version of the specified request.", "is_static": false, "method_name": "canonicalRequest", "class_name": "URLProtocol", "method_declar": "class func canonicalRequest(for request: URLRequest) -> URLRequest", "params": [{"param_type": "URLRequest", "param_description": "The request whose canonical version is desired.", "param_name": ["for", "request"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if aRequest and bRequest are equivalent for cache purposes, false otherwise. "], "return_type": ["Boo"]}, "method_description": "A Boolean value indicating whether two requests are equivalent for cache purposes.", "is_static": false, "method_name": "requestIsCacheEquivalent", "class_name": "URLProtocol", "method_declar": "class func requestIsCacheEquivalent(_ a: URLRequest, to b: URLRequest) -> Bool", "params": [{"param_type": "URLRequest", "param_description": "", "param_name": ["a"]}, {"param_type": "URLRequest", "param_description": "", "param_name": ["to", "b"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Starts protocol-specific loading of the request.", "is_static": false, "method_name": "startLoading", "class_name": "URLProtocol", "method_declar": "func startLoading()", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Stops protocol-specific loading of the request.", "is_static": false, "method_name": "stopLoading", "class_name": "URLProtocol", "method_declar": "func stopLoading()", "params": []}], "class_type": "class", "class_name": "URLProtocol", "Vars": [{"var_name": "cachedResponse", "var_type": "CachedURLResponse", "var_description": "The protocol\u2019s cached response.", "is_static": false}, {"var_name": "client", "var_type": "URLProtocolClient", "var_description": "The object the protocol uses to communicate with the URL loading system.", "is_static": false}, {"var_name": "request", "var_type": "URLRequest", "var_description": "The protocol\u2019s request.", "is_static": false}, {"var_name": "task", "var_type": "URLSessionTask", "var_description": "The protocol\u2019s task.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "Don\u2019t instantiate a URLProtocol subclass directly. Instead, create subclasses for any custom protocols or URL schemes that your app supports. When a download starts, the system creates the appropriate protocol object to handle the corresponding URL request. You define your protocol class and call the registerClass(_:) class method during your app\u2019s launch time so that the system is aware of your protocol.\nNote\nYou cannot use this class to define custom URL schemes and protocols in watchOS 2 and later.\nTo support the customization of protocol-specific requests, create extensions to the URLRequest class to provide any custom API that you need. You can store and retrieve protocol-specific request data by using URLProtocol\u2019s class methods property(forKey:in:) and setProperty(_:forKey:in:).\nCreate a URLResponse for each request your subclass processes successfully. You may want to create a custom URLResponse class to provide protocol specific information.\n\nWhen overriding methods of this class, be aware that methods that take a task parameter are preferred by the system to those that do not. Therefore, you should override the task-based methods when subclassing, as follows:\nInitialization \u2014 Override init(task:cachedResponse:client:) instead of or in addition to init(request:cachedResponse:client:). Also override the task-based canInit(with:) instead of or in addition to the request-based canInit(with:).\n\n", "package_name": "foundation"}