{"Methods": [{"return_value": {"return_name": [""], "return_type": ["Self"], "return_description": ["The given argument without any changes."]}, "class_name": "AdditiveArithmetic", "params": [{"param_description": "", "param_type": "Self", "param_name": ["x"]}], "method_description": "Returns the given number unchanged.", "is_static": true, "method_name": "+", "method_declar": "prefix static func + (x: Self) -> Self"}, {"return_value": {"return_name": [""], "return_type": ["Self"], "return_description": []}, "class_name": "AdditiveArithmetic", "params": [{"param_description": "The first value to add.", "param_type": "Self", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "Self", "param_name": ["rhs"]}], "method_description": "Adds two values and produces their sum.Required.", "is_static": true, "method_name": "+", "method_declar": "static func + (lhs: Self, rhs: Self) -> Self"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AdditiveArithmetic", "params": [{"param_description": "The first value to add.", "param_type": "inout Self", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "Self", "param_name": ["rhs"]}], "method_description": "Adds two values and stores the result in the left-hand-side variable.Required.", "is_static": true, "method_name": "+=", "method_declar": "static func += (lhs: inout Self, rhs: Self)"}, {"return_value": {"return_name": [""], "return_type": ["Self"], "return_description": []}, "class_name": "AdditiveArithmetic", "params": [{"param_description": "A numeric value.", "param_type": "Self", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "Self", "param_name": ["rhs"]}], "method_description": "Subtracts one value from another and produces their difference.Required.", "is_static": true, "method_name": "-", "method_declar": "static func - (lhs: Self, rhs: Self) -> Self"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "AdditiveArithmetic", "params": [{"param_description": "A numeric value.", "param_type": "inout Self", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "Self", "param_name": ["rhs"]}], "method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable.Required.", "is_static": true, "method_name": "-=", "method_declar": "static func -= (lhs: inout Self, rhs: Self)"}], "Vars": [{"var_description": "The zero value.Required. Default implementation provided.", "is_static": false, "var_name": "zero", "var_type": "Self"}], "class_name": "AdditiveArithmetic", "interface_list": [], "class_description": "The AdditiveArithmetic protocol provides a suitable basis for additive arithmetic on scalar values, such as integers and floating-point numbers, or vectors. You can write generic methods that operate on any numeric type in the standard library by using the AdditiveArithmetic protocol as a generic constraint.\nThe following code declares a method that calculates the total of any sequence with Numeric elements.\nThe sum() method is now available on any sequence with values that conform to AdditiveArithmetic, whether it is an array of Double or a range of Int.\nTo add AdditiveArithmetic protocol conformance to your own custom type, implement the required operators, and provide a static zero property using a type that can represent the magnitude of any value of your custom type.\n", "class_inherit_list": ["Equatable"], "package_name": "swift", "subclass_list": ["Numeric"], "class_type": "protocol", "typealias": []}