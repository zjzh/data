{"class_description": "An NSURLConnection object lets you load the contents of a URL by providing a URL request object. The interface for NSURLConnection is sparse, providing only the controls to start and cancel asynchronous loads of a URL request. You perform most of your configuration on the URL request object itself.\nNote\nAlthough instances of this class are commonly called \u201cconnections\u201d, there is not a 1:1 correlation between these objects and the underlying network connections.\nThe NSURLConnection class provides convenience class methods to load URL requests both asynchronously using a callback block and synchronously.\nFor greater control, you can create a URL connection object with a delegate object that conforms to the NSURLConnectionDelegate and NSURLConnectionDataDelegate protocols. The connection calls methods on that delegate to provide you with progress and status as the URL request is loaded asynchronously. The connection also calls delegate methods to let you override the connection\u2019s default behavior (for example, specifying how a particular redirect should be handled). These delegate methods are called on the thread that initiated the asynchronous load operation.\nNote\nDuring a request, the connection maintains a strong reference to its delegate. It releases that strong reference when the connection finishes loading, fails, or is canceled.\nFor more information about errors, see the NSURLError.h header, Foundation Constants, and URL Loading System Error Codes in Error Handling Programming Guide.\nThe NSURLConnection class works in tandem with three formal protocols: NSURLConnectionDelegate, NSURLConnectionDataDelegate, and NSURLConnectionDownloadDelegate. To use these protocols, you write a class that conforms to them and implement any methods that are appropriate, then provide an instance of that class as the delegate when you create a connection object.\nThe NSURLConnectionDelegate protocol is primarily used for credential handling, but also handles connection completion. Because it handles connection failure during data transfers, all connection delegates must typically implement this protocol.\nIn addition, unless you\u2019re using Newsstand Kit, your delegate must also conform to the NSURLConnectionDataDelegate protocol, because this protocol provides methods that the NSURLConnection class calls with progress information during an upload, with fragments of the response data during a download, and to provide a new upload body stream if the server\u2019s response necessitates a second connection attempt\u2014for example, if NSURLConnection must retry the request with different credentials.\nFinally, if you\u2019re using Newsstand Kit, your delegate can conform to the NSURLConnectionDownloadDelegate protocol. This protocol provides support for continuing interrupted file downloads and receiving a notification whenever a download finishes. This protocol is solely for use with NSURLConnection objects created using Newsstand Kit\u2019s download(with:) method.\nNote\nSome methods in these protocols were previously part of other formal protocols or were previously part of an informal protocol on NSObject.\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "NSURLConnection", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}