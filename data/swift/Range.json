{"Methods": [], "Vars": [], "class_name": "Range", "interface_list": ["BidirectionalCollection", "Collection", "CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "Hashable", "RandomAccessCollection", "RangeExpression", "Sequence"], "class_description": "You create a Range instance by using the half-open range operator (..<).\nYou can use a Range instance to quickly check if a value is contained in a particular range of values. For example:\nRange instances can represent an empty interval, unlike ClosedRange.\nWhen a range uses integers as its lower and upper bounds, or any other type that conforms to the Strideable protocol with an integer stride, you can use that range in a for-in loop or with any sequence or collection method. The elements of the range are the consecutive values from its lower bound up to, but not including, its upper bound.\nBecause floating-point types such as Float and Double are their own Stride types, they cannot be used as the bounds of a countable range. If you need to iterate over consecutive floating-point values, see the stride(from:to:by:) function.\n", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}