{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [], "return_description": ["A new URL credential object, using the provided identity and, optionally, an array of intermediate certificates."], "return_type": []}, "method_description": "Creates a URL credential instance for resolving a client certificate authentication challenge.", "is_static": false, "method_name": "init", "class_name": "URLCredential", "method_declar": "init(identity: SecIdentity, certificates certArray: [Any]?, persistence: URLCredential.Persistence)", "params": [{"param_type": "SecIdentity", "param_description": "The identity for the credential.", "param_name": ["identity"]}, {"param_type": "[Any]", "param_description": "An array of one or more SecCertificateRef objects representing intermediate certificates leading from the identity\u2019s certificate to a trusted root, or nil if the server does not need any intermediate certificates to authenticate the client.", "param_name": ["certificates", "certArray"]}, {"param_type": "URLCredential.Persistence", "param_description": "The method ignores this parameter; you should supply a value of URLCredential.Persistence.forSession because that most accurately reflects the actual behaviour.", "param_name": ["persistence"]}]}, {"return_value": {"return_name": [], "return_description": ["A new URL credential object, containing the provided server trust."], "return_type": []}, "method_description": "Creates a URL credential instance for server trust authentication, initialized with a accepted trust.", "is_static": false, "method_name": "init", "class_name": "URLCredential", "method_declar": "init(trust: SecTrust)", "params": [{"param_type": "SecTrust", "param_description": "The accepted trust.", "param_name": ["trust"]}]}, {"return_value": {"return_name": [], "return_description": ["An instance of URLCredential, initialized with user name user, password password, and using persistence setting persistence."], "return_type": []}, "method_description": "Creates a URL credential instance initialized with a given user name and password, using a given persistence setting.", "is_static": false, "method_name": "init", "class_name": "URLCredential", "method_declar": "init(user: String, password: String, persistence: URLCredential.Persistence)", "params": [{"param_type": "String", "param_description": "The user for the credential.", "param_name": ["user"]}, {"param_type": "String", "param_description": "The password for user.", "param_name": ["password"]}, {"param_type": "URLCredential.Persistence", "param_description": "A URLCredential.Persistence value indicating whether the credential should be stored permanently, for the duration of the current session, or not at all.", "param_name": ["persistence"]}]}], "class_type": "class", "class_name": "URLCredential", "Vars": [{"var_name": "user", "var_type": "String", "var_description": "The credential\u2019s user name.", "is_static": false}, {"var_name": "certificates", "var_type": "[Any]", "var_description": "The intermediate certificates of the credential, if it is a client certificate credential.", "is_static": false}, {"var_name": "hasPassword", "var_type": "Bool", "var_description": "A Boolean value that indicates whether the credential has a password.", "is_static": false}, {"var_name": "password", "var_type": "String", "var_description": "The credential\u2019s password.", "is_static": false}, {"var_name": "identity", "var_type": "SecIdentity", "var_description": "The identity of this credential if it is a client certificate credential.", "is_static": false}, {"var_name": "persistence", "var_type": "URLCredential.Persistence", "var_description": "The credential\u2019s persistence setting.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_description": "The URL Loading System supports password-based user credentials, certificate-based user credentials, and certificate-based server credentials.\nWhen you create a credential, you can specify it for a single request, persist it temporarily (until your app quits), or persist it permanently. Permanent persistence can be local persistence in the keychain, or synchronized persistence across the user's devices, based on their Apple ID.\nNote\nPermanent storage of credentials is only available for password-based credentials. TLS credentials are never stored permanently by URLCredentialStorage. In general, use for-session persistence for TLS credentials.\n\n", "package_name": "foundation"}