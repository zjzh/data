{"Methods": [], "Vars": [], "class_name": "Optional", "interface_list": ["CustomDebugStringConvertible", "CustomReflectable", "Decodable", "Encodable", "Equatable", "ExpressibleByNilLiteral", "Hashable"], "class_description": "You use the Optional type whenever you use optional values, even if you never type the word Optional. Swift\u2019s type system usually shows the wrapped type\u2019s name with a trailing question mark (?) instead of showing the full type name. For example, if a variable has the type Int?, that\u2019s just another way of writing Optional<Int>. The shortened form is preferred for ease of reading and writing code.\nThe types of shortForm and longForm in the following code sample are the same:\nThe Optional type is an enumeration with two cases. Optional.none is equivalent to the nil literal. Optional.some(Wrapped) stores a wrapped value. For example:\nYou must unwrap the value of an Optional instance before you can use it in many contexts. Because Swift provides several ways to safely unwrap optional values, you can choose the one that helps you write clear, concise code.\nThe following examples use this dictionary of image names and file paths:\nGetting a dictionary\u2019s value using a key returns an optional value, so imagePaths[\"star\"] has type Optional<String> or, written in the preferred manner, String?.\nTo conditionally bind the wrapped value of an Optional instance to a new variable, use one of the optional binding control structures, including if let, guard let, and switch.\nTo safely access the properties and methods of a wrapped instance, use the postfix optional chaining operator (postfix ?). The following example uses optional chaining to access the hasSuffix(_:) method on a String? instance.\nUse the nil-coalescing operator (??) to supply a default value in case the Optional instance is nil. Here a default path is supplied for an image that is missing from imagePaths.\nThe ?? operator also works with another Optional instance on the right-hand side. As a result, you can chain multiple ?? operators together.\nWhen you\u2019re certain that an instance of Optional contains a value, you can unconditionally unwrap the value by using the forced unwrap operator (postfix !). For example, the result of the failable Int initializer is unconditionally unwrapped in the example below.\nYou can also perform unconditional optional chaining by using the postfix ! operator.\nUnconditionally unwrapping a nil instance with ! triggers a runtime error.\n", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "enum", "typealias": []}