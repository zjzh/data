{"class_description": "The NSIndexSet class represents an immutable collection of unique unsigned integers, known as indexes because of the way they are used. This collection is referred to as an index set. Indexes must be in the range 0 .. NSNotFound - 1.\nYou use index sets in your code to store indexes into some other data structure. For example, given an NSArray object, you could use an index set to identify a subset of objects in that array.\nYou should not use index sets to store an arbitrary collection of integer values because index sets store indexes as sorted ranges. This makes them more efficient than storing a collection of individual integers. It also means that each index value can only appear once in the index set.\nThe designated initializers of the NSIndexSet class are: init, init(indexesIn:), and init(indexSet:).\nYou must not subclass the NSIndexSet class.\nThe mutable subclass of NSIndexSet is NSMutableIndexSet.\nImportant\nThe Swift overlay to the Foundation framework provides the IndexSet structure, which bridges to the NSIndexSet class and its mutable subclass, NSMutableIndexSet. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "Methods": [{"method_description": "Initializes an allocated NSIndexSet object with an index.", "method_name": "init", "params": [{"param_type": "Int", "param_description": "An index. Must be in the range 0 .. NSNotFound - 1.", "param_name": ["index", "value"]}], "class_name": "NSIndexSet", "method_declar": "convenience init(index value: Int)", "return_value": {"return_description": ["Initialized NSIndexSet object with index."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes an allocated NSIndexSet object with an index range.", "method_name": "init", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["indexesIn", "range"]}], "class_name": "NSIndexSet", "method_declar": "init(indexesIn range: NSRange)", "return_value": {"return_description": ["Initialized NSIndexSet object with indexRange."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes an allocated NSIndexSet object with an index set.", "method_name": "init", "params": [{"param_type": "IndexSet", "param_description": "An index set.", "param_name": ["indexSet"]}], "class_name": "NSIndexSet", "method_declar": "init(indexSet: IndexSet)", "return_value": {"return_description": ["Initialized NSIndexSet object with indexSet."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Indicates whether the index set contains a specific index.", "method_name": "contains", "params": [{"param_type": "Int", "param_description": "", "param_name": ["value"]}], "class_name": "NSIndexSet", "method_declar": "func contains(_ value: Int) -> Bool", "return_value": {"return_description": ["true when the index set contains index, false otherwise."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Indicates whether the receiving index set contains a superset of the indexes in another index set.", "method_name": "contains", "params": [{"param_type": "IndexSet", "param_description": "Index set being inquired about.", "param_name": ["indexSet"]}], "class_name": "NSIndexSet", "method_declar": "func contains(_ indexSet: IndexSet) -> Bool", "return_value": {"return_description": ["true when the receiving index set contains a superset of the indexes in indexSet, false otherwise."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Indicates whether the index set contains the indexes represented by an index range.", "method_name": "contains", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["in", "range"]}], "class_name": "NSIndexSet", "method_declar": "func contains(in range: NSRange) -> Bool", "return_value": {"return_description": ["true when the index set contains the indexes in indexRange, false otherwise."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Indicates whether the index set contains any of the indexes in a range.", "method_name": "intersects", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["in", "range"]}], "class_name": "NSIndexSet", "method_declar": "func intersects(in range: NSRange) -> Bool", "return_value": {"return_description": ["true when the index set contains one or more of the indexes in indexRange, false otherwise."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns the number of indexes in the index set that are members of a given range.", "method_name": "countOfIndexes", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["in", "range"]}], "class_name": "NSIndexSet", "method_declar": "func countOfIndexes(in range: NSRange) -> Int", "return_value": {"return_description": ["Number of indexes in the index set that are members of indexRange."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the index of the first object that passes the predicate Block test.", "method_name": "index", "params": [{"param_type": "(Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The Block to apply to elements in the set.The Block takes two arguments:idxThe index of the object.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.The Block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSIndexSet", "method_declar": "func index(passingTest predicate: (Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int", "return_value": {"return_description": ["The index of the first object that passes the predicate test."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns an NSIndexSet containing the receiving index set\u2019s objects that pass the Block test.", "method_name": "indexes", "params": [{"param_type": "(Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The Block to apply to elements in the set.The Block takes two arguments:idxThe index of the object.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.The Block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSIndexSet", "method_declar": "func indexes(passingTest predicate: (Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet", "return_value": {"return_description": ["An NSIndexSet containing the indexes of the receiving index set that passed the predicate Block test."], "return_name": [""], "return_type": ["IndexSe"]}, "is_static": false}, {"method_description": "Returns the index of the first object that passes the predicate Block test using the specified enumeration options.", "method_name": "index", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See NSEnumerationOptions for the supported values.", "param_name": ["options", "opts"]}, {"param_type": "(Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The Block to apply to elements in the set.The Block takes two arguments:idxThe index of the object.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.The Block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSIndexSet", "method_declar": "func index(options opts: NSEnumerationOptions = [], passingTest predicate: (Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int", "return_value": {"return_description": ["The index of the first object that passes the predicate test."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns an NSIndexSet containing the receiving index set\u2019s objects that pass the Block test using the specified enumeration options.", "method_name": "indexes", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See NSEnumerationOptions for the supported values.", "param_name": ["options", "opts"]}, {"param_type": "(Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The Block to apply to elements in the set.The Block takes two arguments:idxThe index of the object.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.The Block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSIndexSet", "method_declar": "func indexes(options opts: NSEnumerationOptions = [], passingTest predicate: (Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet", "return_value": {"return_description": ["An NSIndexSet containing the indexes of the receiving index set that passed the predicate Block test."], "return_name": [""], "return_type": ["IndexSe"]}, "is_static": false}, {"method_description": "Returns the index of the first object in the specified range that passes the predicate Block test.", "method_name": "index", "params": [{"param_type": "NSRange", "param_description": "The range of indexes to test.", "param_name": ["in", "range"]}, {"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See NSEnumerationOptions for the supported values.", "param_name": ["options", "opts"]}, {"param_type": "(Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The Block to apply to elements in the set.The Block takes two arguments:idxThe index of the object.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.The Block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSIndexSet", "method_declar": "func index(in range: NSRange, options opts: NSEnumerationOptions = [], passingTest predicate: (Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int", "return_value": {"return_description": ["The index of the first object that passes the predicate test."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns an NSIndexSet containing the receiving index set\u2019s objects in the specified range that pass the Block test.", "method_name": "indexes", "params": [{"param_type": "NSRange", "param_description": "The range of indexes to test.", "param_name": ["in", "range"]}, {"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See NSEnumerationOptions for the supported values.", "param_name": ["options", "opts"]}, {"param_type": "(Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The Block to apply to elements in the set.The Block takes two arguments:idxThe index of the object.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.The Block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSIndexSet", "method_declar": "func indexes(in range: NSRange, options opts: NSEnumerationOptions = [], passingTest predicate: (Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet", "return_value": {"return_description": ["An NSIndexSet containing the indexes of the receiving index set that passed the predicate Block test."], "return_name": [""], "return_type": ["IndexSe"]}, "is_static": false}, {"method_description": "Enumerates over the ranges in the range of objects using the block ", "method_name": "enumerateRanges", "params": [{"param_type": "NSRange", "param_description": "The range of items to enumerate. If the range intersects a range of the receiver's indexes, then that intersection will be passed to the block.", "param_name": ["in", "range"]}, {"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the NSEnumerationOptions for the enumeration.", "param_name": ["options", "opts"]}, {"param_type": "(NSRange, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to elements in the index set.The block takes two arguments:rangeThe range of elements.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the array. The stop argument is an out-only argument. You should only ever set this Boolean to true within the Block.", "param_name": ["using", "block"]}], "class_name": "NSIndexSet", "method_declar": "func enumerateRanges(in range: NSRange, options opts: NSEnumerationOptions = [], using block: (NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Executes a given block using each object in the index set, in the specified ranges.", "method_name": "enumerateRanges", "params": [{"param_type": "(NSRange, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to elements in the index set.The block takes two arguments:rangeThe range of objects of the elements in the index set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the array. The stop argument is an out-only argument. You should only ever set this Boolean to true within the Block.", "param_name": ["block"]}], "class_name": "NSIndexSet", "method_declar": "func enumerateRanges(_ block: (NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Executes a given block using each object in the index set, in the specified ranges.", "method_name": "enumerateRanges", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the NSEnumerationOptions for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order).", "param_name": ["options", "opts"]}, {"param_type": "(NSRange, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to elements in the index set.The block takes two arguments:rangeThe range of objects of the elements in the index set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the array. The stop argument is an out-only argument. You should only ever set this Boolean to true within the Block.", "param_name": ["using", "block"]}], "class_name": "NSIndexSet", "method_declar": "func enumerateRanges(options opts: NSEnumerationOptions = [], using block: (NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Indicates whether the indexes in the receiving index set are the same indexes contained in another index set.", "method_name": "isEqual", "params": [{"param_type": "IndexSet", "param_description": "Index set being inquired about.", "param_name": ["to", "indexSet"]}], "class_name": "NSIndexSet", "method_declar": "func isEqual(to indexSet: IndexSet) -> Bool", "return_value": {"return_description": ["true when the indexes in the receiving index set are the same indexes indexSet contains, false otherwise."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns either the closest index in the index set that is less than a specific index or the not-found indicator.", "method_name": "indexLessThanIndex", "params": [{"param_type": "Int", "param_description": "", "param_name": ["value"]}], "class_name": "NSIndexSet", "method_declar": "func indexLessThanIndex(_ value: Int) -> Int", "return_value": {"return_description": ["Closest index in the index set less than index; NSNotFound when the index set contains no qualifying index."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns either the closest index in the index set that is less than or equal to a specific index or the not-found indicator.", "method_name": "indexLessThanOrEqual", "params": [{"param_type": "Int", "param_description": "", "param_name": ["to", "value"]}], "class_name": "NSIndexSet", "method_declar": "func indexLessThanOrEqual(to value: Int) -> Int", "return_value": {"return_description": ["Closest index in the index set less than or equal to index; NSNotFound when the index set contains no qualifying index."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns either the closest index in the index set that is greater than or equal to a specific index or the not-found indicator.", "method_name": "indexGreaterThanOrEqual", "params": [{"param_type": "Int", "param_description": "", "param_name": ["to", "value"]}], "class_name": "NSIndexSet", "method_declar": "func indexGreaterThanOrEqual(to value: Int) -> Int", "return_value": {"return_description": ["Closest index in the index set greater than or equal to index; NSNotFound when the index set contains no qualifying index."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns either the closest index in the index set that is greater than a specific index or the not-found indicator.", "method_name": "indexGreaterThanIndex", "params": [{"param_type": "Int", "param_description": "", "param_name": ["value"]}], "class_name": "NSIndexSet", "method_declar": "func indexGreaterThanIndex(_ value: Int) -> Int", "return_value": {"return_description": ["Closest index in the index set greater than index; NSNotFound when the index set contains no qualifying index."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "The index set fills an index buffer with the indexes contained both in the index set and in an index range, returning the number of indexes copied.", "method_name": "getIndexes", "params": [{"param_type": "UnsafeMutablePointer<Int>", "param_description": "Index buffer to fill.", "param_name": ["indexBuffer"]}, {"param_type": "Int", "param_description": "Maximum size of indexBuffer.", "param_name": ["maxCount", "bufferSize"]}, {"param_type": "NSRangePointer", "param_description": "", "param_name": ["inIndexRange", "range"]}], "class_name": "NSIndexSet", "method_declar": "func getIndexes(_ indexBuffer: UnsafeMutablePointer<Int>, maxCount bufferSize: Int, inIndexRange range: NSRangePointer?) -> Int", "return_value": {"return_description": ["Number of indexes placed in indexBuffer."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Executes a given Block using each object in the index set.", "method_name": "enumerate", "params": [{"param_type": "(Int, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The Block to apply to elements in the set.The Block takes two arguments:idxThe index of the object.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.", "param_name": ["block"]}], "class_name": "NSIndexSet", "method_declar": "func enumerate(_ block: (Int, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Executes a given Block over the index set\u2019s indexes, using the specified enumeration options.", "method_name": "enumerate", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See NSEnumerationOptions for the supported values.", "param_name": ["options", "opts"]}, {"param_type": "(Int, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The Block to apply to elements in the set.The Block takes two arguments:idxThe index of the object.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.", "param_name": ["using", "block"]}], "class_name": "NSIndexSet", "method_declar": "func enumerate(options opts: NSEnumerationOptions = [], using block: (Int, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Executes a given Block using the indexes in the specified range, using the specified enumeration options. ", "method_name": "enumerate", "params": [{"param_type": "NSRange", "param_description": "The range to enumerate.", "param_name": ["in", "range"]}, {"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See NSEnumerationOptions for the supported values.", "param_name": ["options", "opts"]}, {"param_type": "(Int, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The Block to apply to elements in the set.The Block takes two arguments:idxThe index of the object.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block.", "param_name": ["using", "block"]}], "class_name": "NSIndexSet", "method_declar": "func enumerate(in range: NSRange, options opts: NSEnumerationOptions = [], using block: (Int, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Returns an iterator over the elements of this sequence.", "method_name": "makeIterator", "params": [], "class_name": "NSIndexSet", "method_declar": "func makeIterator() -> NSIndexSetIterator", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSIndexSetIterato"]}, "is_static": false}, {"method_description": "", "method_name": "range", "params": [{"param_type": "Int", "param_description": "", "param_name": ["at", "rangeIndex"]}], "class_name": "NSIndexSet", "method_declar": "func range(at rangeIndex: Int) -> NSRange", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSRang"]}, "is_static": false}, {"method_description": "", "method_name": "rangeCount", "params": [], "class_name": "NSIndexSet", "method_declar": "func rangeCount() -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSIndexSet", "typealias": [], "Vars": [{"var_description": "The number of indexes in the index set.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "The first index in the index set.", "var_type": "Int", "is_static": false, "var_name": "firstIndex"}, {"var_description": "The last index in the index set.", "var_type": "Int", "is_static": false, "var_name": "lastIndex"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSMutableCopying", "NSSecureCoding", "Sequence"], "package_name": "foundation", "subclass_list": []}