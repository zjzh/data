{"class_description": "The NSIndexSet class represents an immutable collection of unique unsigned integers, known as indexes because of the way they are used. This collection is referred to as an index set. Indexes must be in the range 0 .. NSNotFound - 1.\nYou use index sets in your code to store indexes into some other data structure. For example, given an NSArray object, you could use an index set to identify a subset of objects in that array.\nYou should not use index sets to store an arbitrary collection of integer values because index sets store indexes as sorted ranges. This makes them more efficient than storing a collection of individual integers. It also means that each index value can only appear once in the index set.\nThe designated initializers of the NSIndexSet class are: init, init(indexesIn:), and init(indexSet:).\nYou must not subclass the NSIndexSet class.\nThe mutable subclass of NSIndexSet is NSMutableIndexSet.\nImportant\nThe Swift overlay to the Foundation framework provides the IndexSet structure, which bridges to the NSIndexSet class and its mutable subclass, NSMutableIndexSet. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "NSIndexSet", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSMutableCopying", "NSSecureCoding", "Sequence"], "package_name": "foundation", "subclass_list": []}