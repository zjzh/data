{"class_description": "When initializing a linguistic tagger with init(tagSchemes:options:), you specify one or more tag schemes that correspond to the kind of information you're interested in for a selection of natural language text. To ensure optimal performance, avoid specifying tag schemes that you won't use. \nSome tag schemes are only available for certain units and languages. Use the availableTagSchemes(for:language:) or availableTagSchemes(forLanguage:) methods to determine the possible values for a specified language and linguistic unit. \nWhen working with linguistic tags using the methods described in Getting Linguistic Tags and Enumerating Linguistic Tags, the returned tag value depends on the specified scheme. For example, given the token \"\u00dcberraschung\", the returned tag is noun when using the lexicalClass tag scheme, \"de\" (German language) when using the language tag scheme, and \"Latn\" (Latin script) when using the script tag scheme, as shown in the following code.\nThe following table lists the available tag schemes, their applicable linguistic units, and possible tag values.\nLinguistic tag scheme\nApplicable linguistic units\nPossible tag values\ntokenType\nNSLinguisticTaggerUnit.word\nSee Token Types\nlexicalClass\nNSLinguisticTaggerUnit.word\nSee Lexical Classes\nnameType\nNSLinguisticTaggerUnit.word\nSee Name Types\nnameTypeOrLexicalClass\nNSLinguisticTaggerUnit.word\nSee Name Types and Lexical Classes\nlemma\nNSLinguisticTaggerUnit.word\nA stem of the word\nlanguage\nNSLinguisticTaggerUnit.word, NSLinguisticTaggerUnit.sentence, NSLinguisticTaggerUnit.paragraph, NSLinguisticTaggerUnit.document\nA BCP-47 language tag\nscript\nNSLinguisticTaggerUnit.word, NSLinguisticTaggerUnit.sentence, NSLinguisticTaggerUnit.paragraph, NSLinguisticTaggerUnit.document\nAn ISO 15924 script code\n", "Methods": [], "class_inherit_list": [], "class_name": "NSLinguisticTagScheme", "typealias": [], "Vars": [], "class_type": "struct", "interface_list": ["Equatable", "Hashable", "RawRepresentable"], "package_name": "foundation", "subclass_list": []}