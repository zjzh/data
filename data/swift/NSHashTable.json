{"class_description": "The hash table is modeled after NSSet with the following differences:\nIt can hold weak references to its members.\nIts members may be copied on input or may use pointer identity for equality and hashing.\nIt can contain arbitrary pointers (its members are not constrained to being objects).\nYou can configure an NSHashTable instance to operate on arbitrary pointers and not just objects, although typically you are encouraged to use the C function API for void * pointers. The object-based API (such as add(_:)) will not work for non-object pointers without type-casting.\nBecause of its options, NSHashTable is not a set because it can behave differently (for example, if pointer equality is specified two isEqual: strings will both be entered).\nWhen configuring hash tables, note that only the options listed in NSHashTableOptions guarantee that the rest of the API will work correctly\u2014including copying, archiving, and fast enumeration. While other NSPointerFunctions options are used for certain configurations, such as to hold arbitrary pointers, not all combinations of the options are valid. With some combinations the hash table may not work correctly, or may not even be initialized correctly.\nNSHashTable is not suitable for subclassing.\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "NSHashTable", "typealias": ["typealias NSHashTableOptions = Int", "typealias NSHashTableOptions = Int"], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSFastEnumeration", "NSSecureCoding"], "package_name": "foundation", "subclass_list": []}