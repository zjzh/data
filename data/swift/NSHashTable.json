{"class_description": "The hash table is modeled after NSSet with the following differences:\nIt can hold weak references to its members.\nIts members may be copied on input or may use pointer identity for equality and hashing.\nIt can contain arbitrary pointers (its members are not constrained to being objects).\nYou can configure an NSHashTable instance to operate on arbitrary pointers and not just objects, although typically you are encouraged to use the C function API for void * pointers. The object-based API (such as add(_:)) will not work for non-object pointers without type-casting.\nBecause of its options, NSHashTable is not a set because it can behave differently (for example, if pointer equality is specified two isEqual: strings will both be entered).\nWhen configuring hash tables, note that only the options listed in NSHashTableOptions guarantee that the rest of the API will work correctly\u2014including copying, archiving, and fast enumeration. While other NSPointerFunctions options are used for certain configurations, such as to hold arbitrary pointers, not all combinations of the options are valid. With some combinations the hash table may not work correctly, or may not even be initialized correctly.\nNSHashTable is not suitable for subclassing.\n", "Methods": [{"method_description": "Returns a hash table initialized with the given attributes.", "method_name": "init", "params": [{"param_type": "NSPointerFunctions.Options", "param_description": "A bit field that specifies the options for the elements in the hash table. For possible values, see NSHashTableOptions.", "param_name": ["options"]}, {"param_type": "Int", "param_description": "The initial number of elements the hash table can hold.", "param_name": ["capacity", "initialCapacity"]}], "class_name": "NSHashTable", "method_declar": "init(options: NSPointerFunctions.Options = [], capacity initialCapacity: Int)", "return_value": {"return_description": ["A hash table initialized with options specified by options and initial capacity of capacity."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a hash table initialized with the given functions and capacity.", "method_name": "init", "params": [{"param_type": "NSPointerFunctions", "param_description": "The pointer functions for the new hash table.", "param_name": ["pointerFunctions", "functions"]}, {"param_type": "Int", "param_description": "The initial capacity of the hash table.", "param_name": ["capacity", "initialCapacity"]}], "class_name": "NSHashTable", "method_declar": "init(pointerFunctions functions: NSPointerFunctions, capacity initialCapacity: Int)", "return_value": {"return_description": ["A hash table initialized with the given functions and capacity."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a new hash table for storing weak references to its contents.", "method_name": "weakObjects", "params": [], "class_name": "NSHashTable", "method_declar": "class func weakObjects() -> NSHashTable<ObjectType>", "return_value": {"return_description": ["A new hash table that uses the weakMemory options and objectPersonality and has an initial capacity of 0. "], "return_name": [""], "return_type": ["NSHashTable<ObjectType"]}, "is_static": false}, {"method_description": "Returns a hash table with given pointer functions options.", "method_name": "init", "params": [{"param_type": "NSPointerFunctions.Options = []", "param_description": "A bit field that specifies the options for the elements in the hash table. For possible values, see NSHashTableOptions.", "param_name": ["options"]}], "class_name": "NSHashTable", "method_declar": "init(options: NSPointerFunctions.Options = [])", "return_value": {"return_description": ["A hash table with given pointer functions options."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether the hash table contains a given object.", "method_name": "contains", "params": [{"param_type": "ObjectType", "param_description": "The object to test for membership in the hash table.", "param_name": ["anObject"]}], "class_name": "NSHashTable", "method_declar": "func contains(_ anObject: ObjectType?) -> Bool", "return_value": {"return_description": ["true if the hash table contains anObject, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Determines whether the hash table contains a given object, and returns that object if it is present", "method_name": "member", "params": [{"param_type": "ObjectType", "param_description": "The object to test for membership in the hash table.", "param_name": ["object"]}], "class_name": "NSHashTable", "method_declar": "func member(_ object: ObjectType?) -> ObjectType?", "return_value": {"return_description": ["If object is a member of the hash table, returns object, otherwise returns nil."], "return_name": [""], "return_type": ["ObjectTyp"]}, "is_static": false}, {"method_description": "Returns an enumerator object that lets you access each object in the hash table.", "method_name": "objectEnumerator", "params": [], "class_name": "NSHashTable", "method_declar": "func objectEnumerator() -> NSEnumerator", "return_value": {"return_description": ["An enumerator object that lets you access each object in the hash table."], "return_name": [""], "return_type": ["NSEnumerato"]}, "is_static": false}, {"method_description": "Adds a given object to the hash table.", "method_name": "add", "params": [{"param_type": "ObjectType", "param_description": "The object to add to the hash table.", "param_name": ["object"]}], "class_name": "NSHashTable", "method_declar": "func add(_ object: ObjectType?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes a given object from the hash table.", "method_name": "remove", "params": [{"param_type": "ObjectType", "param_description": "The object to remove from the hash table.", "param_name": ["object"]}], "class_name": "NSHashTable", "method_declar": "func remove(_ object: ObjectType?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes all objects from the hash table.", "method_name": "removeAllObjects", "params": [], "class_name": "NSHashTable", "method_declar": "func removeAllObjects()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes from the receiving hash table each element that isn\u2019t a member of another given hash table.", "method_name": "intersect", "params": [{"param_type": "NSHashTable<ObjectType>", "param_description": "The hash table with which to perform the intersection.", "param_name": ["other"]}], "class_name": "NSHashTable", "method_declar": "func intersect(_ other: NSHashTable<ObjectType>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether a given hash table intersects with the receiving hash table.", "method_name": "intersects", "params": [{"param_type": "NSHashTable<ObjectType>", "param_description": "The hash table with which to compare the receiving hash table.", "param_name": ["other"]}], "class_name": "NSHashTable", "method_declar": "func intersects(_ other: NSHashTable<ObjectType>) -> Bool", "return_value": {"return_description": ["true if other intersects with the receiving hash table, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether every element in the receiving hash table is also present in another given hash table.", "method_name": "isSubset", "params": [{"param_type": "NSHashTable<ObjectType>", "param_description": "The hash table with which to compare the receiving hash table.", "param_name": ["of", "other"]}], "class_name": "NSHashTable", "method_declar": "func isSubset(of other: NSHashTable<ObjectType>) -> Bool", "return_value": {"return_description": ["true if every element in the receiving hash table is also present in other, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether a given hash table is equal to the receiving hash table.", "method_name": "isEqual", "params": [{"param_type": "NSHashTable<ObjectType>", "param_description": "The hash table with which to compare the receiving hash table.", "param_name": ["to", "other"]}], "class_name": "NSHashTable", "method_declar": "func isEqual(to other: NSHashTable<ObjectType>) -> Bool", "return_value": {"return_description": ["true if the contents of other are equal to the contents of the receiving hash table, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Removes each element in another given hash table from the receiving hash table, if present.", "method_name": "minus", "params": [{"param_type": "NSHashTable<ObjectType>", "param_description": "The hash table of elements to remove from the receiving hash table.", "param_name": ["other"]}], "class_name": "NSHashTable", "method_declar": "func minus(_ other: NSHashTable<ObjectType>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds each element in another given hash table to the receiving hash table, if not present.", "method_name": "union", "params": [{"param_type": "NSHashTable<ObjectType>", "param_description": "The hash table of elements to add to the receiving hash table.", "param_name": ["other"]}], "class_name": "NSHashTable", "method_declar": "func union(_ other: NSHashTable<ObjectType>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns all of the elements in the specified hash table.", "method_name": "NSAllHashTableObjects", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}], "class_name": "NSHashTable", "method_declar": "func NSAllHashTableObjects(_ table: NSHashTable<AnyObject>) -> [Any]", "return_value": {"return_description": ["An array object containing all the elements of table."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether the elements of two hash tables are equal.", "method_name": "NSCompareHashTables", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table1"]}, {"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table2"]}], "class_name": "NSHashTable", "method_declar": "func NSCompareHashTables(_ table1: NSHashTable<AnyObject>, _ table2: NSHashTable<AnyObject>) -> Bool", "return_value": {"return_description": ["true if the two hash tables are equal\u2014that is, if each element of table1 is in table2 and the two tables are the same size, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Performs a shallow copy of the specified hash table.", "method_name": "NSCopyHashTableWithZone", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}, {"param_type": "NSZone", "param_description": "", "param_name": ["zone"]}], "class_name": "NSHashTable", "method_declar": "func NSCopyHashTableWithZone(_ table: NSHashTable<AnyObject>, _ zone: NSZone?) -> NSHashTable<AnyObject>", "return_value": {"return_description": ["A pointer to a new copy of table, created in zone and containing pointers to the data elements of table."], "return_name": [""], "return_type": ["NSHashTable<AnyObject"]}, "is_static": false}, {"method_description": "Returns the number of elements in a hash table.", "method_name": "NSCountHashTable", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}], "class_name": "NSHashTable", "method_declar": "func NSCountHashTable(_ table: NSHashTable<AnyObject>) -> Int", "return_value": {"return_description": ["The number of elements currently in table."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Creates and returns a new hash table.", "method_name": "NSCreateHashTable", "params": [{"param_type": "NSHashTableCallBacks", "param_description": "", "param_name": ["callBacks"]}, {"param_type": "Int", "param_description": "", "param_name": ["capacity"]}], "class_name": "NSHashTable", "method_declar": "func NSCreateHashTable(_ callBacks: NSHashTableCallBacks, _ capacity: Int) -> NSHashTable<AnyObject>", "return_value": {"return_description": ["A pointer to an NSHashTable created in the default zone."], "return_name": [""], "return_type": ["NSHashTable<AnyObject"]}, "is_static": false}, {"method_description": "Creates a new hash table in a given zone.", "method_name": "NSCreateHashTableWithZone", "params": [{"param_type": "NSHashTableCallBacks", "param_description": "", "param_name": ["callBacks"]}, {"param_type": "Int", "param_description": "", "param_name": ["capacity"]}, {"param_type": "NSZone", "param_description": "", "param_name": ["zone"]}], "class_name": "NSHashTable", "method_declar": "func NSCreateHashTableWithZone(_ callBacks: NSHashTableCallBacks, _ capacity: Int, _ zone: NSZone?) -> NSHashTable<AnyObject>", "return_value": {"return_description": ["A pointer to a new hash table created in the specified zone. If zone is NULL, the hash table is created in the default zone. "], "return_name": [""], "return_type": ["NSHashTable<AnyObject"]}, "is_static": false}, {"method_description": "Used when finished with an enumerator.", "method_name": "NSEndHashTableEnumeration", "params": [{"param_type": "UnsafeMutablePointer<NSHashEnumerator>", "param_description": "", "param_name": ["enumerator"]}], "class_name": "NSHashTable", "method_declar": "func NSEndHashTableEnumeration(_ enumerator: UnsafeMutablePointer<NSHashEnumerator>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an enumerator for the specified hash table.", "method_name": "NSEnumerateHashTable", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}], "class_name": "NSHashTable", "method_declar": "func NSEnumerateHashTable(_ table: NSHashTable<AnyObject>) -> NSHashEnumerator", "return_value": {"return_description": ["An NSHashEnumerator structure that will cause successive elements of table to be returned each time this enumerator is passed to NSNextHashEnumeratorItem."], "return_name": [""], "return_type": ["NSHashEnumerato"]}, "is_static": false}, {"method_description": "Deletes the specified hash table.", "method_name": "NSFreeHashTable", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}], "class_name": "NSHashTable", "method_declar": "func NSFreeHashTable(_ table: NSHashTable<AnyObject>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an element of the hash table.", "method_name": "NSHashGet", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}, {"param_type": "UnsafeRawPointer", "param_description": "", "param_name": ["pointer"]}], "class_name": "NSHashTable", "method_declar": "func NSHashGet(_ table: NSHashTable<AnyObject>, _ pointer: UnsafeRawPointer?) -> UnsafeMutableRawPointer", "return_value": {"return_description": ["The pointer in the table that matches pointer (as defined by the isEqual callback function). If there is no matching element, returns NULL."], "return_name": [""], "return_type": ["UnsafeMutableRawPointe"]}, "is_static": false}, {"method_description": "Adds an element to the specified hash table.", "method_name": "NSHashInsert", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}, {"param_type": "UnsafeRawPointer", "param_description": "", "param_name": ["pointer"]}], "class_name": "NSHashTable", "method_declar": "func NSHashInsert(_ table: NSHashTable<AnyObject>, _ pointer: UnsafeRawPointer?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds an element to the specified hash table only if the table does not already contain the element.", "method_name": "NSHashInsertIfAbsent", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}, {"param_type": "UnsafeRawPointer", "param_description": "", "param_name": ["pointer"]}], "class_name": "NSHashTable", "method_declar": "func NSHashInsertIfAbsent(_ table: NSHashTable<AnyObject>, _ pointer: UnsafeRawPointer?) -> UnsafeMutableRawPointer?", "return_value": {"return_description": ["If pointer matches an item already in table, returns the preexisting pointer; otherwise, pointer is added to the table and returns NULL. "], "return_name": [""], "return_type": ["UnsafeMutableRawPointe"]}, "is_static": false}, {"method_description": "Adds an element to the specified hash table.", "method_name": "NSHashInsertKnownAbsent", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}, {"param_type": "UnsafeRawPointer", "param_description": "", "param_name": ["pointer"]}], "class_name": "NSHashTable", "method_declar": "func NSHashInsertKnownAbsent(_ table: NSHashTable<AnyObject>, _ pointer: UnsafeRawPointer?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Removes an element from the specified hash table.", "method_name": "NSHashRemove", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}, {"param_type": "UnsafeRawPointer", "param_description": "", "param_name": ["pointer"]}], "class_name": "NSHashTable", "method_declar": "func NSHashRemove(_ table: NSHashTable<AnyObject>, _ pointer: UnsafeRawPointer?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the next hash-table element in the enumeration.", "method_name": "NSNextHashEnumeratorItem", "params": [{"param_type": "UnsafeMutablePointer<NSHashEnumerator>", "param_description": "", "param_name": ["enumerator"]}], "class_name": "NSHashTable", "method_declar": "func NSNextHashEnumeratorItem(_ enumerator: UnsafeMutablePointer<NSHashEnumerator>) -> UnsafeMutableRawPointer?", "return_value": {"return_description": ["The next element in the table that enumerator is associated with, or NULL if enumerator has already iterated over all the elements."], "return_name": [""], "return_type": ["UnsafeMutableRawPointe"]}, "is_static": false}, {"method_description": "Deletes the elements of the specified hash table.", "method_name": "NSResetHashTable", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}], "class_name": "NSHashTable", "method_declar": "func NSResetHashTable(_ table: NSHashTable<AnyObject>)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a string describing the hash table\u2019s contents.", "method_name": "NSStringFromHashTable", "params": [{"param_type": "NSHashTable<AnyObject>", "param_description": "", "param_name": ["table"]}], "class_name": "NSHashTable", "method_declar": "func NSStringFromHashTable(_ table: NSHashTable<AnyObject>) -> String", "return_value": {"return_description": ["A string describing table\u2019s contents. "], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSHashTable", "typealias": ["typealias NSHashTableOptions = Int", "typealias NSHashTableOptions = Int"], "Vars": [{"var_description": "One of the objects in the hash table.", "var_type": "ObjectType", "is_static": false, "var_name": "anyObject"}, {"var_description": "The hash table\u2019s members.", "var_type": "[ObjectType]", "is_static": false, "var_name": "allObjects"}, {"var_description": "A set that contains the hash table\u2019s members.", "var_type": "Set<AnyHashable>", "is_static": false, "var_name": "setRepresentation"}, {"var_description": "The number of elements in the hash table.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "The pointer functions for the hash table.", "var_type": "NSPointerFunctions", "is_static": false, "var_name": "pointerFunctions"}, {"var_description": "For sets of NSInteger-sized quantities or smaller (for example, int, long, or unichar).", "var_type": "NSHashTableCallBacks", "is_static": false, "var_name": "NSIntegerHashCallBacks"}, {"var_description": "For sets of pointers, hashed by address.", "var_type": "NSHashTableCallBacks", "is_static": false, "var_name": "NSNonOwnedPointerHashCallBacks"}, {"var_description": "For sets of objects, but without retaining/releasing.", "var_type": "NSHashTableCallBacks", "is_static": false, "var_name": "NSNonRetainedObjectHashCallBacks"}, {"var_description": "For sets of objects (similar to NSSet).", "var_type": "NSHashTableCallBacks", "is_static": false, "var_name": "NSObjectHashCallBacks"}, {"var_description": "For sets of objects, with transfer of ownership upon insertion, using pointer equality.", "var_type": "NSHashTableCallBacks", "is_static": false, "var_name": "NSOwnedObjectIdentityHashCallBacks"}, {"var_description": "For sets of pointers, with transfer of ownership upon insertion.", "var_type": "NSHashTableCallBacks", "is_static": false, "var_name": "NSOwnedPointerHashCallBacks"}, {"var_description": "For sets of pointers to structs, when the first field of the struct is int-sized.", "var_type": "NSHashTableCallBacks", "is_static": false, "var_name": "NSPointerToStructHashCallBacks"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSFastEnumeration", "NSSecureCoding"], "package_name": "foundation", "subclass_list": []}