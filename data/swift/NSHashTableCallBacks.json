{"package_name": "foundation", "subclass_list": [], "class_description": "All functions must know the types of things in the hash table to be able to operate on them. Sets of predefined call backs are described in NSHashTable.\n", "class_type": "struct", "typealias": [], "interface_list": [], "class_inherit_list": [], "Methods": [{"params": [], "class_name": "NSHashTableCallBacks", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init()"}, {"params": [{"param_name": ["hash"], "param_type": "((NSHashTable<AnyObject>, UnsafeRawPointer) -> Int)", "param_description": ""}, {"param_name": ["isEqual"], "param_type": "((NSHashTable<AnyObject>, UnsafeRawPointer, UnsafeRawPointer) -> ObjCBool)", "param_description": ""}, {"param_name": ["retain"], "param_type": "((NSHashTable<AnyObject>, UnsafeRawPointer) -> Void)", "param_description": ""}, {"param_name": ["release"], "param_type": "((NSHashTable<AnyObject>, UnsafeMutableRawPointer) -> Void)", "param_description": ""}, {"param_name": ["describe"], "param_type": "((NSHashTable<AnyObject>, UnsafeRawPointer) -> String)", "param_description": ""}], "class_name": "NSHashTableCallBacks", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["String"]}, "method_name": "init", "method_description": "", "method_declar": "init(hash: ((NSHashTable<AnyObject>, UnsafeRawPointer) -> Int)?, isEqual: ((NSHashTable<AnyObject>, UnsafeRawPointer, UnsafeRawPointer) -> ObjCBool)?, retain: ((NSHashTable<AnyObject>, UnsafeRawPointer) -> Void)?, release: ((NSHashTable<AnyObject>, UnsafeMutableRawPointer) -> Void)?, describe: ((NSHashTable<AnyObject>, UnsafeRawPointer) -> String?)?)"}], "class_name": "NSHashTableCallBacks", "Vars": [{"var_description": "Points to the function that produces an autoreleased NSString * describing the given element. If NULL, then the hash table produces a generic string description.", "var_type": "((NSHashTable<AnyObject>,", "is_static": false, "var_name": "describe"}, {"var_description": "Points to the function that must produce hash code for elements of the hash table. If NULL, the pointer value is used as the hash code. Second parameter is the element for which hash code should be produced.", "var_type": "((NSHashTable<AnyObject>,", "is_static": false, "var_name": "hash"}, {"var_description": "Points to the function that compares second and third parameters. If NULL, then == is used for comparison.", "var_type": "((NSHashTable<AnyObject>,", "is_static": false, "var_name": "isEqual"}, {"var_description": "Points to the function that decrements a reference count for the given element, and if the reference count becomes 0, frees the given element. If NULL, then nothing is done for reference counting or releasing.", "var_type": "((NSHashTable<AnyObject>,", "is_static": false, "var_name": "release"}, {"var_description": "Points to the function that increments a reference count for the given element. If NULL, then nothing is done for reference counting.", "var_type": "((NSHashTable<AnyObject>,", "is_static": false, "var_name": "retain"}]}