{"subclass_list": ["ARAnchorCopying", "DOMEventTarget", "GKGameModel", "MDLMeshBuffer", "MPSCNNBatchNormalizationDataSource", "MPSCNNConvolutionDataSource", "MPSCNNInstanceNormalizationDataSource", "NFCTag", "UITimingCurveProvider"], "typealias": [], "class_inherit_list": [], "Methods": [{"return_value": {"return_name": [""], "return_description": [], "return_type": ["An"]}, "method_description": "Returns a new instance that\u2019s a copy of the receiver.Required.", "is_static": false, "method_name": "copy", "class_name": "NSCopying", "method_declar": "func copy(with zone: NSZone? = nil) -> Any", "params": [{"param_type": "NSZone = nil", "param_description": "This parameter is ignored. Memory zones are no longer used by Objective-C.", "param_name": ["with", "zone"]}]}], "class_type": "protocol", "class_name": "NSCopying", "Vars": [], "interface_list": [], "class_description": "The exact meaning of \u201ccopy\u201d can vary from class to class, but a copy must be a functionally independent object with values identical to the original at the time the copy was made. A copy produced with NSCopying is implicitly retained by the sender, who is responsible for releasing it.\nNSCopying declares one method, copy(with:), but copying is commonly invoked with the convenience method copy(). The copy() method is defined for all objects inheriting from NSObject and simply invokes copy(with:) with the default zone.\nYour options for implementing this protocol are as follows:\nImplement NSCopying using alloc and init... in classes that don\u2019t inherit copy(with:).\nImplement NSCopying by invoking the superclass\u2019s copy(with:) when NSCopying behavior is inherited. If the superclass implementation might use the NSCopyObject function, make explicit assignments to pointer instance variables for retained objects.\nImplement NSCopying by retaining the original instead of creating a new copy when the class and its contents are immutable.\nIf a subclass inherits NSCopying from its superclass and declares additional instance variables, the subclass has to override copy(with:) to properly handle its own instance variables, invoking the superclass\u2019s implementation first.\n", "package_name": "foundation"}