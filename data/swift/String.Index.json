{"class_description": "", "Methods": [{"method_description": "Creates an index in the given UTF-16 view that corresponds exactly to the specified string position.", "method_name": "init", "params": [{"param_type": "String.Index", "param_description": "", "param_name": ["idx"]}, {"param_type": "String.UTF16View", "param_description": "The UTF16View in which to find the new position.", "param_name": ["within", "target"]}], "class_name": "String.Index", "method_declar": "init?(_ idx: String.Index, within target: String.UTF16View)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an index in the given UTF-8 view that corresponds exactly to the specified UTF16View position.", "method_name": "init", "params": [{"param_type": "String.Index", "param_description": "", "param_name": ["idx"]}, {"param_type": "String.UTF8View", "param_description": "The UTF8View in which to find the new position.", "param_name": ["within", "target"]}], "class_name": "String.Index", "method_declar": "init?(_ idx: String.Index, within target: String.UTF8View)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an index in the given string that corresponds exactly to the specified position.", "method_name": "init", "params": [{"param_type": "String.Index", "param_description": "A position in a view of the target parameter. sourcePosition must be a valid index of at least one of the views of target.", "param_name": ["sourcePosition"]}, {"param_type": "String", "param_description": "The string referenced by the resulting index.", "param_name": ["within", "target"]}], "class_name": "String.Index", "method_declar": "init?(_ sourcePosition: String.Index, within target: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an index in the given Unicode scalars view that corresponds exactly to the specified UTF16View position.", "method_name": "init", "params": [{"param_type": "String.Index", "param_description": "A position in the utf16 view of a string. utf16Index must be an element of String(unicodeScalars).utf16.indices.", "param_name": ["sourcePosition"]}, {"param_type": "String.UnicodeScalarView", "param_description": "The UnicodeScalarView in which to find the new position.", "param_name": ["within", "unicodeScalars"]}], "class_name": "String.Index", "method_declar": "init?(_ sourcePosition: String.Index, within unicodeScalars: String.UnicodeScalarView)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new index at the specified code unit offset.", "method_name": "init", "params": [{"param_type": "Int", "param_description": "An offset in code units.", "param_name": ["encodedOffset", "offset"]}], "class_name": "String.Index", "method_declar": "init(encodedOffset offset: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "params": [{"param_type": "inout Hasher", "param_description": "The hasher to use when combining the components of this instance.", "param_name": ["into", "hasher"]}], "class_name": "String.Index", "method_declar": "func hash(into hasher: inout Hasher)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the position in the given string that corresponds exactly to this index.", "method_name": "samePosition", "params": [{"param_type": "String", "param_description": "The string to use for the index conversion. This index must be a valid index of at least one view of characters.", "param_name": ["in", "characters"]}], "class_name": "String.Index", "method_declar": "func samePosition(in characters: String) -> String.Index?", "return_value": {"return_description": ["The position in characters that corresponds exactly to this index. If this index does not have an exact corresponding position in characters, this method returns nil. For example, an attempt to convert the position of a UTF-8 continuation byte returns nil."], "return_name": [""], "return_type": ["String.Inde"]}, "is_static": false}, {"method_description": "Returns the position in the given UTF-8 view that corresponds exactly to this index.", "method_name": "samePosition", "params": [{"param_type": "String.UTF8View", "param_description": "The view to use for the index conversion. This index must be a valid index of at least one view of the string shared by utf8.", "param_name": ["in", "utf8"]}], "class_name": "String.Index", "method_declar": "func samePosition(in utf8: String.UTF8View) -> String.UTF8View.Index?", "return_value": {"return_description": ["The position in utf8 that corresponds exactly to this index. If this index does not have an exact corresponding position in utf8, this method returns nil. For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil."], "return_name": [""], "return_type": ["String.UTF8View.Inde"]}, "is_static": false}, {"method_description": "Returns the position in the given view of Unicode scalars that corresponds exactly to this index.", "method_name": "samePosition", "params": [{"param_type": "String.UnicodeScalarView", "param_description": "The view to use for the index conversion. This index must be a valid index of at least one view of the string shared by unicodeScalars.", "param_name": ["in", "unicodeScalars"]}], "class_name": "String.Index", "method_declar": "func samePosition(in unicodeScalars: String.UnicodeScalarView) -> String.UnicodeScalarIndex?", "return_value": {"return_description": ["The position in unicodeScalars that corresponds exactly to this index. If this index does not have an exact corresponding position in unicodeScalars, this method returns nil. For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil."], "return_name": [""], "return_type": ["String.UnicodeScalarInde"]}, "is_static": false}, {"method_description": "Returns the position in the given UTF-16 view that corresponds exactly to this index.", "method_name": "samePosition", "params": [{"param_type": "String.UTF16View", "param_description": "The view to use for the index conversion. This index must be a valid index of at least one view of the string shared by utf16.", "param_name": ["in", "utf16"]}], "class_name": "String.Index", "method_declar": "func samePosition(in utf16: String.UTF16View) -> String.UTF16View.Index?", "return_value": {"return_description": ["The position in utf16 that corresponds exactly to this index. If this index does not have an exact corresponding position in utf16, this method returns nil. For example, an attempt to convert the position of a UTF-8 continuation byte returns nil."], "return_name": [""], "return_type": ["String.UTF16View.Inde"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "String.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "String.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String.Index", "method_declar": "static func != (lhs: String.Index, rhs: String.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "params": [{"param_type": "String.Index", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}], "class_name": "String.Index", "method_declar": "postfix static func ... (minimum: String.Index) -> PartialRangeFrom<String.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<String.Index"]}, "is_static": true}, {"method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "params": [{"param_type": "String.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "String.Index", "method_declar": "prefix static func ... (maximum: String.Index) -> PartialRangeThrough<String.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<String.Index"]}, "is_static": true}, {"method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "params": [{"param_type": "String.Index", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "String.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "String.Index", "method_declar": "static func ... (minimum: String.Index, maximum: String.Index) -> ClosedRange<String.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<String.Index"]}, "is_static": true}, {"method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "params": [{"param_type": "String.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "String.Index", "method_declar": "prefix static func ..< (maximum: String.Index) -> PartialRangeUpTo<String.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<String.Index"]}, "is_static": true}, {"method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "params": [{"param_type": "String.Index", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "String.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "String.Index", "method_declar": "static func ..< (minimum: String.Index, maximum: String.Index) -> Range<String.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<String.Index"]}, "is_static": true}, {"method_description": "", "method_name": "func", "params": [{"param_type": "String.Index", "param_description": "", "param_name": ["lhs"]}, {"param_type": "String.Index", "param_description": "", "param_name": ["rhs"]}], "class_name": "String.Index", "method_declar": "static func < (lhs: String.Index, rhs: String.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "String.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "String.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String.Index", "method_declar": "static func <= (lhs: String.Index, rhs: String.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "", "method_name": "==", "params": [{"param_type": "String.Index", "param_description": "", "param_name": ["lhs"]}, {"param_type": "String.Index", "param_description": "", "param_name": ["rhs"]}], "class_name": "String.Index", "method_declar": "static func == (lhs: String.Index, rhs: String.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "String.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "String.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String.Index", "method_declar": "static func > (lhs: String.Index, rhs: String.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "String.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "String.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "String.Index", "method_declar": "static func >= (lhs: String.Index, rhs: String.Index) -> Bool", "return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}], "class_inherit_list": [], "class_name": "String.Index", "typealias": [], "Vars": [{"var_description": "The offset into a string\u2019s code units for this index.", "var_type": "Int", "is_static": false, "var_name": "encodedOffset"}], "class_type": "struct", "interface_list": [], "package_name": "foundation", "subclass_list": []}