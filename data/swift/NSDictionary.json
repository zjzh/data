{"class_description": "The NSDictionary class declares the programmatic interface to objects that manage immutable associations of keys and values. For example, an interactive form could be represented as a dictionary, with the field names as keys, corresponding to user-entered values.\nUse this class or its subclass NSMutableDictionary when you need a convenient and efficient way to retrieve data associated with an arbitrary key. NSDictionary creates static dictionaries, and NSMutableDictionary creates dynamic dictionaries. (For convenience, the term dictionary refers to any instance of one of these classes without specifying its exact class membership.)\nA key-value pair within a dictionary is called an entry. Each entry consists of one object that represents the key and a second object that is that key\u2019s value. Within a dictionary, the keys are unique. That is, no two keys in a single dictionary are equal (as determined by isEqual(_:)). In general, a key can be any object (provided that it conforms to the NSCopying protocol\u2014see below), but note that when using key-value coding the key must be a string (see Accessing Object Properties). Neither a key nor a value can be nil; if you need to represent a null value in a dictionary, you should use NSNull.\nNSDictionary is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFDictionary. See Toll-Free Bridging for more information on toll-free bridging.\nIn addition to the provided initializers, such as init(objects:forKeys:), you can create an NSDictionary object using a dictionary literal.\nIn Objective-C, the compiler generates code that makes an underlying call to the init(objects:forKeys:count:) method.\nUnlike dictionaryWithObjectsAndKeys: and other initializers, dictionary literals specify entries in key-value order. You should not terminate the list of objects with nil when using this literal syntax, and in fact nil is an invalid value. For more information about object literals in Objective-C, see Working with Objects in Programming with Objective-C.\nIn Swift, the NSDictionary class conforms to the DictionaryLiteralConvertible protocol, which allows it to be initialized with dictionary literals. For more information about object literals in Swift, see Literal Expression in The Swift Programming Language (Swift 4.1).\nIn addition to the provided instance methods, such as object(forKey:), you can access NSDictionary values by their keys using subscripting.\nIn addition to the provided instance methods, such as enumerateKeysAndObjects(_:), you can enumerate NSDictionary entries using for-in loops.\nIn Objective-C, NSDictionary conforms to the NSFastEnumeration protocol.\nIn Swift, NSDictionary conforms to the SequenceType protocol.\nYou generally shouldn\u2019t need to subclass NSDictionary. Custom behavior can usually be achieved through composition rather than subclassing.\nIf you do need to subclass NSDictionary, take into account that it is a Class cluster. Any subclass must override the following primitive methods:\ninit(objects:forKeys:count:)\ncount\nobject(forKey:)\nkeyEnumerator() \nThe other methods of NSDictionary operate by invoking one or more of these primitives. The non-primitive methods provide convenient ways of accessing multiple entries at once.\nBefore making a custom class of NSDictionary, investigate NSMapTable and the corresponding Core Foundation type, CFDictionary. Because NSDictionary and CFDictionary are \u201ctoll-free bridged,\u201d you can substitute a CFDictionary object for a NSDictionary object in your code (with appropriate casting). Although they are corresponding types, CFDictionary and NSDictionary do not have identical interfaces or implementations, and you can sometimes do things with CFDictionary that you cannot easily do with NSDictionary.\nIf the behavior you want to add supplements that of the existing class, you could write a category on NSDictionary. Keep in mind, however, that this category will be in effect for all instances of NSDictionary that you use, and this might have unintended consequences. Alternatively, you could use composition to achieve the desired behavior.\n", "Methods": [{"method_description": "Initializes a newly allocated dictionary.", "method_name": "init", "params": [], "class_name": "NSDictionary", "method_declar": "init()", "return_value": {"return_description": ["A dictionary."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated dictionary with key-value pairs constructed from the provided arrays of keys and objects.", "method_name": "init", "params": [{"param_type": "[Any]", "param_description": "An array containing the values for the new dictionary. ", "param_name": ["objects"]}, {"param_type": "[NSCopying]", "param_description": "An array containing the keys for the new dictionary. Each key is copied (using copy(with:); keys must conform to the NSCopying protocol), and the copy is added to the new dictionary.", "param_name": ["forKeys", "keys"]}], "class_name": "NSDictionary", "method_declar": "convenience init(objects: [Any], forKeys keys: [NSCopying])", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated dictionary with the specified number of key-value pairs constructed from the provided C arrays of keys and objects.", "method_name": "init", "params": [{"param_type": "UnsafePointer<AnyObject>", "param_description": "A C array of values for the new dictionary. ", "param_name": ["objects"]}, {"param_type": "UnsafePointer<NSCopying>", "param_description": "A C array of keys for the new dictionary. Each key is copied (using copy(with:); keys must conform to the NSCopying protocol), and the copy is added to the new dictionary.", "param_name": ["forKeys", "keys"]}, {"param_type": "Int", "param_description": "The number of elements to use from the keys and objects arrays. count must not exceed the number of elements in objects or keys.", "param_name": ["count", "cnt"]}], "class_name": "NSDictionary", "method_declar": "init(objects: UnsafePointer<AnyObject>?, forKeys keys: UnsafePointer<NSCopying>?, count cnt: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a dictionary containing a given key and value.", "method_name": "init", "params": [{"param_type": "Any", "param_description": "", "param_name": ["object"]}, {"param_type": "NSCopying", "param_description": "", "param_name": ["forKey", "key"]}], "class_name": "NSDictionary", "method_declar": "convenience init(object: Any, forKey key: NSCopying)", "return_value": {"return_description": ["A new dictionary containing a single object, anObject, for a single key, aKey."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated dictionary by placing in it the keys and values contained in another given dictionary.", "method_name": "init", "params": [{"param_type": "[AnyHashable", "param_description": "A dictionary containing the keys and values with which to initialize the new dictionary.", "param_name": ["dictionary", "otherDictionary"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[AnyHashable"]}], "class_name": "NSDictionary", "method_declar": "convenience init(dictionary otherDictionary: [AnyHashable : Any])", "return_value": {"return_description": ["An initialized dictionary\u2014which might be different than the original receiver\u2014containing the keys and values found in otherDictionary."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated dictionary using the objects contained in another given dictionary.", "method_name": "init", "params": [{"param_type": "[AnyHashable", "param_description": "A dictionary containing the keys and values with which to initialize the new dictionary.", "param_name": ["dictionary", "otherDictionary"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[AnyHashable"]}, {"param_type": "Bool", "param_description": "If true, each object in otherDictionary receives a copyWithZone: message to create a copy of the object\u2014objects must conform to the NSCopying protocol. In a managed memory environment, this is instead of the retain message the object would otherwise receive. The object copy is then added to the returned dictionary.If false, then in a managed memory environment each object in otherDictionary simply receives a retain message when it is added to the returned dictionary.", "param_name": ["copyItems", "flag"]}], "class_name": "NSDictionary", "method_declar": "convenience init(dictionary otherDictionary: [AnyHashable : Any], copyItems flag: Bool)", "return_value": {"return_description": ["An initialized object\u2014which might be different than the original receiver\u2014containing the keys and values found in otherDictionary."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated dictionary from the given key-value pairs.", "method_name": "init", "params": [{"param_type": "(Any, Any)...", "param_description": "A variadic array of two-member tuples, where the first member is a key and the second is its corresponding value.", "param_name": ["dictionaryLiteral", "elements"]}], "class_name": "NSDictionary", "method_declar": "required convenience init(dictionaryLiteral elements: (Any, Any)...)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated dictionary using the keys and values found at a given URL.", "method_name": "init", "params": [{"param_type": "URL", "param_description": "A URL that identifies a resource containing a string representation of a property list whose root object is a dictionary.", "param_name": ["contentsOf", "url"]}, {"param_type": "()", "param_description": "On failure, a reference to the error that occurred.", "param_name": ["error"]}], "class_name": "NSDictionary", "method_declar": "convenience init(contentsOf url: URL, error: ()) throws", "return_value": {"return_description": ["An initialized dictionary that contains the dictionary at url, or nil if there is an error or if the contents of the resource are an invalid representation of a dictionary."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated dictionary using the keys and values found at a given URL.DeprecatedUse init(contentsOf:error:) instead.", "method_name": "init", "params": [{"param_type": "URL", "param_description": "", "param_name": ["contentsOf", "url"]}], "class_name": "NSDictionary", "method_declar": "convenience init?(contentsOf url: URL)", "return_value": {"return_description": ["An initialized dictionary\u2014which might be different than the original receiver\u2014that contains the dictionary at aURL, or nil if there is an error or if the contents of the resource are an invalid representation of a dictionary."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated dictionary using the keys and values found in a file at a given path.", "method_name": "init", "params": [{"param_type": "String", "param_description": "A full or relative pathname. The file identified by path must contain a string representation of a property list whose root object is a dictionary.", "param_name": ["contentsOfFile", "path"]}], "class_name": "NSDictionary", "method_declar": "convenience init?(contentsOfFile path: String)", "return_value": {"return_description": ["An initialized dictionary\u2014which might be different than the original receiver\u2014that contains the dictionary at path, or nil if there is a file error or if the contents of the file are an invalid representation of a dictionary."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a dictionary initialized from data in the provided unarchiver.", "method_name": "init", "params": [{"param_type": "NSCoder", "param_description": "An unarchiver object.", "param_name": ["coder", "aDecoder"]}], "class_name": "NSDictionary", "method_declar": "init?(coder aDecoder: NSCoder)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a shared key set object for the specified keys.", "method_name": "sharedKeySet", "params": [{"param_type": "[NSCopying]", "param_description": "The array of keys. If the parameter is nil, an exception is thrown. If the array of keys is empty, an empty key set is returned.", "param_name": ["forKeys", "keys"]}], "class_name": "NSDictionary", "method_declar": "class func sharedKeySet(forKeys keys: [NSCopying]) -> Any", "return_value": {"return_description": ["A shared key set object."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether the contents of the receiving dictionary are equal to the contents of another given dictionary.", "method_name": "isEqual", "params": [{"param_type": "[AnyHashable", "param_description": "The dictionary with which to compare the receiving dictionary.", "param_name": ["to", "otherDictionary"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[AnyHashable"]}], "class_name": "NSDictionary", "method_declar": "func isEqual(to otherDictionary: [AnyHashable : Any]) -> Bool", "return_value": {"return_description": ["true if the contents of otherDictionary are equal to the contents of the receiving dictionary, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a new array containing the keys corresponding to all occurrences of a given object in the dictionary.", "method_name": "allKeys", "params": [{"param_type": "Any", "param_description": "The value to look for in the dictionary.", "param_name": ["for", "anObject"]}], "class_name": "NSDictionary", "method_declar": "func allKeys(for anObject: Any) -> [Any]", "return_value": {"return_description": ["A new array containing the keys corresponding to all occurrences of anObject in the dictionary. If no object matching anObject is found, returns an empty array."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Returns the value associated with a given key.", "method_name": "value", "params": [{"param_type": "String", "param_description": "The key for which to return the corresponding value. Note that when using key-value coding, the key must be a string (see Accessing Object Properties).", "param_name": ["forKey", "key"]}], "class_name": "NSDictionary", "method_declar": "func value(forKey key: String) -> Any?", "return_value": {"return_description": ["The value associated with key."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Returns as a static array the set of objects from the dictionary that corresponds to the specified keys.", "method_name": "objects", "params": [{"param_type": "[Any]", "param_description": "An NSArray containing the keys for which to return corresponding values.", "param_name": ["forKeys", "keys"]}, {"param_type": "Any", "param_description": "", "param_name": ["notFoundMarker", "marker"]}], "class_name": "NSDictionary", "method_declar": "func objects(forKeys keys: [Any], notFoundMarker marker: Any) -> [Any]", "return_value": {"return_description": [], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Returns the value associated with a given key.", "method_name": "object", "params": [{"param_type": "Any", "param_description": "The key for which to return the corresponding value.", "param_name": ["forKey", "aKey"]}], "class_name": "NSDictionary", "method_declar": "func object(forKey aKey: Any) -> Any?", "return_value": {"return_description": ["The value associated with aKey, or nil if no value is associated with aKey."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Provides an enumerator to access the keys in the dictionary.", "method_name": "keyEnumerator", "params": [], "class_name": "NSDictionary", "method_declar": "func keyEnumerator() -> NSEnumerator", "return_value": {"return_description": ["An enumerator object that lets you access each key in the dictionary."], "return_name": [""], "return_type": ["NSEnumerato"]}, "is_static": false}, {"method_description": "Returns an enumerator object that lets you access each value in the dictionary.", "method_name": "objectEnumerator", "params": [], "class_name": "NSDictionary", "method_declar": "func objectEnumerator() -> NSEnumerator", "return_value": {"return_description": ["An enumerator object that lets you access each value in the dictionary."], "return_name": [""], "return_type": ["NSEnumerato"]}, "is_static": false}, {"method_description": "Applies a given block object to the entries of the dictionary.", "method_name": "enumerateKeysAndObjects", "params": [{"param_type": "(Any, Any, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "A block object to operate on entries in the dictionary.", "param_name": ["block"]}], "class_name": "NSDictionary", "method_declar": "func enumerateKeysAndObjects(_ block: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Applies a given block object to the entries of the dictionary, with options specifying how the enumeration is performed.", "method_name": "enumerateKeysAndObjects", "params": [{"param_type": "NSEnumerationOptions", "param_description": "Enumeration options.", "param_name": ["options", "opts"]}, {"param_type": "(Any, Any, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "A block object to operate on entries in the dictionary.", "param_name": ["using", "block"]}], "class_name": "NSDictionary", "method_declar": "func enumerateKeysAndObjects(options opts: NSEnumerationOptions = [], using block: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Return an iterator over the elements of this sequence.", "method_name": "makeIterator", "params": [], "class_name": "NSDictionary", "method_declar": "func makeIterator() -> NSDictionary.Iterator", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDictionary.Iterato"]}, "is_static": false}, {"method_description": "Returns an array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values.", "method_name": "keysSortedByValue", "params": [{"param_type": "Selector", "param_description": "A selector that specifies the method to use to compare the values in the dictionary.The comparator method should return NSOrderedAscending if the dictionary value is smaller than the argument, NSOrderedDescending if the dictionary value is larger than the argument, and NSOrderedSame if they are equal.", "param_name": ["using", "comparator"]}], "class_name": "NSDictionary", "method_declar": "func keysSortedByValue(using comparator: Selector) -> [Any]", "return_value": {"return_description": ["An array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Returns an array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values using a given comparator block. ", "method_name": "keysSortedByValue", "params": [{"param_type": "(Any, Any) -> ComparisonResult", "param_description": "A comparator block.", "param_name": ["comparator", "cmptr"]}], "class_name": "NSDictionary", "method_declar": "func keysSortedByValue(comparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]", "return_value": {"return_description": ["An array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values using cmptr."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Returns an array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values using a given comparator block and a specified set of options. ", "method_name": "keysSortedByValue", "params": [{"param_type": "NSSortOptions", "param_description": "A bitmask of sort options.", "param_name": ["options", "opts"]}, {"param_type": "(Any, Any) -> ComparisonResult", "param_description": "A comparator block.", "param_name": ["usingComparator", "cmptr"]}], "class_name": "NSDictionary", "method_declar": "func keysSortedByValue(options opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]", "return_value": {"return_description": ["An array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values using cmptr with the options given in opts."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Returns the set of keys whose corresponding value satisfies a constraint described by a block object.", "method_name": "keysOfEntries", "params": [{"param_type": "(Any, Any, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "A block object that specifies constraints for values in the dictionary.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSDictionary", "method_declar": "func keysOfEntries(passingTest predicate: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>", "return_value": {"return_description": ["The set of keys whose corresponding value satisfies predicate."], "return_name": [""], "return_type": ["Set<AnyHashable"]}, "is_static": false}, {"method_description": "Returns the set of keys whose corresponding value satisfies a constraint described by a block object.", "method_name": "keysOfEntries", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bit mask of enumeration options.", "param_name": ["options", "opts"]}, {"param_type": "(Any, Any, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "A block object that specifies constraints for values in the dictionary.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSDictionary", "method_declar": "func keysOfEntries(options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>", "return_value": {"return_description": ["The set of keys whose corresponding value satisfies predicate."], "return_name": [""], "return_type": ["Set<AnyHashable"]}, "is_static": false}, {"method_description": "Writes a property list representation of the contents of the dictionary to a given URL.", "method_name": "write", "params": [{"param_type": "URL", "param_description": "The URL to which to write the dictionary.", "param_name": ["to", "url"]}], "class_name": "NSDictionary", "method_declar": "func write(to url: URL) throws", "return_value": {"return_description": ["true if the location is written successfully, otherwise false."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Writes a property list representation of the contents of the dictionary to a given URL.DeprecatedUse write(to:) instead.", "method_name": "write", "params": [{"param_type": "URL", "param_description": "", "param_name": ["to", "url"]}, {"param_type": "Bool", "param_description": "", "param_name": ["atomically"]}], "class_name": "NSDictionary", "method_declar": "func write(to url: URL, atomically: Bool) -> Bool", "return_value": {"return_description": ["true if the location is written successfully, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Writes a property list representation of the contents of the dictionary to a given path.DeprecatedUse write(to:) instead.", "method_name": "write", "params": [{"param_type": "String", "param_description": "The path at which to write the file.If path contains a tilde (~) character, you must expand it with expandingTildeInPath before invoking this method.", "param_name": ["toFile", "path"]}, {"param_type": "Bool", "param_description": "", "param_name": ["atomically", "useAuxiliaryFile"]}], "class_name": "NSDictionary", "method_declar": "func write(toFile path: String, atomically useAuxiliaryFile: Bool) -> Bool", "return_value": {"return_description": ["true if the file is written successfully, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns the file\u2019s size, in bytes.", "method_name": "fileSize", "params": [], "class_name": "NSDictionary", "method_declar": "func fileSize() -> UInt64", "return_value": {"return_description": ["The value associated with the size file attributes key, as a UInt64, or 0 if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["UInt6"]}, "is_static": false}, {"method_description": "Returns the file type.", "method_name": "fileType", "params": [], "class_name": "NSDictionary", "method_declar": "func fileType() -> String?", "return_value": {"return_description": ["The value associated with the type file attributes key, or nil if the file attributes dictionary has no entry for the key. For possible values, see FileAttributeType."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Returns the file\u2019s creation date.", "method_name": "fileCreationDate", "params": [], "class_name": "NSDictionary", "method_declar": "func fileCreationDate() -> Date?", "return_value": {"return_description": ["The value associated with the creationDate file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Returns file\u2019s modification date.", "method_name": "fileModificationDate", "params": [], "class_name": "NSDictionary", "method_declar": "func fileModificationDate() -> Date?", "return_value": {"return_description": ["The value associated with the modificationDate file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Returns the file\u2019s POSIX permissions.", "method_name": "filePosixPermissions", "params": [], "class_name": "NSDictionary", "method_declar": "func filePosixPermissions() -> Int", "return_value": {"return_description": ["The value associated with the posixPermissions file attributes key as an Int, or 0 if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the file\u2019s owner account ID.", "method_name": "fileOwnerAccountID", "params": [], "class_name": "NSDictionary", "method_declar": "func fileOwnerAccountID() -> NSNumber?", "return_value": {"return_description": ["The value associated with the ownerAccountID file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["NSNumbe"]}, "is_static": false}, {"method_description": "Returns the file\u2019s owner account name.", "method_name": "fileOwnerAccountName", "params": [], "class_name": "NSDictionary", "method_declar": "func fileOwnerAccountName() -> String?", "return_value": {"return_description": ["The value associated with the ownerAccountName file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Returns file\u2019s group owner account ID.", "method_name": "fileGroupOwnerAccountID", "params": [], "class_name": "NSDictionary", "method_declar": "func fileGroupOwnerAccountID() -> NSNumber?", "return_value": {"return_description": ["The value associated with the groupOwnerAccountID file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["NSNumbe"]}, "is_static": false}, {"method_description": "Returns the file\u2019s group owner account name.", "method_name": "fileGroupOwnerAccountName", "params": [], "class_name": "NSDictionary", "method_declar": "func fileGroupOwnerAccountName() -> String?", "return_value": {"return_description": ["The value associated with the groupOwnerAccountName file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the file hides its extension.", "method_name": "fileExtensionHidden", "params": [], "class_name": "NSDictionary", "method_declar": "func fileExtensionHidden() -> Bool", "return_value": {"return_description": ["The value associated with the extensionHidden file attributes key, or false if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the file is immutable.", "method_name": "fileIsImmutable", "params": [], "class_name": "NSDictionary", "method_declar": "func fileIsImmutable() -> Bool", "return_value": {"return_description": ["The value associated with the immutable file attributes key, or false if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether the file is append only.", "method_name": "fileIsAppendOnly", "params": [], "class_name": "NSDictionary", "method_declar": "func fileIsAppendOnly() -> Bool", "return_value": {"return_description": ["The value associated with the appendOnly file attributes key, or false if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns the filesystem file number.", "method_name": "fileSystemFileNumber", "params": [], "class_name": "NSDictionary", "method_declar": "func fileSystemFileNumber() -> Int", "return_value": {"return_description": ["The value associated with the systemFileNumber file attributes key as an Int, or 0 if the file attributes dictionary has no entry for the key"], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the filesystem number.", "method_name": "fileSystemNumber", "params": [], "class_name": "NSDictionary", "method_declar": "func fileSystemNumber() -> Int", "return_value": {"return_description": ["The value associated with the systemNumber file attributes key as an Int, or 0 if the file attributes dictionary has no entry for the key"], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns file\u2019s HFS type code.", "method_name": "fileHFSTypeCode", "params": [], "class_name": "NSDictionary", "method_declar": "func fileHFSTypeCode() -> OSType", "return_value": {"return_description": ["The value associated with the hfsTypeCode file attributes key, or 0 if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["OSTyp"]}, "is_static": false}, {"method_description": "Returns the file\u2019s HFS creator code.", "method_name": "fileHFSCreatorCode", "params": [], "class_name": "NSDictionary", "method_declar": "func fileHFSCreatorCode() -> OSType", "return_value": {"return_description": ["The value associated with the hfsCreatorCode file attributes key, or 0 if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["OSTyp"]}, "is_static": false}, {"method_description": "Returns a string object that represents the contents of the dictionary, formatted as a property list.", "method_name": "description", "params": [{"param_type": "Any", "param_description": "An object that specifies options used for formatting each of the dictionary\u2019s keys and values; pass nil if you don\u2019t want them formatted.On iOS and macOS 10.5 and later, either an instance of NSDictionary or an NSLocale object may be used for locale. In OS X v10.4 and earlier it must be an instance of NSDictionary.", "param_name": ["withLocale", "locale"]}], "class_name": "NSDictionary", "method_declar": "func description(withLocale locale: Any?) -> String", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Returns a string object that represents the contents of the dictionary, formatted as a property list.", "method_name": "description", "params": [{"param_type": "Any", "param_description": "An object that specifies options used for formatting each of the dictionary\u2019s keys and values; pass nil if you don\u2019t want them formatted.On iOS and macOS 10.5 and later, either an instance of NSDictionary or an NSLocale object may be used for locale. In OS X v10.4 and earlier it must be an instance of NSDictionary.", "param_name": ["withLocale", "locale"]}, {"param_type": "Int", "param_description": "Specifies a level of indentation, to make the output more readable: the indentation is (4 spaces) * level. ", "param_name": ["indent", "level"]}], "class_name": "NSDictionary", "method_declar": "func description(withLocale locale: Any?, indent level: Int) -> String", "return_value": {"return_description": ["A string object that represents the contents of the dictionary, formatted as a property list."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSDictionary", "typealias": [], "Vars": [{"var_description": "The number of entries in the dictionary.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "A new array containing the dictionary\u2019s keys, or an empty array if the dictionary has no entries.", "var_type": "[Any]", "is_static": false, "var_name": "allKeys"}, {"var_description": "A new array containing the dictionary\u2019s values, or an empty array if the dictionary has no entries.", "var_type": "[Any]", "is_static": false, "var_name": "allValues"}, {"var_description": "A string that represents the contents of the dictionary, formatted as a property list.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A string that represents the contents of the dictionary, formatted in .strings file format.", "var_type": "String", "is_static": false, "var_name": "descriptionInStringsFileFormat"}, {"var_description": "A mirror that reflects the dictionary.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}], "class_type": "class", "interface_list": ["CustomReflectable", "CVarArg", "Equatable", "ExpressibleByDictionaryLiteral", "Hashable", "NSCopying", "NSFastEnumeration", "NSFetchRequestResult", "NSMutableCopying", "NSSecureCoding", "Sequence"], "package_name": "foundation", "subclass_list": []}