{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [""], "return_description": ["The default credential for space or nil if no default has been set."], "return_type": ["URLCredentia"]}, "method_description": "Returns the default credential for the specified protection space.", "is_static": false, "method_name": "defaultCredential", "class_name": "URLCredentialStorage", "method_declar": "func defaultCredential(for space: URLProtectionSpace) -> URLCredential?", "params": [{"param_type": "URLProtectionSpace", "param_description": "The URL protection space of interest.", "param_name": ["for", "space"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Gets the default credential for the specified protection space, which is being accessed by the given task, and passes it to the provided completion handler.", "is_static": false, "method_name": "getDefaultCredential", "class_name": "URLCredentialStorage", "method_declar": "func getDefaultCredential(for space: URLProtectionSpace, task: URLSessionTask, completionHandler: @escaping (URLCredential?) -> Void)", "params": [{"param_type": "URLProtectionSpace", "param_description": "The protection space of interest.", "param_name": ["for", "space"]}, {"param_type": "URLSessionTask", "param_description": "The task seeking to use the protection space", "param_name": ["task"]}, {"param_type": "@escaping (URLCredential) -> Void", "param_description": "A completion handler that receives the default credential as its argument, or nil if there is no default credential for this combination of protection space and task.", "param_name": ["completionHandler"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the default credential for a specified protection space.", "is_static": false, "method_name": "setDefaultCredential", "class_name": "URLCredentialStorage", "method_declar": "func setDefaultCredential(_ credential: URLCredential, for space: URLProtectionSpace)", "params": [{"param_type": "URLCredential", "param_description": "The URL credential to set as the default for space. If the receiver does not contain credential in the specified protection space it will be added.", "param_name": ["credential"]}, {"param_type": "URLProtectionSpace", "param_description": "The protection space whose default credential is being set.", "param_name": ["for", "space"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the default credential for a given protection space, which is being accessed by the given task.", "is_static": false, "method_name": "setDefaultCredential", "class_name": "URLCredentialStorage", "method_declar": "func setDefaultCredential(_ credential: URLCredential, for protectionSpace: URLProtectionSpace, task: URLSessionTask)", "params": [{"param_type": "URLCredential", "param_description": "The URL credential to set as the default for the protection space. If the receiver does not contain credential in the specified protection space it will be added.", "param_name": ["credential"]}, {"param_type": "URLProtectionSpace", "param_description": "The protection space whose default credential is being set.", "param_name": ["for", "protectionSpace"]}, {"param_type": "URLSessionTask", "param_description": "The task accessing the specified protection space. Subclasses of URLCredentialStorage may use the request URL or other properties of this task to affect how the default credential is stored.", "param_name": ["task"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the specified credential from the credential storage for the specified protection space.", "is_static": false, "method_name": "remove", "class_name": "URLCredentialStorage", "method_declar": "func remove(_ credential: URLCredential, for space: URLProtectionSpace)", "params": [{"param_type": "URLCredential", "param_description": "The credential to remove.", "param_name": ["credential"]}, {"param_type": "URLProtectionSpace", "param_description": "The protection space from which to remove the credential.", "param_name": ["for", "space"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the specified credential from the credential storage for the specified protection space using the given options.", "is_static": false, "method_name": "remove", "class_name": "URLCredentialStorage", "method_declar": "func remove(_ credential: URLCredential, for space: URLProtectionSpace, options: [String : Any]? = nil)", "params": [{"param_type": "URLCredential", "param_description": "The credential to remove.", "param_name": ["credential"]}, {"param_type": "URLProtectionSpace", "param_description": "The protection space from which to remove the credential.", "param_name": ["for", "space"]}, {"param_type": "[String", "param_description": "A dictionary containing options to consider when removing the credential.For possible keys, see Dictionary Key for Credential Removal Options. You should use this when trying to delete a credential that has the URLCredential.Persistence.synchronizable policy.NoteWhen credential objects that have a URLCredential.Persistence.synchronizable policy are removed, the credential will be removed on all devices that contain this credential.", "param_name": ["options"]}, {"param_type": "Any] = nil", "param_description": "", "param_name": ["[String"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the specified credential from the credential storage for the specified protection space, on behalf of the given task and using the given options.", "is_static": false, "method_name": "remove", "class_name": "URLCredentialStorage", "method_declar": "func remove(_ credential: URLCredential, for protectionSpace: URLProtectionSpace, options: [String : Any]? = nil, task: URLSessionTask)", "params": [{"param_type": "URLCredential", "param_description": "The credential to remove.", "param_name": ["credential"]}, {"param_type": "URLProtectionSpace", "param_description": "The protection space from which to remove the credential.", "param_name": ["for", "protectionSpace"]}, {"param_type": "[String", "param_description": "A dictionary containing options to consider when removing the credential.For possible keys, see Dictionary Key for Credential Removal Options. You should use this when trying to delete a credential that has the URLCredential.Persistence.synchronizable policy.NoteWhen credential objects that have a synchronizable policy are removed, the credential will be removed on all devices that contain this credential.", "param_name": ["options"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[String"]}, {"param_type": "URLSessionTask", "param_description": "The task using the protection space that you wish to remove the credential for.", "param_name": ["task"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Adds a credential to the credential storage for the specified protection space. ", "is_static": false, "method_name": "set", "class_name": "URLCredentialStorage", "method_declar": "func set(_ credential: URLCredential, for space: URLProtectionSpace)", "params": [{"param_type": "URLCredential", "param_description": "The credential to add. If a credential with the same user name already exists in space, then credential replaces the existing object.", "param_name": ["credential"]}, {"param_type": "URLProtectionSpace", "param_description": "The protection space to which to add the credential. ", "param_name": ["for", "space"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Adds a credential to the credential storage for the specified protection space, on behalf of the specified task.", "is_static": false, "method_name": "set", "class_name": "URLCredentialStorage", "method_declar": "func set(_ credential: URLCredential, for protectionSpace: URLProtectionSpace, task: URLSessionTask)", "params": [{"param_type": "URLCredential", "param_description": "The credential to add. If a credential with the same user name already exists in space, then credential replaces the existing object.", "param_name": ["credential"]}, {"param_type": "URLProtectionSpace", "param_description": "The protection space to which to add the credential. ", "param_name": ["for", "protectionSpace"]}, {"param_type": "URLSessionTask", "param_description": "The task accessing the specified protection space. Subclasses of URLCredentialStorage may use the request URL or other properties of this task to affect how the default credential is stored.", "param_name": ["task"]}]}, {"return_value": {"return_name": [["[String"]], "return_description": ["A dictionary containing the credentials for the specified protection space. The dictionary\u2019s keys are user name strings, and each value is the corresponding URLCredential."], "return_type": ["URLCredential"]}, "method_description": "Returns a dictionary containing the credentials for the specified protection space.", "is_static": false, "method_name": "credentials", "class_name": "URLCredentialStorage", "method_declar": "func credentials(for space: URLProtectionSpace) -> [String : URLCredential]?", "params": [{"param_type": "URLProtectionSpace", "param_description": "The protection space whose credentials you want to retrieve.", "param_name": ["for", "space"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "Gets a dictionary containing the credentials for the specified protection space, on behalf of the given task, and passes the dictionary to the provided completion handler.", "is_static": false, "method_name": "getCredentials", "class_name": "URLCredentialStorage", "method_declar": "func getCredentials(for protectionSpace: URLProtectionSpace, task: URLSessionTask, completionHandler: @escaping ([String : URLCredential]?) -> Void)", "params": [{"param_type": "URLProtectionSpace", "param_description": "The protection space whose credentials you want to retrieve.", "param_name": ["for", "protectionSpace"]}, {"param_type": "URLSessionTask", "param_description": "The task accessing the specified protection space.", "param_name": ["task"]}, {"param_type": "@escaping ([String", "param_description": "A completion handler that receives a single argument with the credentials for the specified protection space and task. The dictionary\u2019s keys are user name strings, and the corresponding value is a URLCredential. If no credential has been set for this space, the argument to the completion handler is nil.", "param_name": ["completionHandler"]}, {"param_type": "URLCredential]) -> Void", "param_description": "", "param_name": ["@escaping", "([String"]}]}], "class_type": "class", "class_name": "URLCredentialStorage", "Vars": [{"var_name": "shared", "var_type": "URLCredentialStorage", "var_description": "The shared URL credential storage instance.", "is_static": false}, {"var_name": "NSURLCredentialStorageRemoveSynchronizableCredentials", "var_type": "String", "var_description": "The corresponding value is an NSNumber object representing a Boolean value that indicates whether credentials which contain the URLCredential.Persistence.synchronizable attribute should be removed.", "is_static": false}, {"var_name": "allCredentials", "var_type": "[URLProtectionSpace", "var_description": "The credentials for all available protection spaces.", "is_static": false}, {"var_name": "NSURLCredentialStorageChanged", "var_type": "NSNotification.Name", "var_description": "A notification posted when the set of stored credentials changes.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "The shared cache stores and retrieves instances of URLCredential. You can store password-based credentials permanently, based on the URLCredential.Persistence they were created with. Certificate-based credentials are never stored permanently.\nThe URLCredentialStorage class is meant to be used as-is, but you can subclass it if you have specific needs, such as screening which credentials are stored.\nWhen overriding methods of this class, be aware that methods that take a task parameter are preferred to equivalent methods that do not. Therefore, you should override the task-based methods when subclassing, as follows:\nSetting credentials \u2014 Override set(_:for:task:) instead of or in addition to set(_:for:).\nGetting credentials \u2014 Override getCredentials(for:task:completionHandler:) instead of or in addition to credentials(for:).\nRemoving credentials \u2014 Override remove(_:for:options:task:) instead of or in addition to remove(_:for:options:) and remove(_:for:).\nSetting default credentials \u2014 Override setDefaultCredential(_:for:task:) instead of or in addition to setDefaultCredential(_:for:).\nGetting default credentials \u2014 Override getDefaultCredential(for:task:completionHandler:) instead of or in addition to defaultCredential(for:).\n\n", "package_name": "foundation"}