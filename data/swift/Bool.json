{"Methods": [], "Vars": [], "class_name": "Bool", "interface_list": ["CKRecordValueProtocol", "CustomPlaygroundQuickLookable", "CustomReflectable", "CustomStringConvertible", "CVarArg", "Equatable", "ExpressibleByBooleanLiteral", "Hashable", "LosslessStringConvertible"], "class_description": "Bool represents Boolean values in Swift. Create instances of Bool by using one of the Boolean literals true or false, or by assigning the result of a Boolean method or operation to a variable or constant.\nSwift uses only simple Boolean values in conditional contexts to help avoid accidental programming errors and to help maintain the clarity of each control statement. Unlike in other programming languages, in Swift, integers and strings cannot be used where a Boolean value is required.\nFor example, the following code sample does not compile, because it attempts to use the integer i in a logical context:\nThe correct approach in Swift is to compare the i value with zero in the while statement.\nThe C bool and Boolean types and the Objective-C BOOL type are all bridged into Swift as Bool. The single Bool type in Swift guarantees that functions, methods, and properties imported from C and Objective-C have a consistent type interface.\n", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}