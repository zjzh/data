{"package_name": "foundation", "subclass_list": [], "class_description": "Whereas a notification center distributes notifications when posted, notifications placed into the queue can be delayed until the end of the current pass through the run loop or until the run loop is idle. Duplicate notifications can be coalesced so that only one notification is sent although multiple notifications are posted. \nA notification queue maintains notifications in first in, first out (FIFO) order. When a notification moves to the front of the queue, the queue posts it to the notification center, which in turn dispatches the notification to all objects registered as observers.\nEvery thread has a default notification queue, which is associated with the default notification center for the process. You can create your own notification queues and have multiple queues per center and thread.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["notificationCenter"], "param_type": "NotificationCenter", "param_description": "The notification center to be used by the notification queue."}], "class_name": "NotificationQueue", "is_static": false, "return_value": {"return_name": [], "return_description": ["The newly initialized notification queue."], "return_type": []}, "method_name": "init", "method_description": "Initializes and returns a notification queue for the specified notification center.", "method_declar": "init(notificationCenter: NotificationCenter)"}, {"params": [{"param_name": ["notification"], "param_type": "Notification", "param_description": "The notification to add to the queue."}, {"param_name": ["postingStyle"], "param_type": "NotificationQueue.PostingStyle", "param_description": "The posting style for the notification. The posting style indicates when the notification queue should post the notification to its notification center."}, {"param_name": ["coalesceMask"], "param_type": "NotificationQueue.NotificationCoalescing", "param_description": "A mask indicating what criteria to use when matching attributes of notification to attributes of notifications in the queue. The mask is created by combining any of the constants none, onName, and onSender."}, {"param_name": ["forModes", "modes"], "param_type": "[RunLoop.Mode]", "param_description": "The list of modes the notification may be posted in. The notification queue will only post the notification to its notification center if the run loop is in one of the modes provided in the array. This parameter may be nil, in which case it defaults to default."}], "class_name": "NotificationQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "enqueue", "method_description": "Adds a notification to the notification queue with a specified posting style, criteria for coalescing, and run loop mode.", "method_declar": "func enqueue(_ notification: Notification, postingStyle: NotificationQueue.PostingStyle, coalesceMask: NotificationQueue.NotificationCoalescing, forModes modes: [RunLoop.Mode]?)"}, {"params": [{"param_name": ["notification"], "param_type": "Notification", "param_description": "The notification to add to the queue."}, {"param_name": ["postingStyle"], "param_type": "NotificationQueue.PostingStyle", "param_description": "The posting style for the notification. The posting style indicates when the notification queue should post the notification to its notification center."}], "class_name": "NotificationQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "enqueue", "method_description": "Adds a notification to the notification queue with a specified posting style.", "method_declar": "func enqueue(_ notification: Notification, postingStyle: NotificationQueue.PostingStyle)"}, {"params": [{"param_name": ["matching", "notification"], "param_type": "Notification", "param_description": "The notification used for matching notifications to remove from the notification queue."}, {"param_name": ["coalesceMask"], "param_type": "Int", "param_description": "A mask indicating what criteria to use when matching attributes of notification to attributes of notifications in the queue. The mask is created by combining any of the constants none, onName, and onSender."}], "class_name": "NotificationQueue", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "dequeueNotifications", "method_description": "Removes all notifications from the queue that match a provided notification using provided matching criteria.", "method_declar": "func dequeueNotifications(matching notification: Notification, coalesceMask: Int)"}], "class_name": "NotificationQueue", "Vars": [{"var_description": "Returns the default notification queue for the current thread.", "var_type": "NotificationQueue", "is_static": false, "var_name": "`default`"}]}