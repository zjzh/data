{"class_description": "OutputStream is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFWriteStream. For more information on toll-free bridging, see Toll-Free Bridging.\nNSOutputStream is a concrete subclass of NSStream that lets you write data to a stream. Although NSOutputStream is probably sufficient for most situations requiring this capability, you can create a subclass of NSOutputStream if you want more specialized behavior (for example, you want to record statistics on the data in a stream).\nTo create a subclass of NSOutputStream you may have to implement initializers for the type of stream data supported and suitably reimplement existing initializers. You must also provide complete implementations of the following methods:\nwrite(_:maxLength:)\nFrom the current write pointer, take up to the number of bytes specified in the maxLength: parameter from the client-supplied buffer (first parameter) and put them onto the stream. The buffer must be of the size specified by the second parameter. To prepare for the next operation, offset the write pointer by the number of bytes written. Return a signed integer based on the outcome of the current operation:\nIf the write operation is successful, return the actual number of bytes put onto the stream.\nIf the stream is of a fixed length and has reached its capacity, return 0.\nIf there was an error writing to the stream, return -1.\nhasSpaceAvailable\nReturn true if the stream can currently accept more data, false if it cannot. If you want to be semantically compatible with NSOutputStream, return true if a write must be attempted to determine if space is available.\n", "Methods": [], "class_inherit_list": ["Stream"], "class_name": "OutputStream", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}