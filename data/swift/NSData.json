{"class_description": "NSData and its mutable subclass NSMutableData provide data objects, or object-oriented wrappers for byte buffers. Data objects let simple allocated buffers (that is, data with no embedded pointers) take on the behavior of Foundation objects. \nThe size of the data is subject to a theoretical limit of about 8 exabytes (1 EB = 10\u00b9\u2078 bytes; in practice, the limit should not be a factor).\nNSData is toll-free bridged with its Core Foundation counterpart, CFData. See Toll-Free Bridging for more information on toll-free bridging.\nImportant\nThe Swift overlay to the Foundation framework provides the Data structure, which bridges to the NSData class and its mutable subclass NSMutableData. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\nNSData provides methods for atomically saving their contents to a file, which guarantee that the data is either saved in its entirety, or it fails completely. An atomic write first writes the data to a temporary file and then, only if this write succeeds, moves the temporary file to its final location.\nAlthough atomic write operations minimize the risk of data loss due to corrupt or partially written files, they may not be appropriate when writing to a temporary directory, the user\u2019s home directory or other publicly accessible directories. When you work with a publicly accessible file, treat that file as an untrusted and potentially dangerous resource. An attacker may compromise or corrupt these files. The attacker can also replace the files with hard or symbolic links, causing your write operations to overwrite or corrupt other system resources.\nAvoid using the write(to:atomically:) method (and the related methods) when working inside a publicly accessible directory. Instead, use FileHandle with an existing file descriptor to securely write the file.\nFor more information, see Securing File Operations in Secure Coding Guide.\n", "Methods": [{"method_description": "Initializes a data object filled with a given number of bytes copied from a given buffer.", "method_name": "init", "params": [{"param_type": "UnsafeRawPointer", "param_description": "", "param_name": ["bytes"]}, {"param_type": "Int", "param_description": "", "param_name": ["length"]}], "class_name": "NSData", "method_declar": "init(bytes: UnsafeRawPointer?, length: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object filled with a given number of bytes of data from a given buffer.", "method_name": "init", "params": [{"param_type": "UnsafeMutableRawPointer", "param_description": "A buffer containing data for the new object. bytes must point to a memory block allocated with malloc.", "param_name": ["bytesNoCopy", "bytes"]}, {"param_type": "Int", "param_description": "The number of bytes to hold from bytes. This value must not exceed the length of bytes.", "param_name": ["length"]}], "class_name": "NSData", "method_declar": "init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int)", "return_value": {"return_description": ["A data object initialized by adding to it length bytes of data from the buffer bytes. The returned object might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object filled with a given number of bytes of data from a given buffer, with a custom deallocator block.", "method_name": "init", "params": [{"param_type": "UnsafeMutableRawPointer", "param_description": "A buffer containing data for the new object.", "param_name": ["bytesNoCopy", "bytes"]}, {"param_type": "Int", "param_description": "The number of bytes to hold from bytes. This value must not exceed the length of bytes.", "param_name": ["length"]}, {"param_type": "((UnsafeMutableRawPointer, Int) -> Void) = nil", "param_description": "A block to invoke when the resulting NSData object is deallocated.", "param_name": ["deallocator"]}], "class_name": "NSData", "method_declar": "init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, deallocator: ((UnsafeMutableRawPointer, Int) -> Void)? = nil)", "return_value": {"return_description": ["A data object initialized by adding to it length bytes of data from the buffer bytes. The returned object might be different than the original receiver."], "return_name": [""], "return_type": ["Void = nil"]}, "is_static": false}, {"method_description": "Initializes a newly allocated data object by adding the given number of bytes from the given buffer.", "method_name": "init", "params": [{"param_type": "UnsafeMutableRawPointer", "param_description": "A buffer containing data for the new object. If flag is true, bytes must point to a memory block allocated with malloc. ", "param_name": ["bytesNoCopy", "bytes"]}, {"param_type": "Int", "param_description": "The number of bytes to hold from bytes. This value must not exceed the length of bytes.", "param_name": ["length"]}, {"param_type": "Bool", "param_description": "", "param_name": ["freeWhenDone", "b"]}], "class_name": "NSData", "method_declar": "init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, freeWhenDone b: Bool)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object with the contents of another data object.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "A data object.", "param_name": ["data"]}], "class_name": "NSData", "method_declar": "init(data: Data)", "return_value": {"return_description": ["A data object initialized with the contents data."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object with the content of the file at a given path.", "method_name": "init", "params": [{"param_type": "String", "param_description": "The absolute path of the file from which to read data.", "param_name": ["contentsOfFile", "path"]}], "class_name": "NSData", "method_declar": "init?(contentsOfFile path: String)", "return_value": {"return_description": ["A data object initialized by reading into it the data from the file specified by path."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object with the content of the file at a given path.", "method_name": "init", "params": [{"param_type": "String", "param_description": "The absolute path of the file from which to read data.", "param_name": ["contentsOfFile", "path"]}, {"param_type": "NSData.ReadingOptions = []", "param_description": "", "param_name": ["options", "readOptionsMask"]}], "class_name": "NSData", "method_declar": "init(contentsOfFile path: String, options readOptionsMask: NSData.ReadingOptions = []) throws", "return_value": {"return_description": ["A data object initialized by reading into it the data from the file specified by path."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object with the data from the location specified by a given URL.", "method_name": "init", "params": [{"param_type": "URL", "param_description": "", "param_name": ["contentsOf", "url"]}], "class_name": "NSData", "method_declar": "init?(contentsOf url: URL)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object with the data from the location specified by a given URL.", "method_name": "init", "params": [{"param_type": "URL", "param_description": "", "param_name": ["contentsOf", "url"]}, {"param_type": "NSData.ReadingOptions = []", "param_description": "", "param_name": ["options", "readOptionsMask"]}], "class_name": "NSData", "method_declar": "init(contentsOf url: URL, options readOptionsMask: NSData.ReadingOptions = []) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object with the contents of the mapped file specified by a given path.", "method_name": "init", "params": [{"param_type": "String", "param_description": "The absolute path of the file from which to read data.", "param_name": ["contentsOfMappedFile", "path"]}], "class_name": "NSData", "method_declar": "init?(contentsOfMappedFile path: String)", "return_value": {"return_description": ["A data object initialized by reading into it the mapped file specified by path."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a data object from the mapped file at a given path.", "method_name": "dataWithContentsOfMappedFile", "params": [{"param_type": "String", "param_description": "The absolute path of the file from which to read data.", "param_name": ["path"]}], "class_name": "NSData", "method_declar": "class func dataWithContentsOfMappedFile(_ path: String) -> Any?", "return_value": {"return_description": [], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Writes the data object's bytes to the file specified by a given path.", "method_name": "write", "params": [{"param_type": "String", "param_description": "The location to which to write the receiver's bytes. If path contains a tilde (~) character, you must expand it with expandingTildeInPath before invoking this method. ", "param_name": ["toFile", "path"]}, {"param_type": "Bool", "param_description": "If true, the data is written to a backup file, and then\u2014assuming no errors occur\u2014the backup file is renamed to the name specified by path; otherwise, the data is written directly to path. ", "param_name": ["atomically", "useAuxiliaryFile"]}], "class_name": "NSData", "method_declar": "func write(toFile path: String, atomically useAuxiliaryFile: Bool) -> Bool", "return_value": {"return_description": ["true if the operation succeeds, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Writes the data object's bytes to the file specified by a given path.", "method_name": "write", "params": [{"param_type": "String", "param_description": "The location to which to write the receiver's bytes.", "param_name": ["toFile", "path"]}, {"param_type": "NSData.WritingOptions = []", "param_description": "", "param_name": ["options", "writeOptionsMask"]}], "class_name": "NSData", "method_declar": "func write(toFile path: String, options writeOptionsMask: NSData.WritingOptions = []) throws", "return_value": {"return_description": ["true if the operation succeeds, otherwise false."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Writes the data object's bytes to the location specified by a given URL.", "method_name": "write", "params": [{"param_type": "URL", "param_description": "", "param_name": ["to", "url"]}, {"param_type": "Bool", "param_description": "If true, the data is written to a backup location, and then\u2014assuming no errors occur\u2014the backup location is renamed to the name specified by aURL; otherwise, the data is written directly to aURL. atomically is ignored if aURL is not of a type the supports atomic writes.", "param_name": ["atomically"]}], "class_name": "NSData", "method_declar": "func write(to url: URL, atomically: Bool) -> Bool", "return_value": {"return_description": ["true if the operation succeeds, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Writes the data object's bytes to the location specified by a given URL.", "method_name": "write", "params": [{"param_type": "URL", "param_description": "", "param_name": ["to", "url"]}, {"param_type": "NSData.WritingOptions = []", "param_description": "", "param_name": ["options", "writeOptionsMask"]}], "class_name": "NSData", "method_declar": "func write(to url: URL, options writeOptionsMask: NSData.WritingOptions = []) throws", "return_value": {"return_description": ["true if the operation succeeds, otherwise false."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object with the given Base64 encoded data.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "A Base64, UTF-8 encoded data object.", "param_name": ["base64Encoded", "base64Data"]}, {"param_type": "NSData.Base64DecodingOptions = []", "param_description": "A mask that specifies options for Base64 decoding the data. Possible values are given in NSData.Base64DecodingOptions.", "param_name": ["options"]}], "class_name": "NSData", "method_declar": "init?(base64Encoded base64Data: Data, options: NSData.Base64DecodingOptions = [])", "return_value": {"return_description": ["A data object containing the Base64 decoded data. Returns nil if the data object could not be decoded."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object initialized with the given Base64 encoded string.DeprecatedYou should transition to either init(base64Encoded:options:) or init(base64Encoded:options:).", "method_name": "init", "params": [{"param_type": "String", "param_description": "A Base-64 encoded string.", "param_name": ["base64Encoding", "base64String"]}], "class_name": "NSData", "method_declar": "init?(base64Encoding base64String: String)", "return_value": {"return_description": ["A data object built by Base-64 decoding the provided string. Returns nil if the data object could not be decoded."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a data object with the given Base64 encoded string.", "method_name": "init", "params": [{"param_type": "String", "param_description": "A Base-64 encoded string.", "param_name": ["base64Encoded", "base64String"]}, {"param_type": "NSData.Base64DecodingOptions = []", "param_description": "A mask that specifies options for Base-64 decoding the data. Possible values are given in NSData.Base64DecodingOptions.", "param_name": ["options"]}], "class_name": "NSData", "method_declar": "init?(base64Encoded base64String: String, options: NSData.Base64DecodingOptions = [])", "return_value": {"return_description": ["A data object built by Base64 decoding the provided string. Returns nil if the data object could not be decoded."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a Base64, UTF-8 encoded data object from the string using the given options.", "method_name": "base64EncodedData", "params": [{"param_type": "NSData.Base64EncodingOptions = []", "param_description": "A mask that specifies options for Base64 encoding the data. Possible values are given in NSData.Base64EncodingOptions.", "param_name": ["options"]}], "class_name": "NSData", "method_declar": "func base64EncodedData(options: NSData.Base64EncodingOptions = []) -> Data", "return_value": {"return_description": ["A Base64, UTF-8 encoded data object."], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Creates a Base64 encoded string from the string using the given options.", "method_name": "base64EncodedString", "params": [{"param_type": "NSData.Base64EncodingOptions = []", "param_description": "A mask that specifies options for Base-64 encoding the data. Possible values are given in NSData.Base64EncodingOptions.", "param_name": ["options"]}], "class_name": "NSData", "method_declar": "func base64EncodedString(options: NSData.Base64EncodingOptions = []) -> String", "return_value": {"return_description": ["A Base64 encoded string."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Initializes a Base64 encoded string from the string.DeprecatedYou should transition to either base64EncodedString(options:) or base64EncodedData(options:)", "method_name": "base64Encoding", "params": [], "class_name": "NSData", "method_declar": "func base64Encoding() -> String", "return_value": {"return_description": ["A Base-64 encoded string."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Enumerates each range of bytes in the data object using a block.", "method_name": "enumerateBytes", "params": [{"param_type": "(UnsafeRawPointer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to byte ranges in the array.The block takes three arguments:bytesThe bytes for the current range. This pointer is valid until the data object is deallocated.byteRangeThe range of the current data bytes.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the data. The stop argument is an out-only argument. You should only ever set this Boolean to true within the Block.", "param_name": ["block"]}], "class_name": "NSData", "method_declar": "func enumerateBytes(_ block: (UnsafeRawPointer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Copies a data object\u2019s contents into a given buffer.DeprecatedThis method is unsafe because it could potentially cause buffer overruns. Use getBytes(_:length:) or getBytes(_:range:) instead.", "method_name": "getBytes", "params": [{"param_type": "UnsafeMutableRawPointer", "param_description": "A buffer into which to copy the receiver's data. The buffer must be at least length bytes.", "param_name": ["buffer"]}], "class_name": "NSData", "method_declar": "func getBytes(_ buffer: UnsafeMutableRawPointer)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Copies a number of bytes from the start of the data object into a given buffer. ", "method_name": "getBytes", "params": [{"param_type": "UnsafeMutableRawPointer", "param_description": "A buffer into which to copy data.", "param_name": ["buffer"]}, {"param_type": "Int", "param_description": "The number of bytes from the start of the receiver's data to copy to buffer.", "param_name": ["length"]}], "class_name": "NSData", "method_declar": "func getBytes(_ buffer: UnsafeMutableRawPointer, length: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Copies a range of bytes from the data object into a given buffer.", "method_name": "getBytes", "params": [{"param_type": "UnsafeMutableRawPointer", "param_description": "A buffer into which to copy data.", "param_name": ["buffer"]}, {"param_type": "NSRange", "param_description": "The range of bytes in the receiver's data to copy to buffer. The range must lie within the range of bytes of the receiver's data.", "param_name": ["range"]}], "class_name": "NSData", "method_declar": "func getBytes(_ buffer: UnsafeMutableRawPointer, range: NSRange)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a new data object containing the data object's bytes that fall within the limits specified by a given range.", "method_name": "subdata", "params": [{"param_type": "NSRange", "param_description": "The range in the receiver from which to get the data. If this range is not within the data object's range of bytes, rangeException is raised.", "param_name": ["with", "range"]}], "class_name": "NSData", "method_declar": "func subdata(with range: NSRange) -> Data", "return_value": {"return_description": ["A data object containing the receiver\u2019s bytes that fall within the limits specified by range."], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Finds and returns the range of the first occurrence of the given data, within the given range, subject to given options.", "method_name": "range", "params": [{"param_type": "Data", "param_description": "The data for which to search.", "param_name": ["of", "dataToFind"]}, {"param_type": "NSData.SearchOptions", "param_description": "A mask specifying search options. The NSData.SearchOptions options may be specified singly or by combining them with the C bitwise OR operator.", "param_name": ["options", "mask"]}, {"param_type": "NSRange", "param_description": "The range within the receiver in which to search for dataToFind. If this range is not within the data object's range of bytes, rangeException is raised.", "param_name": ["in", "searchRange"]}], "class_name": "NSData", "method_declar": "func range(of dataToFind: Data, options mask: NSData.SearchOptions = [], in searchRange: NSRange) -> NSRange", "return_value": {"return_description": ["An NSRange structure giving the location and length of dataToFind within searchRange, modulo the options in mask. The range returned is relative to the start of the searched data, not the passed-in search range. Returns {NSNotFound, 0} if dataToFind is not found or is empty."], "return_name": [""], "return_type": ["NSRang"]}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether this data object is the same as another.", "method_name": "isEqual", "params": [{"param_type": "Data", "param_description": "", "param_name": ["to", "other"]}], "class_name": "NSData", "method_declar": "func isEqual(to other: Data) -> Bool", "return_value": {"return_description": ["true if the contents of otherData are equal to the contents of the receiver, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSData", "typealias": [], "Vars": [{"var_description": "A pointer to the data object's contents.", "var_type": "UnsafeRawPointer", "is_static": false, "var_name": "bytes"}, {"var_description": "The number of bytes contained by the data object.", "var_type": "Int", "is_static": false, "var_name": "length"}, {"var_description": "A string that contains a hexadecimal representation of the data object\u2019s contents in a property list format.", "var_type": "String", "is_static": false, "var_name": "description"}], "class_type": "class", "interface_list": ["CKRecordValueProtocol", "CVarArg", "Equatable", "Hashable", "NSCopying", "NSMutableCopying", "NSSecureCoding"], "package_name": "foundation", "subclass_list": []}