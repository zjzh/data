{"package_name": "foundation", "subclass_list": [], "class_description": "A scriptable application provides scriptability information that describes the commands and objects scripters can use in scripts that target the application. An application\u2019s scripting information is collected automatically by an instance of NSScriptSuiteRegistry, which creates an NSScriptCommandDescription for each command it finds, caches these objects in memory, and installs a command handler for each command.\nA script command instance stores the name, class, argument types, and return type of a command. For example, commands in AppleScript\u2019s Core suite include clone, count, create, delete, exists, and move.\nThe public methods of NSScriptCommandDescription are used primarily by Cocoa\u2019s built-in scripting support in responding to Apple events that target the application. Although you can subclass the NSScriptCommandDescription class, it is unlikely that you would need to do so, or to create instances of it.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["suiteName"], "param_type": "String", "param_description": "The name of the suite (in the application\u2019s scriptability information) that the command belongs to. For example, \"AppName Suite\"."}, {"param_name": ["commandName"], "param_type": "String", "param_description": "The name of the script command that this instance describes."}, {"param_name": ["dictionary", "commandDeclaration"], "param_type": "[AnyHashable", "param_description": "A command declaration dictionary of the sort that is valid in script suite property list files. This dictionary provides information about the command such as its argument names and types and return type (if any)."}, {"param_name": ["[AnyHashable"], "param_type": "Any]", "param_description": ""}], "class_name": "NSScriptCommandDescription", "is_static": false, "return_value": {"return_name": [], "return_description": ["The initialized command description instance. Returns nil if the event constant or class name for the command description is missing; also returns nil if the return type or argument values are of the wrong type."], "return_type": []}, "method_name": "init", "method_description": "Initializes and returns a newly allocated instance of NSScriptCommandDescription.", "method_declar": "init?(suiteName: String, commandName: String, dictionary commandDeclaration: [AnyHashable : Any]?)"}, {"params": [{"param_name": ["withName", "argumentName"], "param_type": "String", "param_description": "The argument name (used as a key) for which to obtain the corresponding Apple event code."}], "class_name": "NSScriptCommandDescription", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The code for the specified argument."], "return_type": ["FourCharCod"]}, "method_name": "appleEventCodeForArgument", "method_description": "Returns the Apple event code for the specified command argument of the receiver.", "method_declar": "func appleEventCodeForArgument(withName argumentName: String) -> FourCharCode"}, {"params": [{"param_name": ["withName", "argumentName"], "param_type": "String", "param_description": "Argument name (used as a key) that identifies the command argument to examine."}], "class_name": "NSScriptCommandDescription", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the specified argument exists and is optional; otherwise, false."], "return_type": ["Boo"]}, "method_name": "isOptionalArgument", "method_description": "Returns a Boolean value that indicates whether the command argument identified by the specified argument key is an optional argument.", "method_declar": "func isOptionalArgument(withName argumentName: String) -> Bool"}, {"params": [{"param_name": ["withName", "argumentName"], "param_type": "String", "param_description": "Argument name (used as a key) that identifies the command argument to examine."}], "class_name": "NSScriptCommandDescription", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The type of the specified command argument. Returns nil if there is no such argument."], "return_type": ["Strin"]}, "method_name": "typeForArgument", "method_description": "Returns the type of the command argument identified by the specified key. ", "method_declar": "func typeForArgument(withName argumentName: String) -> String?"}, {"params": [], "class_name": "NSScriptCommandDescription", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The command object, instantiated from NSScriptCommand or a subclass."], "return_type": ["NSScriptComman"]}, "method_name": "createCommandInstance", "method_description": "Creates and returns an instance of the command object described by the receiver.", "method_declar": "func createCommandInstance() -> NSScriptCommand"}, {"params": [{"param_name": ["with", "zone"], "param_type": "NSZone = nil", "param_description": "The memory zone from which to allocate the command."}], "class_name": "NSScriptCommandDescription", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The command object, instantiated from NSScriptCommand or a subclass."], "return_type": ["NSScriptComman"]}, "method_name": "createCommandInstance", "method_description": "Creates and returns an instance of the command object described by the receiver in the specified memory zone.", "method_declar": "func createCommandInstance(with zone: NSZone? = nil) -> NSScriptCommand"}, {"params": [{"param_name": ["coder", "inCoder"], "param_type": "NSCoder", "param_description": ""}], "class_name": "NSScriptCommandDescription", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init?(coder inCoder: NSCoder)"}], "class_name": "NSScriptCommandDescription", "Vars": [{"var_description": "Returns the four-character code for the Apple event class of the receiver\u2019s command.", "var_type": "FourCharCode", "is_static": false, "var_name": "appleEventClassCode"}, {"var_description": "Returns the four-character code for the Apple event ID of the receiver\u2019s command.", "var_type": "FourCharCode", "is_static": false, "var_name": "appleEventCode"}, {"var_description": "Returns the name of the class that will be instantiated to handle the command.", "var_type": "String", "is_static": false, "var_name": "commandClassName"}, {"var_description": "Returns the name of the command.", "var_type": "String", "is_static": false, "var_name": "commandName"}, {"var_description": "Returns the name of the suite that contains the command described by the receiver.", "var_type": "String", "is_static": false, "var_name": "suiteName"}, {"var_description": "Returns the names (or keys) for all arguments of the receiver\u2019s command.", "var_type": "[String]", "is_static": false, "var_name": "argumentNames"}, {"var_description": "Returns the Apple event code that identifies the command\u2019s return type.", "var_type": "FourCharCode", "is_static": false, "var_name": "appleEventCodeForReturnType"}, {"var_description": "Returns the return type of the command.", "var_type": "String", "is_static": false, "var_name": "returnType"}]}