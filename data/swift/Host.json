{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [""], "return_description": ["NSHost object for the process\u2019s host."], "return_type": ["Sel"]}, "method_description": "Returns an NSHost object representing the host the process is running on.", "is_static": false, "method_name": "current", "class_name": "Host", "method_declar": "class func current() -> Self", "params": []}, {"return_value": {"return_name": [], "return_description": ["The host for address."], "return_type": []}, "method_description": "Returns the NSHost with the Internet address address.", "is_static": false, "method_name": "init", "class_name": "Host", "method_declar": "convenience init(address: String)", "params": [{"param_type": "String", "param_description": "Network address to look up. For example, \"127.0.0.1\" or \"fe80::1\".", "param_name": ["address"]}]}, {"return_value": {"return_name": [], "return_description": ["The host named hostname."], "return_type": []}, "method_description": "Returns a host with a specific name.", "is_static": false, "method_name": "init", "class_name": "Host", "method_declar": "convenience init(name: String?)", "params": [{"param_type": "String", "param_description": "", "param_name": ["name"]}]}, {"return_value": {"return_name": [""], "return_description": ["true when the receiver and host share at least one network address; false otherwise."], "return_type": ["Boo"]}, "method_description": "Indicates whether the receiver represents the same host as another NSHost object.", "is_static": false, "method_name": "isEqual", "class_name": "Host", "method_declar": "func isEqual(to aHost: Host) -> Bool", "params": [{"param_type": "Host", "param_description": "", "param_name": ["to", "aHost"]}]}], "class_type": "class", "class_name": "Host", "Vars": [{"var_name": "address", "var_type": "String", "var_description": "Returns one of the network addresses of the receiver.", "is_static": false}, {"var_name": "addresses", "var_type": "[String]", "var_description": "Returns all the network addresses of the receiver.", "is_static": false}, {"var_name": "name", "var_type": "String", "var_description": "Returns one of the hostnames of the receiver.", "is_static": false}, {"var_name": "localizedName", "var_type": "String", "var_description": "Returns the name used as by default when publishing NSNetServices.", "is_static": false}, {"var_name": "names", "var_type": "[String]", "var_description": "Returns all the hostnames of the receiver.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "The Host class provides methods to access the network name and address information for a host. Instances of the Host class represent individual hosts on a network. Use Host objects  to get the current host\u2019s names and addresses and to look up other hosts by name or by address.\nTo create an Host object, use the current(), init(address:), or init(name:) class methods (don\u2019t use alloc and init). These methods use available network administration services to discover all names and addresses for the host requested. They don\u2019t attempt to contact the host itself, however. This approach avoids untimely delays due to a host being unavailable, but it may result in incomplete information about the host.\nAn Host object contains all of the network addresses and names discovered for a given host by the network administration services. Each Host object may contain several addresses and have more than one name. If an Host object has more than one name, the additional names are variations on the same name, typically the basic host name plus the fully qualified domain name. For example, with a host name \"sales\" in the domain \"anycorp.com\", an Host object can hold both the names \"sales\" and \"sales.anycorp.com\".\nHost methods are thread-safe.\n", "package_name": "foundation"}