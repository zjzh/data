{"class_description": "", "Methods": [{"method_description": "Creates an affine transformation matrix with identity values.", "method_name": "init", "params": [], "class_name": "AffineTransform", "method_declar": "init()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an affine transformation.", "method_name": "init", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["m11"]}, {"param_type": "CGFloat", "param_description": "", "param_name": ["m12"]}, {"param_type": "CGFloat", "param_description": "", "param_name": ["m21"]}, {"param_type": "CGFloat", "param_description": "", "param_name": ["m22"]}, {"param_type": "CGFloat", "param_description": "", "param_name": ["tX"]}, {"param_type": "CGFloat", "param_description": "", "param_name": ["tY"]}], "class_name": "AffineTransform", "method_declar": "init(m11: CGFloat, m12: CGFloat, m21: CGFloat, m22: CGFloat, tX: CGFloat, tY: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an affine transformation matrix from a rotation value (angle in degrees). The matrix takes the following form:", "method_name": "init", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["rotationByDegrees", "angle"]}], "class_name": "AffineTransform", "method_declar": "init(rotationByDegrees angle: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an affine transformation matrix from rotation value (angle in radians). The matrix takes the following form:", "method_name": "init", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["rotationByRadians", "angle"]}], "class_name": "AffineTransform", "method_declar": "init(rotationByRadians angle: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an affine transformation matrix from scaling a single value. The matrix takes the following form:", "method_name": "init", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["scale", "factor"]}], "class_name": "AffineTransform", "method_declar": "init(scale factor: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an affine transformation matrix from scaling values. The matrix takes the following form:", "method_name": "init", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["scaleByX", "x"]}, {"param_type": "CGFloat", "param_description": "", "param_name": ["byY", "y"]}], "class_name": "AffineTransform", "method_declar": "init(scaleByX x: CGFloat, byY y: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an affine transformation matrix from translation values. The matrix takes the following form:", "method_name": "init", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["translationByX", "x"]}, {"param_type": "CGFloat", "param_description": "", "param_name": ["byY", "y"]}], "class_name": "AffineTransform", "method_declar": "init(translationByX x: CGFloat, byY y: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Mutates an affine transformation matrix from a rotation value (angle \u03b1 in degrees). ", "method_name": "rotate", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["byDegrees", "angle"]}], "class_name": "AffineTransform", "method_declar": "mutating func rotate(byDegrees angle: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Mutates an affine transformation matrix from a rotation value (angle \u03b1 in radians). ", "method_name": "rotate", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["byRadians", "angle"]}], "class_name": "AffineTransform", "method_declar": "mutating func rotate(byRadians angle: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Mutates an affine transformation matrix to perform the given scaling in both x and y dimensions.", "method_name": "scale", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["scale"]}], "class_name": "AffineTransform", "method_declar": "mutating func scale(_ scale: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Mutates an affine transformation matrix to perform a scaling in each of the x and y dimensions.", "method_name": "scale", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["x"]}, {"param_type": "CGFloat", "param_description": "", "param_name": ["y"]}], "class_name": "AffineTransform", "method_declar": "mutating func scale(x: CGFloat, y: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Mutates an affine transformation matrix to perform the given translation.", "method_name": "translate", "params": [{"param_type": "CGFloat", "param_description": "", "param_name": ["x"]}, {"param_type": "CGFloat", "param_description": "", "param_name": ["y"]}], "class_name": "AffineTransform", "method_declar": "mutating func translate(x: CGFloat, y: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Mutates an affine transformation by appending the specified matrix.", "method_name": "append", "params": [{"param_type": "AffineTransform", "param_description": "", "param_name": ["transform"]}], "class_name": "AffineTransform", "method_declar": "mutating func append(_ transform: AffineTransform)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Mutates an affine transformation by prepending the specified matrix.", "method_name": "prepend", "params": [{"param_type": "AffineTransform", "param_description": "", "param_name": ["transform"]}], "class_name": "AffineTransform", "method_declar": "mutating func prepend(_ transform: AffineTransform)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Inverts the transformation matrix if possible.", "method_name": "invert", "params": [], "class_name": "AffineTransform", "method_declar": "mutating func invert()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an inverted version of the matrix if possible, or nil if not.", "method_name": "inverted", "params": [], "class_name": "AffineTransform", "method_declar": "func inverted() -> AffineTransform?", "return_value": {"return_description": [], "return_name": [""], "return_type": ["AffineTransform"]}, "is_static": false}, {"method_description": "Applies the receiver\u2019s transform to the specified point and returns the result.", "method_name": "transform", "params": [{"param_type": "NSPoint", "param_description": "", "param_name": ["point"]}], "class_name": "AffineTransform", "method_declar": "func transform(_ point: NSPoint) -> NSPoint", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSPoint"]}, "is_static": false}, {"method_description": "Applies the receiver\u2019s transform to the specified size and returns the results.", "method_name": "transform", "params": [{"param_type": "NSSize", "param_description": "", "param_name": ["size"]}], "class_name": "AffineTransform", "method_declar": "func transform(_ size: NSSize) -> NSSize", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSSize"]}, "is_static": false}, {"method_description": "Indicates whether two transforms are the same.", "method_name": "==", "params": [{"param_type": "AffineTransform", "param_description": "", "param_name": ["lhs"]}, {"param_type": "AffineTransform", "param_description": "", "param_name": ["rhs"]}], "class_name": "AffineTransform", "method_declar": "static func == (lhs: AffineTransform, rhs: AffineTransform) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "", "method_name": "init", "params": [{"param_type": "Decoder", "param_description": "", "param_name": ["from", "decoder"]}], "class_name": "AffineTransform", "method_declar": "init(from decoder: Decoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "encode", "params": [{"param_type": "Encoder", "param_description": "", "param_name": ["to", "encoder"]}], "class_name": "AffineTransform", "method_declar": "func encode(to encoder: Encoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "AffineTransform", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "AffineTransform", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "AffineTransform", "method_declar": "static func != (lhs: AffineTransform, rhs: AffineTransform) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}], "class_inherit_list": [], "class_name": "AffineTransform", "typealias": ["typealias AffineTransform.ReferenceType = NSAffineTransform"], "Vars": [{"var_description": "An identity affine transformation matrix", "var_type": "AffineTransform", "is_static": false, "var_name": "identity"}, {"var_description": "An element of the transform matrix that contributes scaling, rotation, and shear.", "var_type": "CGFloat", "is_static": false, "var_name": "m11"}, {"var_description": "An element of the transform matrix that contributes scaling, rotation, and shear.", "var_type": "CGFloat", "is_static": false, "var_name": "m12"}, {"var_description": "An element of the transform matrix that contributes scaling, rotation, and shear.", "var_type": "CGFloat", "is_static": false, "var_name": "m21"}, {"var_description": "An element of the transform matrix that contributes scaling, rotation, and shear.", "var_type": "CGFloat", "is_static": false, "var_name": "m22"}, {"var_description": "An element of the transform matrix that contributes translation.", "var_type": "CGFloat", "is_static": false, "var_name": "tX"}, {"var_description": "An element of the transform matrix that contributes translation.", "var_type": "CGFloat", "is_static": false, "var_name": "tY"}, {"var_description": "A textual description of the transform.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A textual description of the transform suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "The computed hash value for the transform.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}], "class_type": "struct", "interface_list": ["CustomStringConvertible", "Hashable", "ReferenceConvertible"], "package_name": "foundation", "subclass_list": []}