{"class_description": "For example, if an IndexSet is composed of: [1..<5] and [7..<10] and [13] then calling next() on this view\u2019s iterator will produce 3 ranges before returning nil.\n", "Methods": [{"method_description": "Returns the index in the range after the specified one.", "method_name": "index", "params": [{"param_type": "IndexSet.RangeView.Index", "param_description": "", "param_name": ["after", "i"]}], "class_name": "IndexSet.RangeView", "method_declar": "func index(after i: IndexSet.RangeView.Index) -> IndexSet.RangeView.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexSet.RangeView.Index"]}, "is_static": false}, {"method_description": "Returns the index in the range before the specified one.", "method_name": "index", "params": [{"param_type": "IndexSet.RangeView.Index", "param_description": "", "param_name": ["before", "i"]}], "class_name": "IndexSet.RangeView", "method_declar": "func index(before i: IndexSet.RangeView.Index) -> IndexSet.RangeView.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexSet.RangeView.Index"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "IndexSet.RangeView", "method_declar": "func prefix(_ maxLength: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence starting at the beginning of this collection with at most maxLength elements."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection through the specified position.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "", "param_name": ["through", "position"]}], "class_name": "IndexSet.RangeView", "method_declar": "func prefix(through position: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence up to, and including, the end position."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "The \u201cpast the end\u201d index of the resulting subsequence. end must be a valid index of the collection.", "param_name": ["upTo", "end"]}], "class_name": "IndexSet.RangeView", "method_declar": "func prefix(upTo end: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence up to, but not including, the end position."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.", "method_name": "suffix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "IndexSet.RangeView", "method_declar": "func suffix(_ maxLength: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence terminating at the end of the collection with at most maxLength elements."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the specified position to the end of the collection.", "method_name": "suffix", "params": [{"param_type": "Int", "param_description": "The index at which to start the resulting subsequence. start must be a valid index of the collection.", "param_name": ["from", "start"]}], "class_name": "IndexSet.RangeView", "method_declar": "func suffix(from start: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence starting at the start position."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "params": [{"param_type": "Int = 1", "param_description": "The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "IndexSet.RangeView", "method_declar": "func dropFirst(_ k: Int = 1) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "params": [{"param_type": "Int", "param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "IndexSet.RangeView", "method_declar": "func dropLast(_ k: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence that leaves off k elements from the end."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "params": [], "class_name": "IndexSet.RangeView", "method_declar": "func enumerated() -> EnumeratedSequence<IndexSet.RangeView>", "return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns an iterator over the indexes of this range view.", "method_name": "makeIterator", "params": [], "class_name": "IndexSet.RangeView", "method_declar": "func makeIterator() -> IndexingIterator<IndexSet.RangeView>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexingIterator<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a view presenting the elements of the collection in reverse order.", "method_name": "reversed", "params": [], "class_name": "IndexSet.RangeView", "method_declar": "func reversed() -> ReversedCollection<IndexSet.RangeView>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ReversedCollection<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "method_name": "split", "params": [{"param_type": "Range<IndexSet.Element>", "param_description": "The element that should be split upon.", "param_name": ["separator"]}, {"param_type": "Int", "param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_name": ["maxSplits"]}, {"param_type": "Bool = true", "param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.", "param_name": ["omittingEmptySubsequences"]}], "class_name": "IndexSet.RangeView", "method_declar": "func split(separator: Range<IndexSet.Element>, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Slice<IndexSet.RangeView>]", "return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": ["[Slice<IndexSet.RangeView>]"]}, "is_static": false}, {"method_description": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.", "method_name": "joined", "params": [{"param_type": "Sequence", "param_description": "A sequence to insert between each of this sequence\u2019s elements.", "param_name": ["separator"]}], "class_name": "IndexSet.RangeView", "method_declar": "func joined<Separator>(separator: Separator) -> JoinedSequence<IndexSet.RangeView> where Separator : Sequence, Separator.Element == Self.Element.Element", "return_value": {"return_description": ["The joined sequence of elements."], "return_name": [""], "return_type": ["JoinedSequence<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "params": [{"param_type": "Int = 1", "param_description": "The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "IndexSet.RangeView", "method_declar": "func dropFirst(_ k: Int = 1) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "params": [{"param_type": "Int", "param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero.", "param_name": ["k"]}], "class_name": "IndexSet.RangeView", "method_declar": "func dropLast(_ k: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence that leaves off k elements from the end."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "params": [], "class_name": "IndexSet.RangeView", "method_declar": "func enumerated() -> EnumeratedSequence<IndexSet.RangeView>", "return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns the index in the range after the specified one.", "method_name": "index", "params": [{"param_type": "IndexSet.RangeView.Index", "param_description": "", "param_name": ["after", "i"]}], "class_name": "IndexSet.RangeView", "method_declar": "func index(after i: IndexSet.RangeView.Index) -> IndexSet.RangeView.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexSet.RangeView.Index"]}, "is_static": false}, {"method_description": "Returns the index in the range before the specified one.", "method_name": "index", "params": [{"param_type": "IndexSet.RangeView.Index", "param_description": "", "param_name": ["before", "i"]}], "class_name": "IndexSet.RangeView", "method_declar": "func index(before i: IndexSet.RangeView.Index) -> IndexSet.RangeView.Index", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexSet.RangeView.Index"]}, "is_static": false}, {"method_description": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.", "method_name": "joined", "params": [{"param_type": "Sequence", "param_description": "A sequence to insert between each of this sequence\u2019s elements.", "param_name": ["separator"]}], "class_name": "IndexSet.RangeView", "method_declar": "func joined<Separator>(separator: Separator) -> JoinedSequence<IndexSet.RangeView> where Separator : Sequence, Separator.Element == Self.Element.Element", "return_value": {"return_description": ["The joined sequence of elements."], "return_name": [""], "return_type": ["JoinedSequence<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns an iterator over the indexes of this range view.", "method_name": "makeIterator", "params": [], "class_name": "IndexSet.RangeView", "method_declar": "func makeIterator() -> IndexingIterator<IndexSet.RangeView>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexingIterator<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "IndexSet.RangeView", "method_declar": "func prefix(_ maxLength: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence starting at the beginning of this collection with at most maxLength elements."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection through the specified position.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "", "param_name": ["through", "position"]}], "class_name": "IndexSet.RangeView", "method_declar": "func prefix(through position: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence up to, and including, the end position."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "method_name": "prefix", "params": [{"param_type": "Int", "param_description": "The \u201cpast the end\u201d index of the resulting subsequence. end must be a valid index of the collection.", "param_name": ["upTo", "end"]}], "class_name": "IndexSet.RangeView", "method_declar": "func prefix(upTo end: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence up to, but not including, the end position."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a view presenting the elements of the collection in reverse order.", "method_name": "reversed", "params": [], "class_name": "IndexSet.RangeView", "method_declar": "func reversed() -> ReversedCollection<IndexSet.RangeView>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ReversedCollection<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "method_name": "split", "params": [{"param_type": "Range<IndexSet.Element>", "param_description": "The element that should be split upon.", "param_name": ["separator"]}, {"param_type": "Int", "param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_name": ["maxSplits"]}, {"param_type": "Bool = true", "param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.", "param_name": ["omittingEmptySubsequences"]}], "class_name": "IndexSet.RangeView", "method_declar": "func split(separator: Range<IndexSet.Element>, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Slice<IndexSet.RangeView>]", "return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": ["[Slice<IndexSet.RangeView>]"]}, "is_static": false}, {"method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.", "method_name": "suffix", "params": [{"param_type": "Int", "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_name": ["maxLength"]}], "class_name": "IndexSet.RangeView", "method_declar": "func suffix(_ maxLength: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence terminating at the end of the collection with at most maxLength elements."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}, {"method_description": "Returns a subsequence from the specified position to the end of the collection.", "method_name": "suffix", "params": [{"param_type": "Int", "param_description": "The index at which to start the resulting subsequence. start must be a valid index of the collection.", "param_name": ["from", "start"]}], "class_name": "IndexSet.RangeView", "method_declar": "func suffix(from start: Int) -> Slice<IndexSet.RangeView>", "return_value": {"return_description": ["A subsequence starting at the start position."], "return_name": [""], "return_type": ["Slice<IndexSet.RangeView>"]}, "is_static": false}], "class_inherit_list": [], "class_name": "IndexSet.RangeView", "typealias": [], "Vars": [{"var_description": "The ending index in the range.", "var_type": "IndexSet.RangeView.Index", "is_static": false, "var_name": "endIndex"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<IndexSet.RangeView>", "is_static": false, "var_name": "lazy"}, {"var_description": "The beginning index in the range.", "var_type": "IndexSet.RangeView.Index", "is_static": false, "var_name": "startIndex"}, {"var_description": "The beginning index in the range.", "var_type": "IndexSet.RangeView.Index", "is_static": false, "var_name": "startIndex"}, {"var_description": "The ending index in the range.", "var_type": "IndexSet.RangeView.Index", "is_static": false, "var_name": "endIndex"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<IndexSet.RangeView>", "is_static": false, "var_name": "lazy"}], "class_type": "struct", "interface_list": ["BidirectionalCollection", "Equatable"], "package_name": "foundation", "subclass_list": []}