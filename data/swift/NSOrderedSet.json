{"class_description": "NSOrderedSet declares the programmatic interface for static sets of distinct objects. You establish a static set\u2019s entries when it\u2019s created, and thereafter the entries can\u2019t be modified. NSMutableOrderedSet, on the other hand, declares a programmatic interface for dynamic sets of distinct objects. A dynamic\u2014or mutable\u2014set allows the addition and deletion of entries at any time, automatically allocating memory as needed.\nYou can use ordered sets as an alternative to arrays when the order of elements is important and performance in testing whether an object is contained in the set is a consideration\u2014testing for membership of an array is slower than testing for membership of a set.\n", "Methods": [{"method_description": "Initializes a newly allocated set with the objects that are contained in a given array.", "method_name": "init", "params": [{"param_type": "[Any]", "param_description": "An array of objects to add to the new set.If the same object appears more than once in array, it is represented only once in the returned ordered set.", "param_name": ["array"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(array: [Any])", "return_value": {"return_description": ["An initialized ordered set with the contents of array. The returned ordered set might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated set with the objects that are contained in a given array, optionally copying the items.", "method_name": "init", "params": [{"param_type": "[Any]", "param_description": "An array of objects to add to the new set.If the same object appears more than once in array, it is represented only once in the returned ordered set.", "param_name": ["array", "set"]}, {"param_type": "Bool", "param_description": "If true the objects are copied to the ordered set; otherwise false.", "param_name": ["copyItems", "flag"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(array set: [Any], copyItems flag: Bool)", "return_value": {"return_description": ["An initialized ordered set containing a uniqued collection of the objects contained in the array."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated set with the objects that are contained in the specified range of an array, optionally copying the items.", "method_name": "init", "params": [{"param_type": "[Any]", "param_description": "An array of objects to add to the new set.If the same object appears more than once in array, it is represented only once in the returned ordered set.", "param_name": ["array", "set"]}, {"param_type": "NSRange", "param_description": "The range of objects in array to add to the ordered set.", "param_name": ["range"]}, {"param_type": "Bool", "param_description": "If true the objects are copied to the ordered set; otherwise false.", "param_name": ["copyItems", "flag"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(array set: [Any], range: NSRange, copyItems flag: Bool)", "return_value": {"return_description": ["An initialized ordered set containing a uniqued collection of the objects contained in specified range of the the array."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new ordered set with the object.", "method_name": "init", "params": [{"param_type": "Any", "param_description": "The object to add to the new ordered set", "param_name": ["object"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(object: Any)", "return_value": {"return_description": ["A new ordered set that contains a single member, object."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated set with a specified number of objects from a given C array of objects.", "method_name": "init", "params": [{"param_type": "UnsafePointer<AnyObject>", "param_description": "A C array of objects to add to the new set.If the same object appears more than once in objects, it is added only once to the returned ordered set.", "param_name": ["objects"]}, {"param_type": "Int", "param_description": "The number of objects from objects to add to the new ordered set.", "param_name": ["count", "cnt"]}], "class_name": "NSOrderedSet", "method_declar": "init(objects: UnsafePointer<AnyObject>?, count cnt: Int)", "return_value": {"return_description": ["An initialized ordered set containing cnt objects from the list of objects specified by objects. The returned set might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new ordered set with the contents of a set.", "method_name": "init", "params": [{"param_type": "NSOrderedSet", "param_description": "A set.", "param_name": ["orderedSet", "set"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(orderedSet set: NSOrderedSet)", "return_value": {"return_description": ["An initialized ordered set containing references to the objects in the set."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new ordered set with the contents of a set, optionally copying the items.", "method_name": "init", "params": [{"param_type": "NSOrderedSet", "param_description": "A set.", "param_name": ["orderedSet", "set"]}, {"param_type": "Bool", "param_description": "If true the objects are copied to the ordered set; otherwise false.", "param_name": ["copyItems", "flag"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(orderedSet set: NSOrderedSet, copyItems flag: Bool)", "return_value": {"return_description": ["An initialized ordered set containing the objects in the set."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new ordered set with the contents of an ordered set, optionally copying the items.", "method_name": "init", "params": [{"param_type": "NSOrderedSet", "param_description": "An ordered set.", "param_name": ["orderedSet", "set"]}, {"param_type": "NSRange", "param_description": "The range of objects in orderedSet to add to the ordered set.", "param_name": ["range"]}, {"param_type": "Bool", "param_description": "If true the objects are copied to the ordered set; otherwise false.", "param_name": ["copyItems", "flag"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(orderedSet set: NSOrderedSet, range: NSRange, copyItems flag: Bool)", "return_value": {"return_description": ["An initialized ordered set containing the objects in the ordered set."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new ordered set with the contents of a set.", "method_name": "init", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set.", "param_name": ["set"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(set: Set<AnyHashable>)", "return_value": {"return_description": ["An initialized ordered set containing the objects in the set."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new ordered set with the contents of a set, optionally copying the objects in the set.", "method_name": "init", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set.", "param_name": ["set"]}, {"param_type": "Bool", "param_description": "If true the objects are copied to the ordered set; otherwise false.", "param_name": ["copyItems", "flag"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(set: Set<AnyHashable>, copyItems flag: Bool)", "return_value": {"return_description": ["An initialized ordered set containing the objects in the set."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a newly allocated ordered set.", "method_name": "init", "params": [], "class_name": "NSOrderedSet", "method_declar": "init()", "return_value": {"return_description": ["An ordered set."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether a given object is present in the ordered set.", "method_name": "contains", "params": [{"param_type": "Any", "param_description": "The object for which to test membership of the ordered set.", "param_name": ["object"]}], "class_name": "NSOrderedSet", "method_declar": "func contains(_ object: Any) -> Bool", "return_value": {"return_description": ["YES if object is present in the set, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Executes a given block using the objects in the ordered set at the specified indexes.", "method_name": "enumerateObjects", "params": [{"param_type": "IndexSet", "param_description": "", "param_name": ["at", "s"]}, {"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order).", "param_name": ["options", "opts"]}, {"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to elements in the ordered set.The block takes three arguments:objThe element in the ordered set.idxThe index of the element in the ordered set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the array. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.", "param_name": ["using", "block"]}], "class_name": "NSOrderedSet", "method_declar": "func enumerateObjects(at s: IndexSet, options opts: NSEnumerationOptions = [], using block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Executes a given block using each object in the ordered set.", "method_name": "enumerateObjects", "params": [{"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to elements in the ordered set.The block takes three arguments:idxThe element in the set.idxThe index of the item in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this value to true within the block.The block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["block"]}], "class_name": "NSOrderedSet", "method_declar": "func enumerateObjects(_ block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Executes a given block using each object in the set, using the specified enumeration options.", "method_name": "enumerateObjects", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order).", "param_name": ["options", "opts"]}, {"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to elements in the ordered set.The block takes three arguments:objThe element in the set.idxThe index of the item in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this value to true within the block.The block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["using", "block"]}], "class_name": "NSOrderedSet", "method_declar": "func enumerateObjects(options opts: NSEnumerationOptions = [], using block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Returns the object at the specified index of the set.", "method_name": "object", "params": [{"param_type": "Int", "param_description": "", "param_name": ["at", "idx"]}], "class_name": "NSOrderedSet", "method_declar": "func object(at idx: Int) -> Any", "return_value": {"return_description": ["If index is beyond the end of the ordered set (that is, if index is greater than or equal to the value returned by count), an rangeException is raised."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Returns the objects in the ordered set at the specified indexes.", "method_name": "objects", "params": [{"param_type": "IndexSet", "param_description": "The indexes.", "param_name": ["at", "indexes"]}], "class_name": "NSOrderedSet", "method_declar": "func objects(at indexes: IndexSet) -> [Any]", "return_value": {"return_description": ["The returned objects are in the ascending order of their indexes in indexes, so that object in returned ordered set with higher index in indexes will follow the object with smaller index in indexes."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Returns the index of the specified object.", "method_name": "index", "params": [{"param_type": "Any", "param_description": "The object.", "param_name": ["of", "object"]}], "class_name": "NSOrderedSet", "method_declar": "func index(of object: Any) -> Int", "return_value": {"return_description": ["The index whose corresponding ordered set value is equal to object. If none of the objects in the ordered set  is equal to object, returns NSNotFound."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the index, within a specified range, of an object compared with elements in the ordered set using a given NSComparator block.", "method_name": "index", "params": [{"param_type": "Any", "param_description": "An object for which to search in the ordered set.If this value is nil, throws an invalidArgumentException.", "param_name": ["of", "object"]}, {"param_type": "NSRange", "param_description": "The range within the array to search for object.If r exceeds the bounds of the ordered set (if the location plus length of the range is greater than the count of the ordered set), throws an rangeException.", "param_name": ["inSortedRange", "range"]}, {"param_type": "NSBinarySearchingOptions", "param_description": "Options for the search. For possible values, see NSBinarySearchingOptions.", "param_name": ["options", "opts"]}, {"param_type": "(Any, Any) -> ComparisonResult", "param_description": "A comparator block used to compare the object obj with elements in the ordered set.If this value is NULL, throws an invalidArgumentException.", "param_name": ["usingComparator", "cmp"]}], "class_name": "NSOrderedSet", "method_declar": "func index(of object: Any, inSortedRange range: NSRange, options opts: NSBinarySearchingOptions = [], usingComparator cmp: (Any, Any) -> ComparisonResult) -> Int", "return_value": {"return_description": ["If the insertionIndex option is not specified:"], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options.", "method_name": "index", "params": [{"param_type": "IndexSet", "param_description": "", "param_name": ["ofObjectAt", "s"]}, {"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order).", "param_name": ["options", "opts"]}, {"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The block to apply to elements in the ordered set.The block takes three arguments:objThe element in the ordered set.idxThe index of the element in the ordered set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this value to true within the block.The block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSOrderedSet", "method_declar": "func index(ofObjectAt s: IndexSet, options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int", "return_value": {"return_description": ["The index of the corresponding value in the ordered set passes the test specified by predicate. If no objects in the ordered set pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the index of the object in the ordered set that passes a test in a given block.", "method_name": "index", "params": [{"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The block to apply to elements in the ordered set.The block takes three arguments:objThe element in the ordered set.TermThe index of the element in the ordered set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this value to true within the block.", "param_name": ["ofObjectPassingTest", "predicate"]}], "class_name": "NSOrderedSet", "method_declar": "func index(ofObjectPassingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int", "return_value": {"return_description": ["The index of the corresponding value in the ordered set that passes the test specified by predicate. If no objects in the ordered set  pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options.", "method_name": "index", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order).", "param_name": ["opts"]}, {"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The block to apply to elements in the ordered set.The block takes three arguments:objThe element in the array.idxThe index of the element in the ordered set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this value to true within the block.The block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["ofObjectPassingTest", "predicate"]}], "class_name": "NSOrderedSet", "method_declar": "func index(_ opts: NSEnumerationOptions = [], ofObjectPassingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int", "return_value": {"return_description": ["The index whose corresponding value in the ordered set passes the test specified by predicate and opts.  If no objects in the ordered set  pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options.", "method_name": "indexes", "params": [{"param_type": "IndexSet", "param_description": "", "param_name": ["ofObjectsAt", "s"]}, {"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order).", "param_name": ["options", "opts"]}, {"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The block to apply to elements in the ordered set.The block takes three arguments:objThe element in the ordered set.idxThe index of the element in the ordered set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this value to true within the block.The block returns a Boolean value that indicates whether obj passed the test.", "param_name": ["passingTest", "predicate"]}], "class_name": "NSOrderedSet", "method_declar": "func indexes(ofObjectsAt s: IndexSet, options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet", "return_value": {"return_description": ["The index of the corresponding value in the ordered set that passes the test specified by predicate. If no objects in the ordered set pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["IndexSe"]}, "is_static": false}, {"method_description": "Returns the index of the object in the ordered set that passes a test in a given block.", "method_name": "indexes", "params": [{"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The block to apply to elements in the ordered set.The block takes three arguments:objThe element in the ordered set.TermThe index of the element in the ordered set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this value to true within the block.", "param_name": ["ofObjectsPassingTest", "predicate"]}], "class_name": "NSOrderedSet", "method_declar": "func indexes(ofObjectsPassingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet", "return_value": {"return_description": ["The index of the corresponding value in the ordered set that passes the test specified by predicate. If no objects in the ordered set pass the test, returns NSNotFound.."], "return_name": [""], "return_type": ["IndexSe"]}, "is_static": false}, {"method_description": "Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options.", "method_name": "indexes", "params": [{"param_type": "NSEnumerationOptions", "param_description": "A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order).", "param_name": ["options", "opts"]}, {"param_type": "(Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool", "param_description": "The block to apply to elements in the ordered set.The block takes three arguments:objThe element in the ordered set.TermThe index of the element in the ordered set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this value to true within the block.", "param_name": ["ofObjectsPassingTest", "predicate"]}], "class_name": "NSOrderedSet", "method_declar": "func indexes(options opts: NSEnumerationOptions = [], ofObjectsPassingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet", "return_value": {"return_description": ["The index whose corresponding value in the ordered set passes the test specified by predicate and opts. If the opts bitmask specifies reverse order, then the last item that matches is returned. Otherwise, the index of the first matching object is returned. If no objects in the ordered set pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["IndexSe"]}, "is_static": false}, {"method_description": "Returns an enumerator object that lets you access each object in the ordered set.", "method_name": "objectEnumerator", "params": [], "class_name": "NSOrderedSet", "method_declar": "func objectEnumerator() -> NSEnumerator", "return_value": {"return_description": ["An enumerator object that lets you access each object in the ordered set, in order, from the element at the lowest index upwards."], "return_name": [""], "return_type": ["NSEnumerato"]}, "is_static": false}, {"method_description": "Returns an enumerator object that lets you access each object in the ordered set.", "method_name": "reverseObjectEnumerator", "params": [], "class_name": "NSOrderedSet", "method_declar": "func reverseObjectEnumerator() -> NSEnumerator", "return_value": {"return_description": ["An enumerator object that lets you access each object in the ordered set, in order, from the element at the highest index downwards."], "return_name": [""], "return_type": ["NSEnumerato"]}, "is_static": false}, {"method_description": "Invokes setValue:forKey: on each of the receiver's members using the specified value and key", "method_name": "setValue", "params": [{"param_type": "Any", "param_description": "The object value.", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key to store the value.", "param_name": ["forKey", "key"]}], "class_name": "NSOrderedSet", "method_declar": "func setValue(_ value: Any?, forKey key: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an ordered set containing the results of invoking valueForKey: using key on each of the ordered set\u2019s objects.", "method_name": "value", "params": [{"param_type": "String", "param_description": "The key to retrieve.", "param_name": ["forKey", "key"]}], "class_name": "NSOrderedSet", "method_declar": "func value(forKey key: String) -> Any", "return_value": {"return_description": ["The ordered set of the values for the retrieved key. The returned ordered set might not have the same number of members as the receiver."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Raises an exception.", "method_name": "addObserver", "params": [{"param_type": "NSObject", "param_description": "The object to register for KVO notifications.", "param_name": ["observer"]}, {"param_type": "String", "param_description": "The key path, relative to the array, of the property to observe. This value must not be nil.", "param_name": ["forKeyPath", "keyPath"]}, {"param_type": "NSKeyValueObservingOptions", "param_description": "A combination of NSKeyValueObservingOptions values that specifies what is included in observation notifications.", "param_name": ["options"]}, {"param_type": "UnsafeMutableRawPointer", "param_description": "Arbitrary data that is passed to observer in observeValue(forKeyPath:of:change:context:).", "param_name": ["context"]}], "class_name": "NSOrderedSet", "method_declar": "func addObserver(_ observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Raises an exception.", "method_name": "removeObserver", "params": [{"param_type": "NSObject", "param_description": "The object to remove as an observer.", "param_name": ["observer"]}, {"param_type": "String", "param_description": "A key-path, relative to the set, for which observer is registered to receive KVO change notifications. This value must not be nil.", "param_name": ["forKeyPath", "keyPath"]}], "class_name": "NSOrderedSet", "method_declar": "func removeObserver(_ observer: NSObject, forKeyPath keyPath: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Raises an exception.", "method_name": "removeObserver", "params": [{"param_type": "NSObject", "param_description": "The object to remove as an observer.", "param_name": ["observer"]}, {"param_type": "String", "param_description": "A key-path, relative to the set, for which observer is registered to receive KVO change notifications. This value must not be nil.", "param_name": ["forKeyPath", "keyPath"]}, {"param_type": "UnsafeMutableRawPointer", "param_description": "The context passed to the notifications.", "param_name": ["context"]}], "class_name": "NSOrderedSet", "method_declar": "func removeObserver(_ observer: NSObject, forKeyPath keyPath: String, context: UnsafeMutableRawPointer?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Compares the receiving ordered set to another ordered set.", "method_name": "isEqual", "params": [{"param_type": "NSOrderedSet", "param_description": "The ordered set with which to compare the receiving ordered set.", "param_name": ["to", "other"]}], "class_name": "NSOrderedSet", "method_declar": "func isEqual(to other: NSOrderedSet) -> Bool", "return_value": {"return_description": ["true if the contents of other are equal to the contents of the receiving ordered set, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given ordered set.", "method_name": "intersects", "params": [{"param_type": "NSOrderedSet", "param_description": "The other ordered set.", "param_name": ["other"]}], "class_name": "NSOrderedSet", "method_declar": "func intersects(_ other: NSOrderedSet) -> Bool", "return_value": {"return_description": ["true if at least one object in the receiving ordered set is also present in other, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given set.", "method_name": "intersectsSet", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set.", "param_name": ["set"]}], "class_name": "NSOrderedSet", "method_declar": "func intersectsSet(_ set: Set<AnyHashable>) -> Bool", "return_value": {"return_description": ["true if at least one object in the receiving ordered set is also present in other, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given ordered set.", "method_name": "isSubset", "params": [{"param_type": "NSOrderedSet", "param_description": "The ordered set with which to compare the receiving ordered set.", "param_name": ["of", "other"]}], "class_name": "NSOrderedSet", "method_declar": "func isSubset(of other: NSOrderedSet) -> Bool", "return_value": {"return_description": ["true if every object in the receiving set is also present in other, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given set.", "method_name": "isSubset", "params": [{"param_type": "Set<AnyHashable>", "param_description": "The set with which to compare the receiving ordered set.", "param_name": ["of", "set"]}], "class_name": "NSOrderedSet", "method_declar": "func isSubset(of set: Set<AnyHashable>) -> Bool", "return_value": {"return_description": ["true if every object in the receiving ordered set is also present in set, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns an array of the ordered set\u2019s elements sorted as specified by a given array of sort descriptors.", "method_name": "sortedArray", "params": [{"param_type": "[NSSortDescriptor]", "param_description": "An array of NSSortDescriptor objects.", "param_name": ["using", "sortDescriptors"]}], "class_name": "NSOrderedSet", "method_declar": "func sortedArray(using sortDescriptors: [NSSortDescriptor]) -> [Any]", "return_value": {"return_description": ["An NSArray containing the ordered set\u2019s elements sorted as specified by sortDescriptors."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Returns an array that lists the receiving ordered set\u2019s elements in ascending order, as determined by the comparison method specified by a given NSComparator block", "method_name": "sortedArray", "params": [{"param_type": "(Any, Any) -> ComparisonResult", "param_description": "A comparator block.", "param_name": ["comparator", "cmptr"]}], "class_name": "NSOrderedSet", "method_declar": "func sortedArray(comparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]", "return_value": {"return_description": ["An array that lists the receiving ordered set\u2019s elements in ascending order, as determined by the comparison method specified cmptr."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Returns an array that lists the receiving ordered set\u2019s elements in ascending order, as determined by the comparison method specified by a given NSComparator block.", "method_name": "sortedArray", "params": [{"param_type": "NSSortOptions", "param_description": "A bitmask that specifies the options for the sort (whether it should be performed concurrently and whether it should be performed stably).", "param_name": ["options", "opts"]}, {"param_type": "(Any, Any) -> ComparisonResult", "param_description": "A comparator block.", "param_name": ["usingComparator", "cmptr"]}], "class_name": "NSOrderedSet", "method_declar": "func sortedArray(options opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]", "return_value": {"return_description": ["An array that lists the receiving ordered set\u2019s elements in ascending order, as determined by the comparison method specified cmptr."], "return_name": [""], "return_type": ["[Any"]}, "is_static": false}, {"method_description": "Evaluates a given predicate against each object in the receiving ordered set and returns a new ordered set containing the objects for which the predicate returns true.", "method_name": "filtered", "params": [{"param_type": "NSPredicate", "param_description": "", "param_name": ["using", "p"]}], "class_name": "NSOrderedSet", "method_declar": "func filtered(using p: NSPredicate) -> NSOrderedSet", "return_value": {"return_description": ["A new ordered set containing the objects in the receiving ordered set for which predicate returns true."], "return_name": [""], "return_type": ["NSOrderedSe"]}, "is_static": false}, {"method_description": "Returns a string that represents the contents of the ordered set, formatted as a property list.", "method_name": "description", "params": [{"param_type": "Any", "param_description": "An NSLocale object or an NSDictionary object that specifies options used for formatting each of the ordered set\u2019s elements (where recognized). Specify nil if you don\u2019t want the elements formatted.", "param_name": ["withLocale", "locale"]}], "class_name": "NSOrderedSet", "method_declar": "func description(withLocale locale: Any?) -> String", "return_value": {"return_description": ["A string that represents the contents of the ordered set, formatted as a property list."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Returns a string that represents the contents of the ordered set, formatted as a property list.", "method_name": "description", "params": [{"param_type": "Any", "param_description": "An NSLocale object or an NSDictionary object that specifies options used for formatting each of the array\u2019s elements (where recognized). Specify nil if you don\u2019t want the elements formatted.", "param_name": ["withLocale", "locale"]}, {"param_type": "Int", "param_description": "Specifies a level of indentation, to make the output more readable: the indentation is (4 spaces) * level. ", "param_name": ["indent", "level"]}], "class_name": "NSOrderedSet", "method_declar": "func description(withLocale locale: Any?, indent level: Int) -> String", "return_value": {"return_description": ["A string that represents the contents of the ordered set, formatted as a property list."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "Any...", "param_description": "", "param_name": ["arrayLiteral", "elements"]}], "class_name": "NSOrderedSet", "method_declar": "required convenience init(arrayLiteral elements: Any...)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "NSCoder", "param_description": "", "param_name": ["coder", "aDecoder"]}], "class_name": "NSOrderedSet", "method_declar": "init?(coder aDecoder: NSCoder)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "Any...", "param_description": "", "param_name": ["objects", "elements"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(objects elements: Any...)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates and returns a set containing a specified number of objects from a given C array of objects.", "method_name": "init", "params": [{"param_type": "UnsafePointer<AnyObject>", "param_description": "A C array of objects to add to the new ordered set.If the same object appears more than once in objects, it is added only once to the returned ordered set. Each object receives a retain message as it is added to the set.", "param_name": ["objects"]}, {"param_type": "Int", "param_description": "The number of objects from objects to add to the new set.", "param_name": ["count", "cnt"]}], "class_name": "NSOrderedSet", "method_declar": "convenience init(objects: UnsafePointer<AnyObject>, count cnt: Int)", "return_value": {"return_description": ["A new ordered set containing cnt objects from the list of objects specified by objects."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Return an iterator over the elements of this sequence.", "method_name": "makeIterator", "params": [], "class_name": "NSOrderedSet", "method_declar": "func makeIterator() -> NSFastEnumerationIterator", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSFastEnumerationIterato"]}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSOrderedSet", "typealias": [], "Vars": [{"var_description": "The number of members in the set.", "var_type": "Int", "is_static": false, "var_name": "count"}, {"var_description": "The first object in the ordered set.", "var_type": "Any", "is_static": false, "var_name": "firstObject"}, {"var_description": "The last object in the ordered set.", "var_type": "Any", "is_static": false, "var_name": "lastObject"}, {"var_description": "An ordered set in the reverse order.", "var_type": "NSOrderedSet", "is_static": false, "var_name": "reversed"}, {"var_description": "A string that represents the contents of the ordered set, formatted as a property list.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A representation of the ordered set as an array.", "var_type": "[Any]", "is_static": false, "var_name": "array"}, {"var_description": "A representation of the set containing the contents of the ordered set.", "var_type": "Set<AnyHashable>", "is_static": false, "var_name": "set"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "NSCopying", "NSFastEnumeration", "NSMutableCopying", "NSSecureCoding", "Sequence"], "package_name": "foundation", "subclass_list": []}