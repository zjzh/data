{"package_name": "foundation", "subclass_list": [], "class_description": "You use comparison predicates to compare the results of two expressions. You create a comparison predicate with an operator, a left expression, and a right expression. You represent the expressions using instances of the NSExpression class. When you evaluate the predicate, it returns as a BOOL value the result of invoking the operator with the results of evaluating the expressions. \n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSPredicate"], "Methods": [{"params": [{"param_name": ["leftExpression", "lhs"], "param_type": "NSExpression", "param_description": "The left hand expression."}, {"param_name": ["rightExpression", "rhs"], "param_type": "NSExpression", "param_description": "The right hand expression."}, {"param_name": ["customSelector", "selector"], "param_type": "Selector", "param_description": "The selector to use. The method defined by the selector must take a single argument and return a BOOL value."}], "class_name": "NSComparisonPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": ["The receiver, initialized by combining the left and right expressions using selector."], "return_type": []}, "method_name": "init", "method_description": "Initializes a predicate formed by combining given left and right expressions using a given selector.", "method_declar": "init(leftExpression lhs: NSExpression, rightExpression rhs: NSExpression, customSelector selector: Selector)"}, {"params": [{"param_name": ["leftExpression", "lhs"], "param_type": "NSExpression", "param_description": "The left hand expression."}, {"param_name": ["rightExpression", "rhs"], "param_type": "NSExpression", "param_description": "The right hand expression."}, {"param_name": ["modifier"], "param_type": "NSComparisonPredicate.Modifier", "param_description": "The modifier to apply."}, {"param_name": ["type"], "param_type": "NSComparisonPredicate.Operator", "param_description": "The predicate operator type."}, {"param_name": ["options"], "param_type": "NSComparisonPredicate.Options = []", "param_description": "The options to apply (see NSComparisonPredicate.Options). For no options, pass 0."}], "class_name": "NSComparisonPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": ["The receiver, initialized to a predicate of type type formed by combining the left and right expressions using the modifier and options."], "return_type": []}, "method_name": "init", "method_description": "Initializes a predicate to a given type formed by combining given left and right expressions using a given modifier and options.", "method_declar": "init(leftExpression lhs: NSExpression, rightExpression rhs: NSExpression, modifier: NSComparisonPredicate.Modifier, type: NSComparisonPredicate.Operator, options: NSComparisonPredicate.Options = [])"}, {"params": [{"param_name": ["coder"], "param_type": "NSCoder", "param_description": ""}], "class_name": "NSComparisonPredicate", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "", "method_declar": "init?(coder: NSCoder)"}], "class_name": "NSComparisonPredicate", "Vars": [{"var_description": "The comparison predicate modifier for the receiver.", "var_type": "NSComparisonPredicate.Modifier", "is_static": false, "var_name": "comparisonPredicateModifier"}, {"var_description": "The selector for the receiver.", "var_type": "Selector", "is_static": false, "var_name": "customSelector"}, {"var_description": "The right expression for the receiver.", "var_type": "NSExpression", "is_static": false, "var_name": "rightExpression"}, {"var_description": "The left expression for the receiver.", "var_type": "NSExpression", "is_static": false, "var_name": "leftExpression"}, {"var_description": "The options that are set for the receiver.", "var_type": "NSComparisonPredicate.Options", "is_static": false, "var_name": "options"}, {"var_description": "The predicate type for the receiver.", "var_type": "NSComparisonPredicate.Operator", "is_static": false, "var_name": "predicateOperatorType"}]}