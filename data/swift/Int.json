{"class_description": "On 32-bit platforms, Int is the same size as Int32, and on 64-bit platforms, Int is the same size as Int64.\n", "Methods": [{"method_description": "Creates a new instance from the given integer.", "method_name": "init", "params": [{"param_type": "BinaryInteger", "param_description": "A value to convert to this type of integer. The value passed as source must be representable in this type.", "param_name": ["source"]}], "class_name": "Int", "method_declar": "init<T>(_ source: T) where T : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new instance from the given integer, if it can be represented exactly.", "method_name": "init", "params": [{"param_type": "BinaryInteger", "param_description": "A value to convert to this type of integer.", "param_name": ["exactly", "source"]}], "class_name": "Int", "method_declar": "init?<T>(exactly source: T) where T : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new instance with the representable value that\u2019s closest to the given integer.", "method_name": "init", "params": [{"param_type": "BinaryInteger", "param_description": "An integer to convert to this type.", "param_name": ["clamping", "source"]}], "class_name": "Int", "method_declar": "init<Other>(clamping source: Other) where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.", "method_name": "init", "params": [{"param_type": "BinaryInteger", "param_description": "An integer to convert to this type.", "param_name": ["truncatingIfNeeded", "source"]}], "class_name": "Int", "method_declar": "init<T>(truncatingIfNeeded source: T) where T : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new instance with the same memory representation as the given value.", "method_name": "init", "params": [{"param_type": "UInt", "param_description": "A value to use as the source of the new instance\u2019s binary representation.", "param_name": ["bitPattern", "x"]}], "class_name": "Int", "method_declar": "init(bitPattern x: UInt)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from the given floating-point value, rounding toward zero. Any fractional part of the value passed as source is removed.", "method_name": "init", "params": [{"param_type": "BinaryFloatingPoint", "param_description": "A floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.", "param_name": ["source"]}], "class_name": "Int", "method_declar": "init<T>(_ source: T) where T : BinaryFloatingPoint", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from the given floating-point value, if it can be represented exactly.", "method_name": "init", "params": [{"param_type": "BinaryFloatingPoint", "param_description": "A floating-point value to convert to an integer.", "param_name": ["exactly", "source"]}], "class_name": "Int", "method_declar": "init?<T>(exactly source: T) where T : BinaryFloatingPoint", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from the given floating-point value, rounding toward zero.", "method_name": "init", "params": [{"param_type": "Double", "param_description": "A floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.", "param_name": ["source"]}], "class_name": "Int", "method_declar": "init(_ source: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from the given floating-point value, rounding toward zero.", "method_name": "init", "params": [{"param_type": "Float", "param_description": "A floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.", "param_name": ["source"]}], "class_name": "Int", "method_declar": "init(_ source: Float)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from the given floating-point value, rounding toward zero.", "method_name": "init", "params": [{"param_type": "CGFloat", "param_description": "A floating-point value to convert to an integer. value must be representable in this type after rounding toward zero.", "param_name": ["value"]}], "class_name": "Int", "method_declar": "init(_ value: CGFloat)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from the given floating-point value, rounding toward zero.", "method_name": "init", "params": [{"param_type": "Float80", "param_description": "A floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.", "param_name": ["source"]}], "class_name": "Int", "method_declar": "init(_ source: Float80)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from the given floating-point value, if it can be represented exactly.", "method_name": "init", "params": [{"param_type": "Double", "param_description": "A floating-point value to convert to an integer.", "param_name": ["exactly", "source"]}], "class_name": "Int", "method_declar": "init?(exactly source: Double)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from the given floating-point value, if it can be represented exactly.", "method_name": "init", "params": [{"param_type": "Float", "param_description": "A floating-point value to convert to an integer.", "param_name": ["exactly", "source"]}], "class_name": "Int", "method_declar": "init?(exactly source: Float)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from the given floating-point value, if it can be represented exactly.", "method_name": "init", "params": [{"param_type": "Float80", "param_description": "A floating-point value to convert to an integer.", "param_name": ["exactly", "source"]}], "class_name": "Int", "method_declar": "init?(exactly source: Float80)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new integer value from the given string.", "method_name": "init", "params": [{"param_type": "String", "param_description": "The ASCII representation of a number.", "param_name": ["description"]}], "class_name": "Int", "method_declar": "init?(_ description: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new integer value from the given string and radix.", "method_name": "init", "params": [{"param_type": "StringProtocol", "param_description": "The ASCII representation of a number in the radix passed as radix.", "param_name": ["text"]}, {"param_type": "Int = 10", "param_description": "The radix, or base, to use for converting text to an integer value. radix must be in the range 2...36. The default is 10.", "param_name": ["radix"]}], "class_name": "Int", "method_declar": "init?<S>(_ text: S, radix: Int = 10) where S : StringProtocol", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a random value within the specified range.", "method_name": "random", "params": [{"param_type": "Range<Int>", "param_description": "The range in which to create a random value. range must not be empty.", "param_name": ["in", "range"]}], "class_name": "Int", "method_declar": "static func random(in range: Range<Int>) -> Int", "return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "method_name": "random", "params": [{"param_type": "Range<Int>", "param_description": "The range in which to create a random value. range must not be empty.", "param_name": ["in", "range"]}, {"param_type": "inout T", "param_description": "The random number generator to use when creating the new random value.", "param_name": ["using", "generator"]}], "class_name": "Int", "method_declar": "static func random<T>(in range: Range<Int>, using generator: inout T) -> Int where T : RandomNumberGenerator", "return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Int"]}, "is_static": true}, {"method_description": "Returns a random value within the specified range.", "method_name": "random", "params": [{"param_type": "ClosedRange<Int>", "param_description": "The range in which to create a random value.", "param_name": ["in", "range"]}], "class_name": "Int", "method_declar": "static func random(in range: ClosedRange<Int>) -> Int", "return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "method_name": "random", "params": [{"param_type": "ClosedRange<Int>", "param_description": "The range in which to create a random value.", "param_name": ["in", "range"]}, {"param_type": "inout T", "param_description": "The random number generator to use when creating the new random value.", "param_name": ["using", "generator"]}], "class_name": "Int", "method_declar": "static func random<T>(in range: ClosedRange<Int>, using generator: inout T) -> Int where T : RandomNumberGenerator", "return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Int"]}, "is_static": true}, {"method_description": "Adds two values and produces their sum.", "method_name": "+", "params": [{"param_type": "Int", "param_description": "The first value to add.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The second value to add.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func + (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Subtracts one value from another and produces their difference.", "method_name": "-", "params": [{"param_type": "Int", "param_description": "A numeric value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The value to subtract from lhs.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func - (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Multiplies two values and produces their product.", "method_name": "*", "params": [{"param_type": "Int", "param_description": "The first value to multiply.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The second value to multiply.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func * (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the quotient of dividing the first value by the second.", "method_name": "/", "params": [{"param_type": "Int", "param_description": "The value to divide.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The value to divide lhs by. rhs must not be zero.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func / (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the remainder of dividing the first value by the second.", "method_name": "%", "params": [{"param_type": "Int", "param_description": "The value to divide.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The value to divide lhs by. rhs must not be zero.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func % (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Adds two values and stores the result in the left-hand-side variable.", "method_name": "+=", "params": [{"param_type": "inout Int", "param_description": "The first value to add.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The second value to add.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func += (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Multiplies two values and stores the result in the left-hand-side variable.", "method_name": "*=", "params": [{"param_type": "inout Int", "param_description": "The first value to multiply.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The second value to multiply.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func *= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Divides the first value by the second and stores the quotient in the left-hand-side variable.", "method_name": "/=", "params": [{"param_type": "inout Int", "param_description": "The value to divide.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The value to divide lhs by. rhs must not be zero.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func /= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Divides the first value by the second and stores the remainder in the left-hand-side variable.", "method_name": "%=", "params": [{"param_type": "inout Int", "param_description": "The value to divide.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The value to divide lhs by. rhs must not be zero.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func %= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "", "method_name": "&+", "params": [{"param_type": "Int", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &+ (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the sum of the two given values, wrapping the result in case of any overflow.", "method_name": "&+", "params": [{"param_type": "Int", "param_description": "The first value to add.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The second value to add.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &+ (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "", "method_name": "&-", "params": [{"param_type": "Int", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &- (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the difference of the two given values, wrapping the result in case of any overflow.", "method_name": "&-", "params": [{"param_type": "Int", "param_description": "A numeric value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The value to subtract from lhs.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &- (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the product of the two given values, wrapping the result in case of any overflow.", "method_name": "&*", "params": [{"param_type": "Int", "param_description": "The first value to multiply.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The second value to multiply.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &* (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Adds two values and stores the result in the left-hand-side variable, wrapping any overflow.", "method_name": "&+=", "params": [{"param_type": "inout Int", "param_description": "The first value to add.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The second value to add.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &+= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.", "method_name": "&-=", "params": [{"param_type": "inout Int", "param_description": "A numeric value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The value to subtract from lhs.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &-= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Multiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.", "method_name": "&*=", "params": [{"param_type": "inout Int", "param_description": "The first value to multiply.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The second value to multiply.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &*= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the result of performing a bitwise AND operation on the two given values.", "method_name": "&", "params": [{"param_type": "Int", "param_description": "An integer value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another integer value.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func & (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the result of performing a bitwise AND operation on the two given values.", "method_name": "&", "params": [{"param_type": "Int", "param_description": "An integer value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another integer value.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func & (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Stores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable.", "method_name": "&=", "params": [{"param_type": "inout Int", "param_description": "An integer value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another integer value.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the result of performing a bitwise OR operation on the two given values.", "method_name": "|", "params": [{"param_type": "Int", "param_description": "An integer value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another integer value.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func | (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the result of performing a bitwise OR operation on the two given values.", "method_name": "|", "params": [{"param_type": "Int", "param_description": "An integer value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another integer value.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func | (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Stores the result of performing a bitwise OR operation on the two given values in the left-hand-side variable.", "method_name": "|=", "params": [{"param_type": "inout Int", "param_description": "An integer value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another integer value.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func |= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the result of performing a bitwise XOR operation on the two given values.", "method_name": "^", "params": [{"param_type": "Int", "param_description": "An integer value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another integer value.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func ^ (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the result of performing a bitwise XOR operation on the two given values.", "method_name": "^", "params": [{"param_type": "Int", "param_description": "An integer value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another integer value.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func ^ (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Stores the result of performing a bitwise XOR operation on the two given values in the left-hand-side variable.", "method_name": "^=", "params": [{"param_type": "inout Int", "param_description": "An integer value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another integer value.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func ^= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the inverse of the bits set in the argument.", "method_name": "~", "params": [{"param_type": "Int", "param_description": "", "param_name": ["x"]}], "class_name": "Int", "method_declar": "prefix static func ~ (x: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left.", "method_name": "func", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the left.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func << <Other>(lhs: Int, rhs: Other) -> Int where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left.", "method_name": "func", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the left.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func << <RHS>(lhs: Int, rhs: RHS) -> Int where RHS : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "is_static": true}, {"method_description": "Stores the result of shifting a value\u2019s binary representation the specified number of digits to the left in the left-hand-side variable.", "method_name": "func", "params": [{"param_type": "inout Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the left.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func <<= <Other>(lhs: inout Int, rhs: Other) where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right.", "method_name": ">>", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the right.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func >> <Other>(lhs: Int, rhs: Other) -> Int where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right.", "method_name": ">>", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the right.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func >> <RHS>(lhs: Int, rhs: RHS) -> Int where RHS : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "is_static": true}, {"method_description": "Stores the result of shifting a value\u2019s binary representation the specified number of digits to the right in the left-hand-side variable.", "method_name": ">>=", "params": [{"param_type": "inout Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the right.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func >>= <Other>(lhs: inout Int, rhs: Other) where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width.", "method_name": "&", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &<< (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width.", "method_name": "&", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &<< (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width.", "method_name": "&", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &<< <Other>(lhs: Int, rhs: Other) -> Int where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "method_name": "&", "params": [{"param_type": "inout Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &<<= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "method_name": "&", "params": [{"param_type": "inout Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &<<= <Other>(lhs: inout Int, rhs: Other) where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width.", "method_name": "&>>", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &>> (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width.", "method_name": "&>>", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &>> (lhs: Int, rhs: Int) -> Int", "return_value": {"return_description": [], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width.", "method_name": "&>>", "params": [{"param_type": "Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &>> <Other>(lhs: Int, rhs: Other) -> Int where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "is_static": true}, {"method_description": "Calculates the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "method_name": "&>>=", "params": [{"param_type": "inout Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &>>= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Calculates the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "method_name": "&>>=", "params": [{"param_type": "inout Int", "param_description": "The value to shift.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func &>>= <Other>(lhs: inout Int, rhs: Other) where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Returns the additive inverse of the specified value.", "method_name": "-", "params": [{"param_type": "Int", "param_description": "", "param_name": ["operand"]}], "class_name": "Int", "method_declar": "prefix static func - (operand: Int) -> Int", "return_value": {"return_description": ["The additive inverse of the argument."], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "Returns the given number unchanged.", "method_name": "+", "params": [{"param_type": "Int", "param_description": "", "param_name": ["x"]}], "class_name": "Int", "method_declar": "prefix static func + (x: Int) -> Int", "return_value": {"return_description": ["The given argument without any changes."], "return_name": [""], "return_type": ["In"]}, "is_static": true}, {"method_description": "", "method_name": "==", "params": [{"param_type": "Int", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func == (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "params": [{"param_type": "Int", "param_description": "", "param_name": ["x"]}, {"param_type": "Int", "param_description": "", "param_name": ["y"]}], "class_name": "Int", "method_declar": "static func == (x: Int, y: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the two given values are equal.", "method_name": "==", "params": [{"param_type": "Int", "param_description": "An integer to compare.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "Another integer to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func == <Other>(lhs: Int, rhs: Other) -> Bool where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "Int", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func != (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "", "method_name": "!=", "params": [{"param_type": "Int", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func != (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the two given values are not equal.", "method_name": "!=", "params": [{"param_type": "Int", "param_description": "An integer to compare.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "Another integer to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func != <Other>(lhs: Int, rhs: Other) -> Bool where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "", "method_name": "func", "params": [{"param_type": "Int", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func < (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "func", "params": [{"param_type": "Int", "param_description": "", "param_name": ["x"]}, {"param_type": "Int", "param_description": "", "param_name": ["y"]}], "class_name": "Int", "method_declar": "static func < (x: Int, y: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "func", "params": [{"param_type": "Int", "param_description": "An integer to compare.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "Another integer to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func < <Other>(lhs: Int, rhs: Other) -> Bool where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "", "method_name": "func", "params": [{"param_type": "Int", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func <= (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "Int", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func <= (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "Int", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func <= (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "Int", "param_description": "An integer to compare.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "Another integer to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func <= <Other>(lhs: Int, rhs: Other) -> Bool where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "", "method_name": ">", "params": [{"param_type": "Int", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func > (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Int", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func > (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Int", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func > (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Int", "param_description": "An integer to compare.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "Another integer to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func > <Other>(lhs: Int, rhs: Other) -> Bool where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "", "method_name": ">=", "params": [{"param_type": "Int", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func >= (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Int", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func >= (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Int", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func >= (lhs: Int, rhs: Int) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Int", "param_description": "An integer to compare.", "param_name": ["lhs"]}, {"param_type": "BinaryInteger", "param_description": "Another integer to compare.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func >= <Other>(lhs: Int, rhs: Other) -> Bool where Other : BinaryInteger", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "is_static": true}, {"method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "params": [{"param_type": "Int", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "Int", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Int", "method_declar": "static func ..< (minimum: Int, maximum: Int) -> Range<Int>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Int"]}, "is_static": true}, {"method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "params": [{"param_type": "Int", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "Int", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Int", "method_declar": "static func ... (minimum: Int, maximum: Int) -> ClosedRange<Int>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Int"]}, "is_static": true}, {"method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "params": [{"param_type": "Int", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}], "class_name": "Int", "method_declar": "postfix static func ... (minimum: Int) -> PartialRangeFrom<Int>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<Int"]}, "is_static": true}, {"method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "params": [{"param_type": "Int", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Int", "method_declar": "prefix static func ..< (maximum: Int) -> PartialRangeUpTo<Int>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<Int"]}, "is_static": true}, {"method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "params": [{"param_type": "Int", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Int", "method_declar": "prefix static func ... (maximum: Int) -> PartialRangeThrough<Int>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<Int"]}, "is_static": true}, {"method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable.", "method_name": "-=", "params": [{"param_type": "inout Int", "param_description": "A numeric value.", "param_name": ["lhs"]}, {"param_type": "Int", "param_description": "The value to subtract from lhs.", "param_name": ["rhs"]}], "class_name": "Int", "method_declar": "static func -= (lhs: inout Int, rhs: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": true}, {"method_description": "Replaces this value with its additive inverse.", "method_name": "negate", "params": [], "class_name": "Int", "method_declar": "mutating func negate()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the quotient and remainder of this value divided by the given value.", "method_name": "quotientAndRemainder", "params": [{"param_type": "Int) -> (quotien", "param_description": "The value to divide this value by.", "param_name": ["dividingBy", "rhs"]}, {"param_type": "Int", "param_description": "", "param_name": ["Int)", "->", "(quotient"]}, {"param_type": "Int", "param_description": "", "param_name": ["remainder"]}], "class_name": "Int", "method_declar": "func quotientAndRemainder(dividingBy rhs: Int) -> (quotient: Int, remainder: Int)", "return_value": {"return_description": ["A tuple containing the quotient and remainder of this value divided by rhs."], "return_name": [["quotient"], ["remainder"]], "return_type": ["Int", "Int"]}, "is_static": false}, {"method_description": "Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "method_name": "addingReportingOverflow", "params": [{"param_type": "Int) -> (partialValu", "param_description": "", "param_name": ["other"]}, {"param_type": "Int", "param_description": "", "param_name": ["Int)", "->", "(partialValue"]}, {"param_type": "Bool", "param_description": "", "param_name": ["overflow"]}], "class_name": "Int", "method_declar": "func addingReportingOverflow(_ other: Int) -> (partialValue: Int, overflow: Bool)", "return_value": {"return_description": ["A tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire sum. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["Int", "Bool"]}, "is_static": false}, {"method_description": "Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation.", "method_name": "subtractingReportingOverflow", "params": [{"param_type": "Int) -> (partialValu", "param_description": "", "param_name": ["other"]}, {"param_type": "Int", "param_description": "", "param_name": ["Int)", "->", "(partialValue"]}, {"param_type": "Bool", "param_description": "", "param_name": ["overflow"]}], "class_name": "Int", "method_declar": "func subtractingReportingOverflow(_ other: Int) -> (partialValue: Int, overflow: Bool)", "return_value": {"return_description": ["A tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire difference. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["Int", "Bool"]}, "is_static": false}, {"method_description": "Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "method_name": "multipliedReportingOverflow", "params": [{"param_type": "Int) -> (partialValu", "param_description": "", "param_name": ["by", "other"]}, {"param_type": "Int", "param_description": "", "param_name": ["Int)", "->", "(partialValue"]}, {"param_type": "Bool", "param_description": "", "param_name": ["overflow"]}], "class_name": "Int", "method_declar": "func multipliedReportingOverflow(by other: Int) -> (partialValue: Int, overflow: Bool)", "return_value": {"return_description": ["A tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire product. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["Int", "Bool"]}, "is_static": false}, {"method_description": "Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "method_name": "dividedReportingOverflow", "params": [{"param_type": "Int) -> (partialValu", "param_description": "", "param_name": ["by", "other"]}, {"param_type": "Int", "param_description": "", "param_name": ["Int)", "->", "(partialValue"]}, {"param_type": "Bool", "param_description": "", "param_name": ["overflow"]}], "class_name": "Int", "method_declar": "func dividedReportingOverflow(by other: Int) -> (partialValue: Int, overflow: Bool)", "return_value": {"return_description": ["A tuple containing the result of the division along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire quotient. If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["Int", "Bool"]}, "is_static": false}, {"method_description": "Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division.", "method_name": "remainderReportingOverflow", "params": [{"param_type": "Int) -> (partialValu", "param_description": "", "param_name": ["dividingBy", "other"]}, {"param_type": "Int", "param_description": "", "param_name": ["Int)", "->", "(partialValue"]}, {"param_type": "Bool", "param_description": "", "param_name": ["overflow"]}], "class_name": "Int", "method_declar": "func remainderReportingOverflow(dividingBy other: Int) -> (partialValue: Int, overflow: Bool)", "return_value": {"return_description": ["A tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire remainder. If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["Int", "Bool"]}, "is_static": false}, {"method_description": "Returns a tuple containing the high and low parts of the result of multiplying this value by the given value.", "method_name": "multipliedFullWidth", "params": [{"param_type": "Int) -> (hig", "param_description": "The value to multiply this value by.", "param_name": ["by", "other"]}, {"param_type": "Int", "param_description": "", "param_name": ["Int)", "->", "(high"]}, {"param_type": "Int.Magnitude", "param_description": "", "param_name": ["low"]}], "class_name": "Int", "method_declar": "func multipliedFullWidth(by other: Int) -> (high: Int, low: Int.Magnitude)", "return_value": {"return_description": ["A tuple containing the high and low parts of the result of multiplying this value and other."], "return_name": [["high"], ["low"]], "return_type": ["Int", "Int.Magnitude"]}, "is_static": false}, {"method_description": "Returns a tuple containing the quotient and remainder of dividing the given value by this value.", "method_name": "dividingFullWidth", "params": [{"param_type": "(hig", "param_description": "A tuple containing the high and low parts of a double-width integer. The high component of the value carries the sign, if the type is signed.", "param_name": ["dividend"]}, {"param_type": "Int", "param_description": "", "param_name": ["(high"]}, {"param_type": "Int.Magnitude)) -> (quotien", "param_description": "", "param_name": ["low"]}, {"param_type": "Int", "param_description": "", "param_name": ["Int.Magnitude))", "->", "(quotient"]}, {"param_type": "Int", "param_description": "", "param_name": ["remainder"]}], "class_name": "Int", "method_declar": "func dividingFullWidth(_ dividend: (high: Int, low: Int.Magnitude)) -> (quotient: Int, remainder: Int)", "return_value": {"return_description": ["A tuple containing the quotient and remainder of dividend divided by this value."], "return_name": [["quotient"], ["remainder"]], "return_type": ["Int", "Int"]}, "is_static": false}, {"method_description": "Returns the absolute value of the given number.", "method_name": "abs", "params": [{"param_type": "Comparable", "param_description": "A signed number.", "param_name": ["x"]}], "class_name": "Int", "method_declar": "func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric", "return_value": {"return_description": ["The absolute value of x."], "return_name": [""], "return_type": ["T"]}, "is_static": false}, {"method_description": "Returns -1 if this value is negative and 1 if it\u2019s positive; otherwise, 0.", "method_name": "signum", "params": [], "class_name": "Int", "method_declar": "func signum() -> Int", "return_value": {"return_description": ["The sign of this number, expressed as an integer of the same type."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Creates an integer from its little-endian representation, changing the byte order if necessary.", "method_name": "init", "params": [{"param_type": "Int", "param_description": "A value to use as the little-endian representation of the new integer.", "param_name": ["littleEndian", "value"]}], "class_name": "Int", "method_declar": "init(littleEndian value: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer from its big-endian representation, changing the byte order if necessary.", "method_name": "init", "params": [{"param_type": "Int", "param_description": "A value to use as the big-endian representation of the new integer.", "param_name": ["bigEndian", "value"]}], "class_name": "Int", "method_declar": "init(bigEndian value: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an integer that captures the full value of the given object identifier.", "method_name": "init", "params": [{"param_type": "ObjectIdentifier", "param_description": "", "param_name": ["bitPattern", "objectID"]}], "class_name": "Int", "method_declar": "init(bitPattern objectID: ObjectIdentifier)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new value with the bit pattern of the given pointer.", "method_name": "init", "params": [{"param_type": "OpaquePointer", "param_description": "The pointer to use as the source for the new integer.", "param_name": ["bitPattern", "pointer"]}], "class_name": "Int", "method_declar": "init(bitPattern pointer: OpaquePointer?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Encodes this value into the given encoder.", "method_name": "encode", "params": [{"param_type": "Encoder", "param_description": "The encoder to write data to.", "param_name": ["to", "encoder"]}], "class_name": "Int", "method_declar": "func encode(to encoder: Encoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new instance by decoding from the given decoder.", "method_name": "init", "params": [{"param_type": "Decoder", "param_description": "The decoder to read data from.", "param_name": ["from", "decoder"]}], "class_name": "Int", "method_declar": "init(from decoder: Decoder) throws", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "params": [{"param_type": "inout Hasher", "param_description": "The hasher to use when combining the components of this instance.", "param_name": ["into", "hasher"]}], "class_name": "Int", "method_declar": "func hash(into hasher: inout Hasher)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "init", "params": [{"param_type": "MLDataValue", "param_description": "", "param_name": ["from", "dataValue"]}], "class_name": "Int", "method_declar": "init?(from dataValue: MLDataValue)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates a new value equal to zero.", "method_name": "init", "params": [], "class_name": "Int", "method_declar": "init()", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an instance initialized to the specified integer value.", "method_name": "init", "params": [{"param_type": "Int", "param_description": "The value to create.", "param_name": ["integerLiteral", "value"]}], "class_name": "Int", "method_declar": "init(integerLiteral value: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the distance from this value to the given value, expressed as a stride.", "method_name": "distance", "params": [{"param_type": "Int", "param_description": "The value to calculate the distance to.", "param_name": ["to", "other"]}], "class_name": "Int", "method_declar": "func distance(to other: Int) -> Int", "return_value": {"return_description": ["The distance from this value to other."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns a value that is offset the specified distance from this value.", "method_name": "advanced", "params": [{"param_type": "Int", "param_description": "The distance to advance this value.", "param_name": ["by", "n"]}], "class_name": "Int", "method_declar": "func advanced(by n: Int) -> Int", "return_value": {"return_description": ["A value that is offset from this value by n."], "return_name": [""], "return_type": ["In"]}, "is_static": false}], "class_inherit_list": [], "class_name": "Int", "typealias": ["typealias Int.Magnitude = UInt", "typealias Int.IntegerLiteralType = Int"], "Vars": [{"var_description": "The magnitude of this value.", "var_type": "UInt", "is_static": false, "var_name": "magnitude"}, {"var_description": "The minimum representable integer in this type.", "var_type": "Int", "is_static": false, "var_name": "min"}, {"var_description": "The maximum representable integer in this type.", "var_type": "Int", "is_static": false, "var_name": "max"}, {"var_description": "A Boolean value indicating whether this type is a signed integer type.", "var_type": "Bool", "is_static": false, "var_name": "isSigned"}, {"var_description": "A representation of this integer with the byte order swapped.", "var_type": "Int", "is_static": false, "var_name": "byteSwapped"}, {"var_description": "The little-endian representation of this integer.", "var_type": "Int", "is_static": false, "var_name": "littleEndian"}, {"var_description": "The big-endian representation of this integer.", "var_type": "Int", "is_static": false, "var_name": "bigEndian"}, {"var_description": "The number of bits used for the underlying binary representation of values of this type.", "var_type": "Int", "is_static": false, "var_name": "bitWidth"}, {"var_description": "The number of bits in the binary representation of this value.", "var_type": "Int", "is_static": false, "var_name": "bitWidth"}, {"var_description": "A collection containing the words of this value\u2019s binary representation, in order from the least significant to most significant.", "var_type": "Int.Words", "is_static": false, "var_name": "words"}, {"var_description": "The number of bits equal to 1 in this value\u2019s binary representation.", "var_type": "Int", "is_static": false, "var_name": "nonzeroBitCount"}, {"var_description": "The number of leading zeros in this value\u2019s binary representation.", "var_type": "Int", "is_static": false, "var_name": "leadingZeroBitCount"}, {"var_description": "The number of trailing zeros in this value\u2019s binary representation.", "var_type": "Int", "is_static": false, "var_name": "trailingZeroBitCount"}, {"var_description": "A textual representation of this value.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A mirror that reflects the Int instance.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "", "var_type": "MLDataValue", "is_static": false, "var_name": "dataValue"}, {"var_description": "", "var_type": "MLDataValue.ValueType", "is_static": false, "var_name": "dataValueType"}], "class_type": "struct", "interface_list": ["CKRecordValueProtocol", "CustomPlaygroundQuickLookable", "CustomReflectable", "CVarArg", "FixedWidthInteger", "Hashable", "SignedInteger"], "package_name": "foundation", "subclass_list": []}