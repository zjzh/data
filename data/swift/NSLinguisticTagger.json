{"class_description": "NSLinguisticTagger provides a uniform interface to a variety of natural language processing functionality with support for many different languages and scripts. You can use this class to segment natural language text into paragraphs, sentences, or words, and tag information about those segments, such as part of speech, lexical class, lemma, script, and language.\nWhen you create a linguistic tagger, you specify what kind of information you're interested in by passing one or more NSLinguisticTagScheme values. Set the string property to the natural language text you want to analyze, and the linguistic tagger processes it according to the specified tag schemes. You can then enumerate over the tags in a specified range, using the methods described in Enumerating Linguistic Tags, to get the information requested for a given scheme and unit.\nA single instance of NSLinguisticTagger should not be used simultaneously from multiple threads.\n", "Methods": [{"method_description": "Creates a linguistic tagger instance using the specified tag schemes and options.", "method_name": "init", "params": [{"param_type": "[NSLinguisticTagScheme]", "param_description": "An array of tag schemes to be used. See NSLinguisticTagScheme for the possible values.", "param_name": ["tagSchemes"]}, {"param_type": "Int", "param_description": "Reserved for future use. Specify 0 for this parameter.", "param_name": ["options", "opts"]}], "class_name": "NSLinguisticTagger", "method_declar": "init(tagSchemes: [NSLinguisticTagScheme], options opts: Int)", "return_value": {"return_description": ["An initialized linguistic tagger."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the tag schemes available for a particular unit and language on the current device. ", "method_name": "availableTagSchemes", "params": [{"param_type": "NSLinguisticTaggerUnit", "param_description": "The linguistic unit. For possible values, see NSLinguisticTaggerUnit.", "param_name": ["for", "unit"]}, {"param_type": "String", "param_description": "A BCP-47 tag identifying the language. For example, \"en\" for English or  \"zh-Hans\" for Chinese written using the Simplified Chinese script.", "param_name": ["language"]}], "class_name": "NSLinguisticTagger", "method_declar": "class func availableTagSchemes(for unit: NSLinguisticTaggerUnit, language: String) -> [NSLinguisticTagScheme]", "return_value": {"return_description": ["The supported tag schemes. For possible values, see NSLinguisticTagScheme."], "return_name": [""], "return_type": ["[NSLinguisticTagScheme"]}, "is_static": false}, {"method_description": "Returns the tag schemes available for a particular language on the current device. ", "method_name": "availableTagSchemes", "params": [{"param_type": "String", "param_description": "A BCP-47 tag identifying the language. For example, \"en\" for English or  \"zh-Hans\" for Chinese written using the Simplified Chinese script.", "param_name": ["forLanguage", "language"]}], "class_name": "NSLinguisticTagger", "method_declar": "class func availableTagSchemes(forLanguage language: String) -> [NSLinguisticTagScheme]", "return_value": {"return_description": ["The available tag schemes. For possible values, see NSLinguisticTagScheme."], "return_name": [""], "return_type": ["[NSLinguisticTagScheme"]}, "is_static": false}, {"method_description": "Returns the dominant language for the specified string.", "method_name": "dominantLanguage", "params": [{"param_type": "String", "param_description": "The string for which the dominant language is determined. ", "param_name": ["for", "string"]}], "class_name": "NSLinguisticTagger", "method_declar": "class func dominantLanguage(for string: String) -> String?", "return_value": {"return_description": ["The BCP-47 tag identifying the dominant language of the string, or the tag \"und\" if a specific language cannot be determined."], "return_name": [""], "return_type": ["Strin"]}, "is_static": false}, {"method_description": "Returns the orthography at the index and also returns the effective range.", "method_name": "orthography", "params": [{"param_type": "Int", "param_description": "The character index to begin examination.", "param_name": ["at", "charIndex"]}, {"param_type": "NSRangePointer", "param_description": "An NSRangePointer that, upon completion, contains the range of the orthography containing charIndex.", "param_name": ["effectiveRange"]}], "class_name": "NSLinguisticTagger", "method_declar": "func orthography(at charIndex: Int, effectiveRange: NSRangePointer?) -> NSOrthography?", "return_value": {"return_description": ["The orthography for the location."], "return_name": [""], "return_type": ["NSOrthograph"]}, "is_static": false}, {"method_description": "Sets the orthography for the specified range.", "method_name": "setOrthography", "params": [{"param_type": "NSOrthography", "param_description": "The orthography.", "param_name": ["orthography"]}, {"param_type": "NSRange", "param_description": "", "param_name": ["range"]}], "class_name": "NSLinguisticTagger", "method_declar": "func setOrthography(_ orthography: NSOrthography?, range: NSRange)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Enumerates over a given range of the string for a particular unit and calls the specified block for each tag.", "method_name": "enumerateTags", "params": [{"param_type": "NSRange", "param_description": "The range to analyze.", "param_name": ["in", "range"]}, {"param_type": "NSLinguisticTaggerUnit", "param_description": "The linguistic unit. For possible values, see NSLinguisticTaggerUnit.", "param_name": ["unit"]}, {"param_type": "NSLinguisticTagScheme", "param_description": "", "param_name": ["scheme"]}, {"param_type": "NSLinguisticTagger.Options", "param_description": "", "param_name": ["options"]}, {"param_type": "(NSLinguisticTag, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to ranges of the string.The block takes the following arguments:tagThe located linguistic tag.tokenRangeThe range of the linguistic tag.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.", "param_name": ["using", "block"]}], "class_name": "NSLinguisticTagger", "method_declar": "func enumerateTags(in range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTagger.Options = [], using block: (NSLinguisticTag?, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Enumerates over a given range of the string and calls the specified block for each tag.", "method_name": "enumerateTags", "params": [{"param_type": "NSRange", "param_description": "The range to analyze.", "param_name": ["in", "range"]}, {"param_type": "NSLinguisticTagScheme", "param_description": "The tag scheme. For possible values, see NSLinguisticTagScheme.", "param_name": ["scheme", "tagScheme"]}, {"param_type": "NSLinguisticTagger.Options", "param_description": "The linguistic tagger options to use. See NSLinguisticTagger.Options for possible values.", "param_name": ["options", "opts"]}, {"param_type": "(NSLinguisticTag, NSRange, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to ranges of the string.The block takes the following arguments:tagThe located linguistic tag.tokenRangeThe range of the linguistic tag.sentenceRangeThe range of the sentence in which the tag occurs.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.", "param_name": ["using", "block"]}], "class_name": "NSLinguisticTagger", "method_declar": "func enumerateTags(in range: NSRange, scheme tagScheme: NSLinguisticTagScheme, options opts: NSLinguisticTagger.Options = [], using block: (NSLinguisticTag?, NSRange, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Enumerates over a given string and calls the specified block for each tag.", "method_name": "enumerateTags", "params": [{"param_type": "String", "param_description": "The string to enumerate over.", "param_name": ["for", "string"]}, {"param_type": "NSRange", "param_description": "The range to analyze.", "param_name": ["range"]}, {"param_type": "NSLinguisticTaggerUnit", "param_description": "The linguistic unit. For possible values, see NSLinguisticTaggerUnit", "param_name": ["unit"]}, {"param_type": "NSLinguisticTagScheme", "param_description": "", "param_name": ["scheme"]}, {"param_type": "NSLinguisticTagger.Options", "param_description": "", "param_name": ["options"]}, {"param_type": "NSOrthography", "param_description": "The orthography of the string. If unspecified, the orthography is automatically detected.", "param_name": ["orthography"]}, {"param_type": "(NSLinguisticTag, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "The block to apply to ranges of the string.The block takes the following arguments:tagThe located linguistic tag.tokenRangeThe range of the linguistic tag.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.", "param_name": ["using", "block"]}], "class_name": "NSLinguisticTagger", "method_declar": "class func enumerateTags(for string: String, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTagger.Options = [], orthography: NSOrthography?, using block: (NSLinguisticTag?, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Returns a tag for a single scheme, for a given linguistic unit, at the specified character position.", "method_name": "tag", "params": [{"param_type": "Int", "param_description": "The position of the initial character.", "param_name": ["at", "charIndex"]}, {"param_type": "NSLinguisticTaggerUnit", "param_description": "The linguistic unit. See NSLinguisticTaggerUnit for possible values.", "param_name": ["unit"]}, {"param_type": "NSLinguisticTagScheme", "param_description": "", "param_name": ["scheme"]}, {"param_type": "NSRangePointer", "param_description": "A pointer to the token range.", "param_name": ["tokenRange"]}], "class_name": "NSLinguisticTagger", "method_declar": "func tag(at charIndex: Int, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, tokenRange: NSRangePointer?) -> NSLinguisticTag?", "return_value": {"return_description": ["Returns the tag for the requested tag scheme and linguistic unit, or nil. If a tag is returned, this function returns by reference the range of the token to tokenRange."], "return_name": [""], "return_type": ["NSLinguisticTa"]}, "is_static": false}, {"method_description": "Returns a tag for a single scheme at the specified character position.", "method_name": "tag", "params": [{"param_type": "Int", "param_description": "The position of the initial character.", "param_name": ["at", "charIndex"]}, {"param_type": "NSLinguisticTagScheme", "param_description": "", "param_name": ["scheme"]}, {"param_type": "NSRangePointer", "param_description": "A pointer to the token range.", "param_name": ["tokenRange"]}, {"param_type": "NSRangePointer", "param_description": "A pointer to the range of the sentence. ", "param_name": ["sentenceRange"]}], "class_name": "NSLinguisticTagger", "method_declar": "func tag(at charIndex: Int, scheme: NSLinguisticTagScheme, tokenRange: NSRangePointer?, sentenceRange: NSRangePointer?) -> NSLinguisticTag?", "return_value": {"return_description": ["Returns the tag for the requested tag scheme, or nil. If a tag is returned, this function returns by reference the range of the token to tokenRange, and the range of the enclosing sentence to sentenceRange, if applicable. "], "return_name": [""], "return_type": ["NSLinguisticTa"]}, "is_static": false}, {"method_description": "Returns a tag for a single scheme, for a given linguistic unit, at the specified character position in a string.", "method_name": "tag", "params": [{"param_type": "String", "param_description": "", "param_name": ["for", "string"]}, {"param_type": "Int", "param_description": "The position of the initial character.", "param_name": ["at", "charIndex"]}, {"param_type": "NSLinguisticTaggerUnit", "param_description": "The linguistic unit. See NSLinguisticTaggerUnit for possible values.", "param_name": ["unit"]}, {"param_type": "NSLinguisticTagScheme", "param_description": "", "param_name": ["scheme"]}, {"param_type": "NSOrthography", "param_description": "", "param_name": ["orthography"]}, {"param_type": "NSRangePointer", "param_description": "A pointer to the token range.", "param_name": ["tokenRange"]}], "class_name": "NSLinguisticTagger", "method_declar": "class func tag(for string: String, at charIndex: Int, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, orthography: NSOrthography?, tokenRange: NSRangePointer?) -> NSLinguisticTag?", "return_value": {"return_description": ["Returns the tag for the requested tag scheme and linguistic unit, or nil. If a tag is returned, this function returns by reference the range of the token to tokenRange."], "return_name": [""], "return_type": ["NSLinguisticTa"]}, "is_static": false}, {"method_description": "Returns an array of linguistic tags and token ranges for a given string range and linguistic unit.", "method_name": "tags", "params": [{"param_type": "NSRange", "param_description": "The range from which to return tags.", "param_name": ["in", "range"]}, {"param_type": "NSLinguisticTaggerUnit", "param_description": "The linguistic unit. See NSLinguisticTaggerUnit for possible values.", "param_name": ["unit"]}, {"param_type": "NSLinguisticTagScheme", "param_description": "", "param_name": ["scheme"]}, {"param_type": "NSLinguisticTagger.Options", "param_description": "", "param_name": ["options"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSArray>", "param_description": "Returns by reference an array of token ranges.", "param_name": ["tokenRanges"]}], "class_name": "NSLinguisticTagger", "method_declar": "func tags(in range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTagger.Options = [], tokenRanges: AutoreleasingUnsafeMutablePointer<NSArray?>?) -> [NSLinguisticTag]", "return_value": {"return_description": ["An array of the tags in the requested range."], "return_name": [""], "return_type": ["[NSLinguisticTag"]}, "is_static": false}, {"method_description": "Returns an array of linguistic tags and token ranges for a given string range.", "method_name": "tags", "params": [{"param_type": "NSRange", "param_description": "The range from which to return tags.", "param_name": ["in", "range"]}, {"param_type": "String", "param_description": "The tag scheme. See NSLinguisticTagScheme for possible values.", "param_name": ["scheme", "tagScheme"]}, {"param_type": "NSLinguisticTagger.Options", "param_description": "The linguistic tagger options to use. See NSLinguisticTagger.Options for possible values. ", "param_name": ["options", "opts"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSArray>", "param_description": "Returns by reference an array of token ranges.", "param_name": ["tokenRanges"]}], "class_name": "NSLinguisticTagger", "method_declar": "func tags(in range: NSRange, scheme tagScheme: String, options opts: NSLinguisticTagger.Options = [], tokenRanges: AutoreleasingUnsafeMutablePointer<NSArray?>?) -> [String]", "return_value": {"return_description": ["An array of the tags in the requested range."], "return_name": [""], "return_type": ["[String"]}, "is_static": false}, {"method_description": "Returns an array of linguistic tags and token ranges for a given string and linguistic unit.", "method_name": "tags", "params": [{"param_type": "String", "param_description": "", "param_name": ["for", "string"]}, {"param_type": "NSRange", "param_description": "The range from which to return tags.", "param_name": ["range"]}, {"param_type": "NSLinguisticTaggerUnit", "param_description": "The linguistic unit. See NSLinguisticTaggerUnit for possible values.", "param_name": ["unit"]}, {"param_type": "NSLinguisticTagScheme", "param_description": "", "param_name": ["scheme"]}, {"param_type": "NSLinguisticTagger.Options", "param_description": "", "param_name": ["options"]}, {"param_type": "NSOrthography", "param_description": "", "param_name": ["orthography"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSArray>", "param_description": "Returns by reference an array of token ranges.", "param_name": ["tokenRanges"]}], "class_name": "NSLinguisticTagger", "method_declar": "class func tags(for string: String, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTagger.Options = [], orthography: NSOrthography?, tokenRanges: AutoreleasingUnsafeMutablePointer<NSArray?>?) -> [NSLinguisticTag]", "return_value": {"return_description": ["An array of the tags in the requested range."], "return_name": [""], "return_type": ["[NSLinguisticTag"]}, "is_static": false}, {"method_description": "Returns the range of the linguistic unit containing the specified character index. ", "method_name": "tokenRange", "params": [{"param_type": "Int", "param_description": "The character index to begin examination.", "param_name": ["at", "charIndex"]}, {"param_type": "NSLinguisticTaggerUnit", "param_description": "The linguistic unit. For possible values, see NSLinguisticTaggerUnit.", "param_name": ["unit"]}], "class_name": "NSLinguisticTagger", "method_declar": "func tokenRange(at charIndex: Int, unit: NSLinguisticTaggerUnit) -> NSRange", "return_value": {"return_description": ["The range of the substring for the linguistic unit."], "return_name": [""], "return_type": ["NSRang"]}, "is_static": false}, {"method_description": "Returns the range of a sentence containing the specified range.", "method_name": "sentenceRange", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["for", "range"]}], "class_name": "NSLinguisticTagger", "method_declar": "func sentenceRange(for range: NSRange) -> NSRange", "return_value": {"return_description": ["Returns the range of the sentence."], "return_name": [""], "return_type": ["NSRang"]}, "is_static": false}, {"method_description": "Returns an array of possible tags for the given scheme at the specified range, supplying matching scores.", "method_name": "possibleTags", "params": [{"param_type": "Int", "param_description": "The position of the initial character.", "param_name": ["at", "charIndex"]}, {"param_type": "String", "param_description": "The tag scheme. See NSLinguisticTagScheme for possible values.", "param_name": ["scheme", "tagScheme"]}, {"param_type": "NSRangePointer", "param_description": "The token range.", "param_name": ["tokenRange"]}, {"param_type": "NSRangePointer", "param_description": "The range of the sentence.", "param_name": ["sentenceRange"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSArray>", "param_description": "Returns by reference an array of numeric scores indicating the likelihood that the range matches the tag scheme.", "param_name": ["scores"]}], "class_name": "NSLinguisticTagger", "method_declar": "func possibleTags(at charIndex: Int, scheme tagScheme: String, tokenRange: NSRangePointer?, sentenceRange: NSRangePointer?, scores: AutoreleasingUnsafeMutablePointer<NSArray?>?) -> [String]?", "return_value": {"return_description": ["Returns an array of possible tags for the tag scheme at the specified location, starting with the most likely tag scheme.  For some tag schemes only a single tag will be returned, but for others a list of possibilities will be provided."], "return_name": [""], "return_type": ["[String"]}, "is_static": false}, {"method_description": "Notifies the linguistic tagger that the string (if mutable) has changed as specified by the parameters.", "method_name": "stringEdited", "params": [{"param_type": "NSRange", "param_description": "The range in the final string that was edited.", "param_name": ["in", "newRange"]}, {"param_type": "Int", "param_description": "The change in length.", "param_name": ["changeInLength", "delta"]}], "class_name": "NSLinguisticTagger", "method_declar": "func stringEdited(in newRange: NSRange, changeInLength delta: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSLinguisticTagger", "typealias": [], "Vars": [{"var_description": "The string being analyzed by the linguistic tagger.", "var_type": "String", "is_static": false, "var_name": "string"}, {"var_description": "Returns the tag schemes configured for this linguistic tagger. For possible values, see NSLinguisticTagScheme.", "var_type": "[NSLinguisticTagScheme]", "is_static": false, "var_name": "tagSchemes"}, {"var_description": "Returns the dominant language of the string set for the linguistic tagger.", "var_type": "String", "is_static": false, "var_name": "dominantLanguage"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}