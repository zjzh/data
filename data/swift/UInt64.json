{"Methods": [{"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt64", "Bool"], "return_description": ["A tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire sum. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs."]}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64) -> (partialValu", "param_name": ["other"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["UInt64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "is_static": false, "method_name": "addingReportingOverflow", "method_declar": "func addingReportingOverflow(_ other: UInt64) -> (partialValue: UInt64, overflow: Bool)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": ["A value that is offset from this value by n."]}, "class_name": "UInt64", "params": [{"param_description": "The distance to advance this value.", "param_type": "Int", "param_name": ["by", "n"]}], "method_description": "Returns a value that is offset the specified distance from this value.", "is_static": false, "method_name": "advanced", "method_declar": "func advanced(by n: Int) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["Int"], "return_description": ["The distance from this value to other."]}, "class_name": "UInt64", "params": [{"param_description": "The value to calculate the distance to.", "param_type": "UInt64", "param_name": ["to", "other"]}], "method_description": "Returns the distance from this value to the given value, expressed as a stride.", "is_static": false, "method_name": "distance", "method_declar": "func distance(to other: UInt64) -> Int"}, {"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt64", "Bool"], "return_description": ["A tuple containing the result of the division along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire quotient. If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend."]}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64) -> (partialValu", "param_name": ["by", "other"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["UInt64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "is_static": false, "method_name": "dividedReportingOverflow", "method_declar": "func dividedReportingOverflow(by other: UInt64) -> (partialValue: UInt64, overflow: Bool)"}, {"return_value": {"return_name": [["quotient"], ["remainder"]], "return_type": ["UInt64", "UInt64"], "return_description": ["A tuple containing the quotient and remainder of dividend divided by this value."]}, "class_name": "UInt64", "params": [{"param_description": "A tuple containing the high and low parts of a double-width integer. The high component of the value carries the sign, if the type is signed.", "param_type": "(hig", "param_name": ["dividend"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["(high"]}, {"param_description": "", "param_type": "UInt64.Magnitude)) -> (quotien", "param_name": ["low"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["UInt64.Magnitude))", "->", "(quotient"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["remainder"]}], "method_description": "Returns a tuple containing the quotient and remainder of dividing the given value by this value.", "is_static": false, "method_name": "dividingFullWidth", "method_declar": "func dividingFullWidth(_ dividend: (high: UInt64, low: UInt64.Magnitude)) -> (quotient: UInt64, remainder: UInt64)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The encoder to write data to.", "param_type": "Encoder", "param_name": ["to", "encoder"]}], "method_description": "Encodes this value into the given encoder.", "is_static": false, "method_name": "encode", "method_declar": "func encode(to encoder: Encoder) throws"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}], "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "is_static": false, "method_name": "hash", "method_declar": "func hash(into hasher: inout Hasher)"}, {"return_value": {"return_name": [["high"], ["low"]], "return_type": ["UInt64", "UInt64.Magnitude"], "return_description": ["A tuple containing the high and low parts of the result of multiplying this value and other."]}, "class_name": "UInt64", "params": [{"param_description": "The value to multiply this value by.", "param_type": "UInt64) -> (hig", "param_name": ["by", "other"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["UInt64)", "->", "(high"]}, {"param_description": "", "param_type": "UInt64.Magnitude", "param_name": ["low"]}], "method_description": "Returns a tuple containing the high and low parts of the result of multiplying this value by the given value.", "is_static": false, "method_name": "multipliedFullWidth", "method_declar": "func multipliedFullWidth(by other: UInt64) -> (high: UInt64, low: UInt64.Magnitude)"}, {"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt64", "Bool"], "return_description": ["A tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire product. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs."]}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64) -> (partialValu", "param_name": ["by", "other"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["UInt64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "is_static": false, "method_name": "multipliedReportingOverflow", "method_declar": "func multipliedReportingOverflow(by other: UInt64) -> (partialValue: UInt64, overflow: Bool)"}, {"return_value": {"return_name": [["quotient"], ["remainder"]], "return_type": ["UInt64", "UInt64"], "return_description": ["A tuple containing the quotient and remainder of this value divided by rhs."]}, "class_name": "UInt64", "params": [{"param_description": "The value to divide this value by.", "param_type": "UInt64) -> (quotien", "param_name": ["dividingBy", "rhs"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["UInt64)", "->", "(quotient"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["remainder"]}], "method_description": "Returns the quotient and remainder of this value divided by the given value.", "is_static": false, "method_name": "quotientAndRemainder", "method_declar": "func quotientAndRemainder(dividingBy rhs: UInt64) -> (quotient: UInt64, remainder: UInt64)"}, {"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt64", "Bool"], "return_description": ["A tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire remainder. If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend."]}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64) -> (partialValu", "param_name": ["dividingBy", "other"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["UInt64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division.", "is_static": false, "method_name": "remainderReportingOverflow", "method_declar": "func remainderReportingOverflow(dividingBy other: UInt64) -> (partialValue: UInt64, overflow: Bool)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": ["The sign of this number, expressed as an integer of the same type."]}, "class_name": "UInt64", "params": [], "method_description": "Returns -1 if this value is negative and 1 if it\u2019s positive; otherwise, 0.", "is_static": false, "method_name": "signum", "method_declar": "func signum() -> UInt64"}, {"return_value": {"return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt64", "Bool"], "return_description": ["A tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire difference. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value."]}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64) -> (partialValu", "param_name": ["other"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["UInt64)", "->", "(partialValue"]}, {"param_description": "", "param_type": "Bool", "param_name": ["overflow"]}], "method_description": "Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation.", "is_static": false, "method_name": "subtractingReportingOverflow", "method_declar": "func subtractingReportingOverflow(_ other: UInt64) -> (partialValue: UInt64, overflow: Bool)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": ["A random value within the bounds of range."]}, "class_name": "UInt64", "params": [{"param_description": "The range in which to create a random value.", "param_type": "ClosedRange<UInt64>", "param_name": ["in", "range"]}], "method_description": "Returns a random value within the specified range.", "is_static": true, "method_name": "random", "method_declar": "static func random(in range: ClosedRange<UInt64>) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": ["A random value within the bounds of range."]}, "class_name": "UInt64", "params": [{"param_description": "The range in which to create a random value. range must not be empty.", "param_type": "Range<UInt64>", "param_name": ["in", "range"]}], "method_description": "Returns a random value within the specified range.", "is_static": true, "method_name": "random", "method_declar": "static func random(in range: Range<UInt64>) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": ["A random value within the bounds of range."]}, "class_name": "UInt64", "params": [{"param_description": "The range in which to create a random value.", "param_type": "ClosedRange<UInt64>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout T", "param_name": ["using", "generator"]}], "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "is_static": true, "method_name": "random", "method_declar": "static func random<T>(in range: ClosedRange<UInt64>, using generator: inout T) -> UInt64 where T : RandomNumberGenerator"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": ["A random value within the bounds of range."]}, "class_name": "UInt64", "params": [{"param_description": "The range in which to create a random value. range must not be empty.", "param_type": "Range<UInt64>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout T", "param_name": ["using", "generator"]}], "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "is_static": true, "method_name": "random", "method_declar": "static func random<T>(in range: Range<UInt64>, using generator: inout T) -> UInt64 where T : RandomNumberGenerator"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the two given values are not equal.", "is_static": true, "method_name": "!=", "method_declar": "static func != <Other>(lhs: UInt64, rhs: Other) -> Bool where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A value to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether two values are not equal.", "is_static": true, "method_name": "!=", "method_declar": "static func != (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "!=", "method_declar": "static func != (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to divide.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The value to divide lhs by. rhs must not be zero.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the remainder of dividing the first value by the second.", "is_static": true, "method_name": "%", "method_declar": "static func % (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to divide.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The value to divide lhs by. rhs must not be zero.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Divides the first value by the second and stores the remainder in the left-hand-side variable.", "is_static": true, "method_name": "%=", "method_declar": "static func %= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer value.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of performing a bitwise AND operation on the two given values.", "is_static": true, "method_name": "&", "method_declar": "static func & (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer value.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of performing a bitwise AND operation on the two given values.", "is_static": true, "method_name": "&", "method_declar": "static func & (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The first value to multiply.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The second value to multiply.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the product of the two given values, wrapping the result in case of any overflow.", "is_static": true, "method_name": "&*", "method_declar": "static func &* (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The first value to multiply.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The second value to multiply.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Multiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.", "is_static": true, "method_name": "&*=", "method_declar": "static func &*= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The first value to add.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the sum of the two given values, wrapping the result in case of any overflow.", "is_static": true, "method_name": "&+", "method_declar": "static func &+ (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The first value to add.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Adds two values and stores the result in the left-hand-side variable, wrapping any overflow.", "is_static": true, "method_name": "&+=", "method_declar": "static func &+= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A numeric value.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the difference of the two given values, wrapping the result in case of any overflow.", "is_static": true, "method_name": "&-", "method_declar": "static func &- (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A numeric value.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.", "is_static": true, "method_name": "&-=", "method_declar": "static func &-= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width.", "is_static": true, "method_name": "&", "method_declar": "static func &<< <Other>(lhs: UInt64, rhs: Other) -> UInt64 where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width.", "is_static": true, "method_name": "&", "method_declar": "static func &<< (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width.", "is_static": true, "method_name": "&", "method_declar": "static func &<< (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "is_static": true, "method_name": "&", "method_declar": "static func &<<= <Other>(lhs: inout UInt64, rhs: Other) where Other : BinaryInteger"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "is_static": true, "method_name": "&", "method_declar": "static func &<<= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer value.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Stores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable.", "is_static": true, "method_name": "&=", "method_declar": "static func &= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width.", "is_static": true, "method_name": "&>>", "method_declar": "static func &>> <Other>(lhs: UInt64, rhs: Other) -> UInt64 where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width.", "is_static": true, "method_name": "&>>", "method_declar": "static func &>> (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width.", "is_static": true, "method_name": "&>>", "method_declar": "static func &>> (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Calculates the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "is_static": true, "method_name": "&>>=", "method_declar": "static func &>>= <Other>(lhs: inout UInt64, rhs: Other) where Other : BinaryInteger"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Calculates the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "is_static": true, "method_name": "&>>=", "method_declar": "static func &>>= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The first value to multiply.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The second value to multiply.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Multiplies two values and produces their product.", "is_static": true, "method_name": "*", "method_declar": "static func * (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The first value to multiply.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The second value to multiply.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Multiplies two values and stores the result in the left-hand-side variable.", "is_static": true, "method_name": "*=", "method_declar": "static func *= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": ["The given argument without any changes."]}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["x"]}], "method_description": "Returns the given number unchanged.", "is_static": true, "method_name": "+", "method_declar": "prefix static func + (x: UInt64) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The first value to add.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Adds two values and produces their sum.", "is_static": true, "method_name": "+", "method_declar": "static func + (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The first value to add.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Adds two values and stores the result in the left-hand-side variable.", "is_static": true, "method_name": "+=", "method_declar": "static func += (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A numeric value.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Subtracts one value from another and produces their difference.", "is_static": true, "method_name": "-", "method_declar": "static func - (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A numeric value.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable.", "is_static": true, "method_name": "-=", "method_declar": "static func -= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeFrom<UInt64>"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The lower bound for the range.", "param_type": "UInt64", "param_name": ["minimum"]}], "method_description": "Returns a partial range extending upward from a lower bound.", "is_static": true, "method_name": "...", "method_declar": "postfix static func ... (minimum: UInt64) -> PartialRangeFrom<UInt64>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeThrough<UInt64>"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The upper bound for the range.", "param_type": "UInt64", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, and including, its upper bound.", "is_static": true, "method_name": "...", "method_declar": "prefix static func ... (maximum: UInt64) -> PartialRangeThrough<UInt64>"}, {"return_value": {"return_name": [""], "return_type": ["ClosedRange<UInt64>"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The lower bound for the range.", "param_type": "UInt64", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "UInt64", "param_name": ["maximum"]}], "method_description": "Returns a closed range that contains both of its bounds.", "is_static": true, "method_name": "...", "method_declar": "static func ... (minimum: UInt64, maximum: UInt64) -> ClosedRange<UInt64>"}, {"return_value": {"return_name": [""], "return_type": ["PartialRangeUpTo<UInt64>"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The upper bound for the range.", "param_type": "UInt64", "param_name": ["maximum"]}], "method_description": "Returns a partial range up to, but not including, its upper bound.", "is_static": true, "method_name": "..", "method_declar": "prefix static func ..< (maximum: UInt64) -> PartialRangeUpTo<UInt64>"}, {"return_value": {"return_name": [""], "return_type": ["Range<UInt64>"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The lower bound for the range.", "param_type": "UInt64", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "UInt64", "param_name": ["maximum"]}], "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "is_static": true, "method_name": "..", "method_declar": "static func ..< (minimum: UInt64, maximum: UInt64) -> Range<UInt64>"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to divide.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The value to divide lhs by. rhs must not be zero.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the quotient of dividing the first value by the second.", "is_static": true, "method_name": "/", "method_declar": "static func / (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to divide.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The value to divide lhs by. rhs must not be zero.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Divides the first value by the second and stores the quotient in the left-hand-side variable.", "is_static": true, "method_name": "/=", "method_declar": "static func /= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func < <Other>(lhs: UInt64, rhs: Other) -> Bool where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["x"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["y"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func < (x: UInt64, y: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "func", "method_declar": "static func < (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left.", "is_static": true, "method_name": "func", "method_declar": "static func << <Other>(lhs: UInt64, rhs: Other) -> UInt64 where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left.", "is_static": true, "method_name": "func", "method_declar": "static func << <RHS>(lhs: UInt64, rhs: RHS) -> UInt64 where RHS : BinaryInteger"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Stores the result of shifting a value\u2019s binary representation the specified number of digits to the left in the left-hand-side variable.", "is_static": true, "method_name": "func", "method_declar": "static func <<= <Other>(lhs: inout UInt64, rhs: Other) where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func <= <Other>(lhs: UInt64, rhs: Other) -> Bool where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "func", "method_declar": "static func <= (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A value to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func <= (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A value to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "is_static": true, "method_name": "func", "method_declar": "static func <= (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the two given values are equal.", "is_static": true, "method_name": "==", "method_declar": "static func == <Other>(lhs: UInt64, rhs: Other) -> Bool where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["x"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["y"]}], "method_description": "Returns a Boolean value indicating whether two values are equal.", "is_static": true, "method_name": "==", "method_declar": "static func == (x: UInt64, y: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": "==", "method_declar": "static func == (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "is_static": true, "method_name": ">", "method_declar": "static func > <Other>(lhs: UInt64, rhs: Other) -> Bool where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": ">", "method_declar": "static func > (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A value to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "is_static": true, "method_name": ">", "method_declar": "static func > (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A value to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "is_static": true, "method_name": ">", "method_declar": "static func > (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "is_static": true, "method_name": ">=", "method_declar": "static func >= <Other>(lhs: UInt64, rhs: Other) -> Bool where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "", "is_static": true, "method_name": ">=", "method_declar": "static func >= (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."]}, "class_name": "UInt64", "params": [{"param_description": "A value to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "is_static": true, "method_name": ">=", "method_declar": "static func >= (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["Bool"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "A value to compare.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "is_static": true, "method_name": ">=", "method_declar": "static func >= (lhs: UInt64, rhs: UInt64) -> Bool"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right.", "is_static": true, "method_name": ">>", "method_declar": "static func >> <Other>(lhs: UInt64, rhs: Other) -> UInt64 where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right.", "is_static": true, "method_name": ">>", "method_declar": "static func >> <RHS>(lhs: UInt64, rhs: RHS) -> UInt64 where RHS : BinaryInteger"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right.", "param_type": "BinaryInteger", "param_name": ["rhs"]}], "method_description": "Stores the result of shifting a value\u2019s binary representation the specified number of digits to the right in the left-hand-side variable.", "is_static": true, "method_name": ">>=", "method_declar": "static func >>= <Other>(lhs: inout UInt64, rhs: Other) where Other : BinaryInteger"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer value.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of performing a bitwise XOR operation on the two given values.", "is_static": true, "method_name": "^", "method_declar": "static func ^ (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer value.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of performing a bitwise XOR operation on the two given values.", "is_static": true, "method_name": "^", "method_declar": "static func ^ (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer value.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Stores the result of performing a bitwise XOR operation on the two given values in the left-hand-side variable.", "is_static": true, "method_name": "^=", "method_declar": "static func ^= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer value.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of performing a bitwise OR operation on the two given values.", "is_static": true, "method_name": "|", "method_declar": "static func | (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer value.", "param_type": "UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Returns the result of performing a bitwise OR operation on the two given values.", "is_static": true, "method_name": "|", "method_declar": "static func | (lhs: UInt64, rhs: UInt64) -> UInt64"}, {"return_value": {"return_name": [], "return_type": [], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "An integer value.", "param_type": "inout UInt64", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt64", "param_name": ["rhs"]}], "method_description": "Stores the result of performing a bitwise OR operation on the two given values in the left-hand-side variable.", "is_static": true, "method_name": "|=", "method_declar": "static func |= (lhs: inout UInt64, rhs: UInt64)"}, {"return_value": {"return_name": [""], "return_type": ["UInt64"], "return_description": []}, "class_name": "UInt64", "params": [{"param_description": "", "param_type": "UInt64", "param_name": ["x"]}], "method_description": "Returns the inverse of the bits set in the argument.", "is_static": true, "method_name": "~", "method_declar": "prefix static func ~ (x: UInt64) -> UInt64"}], "Vars": [{"var_description": "The big-endian representation of this integer.", "is_static": false, "var_name": "bigEndian", "var_type": "UInt64"}, {"var_description": "The number of bits in the binary representation of this value.", "is_static": false, "var_name": "bitWidth", "var_type": "Int"}, {"var_description": "A representation of this integer with the byte order swapped.", "is_static": false, "var_name": "byteSwapped", "var_type": "UInt64"}, {"var_description": "A mirror that reflects the UInt64 instance.", "is_static": false, "var_name": "customMirror", "var_type": "Mirror"}, {"var_description": "A textual representation of this value.", "is_static": false, "var_name": "description", "var_type": "String"}, {"var_description": "The number of leading zeros in this value\u2019s binary representation.", "is_static": false, "var_name": "leadingZeroBitCount", "var_type": "Int"}, {"var_description": "The little-endian representation of this integer.", "is_static": false, "var_name": "littleEndian", "var_type": "UInt64"}, {"var_description": "The magnitude of this value.", "is_static": false, "var_name": "magnitude", "var_type": "UInt64"}, {"var_description": "The number of bits equal to 1 in this value\u2019s binary representation.", "is_static": false, "var_name": "nonzeroBitCount", "var_type": "Int"}, {"var_description": "The number of trailing zeros in this value\u2019s binary representation.", "is_static": false, "var_name": "trailingZeroBitCount", "var_type": "Int"}, {"var_description": "A collection containing the words of this value\u2019s binary representation, in order from the least significant to most significant.", "is_static": false, "var_name": "words", "var_type": "UInt64.Words"}, {"var_description": "The number of bits used for the underlying binary representation of values of this type.", "is_static": false, "var_name": "bitWidth", "var_type": "Int"}, {"var_description": "A Boolean value indicating whether this type is a signed integer type.", "is_static": false, "var_name": "isSigned", "var_type": "Bool"}, {"var_description": "The maximum representable integer in this type.", "is_static": false, "var_name": "max", "var_type": "UInt64"}, {"var_description": "The minimum representable integer in this type.", "is_static": false, "var_name": "min", "var_type": "UInt64"}], "class_name": "UInt64", "interface_list": ["CKRecordValueProtocol", "CustomPlaygroundQuickLookable", "CustomReflectable", "CVarArg", "FixedWidthInteger", "Hashable", "UnsignedInteger"], "class_description": "", "class_inherit_list": [], "package_name": "swift", "subclass_list": [], "class_type": "struct", "typealias": []}