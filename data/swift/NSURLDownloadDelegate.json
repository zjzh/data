{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObjectProtocol"], "Methods": [{"return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_description": "Sent to determine whether the delegate is able to respond to a protection space\u2019s form of authentication.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ connection: NSURLDownload, canAuthenticateAgainstProtectionSpace protectionSpace: URLProtectionSpace) -> Bool", "params": [{"param_type": "NSURLDownload", "param_description": "", "param_name": ["connection"]}, {"param_type": "URLProtectionSpace", "param_description": "The protection space that generates an authentication challenge.", "param_name": ["canAuthenticateAgainstProtectionSpace", "protectionSpace"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent if an authentication challenge is canceled due to the protocol implementation encountering an error.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, didCancel challenge: URLAuthenticationChallenge)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "URLAuthenticationChallenge", "param_description": "The authentication challenge that caused the download object to cancel the download.", "param_name": ["didCancel", "challenge"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent when the URL download must authenticate a challenge in order to download the request.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, didReceive challenge: URLAuthenticationChallenge)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "URLAuthenticationChallenge", "param_description": "The URL authentication challenge that must be authenticated in order to download the request.", "param_name": ["didReceive", "challenge"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_description": "Sent to determine whether the URL loader should consult the credential storage to authenticate the download.", "is_static": false, "method_name": "downloadShouldUseCredentialStorage", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func downloadShouldUseCredentialStorage(_ download: NSURLDownload) -> Bool", "params": [{"param_type": "NSURLDownload", "param_description": "", "param_name": ["download"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "The delegate receives this message when download has determined a suggested filename for the downloaded file.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, decideDestinationWithSuggestedFilename filename: String)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "String", "param_description": "The suggested filename for the download.", "param_name": ["decideDestinationWithSuggestedFilename", "filename"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent immediately after a download object begins a download.", "is_static": false, "method_name": "downloadDidBegin", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func downloadDidBegin(_ download: NSURLDownload)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent when the destination file is created.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, didCreateDestination path: String)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "String", "param_description": "The path to the destination file.", "param_name": ["didCreateDestination", "path"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent when a download object has received sufficient load data to construct the NSURLResponse object for the download.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, didReceive response: URLResponse)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "URLResponse", "param_description": "The URL response object received as part of the download. response is immutable and will not be modified after this method is called.", "param_name": ["didReceive", "response"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent as a download object receives data incrementally. ", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, didReceiveDataOfLength length: Int)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "Int", "param_description": "The amount of data received in this increment of the download, measured in bytes.", "param_name": ["didReceiveDataOfLength", "length"]}]}, {"return_value": {"return_name": [""], "return_description": ["true to decode the file, false otherwise."], "return_type": ["Boo"]}, "method_description": "Sent when a download object determines that the downloaded file is encoded to inquire whether the file should be automatically decoded.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, shouldDecodeSourceDataOfMIMEType encodingType: String) -> Bool", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "String", "param_description": "The type of encoding used by the downloaded file. The supported encoding formats are MacBinary (\"application/macbinary\"), Binhex (\"application/mac-binhex40\") and gzip (\"application/gzip\").", "param_name": ["shouldDecodeSourceDataOfMIMEType", "encodingType"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent when a download object has received a response from the server after attempting to resume a download.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, willResumeWith response: URLResponse, fromByte startingByte: Int64)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "URLResponse", "param_description": "The URL response received from the server in response to an attempt to resume a download.", "param_name": ["willResumeWith", "response"]}, {"param_type": "Int64", "param_description": "The location of the start of the resumed data, in bytes.", "param_name": ["fromByte", "startingByte"]}]}, {"return_value": {"return_name": [""], "return_description": ["The actual URL request to use in light of the redirection response. The delegate may copy and modify request as necessary to change its attributes, return request unmodified, or return nil."], "return_type": ["URLReques"]}, "method_description": "Sent when the download object determines that it must change URLs in order to continue loading a request.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, willSend request: URLRequest, redirectResponse: URLResponse?) -> URLRequest?", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "URLRequest", "param_description": "The proposed redirected request. The delegate should inspect the redirected request to verify that it meets its needs, and create a copy with new attributes to return to the connection if necessary.", "param_name": ["willSend", "request"]}, {"param_type": "URLResponse", "param_description": "The URL response that caused the redirect. May be nil in cases where this method is not being sent as a result of involving the delegate in redirect processing.", "param_name": ["redirectResponse"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent if the download fails or if an I/O error occurs when the file is written to disk.", "is_static": false, "method_name": "download", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func download(_ download: NSURLDownload, didFailWithError error: Error)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}, {"param_type": "Error", "param_description": "The error that caused the failure of the download.", "param_name": ["didFailWithError", "error"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sent when a download object has completed downloading successfully and has written its results to disk.", "is_static": false, "method_name": "downloadDidFinish", "class_name": "NSURLDownloadDelegate", "method_declar": "optional func downloadDidFinish(_ download: NSURLDownload)", "params": [{"param_type": "NSURLDownload", "param_description": "The URL download object sending the message.", "param_name": ["download"]}]}], "class_type": "protocol", "class_name": "NSURLDownloadDelegate", "Vars": [], "interface_list": [], "class_description": "The NSURLDownloadDelegate protocol defines methods that allow an object to receive informational callbacks about the asynchronous load of a download\u2019s URL request. Other delegate methods provide facilities that allow the delegate to customize the process of performing an asynchronous URL load.\nNote that these delegate methods will be called on the thread that started the asynchronous load operation for the associated NSURLDownload object. \nA downloadDidBegin(_:) message will be sent to the delegate immediately upon starting the download. \nZero or more download(_:willSend:redirectResponse:) messages will be sent to the delegate before any further messages are sent if it is determined that the download must redirect to a new location. The delegate can allow the redirect, modify the destination or deny the redirect.\nZero or more download(_:didReceive:) messages will be sent to the delegate if it is necessary to authenticate in order to download the request and NSURLDownload does not already have authenticated credentials.\nZero or more download(_:didCancel:) messages will be sent to the delegate if NSURLDownload cancels the authentication challenge due to encountering a protocol implementation error.\nZero or more download(_:didReceive:) messages will be sent to the delegate before receiving a download(_:didReceiveDataOfLength:) message. The only case where download(_:didReceive:) is not sent to a delegate is when the protocol implementation encounters an error before a response could be created. \nZero or more download(_:didReceiveDataOfLength:) messages will be sent before downloadDidFinish(_:) or download(_:didFailWithError:) is sent to the delegate. \nZero or one download(_:decideDestinationWithSuggestedFilename:) will be sent to the delegate when sufficient information has been received to determine the suggested filename for the downloaded file. The delegate will not receive this message if setDestination(_:allowOverwrite:) has already been sent to the NSURLDownload instance.\nA download(_:didCreateDestination:) message will be sent to the delegate when the NSURLDownload instance creates the file on disk.\nIf NSURLDownload determines that the downloaded file is in a format that it is able to decode (MacBinary, Binhex or gzip), the delegate will receive a download(_:shouldDecodeSourceDataOfMIMEType:). The delegate should return true to decode the data, false otherwise.\nUnless an NSURLDownload instance receives a cancel() message, the delegate will receive one and only one downloadDidFinish(_:) or download(_:didFailWithError:) message, but never both. In addition, once either of these messages are sent, the delegate will receive no further messages for the given NSURLDownload. \n", "package_name": "foundation"}