{"class_description": "You can access a string\u2019s view of UTF-16 code units by using its utf16 property. A string\u2019s UTF-16 view encodes the string\u2019s Unicode scalar values as 16-bit integers.\nUnicode scalar values that make up a string\u2019s contents can be up to 21 bits long. The longer scalar values may need two UInt16 values for storage. Those \u201cpairs\u201d of code units are called surrogate pairs.\nTo convert a String.UTF16View instance back into a string, use the String type\u2019s init(_:) initializer.\nThe UTF-16 code units of a string\u2019s utf16 view match the elements accessed through indexed NSString APIs.\nUnlike NSString, however, String.UTF16View does not use integer indices. If you need to access a specific position in a UTF-16 view, use Swift\u2019s index manipulation methods. The following example accesses the fourth code unit in both the flowers and nsflowers strings:\nAlthough the Swift overlay updates many Objective-C methods to return native Swift indices and index ranges, some still return instances of NSRange. To convert an NSRange instance to a range of String.Index, use the Range(_:in:) initializer, which takes an NSRange and a string as arguments.\n", "Methods": [], "class_inherit_list": [], "class_name": "String.UTF16View", "typealias": [], "Vars": [], "class_type": "struct", "interface_list": [], "package_name": "foundation", "subclass_list": []}