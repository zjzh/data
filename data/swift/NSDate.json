{"class_description": "NSDate objects encapsulate a single point in time, independent of any particular calendrical system or time zone. Date objects are immutable, representing an invariant time interval relative to an absolute reference date (00:00:00 UTC on 1 January 2001).\nThe NSDate class provides methods for comparing dates, calculating the time interval between two dates, and creating a new date from a time interval relative to another date. NSDate objects can be used in conjunction with DateFormatter objects to create localized representations of dates and times, as well as with NSCalendar objects to perform calendar arithmetic.\nNSDate is toll-free bridged with its Core Foundation counterpart, CFDate. See Toll-Free Bridging for more information on toll-free bridging.\nImportant\nThe Swift overlay to the Foundation framework provides the Date structure, which bridges to the NSDate class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\nYou might subclass NSDate in order to make it easier to work with a particular calendrical system, or to work with date and time values with a finer temporal granularity.\nIf you want to subclass NSDate to obtain behavior different than that provided by the private or public subclasses, you must:\nDeclare a suitable instance variable to hold the date and time value (relative to an absolute reference date)\nOverride the timeIntervalSinceReferenceDate instance method to provide the correct date and time value based on your instance variable\nOverride init(timeIntervalSinceReferenceDate:), one of the designated initializer methods\nIf creating a subclass that represents a calendrical system, define methods that partition past and future periods into the units of this calendar\nImplement the methods required by the NSCopying and NSCoding protocols, because NSDate adopts these protocols\n\nYour subclass may use a different reference date than the absolute reference date used by NSDate (00:00:00 UTC on 1 January 2001). If it does, it must still use the absolute reference date in its implementations of the methods timeIntervalSinceReferenceDate and init(timeIntervalSinceReferenceDate:). That is, the reference date referred to in the titles of these methods is the absolute reference date. If you do not use the absolute reference date in these methods, comparisons between NSDate objects of your subclass and NSDate objects of a private subclass will not work.\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "NSDate", "typealias": [], "Vars": [{"var_description": "A notification posted whenever the system clock is changed. ", "var_type": "NSNotification.Name", "is_static": false, "var_name": "NSSystemClockDidChange"}], "class_type": "class", "interface_list": ["CKRecordValueProtocol", "CustomPlaygroundQuickLookable", "CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "package_name": "foundation", "subclass_list": []}