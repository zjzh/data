{"package_name": "foundation", "subclass_list": [], "class_description": "DateInterval represents a closed date interval in the form of [startDate, endDate].  It is possible for the start and end dates to be the same with a duration of 0.  DateInterval does not support reverse intervals i.e. intervals where the duration is less than 0 and the end date occurs earlier in time than the start date.\n", "class_type": "struct", "typealias": ["typealias DateInterval.ReferenceType = NSDateInterval"], "interface_list": ["Comparable", "CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Decodable", "Encodable", "Hashable", "ReferenceConvertible"], "class_inherit_list": [], "Methods": [{"params": [], "class_name": "DateInterval", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initializes an interval with start and end dates set to the current date and the duration set to 0.", "method_declar": "init()"}, {"params": [{"param_name": ["start"], "param_type": "Date", "param_description": ""}, {"param_name": ["duration"], "param_type": "TimeInterval", "param_description": ""}], "class_name": "DateInterval", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initializes an interval with the specified start date and duration.", "method_declar": "init(start: Date, duration: TimeInterval)"}, {"params": [{"param_name": ["start"], "param_type": "Date", "param_description": ""}, {"param_name": ["end"], "param_type": "Date", "param_description": ""}], "class_name": "DateInterval", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Initializes an interval with the specified start and end date.", "method_declar": "init(start: Date, end: Date)"}, {"params": [{"param_name": ["lhs"], "param_type": "DateInterval", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "DateInterval", "param_description": "Another value to compare."}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "!=", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_declar": "static func != (lhs: DateInterval, rhs: DateInterval) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "DateInterval", "param_description": ""}, {"param_name": ["rhs"], "param_type": "DateInterval", "param_description": ""}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "func", "method_description": "Indicates whether one date interval is strictly less than another.", "method_declar": "static func < (lhs: DateInterval, rhs: DateInterval) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "DateInterval", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "DateInterval", "param_description": "Another value to compare."}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "func", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_declar": "static func <= (lhs: DateInterval, rhs: DateInterval) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "DateInterval", "param_description": ""}, {"param_name": ["rhs"], "param_type": "DateInterval", "param_description": ""}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "==", "method_description": "Indicates whether two date intervals are the same.", "method_declar": "static func == (lhs: DateInterval, rhs: DateInterval) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "DateInterval", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "DateInterval", "param_description": "Another value to compare."}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": ">", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_declar": "static func > (lhs: DateInterval, rhs: DateInterval) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "DateInterval", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "DateInterval", "param_description": "Another value to compare."}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_type": ["Boo"]}, "method_name": ">=", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_declar": "static func >= (lhs: DateInterval, rhs: DateInterval) -> Bool"}, {"params": [{"param_name": ["with", "dateInterval"], "param_type": "DateInterval", "param_description": ""}], "class_name": "DateInterval", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["DateInterva"]}, "method_name": "intersection", "method_description": "Returns an interval that represents the interval where the given date interval and the current instance intersect.", "method_declar": "func intersection(with dateInterval: DateInterval) -> DateInterval?"}, {"params": [{"param_name": ["dateInterval"], "param_type": "DateInterval", "param_description": ""}], "class_name": "DateInterval", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "intersects", "method_description": "Indicates whether this interval intersects the specified interval.", "method_declar": "func intersects(_ dateInterval: DateInterval) -> Bool"}, {"params": [{"param_name": ["date"], "param_type": "Date", "param_description": ""}], "class_name": "DateInterval", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "contains", "method_description": "Indicates whether this interval contains the given date.", "method_declar": "func contains(_ date: Date) -> Bool"}, {"params": [{"param_name": ["dateInterval"], "param_type": "DateInterval", "param_description": ""}], "class_name": "DateInterval", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["ComparisonResul"]}, "method_name": "compare", "method_description": "Compares two intervals.", "method_declar": "func compare(_ dateInterval: DateInterval) -> ComparisonResult"}, {"params": [{"param_name": ["minimum"], "param_type": "DateInterval", "param_description": "The lower bound for the range."}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["PartialRangeFrom<DateInterval"]}, "method_name": "...", "method_description": "Returns a partial range extending upward from a lower bound.", "method_declar": "postfix static func ... (minimum: DateInterval) -> PartialRangeFrom<DateInterval>"}, {"params": [{"param_name": ["maximum"], "param_type": "DateInterval", "param_description": "The upper bound for the range."}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["PartialRangeThrough<DateInterval"]}, "method_name": "...", "method_description": "Returns a partial range up to, and including, its upper bound.", "method_declar": "prefix static func ... (maximum: DateInterval) -> PartialRangeThrough<DateInterval>"}, {"params": [{"param_name": ["minimum"], "param_type": "DateInterval", "param_description": "The lower bound for the range."}, {"param_name": ["maximum"], "param_type": "DateInterval", "param_description": "The upper bound for the range."}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["ClosedRange<DateInterval"]}, "method_name": "...", "method_description": "Returns a closed range that contains both of its bounds.", "method_declar": "static func ... (minimum: DateInterval, maximum: DateInterval) -> ClosedRange<DateInterval>"}, {"params": [{"param_name": ["maximum"], "param_type": "DateInterval", "param_description": "The upper bound for the range."}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["PartialRangeUpTo<DateInterval"]}, "method_name": "..", "method_description": "Returns a partial range up to, but not including, its upper bound.", "method_declar": "prefix static func ..< (maximum: DateInterval) -> PartialRangeUpTo<DateInterval>"}, {"params": [{"param_name": ["minimum"], "param_type": "DateInterval", "param_description": "The lower bound for the range."}, {"param_name": ["maximum"], "param_type": "DateInterval", "param_description": "The upper bound for the range."}], "class_name": "DateInterval", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Range<DateInterval"]}, "method_name": "..", "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_declar": "static func ..< (minimum: DateInterval, maximum: DateInterval) -> Range<DateInterval>"}], "class_name": "DateInterval", "Vars": [{"var_description": "The start date.", "var_type": "Date", "is_static": false, "var_name": "start"}, {"var_description": "The end date.", "var_type": "Date", "is_static": false, "var_name": "end"}, {"var_description": "The duration.", "var_type": "TimeInterval", "is_static": false, "var_name": "duration"}, {"var_description": "A textual description of the date interval.", "var_type": "String", "is_static": false, "var_name": "description"}, {"var_description": "A textual description of the date interval suitable for debugging.", "var_type": "String", "is_static": false, "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the date interval.", "var_type": "Mirror", "is_static": false, "var_name": "customMirror"}, {"var_description": "The computed hash value for the date interval.", "var_type": "Int", "is_static": false, "var_name": "hashValue"}]}