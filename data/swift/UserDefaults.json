{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Creates a user defaults object initialized with the defaults for the app and current user.", "is_static": false, "method_name": "init", "class_name": "UserDefaults", "method_declar": "convenience init()", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Creates a user defaults object initialized with the defaults for the specified database name.", "is_static": false, "method_name": "init", "class_name": "UserDefaults", "method_declar": "init?(suiteName suitename: String?)", "params": [{"param_type": "String", "param_description": "The domain identifier of the search list. If you pass nil to this parameter, the system uses the default search list that the standard class method uses. Because a suite manages the defaults of a specified app group, a suite name must be distinct from your app\u2019s main bundle identifier. The globalDomain is also an invalid suite name, because it isn't writeable by apps.", "param_name": ["suiteName", "suitename"]}]}, {"return_value": {"return_name": [""], "return_description": ["The object associated with the specified key, or nil if the key was not found. "], "return_type": ["An"]}, "method_description": "Returns the object associated with the specified key.", "is_static": false, "method_name": "object", "class_name": "UserDefaults", "method_declar": "func object(forKey defaultName: String) -> Any?", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database. ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [""], "return_description": ["The URL associated with the specified key. If the key doesn\u2019t exist, this method returns nil."], "return_type": ["UR"]}, "method_description": "Returns the URL associated with the specified key.", "is_static": false, "method_name": "url", "class_name": "UserDefaults", "method_declar": "func url(forKey defaultName: String) -> URL?", "params": [{"param_type": "String", "param_description": "A key in the current user\u2019s defaults database.", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [""], "return_description": ["The array associated with the specified key, or nil if the key does not exist or its value is not an array. "], "return_type": ["[Any"]}, "method_description": "Returns the array associated with the specified key.", "is_static": false, "method_name": "array", "class_name": "UserDefaults", "method_declar": "func array(forKey defaultName: String) -> [Any]?", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database. ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [["[String"]], "return_description": ["The dictionary object associated with the specified key, or nil if the key does not exist or its value is not a dictionary. "], "return_type": ["Any"]}, "method_description": "Returns the dictionary object associated with the specified key.", "is_static": false, "method_name": "dictionary", "class_name": "UserDefaults", "method_declar": "func dictionary(forKey defaultName: String) -> [String : Any]?", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database. ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [""], "return_description": ["For string values, the string associated with the specified key; for number values, the string value of the number. Returns nil if the default does not exist or is not a string or number value."], "return_type": ["Strin"]}, "method_description": "Returns the string associated with the specified key.", "is_static": false, "method_name": "string", "class_name": "UserDefaults", "method_declar": "func string(forKey defaultName: String) -> String?", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database. ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [""], "return_description": ["The array of string objects, or nil if the specified default does not exist, the default does not contain an array, or the array does not contain strings. "], "return_type": ["[String"]}, "method_description": "Returns the array of strings associated with the specified key.", "is_static": false, "method_name": "stringArray", "class_name": "UserDefaults", "method_declar": "func stringArray(forKey defaultName: String) -> [String]?", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database. ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [""], "return_description": ["The data object associated with the specified key, or nil if the key does not exist or its value is not a data object. "], "return_type": ["Dat"]}, "method_description": "Returns the data object associated with the specified key.", "is_static": false, "method_name": "data", "class_name": "UserDefaults", "method_declar": "func data(forKey defaultName: String) -> Data?", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database. ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [""], "return_description": ["The Boolean value associated with the specified key. If the specified key doesn\u2018t exist, this method returns false."], "return_type": ["Boo"]}, "method_description": "Returns the Boolean value associated with the specified key.", "is_static": false, "method_name": "bool", "class_name": "UserDefaults", "method_declar": "func bool(forKey defaultName: String) -> Bool", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database. ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [""], "return_description": ["The integer value associated with the specified key. If the specified key doesn\u2018t exist, this method returns 0. "], "return_type": ["In"]}, "method_description": "Returns the integer value associated with the specified key.", "is_static": false, "method_name": "integer", "class_name": "UserDefaults", "method_declar": "func integer(forKey defaultName: String) -> Int", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database. ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [""], "return_description": ["The float value associated with the specified key. If the key doesn\u2018t exist, this method returns 0. "], "return_type": ["Floa"]}, "method_description": "Returns the float value associated with the specified key.", "is_static": false, "method_name": "float", "class_name": "UserDefaults", "method_declar": "func float(forKey defaultName: String) -> Float", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database. ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [""], "return_description": ["The double value associated with the specified key. If the key doesn\u2018t exist, this method returns 0."], "return_type": ["Doubl"]}, "method_description": "Returns the double value associated with the specified key.", "is_static": false, "method_name": "double", "class_name": "UserDefaults", "method_declar": "func double(forKey defaultName: String) -> Double", "params": [{"param_type": "String", "param_description": "A key in the current user\u2018s defaults database.", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [["[String"]], "return_description": ["A dictionary containing the keys. The keys are names of defaults and the value corresponding to each key is a property list object (NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary)."], "return_type": ["Any"]}, "method_description": "Returns a dictionary that contains a union of all key-value pairs in the domains in the search list.", "is_static": false, "method_name": "dictionaryRepresentation", "class_name": "UserDefaults", "method_declar": "func dictionaryRepresentation() -> [String : Any]", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the value of the specified default key.", "is_static": false, "method_name": "set", "class_name": "UserDefaults", "method_declar": "func set(_ value: Any?, forKey defaultName: String)", "params": [{"param_type": "Any", "param_description": "The object to store in the defaults database. ", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key with which to associate the value.", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the value of the specified default key to the specified float value.", "is_static": false, "method_name": "set", "class_name": "UserDefaults", "method_declar": "func set(_ value: Float, forKey defaultName: String)", "params": [{"param_type": "Float", "param_description": "The float value to store in the defaults database. ", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key with which to associate the value.", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the value of the specified default key to the double value.", "is_static": false, "method_name": "set", "class_name": "UserDefaults", "method_declar": "func set(_ value: Double, forKey defaultName: String)", "params": [{"param_type": "Double", "param_description": "The double value.", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key with which to associate the value.", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the value of the specified default key to the specified integer value.", "is_static": false, "method_name": "set", "class_name": "UserDefaults", "method_declar": "func set(_ value: Int, forKey defaultName: String)", "params": [{"param_type": "Int", "param_description": "The integer value to store in the defaults database. ", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key with which to associate the value.", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the value of the specified default key to the specified Boolean value.", "is_static": false, "method_name": "set", "class_name": "UserDefaults", "method_declar": "func set(_ value: Bool, forKey defaultName: String)", "params": [{"param_type": "Bool", "param_description": "The Boolean value to store in the defaults database. ", "param_name": ["value"]}, {"param_type": "String", "param_description": "The key with which to associate the value.", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the value of the specified default key to the specified URL.", "is_static": false, "method_name": "set", "class_name": "UserDefaults", "method_declar": "func set(_ url: URL?, forKey defaultName: String)", "params": [{"param_type": "URL", "param_description": "The URL to store in the defaults database.", "param_name": ["url"]}, {"param_type": "String", "param_description": "The key with which to associate the value.", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the value of the specified default key.", "is_static": false, "method_name": "removeObject", "class_name": "UserDefaults", "method_declar": "func removeObject(forKey defaultName: String)", "params": [{"param_type": "String", "param_description": "The key whose value you want to remove.  ", "param_name": ["forKey", "defaultName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Inserts the specified domain name into the receiver\u2019s search list.", "is_static": false, "method_name": "addSuite", "class_name": "UserDefaults", "method_declar": "func addSuite(named suiteName: String)", "params": [{"param_type": "String", "param_description": "The domain name to insert.", "param_name": ["named", "suiteName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the specified domain name from the receiver\u2019s search list.", "is_static": false, "method_name": "removeSuite", "class_name": "UserDefaults", "method_declar": "func removeSuite(named suiteName: String)", "params": [{"param_type": "String", "param_description": "The domain name to remove.", "param_name": ["named", "suiteName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Adds the contents of the specified dictionary to the registration domain.", "is_static": false, "method_name": "register", "class_name": "UserDefaults", "method_declar": "func register(defaults registrationDictionary: [String : Any])", "params": [{"param_type": "[String", "param_description": "", "param_name": ["defaults", "registrationDictionary"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[String"]}]}, {"return_value": {"return_name": [["[String"]], "return_description": ["A dictionary containing keys for each default name and their corresponding default values."], "return_type": ["Any"]}, "method_description": "Returns a dictionary representation of the defaults for the specified domain.", "is_static": false, "method_name": "persistentDomain", "class_name": "UserDefaults", "method_declar": "func persistentDomain(forName domainName: String) -> [String : Any]?", "params": [{"param_type": "String", "param_description": "The name of the domain to be represented. ", "param_name": ["forName", "domainName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets a dictionary for the specified persistent domain.  ", "is_static": false, "method_name": "setPersistentDomain", "class_name": "UserDefaults", "method_declar": "func setPersistentDomain(_ domain: [String : Any], forName domainName: String)", "params": [{"param_type": "[String", "param_description": "A dictionary of keys and values you want to assign to the domain. ", "param_name": ["domain"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[String"]}, {"param_type": "String", "param_description": "The name of the domain whose contents you want to set.", "param_name": ["forName", "domainName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the contents of the specified persistent domain from the user\u2019s defaults.", "is_static": false, "method_name": "removePersistentDomain", "class_name": "UserDefaults", "method_declar": "func removePersistentDomain(forName domainName: String)", "params": [{"param_type": "String", "param_description": "The name of the domain to have its contents removed. ", "param_name": ["forName", "domainName"]}]}, {"return_value": {"return_name": [""], "return_description": ["An array of NSString objects containing the domain names."], "return_type": ["[Any"]}, "method_description": "Returns an array of the current persistent domain names.DeprecatedInstead of using this method, you should track the domains you add if you want to later retrieve them with persistentDomain(forName:).", "is_static": false, "method_name": "persistentDomainNames", "class_name": "UserDefaults", "method_declar": "func persistentDomainNames() -> [Any]", "params": []}, {"return_value": {"return_name": [["[String"]], "return_description": ["The dictionary of keys and values belonging to the domain. The keys in the dictionary are names of defaults, and the value corresponding to each key is a property list object (NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary). "], "return_type": ["Any"]}, "method_description": "Returns the dictionary for the specified volatile domain.  ", "is_static": false, "method_name": "volatileDomain", "class_name": "UserDefaults", "method_declar": "func volatileDomain(forName domainName: String) -> [String : Any]", "params": [{"param_type": "String", "param_description": "The domain whose keys and values you want. ", "param_name": ["forName", "domainName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the dictionary for the specified volatile domain.  ", "is_static": false, "method_name": "setVolatileDomain", "class_name": "UserDefaults", "method_declar": "func setVolatileDomain(_ domain: [String : Any], forName domainName: String)", "params": [{"param_type": "[String", "param_description": "The dictionary of keys and values you want to assign to the domain. ", "param_name": ["domain"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[String"]}, {"param_type": "String", "param_description": "The domain whose keys and values you want to set. ", "param_name": ["forName", "domainName"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the specified volatile domain from the user\u2019s defaults.", "is_static": false, "method_name": "removeVolatileDomain", "class_name": "UserDefaults", "method_declar": "func removeVolatileDomain(forName domainName: String)", "params": [{"param_type": "String", "param_description": "The volatile domain you want to remove. ", "param_name": ["forName", "domainName"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the value of the specified key is managed by an administrator, otherwise false."], "return_type": ["Boo"]}, "method_description": "Returns a Boolean value indicating whether the specified key is managed by an administrator.", "is_static": false, "method_name": "objectIsForced", "class_name": "UserDefaults", "method_declar": "func objectIsForced(forKey key: String) -> Bool", "params": [{"param_type": "String", "param_description": "The key whose status you want to check.", "param_name": ["forKey", "key"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the key is managed by an administrator in the specified domain, otherwise false."], "return_type": ["Boo"]}, "method_description": "Returns a Boolean value indicating whether the key in the specified domain is managed by an administrator.", "is_static": false, "method_name": "objectIsForced", "class_name": "UserDefaults", "method_declar": "func objectIsForced(forKey key: String, inDomain domain: String) -> Bool", "params": [{"param_type": "String", "param_description": "The key whose status you want to check.", "param_name": ["forKey", "key"]}, {"param_type": "String", "param_description": "The domain of the key. ", "param_name": ["inDomain", "domain"]}]}, {"return_value": {"return_name": [], "return_description": ["An initialized UserDefaults object whose argument and registration domains are already set up. If the current user does not have access to the specified user account, this method returns nil.  "], "return_type": []}, "method_description": "Creates a user defaults object initialized with the defaults for the specified user account.DeprecatedThis method was never implemented to return anything but the defaults for the current user. Use standard instead.", "is_static": false, "method_name": "init", "class_name": "UserDefaults", "method_declar": "convenience init?(user username: String)", "params": [{"param_type": "String", "param_description": "The name of the user account.", "param_name": ["user", "username"]}]}, {"return_value": {"return_name": [""], "return_description": ["true if the data was saved successfully to disk, otherwise false. "], "return_type": ["Boo"]}, "method_description": "Waits for any pending asynchronous updates to the defaults database and returns; this method is unnecessary and shouldn't be used.", "is_static": false, "method_name": "synchronize", "class_name": "UserDefaults", "method_declar": "func synchronize() -> Bool", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "This method has no effect and shouldn't be used.", "is_static": false, "method_name": "resetStandardUserDefaults", "class_name": "UserDefaults", "method_declar": "class func resetStandardUserDefaults()", "params": []}], "class_type": "class", "class_name": "UserDefaults", "Vars": [{"var_name": "standard", "var_type": "UserDefaults", "var_description": "Returns the shared defaults object.", "is_static": false}, {"var_name": "volatileDomainNames", "var_type": "[String]", "var_description": "The current volatile domain names.", "is_static": false}, {"var_name": "argumentDomain", "var_type": "String", "var_description": "The domain consisting of defaults parsed from the application\u2019s arguments. These are one or more pairs of the form -default value included in the command-line invocation of the application. ", "is_static": false}, {"var_name": "globalDomain", "var_type": "String", "var_description": "The domain consisting of defaults meant to be seen by all applications.", "is_static": false}, {"var_name": "registrationDomain", "var_type": "String", "var_description": "The domain consisting of a set of temporary defaults whose values can be set by the application to ensure that searches will always be successful.", "is_static": false}, {"var_name": "didChangeNotification", "var_type": "NSNotification.Name", "var_description": "Posted when user defaults are changed within the current process.", "is_static": false}, {"var_name": "sizeLimitExceededNotification", "var_type": "NSNotification.Name", "var_description": "Posted when more data is stored in user defaults than is allowed. ", "is_static": false}, {"var_name": "completedInitialCloudSyncNotification", "var_type": "NSNotification.Name", "var_description": "Posted when ubiquitous defaults finish downloading data, either the first time a device is connected to an iCloud account or when a user switches their primary iCloud account.", "is_static": false}, {"var_name": "didChangeCloudAccountsNotification", "var_type": "NSNotification.Name", "var_description": "Posted when the user changes the primary iCloud account.", "is_static": false}, {"var_name": "noCloudAccountNotification", "var_type": "NSNotification.Name", "var_description": "Posted when a cloud default is set, but no iCloud user is logged in.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "The UserDefaults class provides a programmatic interface for interacting with the defaults system. The defaults system allows an app to customize its behavior to match a user\u2019s preferences. For example, you can allow users to specify their preferred units of measurement or media playback speed. Apps store these preferences by assigning values to a set of parameters in a user\u2019s defaults database. The parameters are referred to as defaults because they\u2019re commonly used to determine an app\u2019s default state at startup or the way it acts by default.\nAt runtime, you use UserDefaults objects to read the defaults that your app uses from a user\u2019s defaults database. UserDefaults caches the information to avoid having to open the user\u2019s defaults database each time you need a default value. When you set a default value, it\u2019s changed synchronously within your process, and asynchronously to persistent storage and other processes.\nImportant\nDon\u2019t try to access the preferences subsystem directly. Modifying preference property list files may result in loss of changes, delay of reflecting changes, and app crashes. To configure preferences, use the defaults command-line utility in macOS instead.\nWith the exception of managed devices in educational institutions, a user\u2019s defaults are stored locally on a single device, and persisted for backup and restore. To synchronize preferences and other data across a user\u2019s connected devices, use NSUbiquitousKeyValueStore instead.\nThe UserDefaults class provides convenience methods for accessing common types such as floats, doubles, integers, Boolean values, and URLs. These methods are described in Setting Default Values.\nA default object must be a property list\u2014that is, an instance of (or for collections, a combination of instances of) NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary. If you want to store any other type of object, you should typically archive it to create an instance of NSData. \nValues returned from UserDefaults are immutable, even if you set a mutable object as the value. For example, if you set a mutable string as the value for \u201cMyStringDefault\u201d, the string you later retrieve using the string(forKey:) method will be immutable. If you set a mutable string as a default value and later mutate the string, the default value won\u2019t reflect the mutated string value unless you call set(_:forKey:) again.\nFor more details, see Preferences and Settings Programming Guide.\nA file URL specifies a location in the file system. If you use the set(_:forKey:) method to store the location for a particular file and the user moves that file, your app may not be able to locate that file on next launch. To store a reference to a file by its file system identity, you can instead create NSURL bookmark data using the bookmarkData(options:includingResourceValuesForKeys:relativeTo:) method and persist it using the set(_:forKey:) method. You can then use the URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: method to resolve the bookmark data stored in user defaults to a file URL.\nYou can use key-value observing to be notified of any updates to a particular default value. You can also register as an observer for didChangeNotification on the default notification center in order to be notified of all updates to a local defaults database.   \nFor more details, see Key-Value Observing Programming Guide and Notification Programming Topics.\nIf your app supports managed environments, you can use UserDefaults to determine which preferences are managed by an administrator for the benefit of the user. In a managed environment, such as a computer lab or classroom, an administrator or teacher can configure the systems by establishing a set of default preferences for users. If a preference is managed in this manner (as determined by the methods described in Accessing Managed Environment Keys), your app should prevent users from editing that preference by disabling or hiding controls.\nFor more details, see Mobile Device Management Protocol Reference.\nAn app running on a device managed by an educational institution can use the iCloud key-value store to share small amounts of data with other instances of itself on the user\u2019s other devices. For example, a textbook app might store the current page number being read by the user so that other instances of the app can open to the same page when launched.\nFor more information, see Storing Preferences in iCloud in Preferences and Settings Programming Guide.\nA sandboxed app cannot access or modify the preferences for any other app, with the following exceptions:\nApp extensions on macOS and iOS\nOther apps in your application group on macOS\nAdding a third-party app\u2019s domain using the addSuite(named:) method doesn\u2019t allow your app to access to that app\u2019s preferences. Attempting to access or modify  another app\u2019s preferences doesn\u2019t result in an error; instead, macOS reads and writes files located within your app\u2019s container, rather than the actual preference files for the other application.\nThe UserDefaults class is thread-safe.\n", "package_name": "foundation"}