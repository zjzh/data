{"package_name": "foundation", "subclass_list": [], "class_description": "", "class_type": "struct", "typealias": [], "interface_list": ["OptionSet"], "class_inherit_list": [], "Methods": [{"params": [{"param_name": ["rawValue"], "param_type": "UInt", "param_description": ""}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a new set of output formatting options from the given raw value.", "method_declar": "init(rawValue: UInt)"}, {"params": [], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates an empty option set.", "method_declar": "init()"}, {"params": [{"param_name": ["arrayLiteral"], "param_type": "JSONEncoder.OutputFormatting...", "param_description": "A list of elements of the new set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "init", "method_description": "Creates a set containing the elements of the given array literal.", "method_declar": "init(arrayLiteral: JSONEncoder.OutputFormatting...)"}, {"params": [{"param_name": ["member"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "The element to look for in the option set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the option set contains member; otherwise, false."], "return_type": ["Boo"]}, "method_name": "contains", "method_description": "Returns a Boolean value that indicates whether a given element is a member of the option set.", "method_declar": "func contains(_ member: JSONEncoder.OutputFormatting) -> Bool"}, {"params": [{"param_name": ["newMember"], "param_type": "JSONEncoder.OutputFormatting) -> (inserte", "param_description": "The element to insert."}, {"param_name": ["JSONEncoder.OutputFormatting)", "->", "(inserted"], "param_type": "Bool", "param_description": ""}, {"param_name": ["memberAfterInsert"], "param_type": "JSONEncoder.OutputFormatting", "param_description": ""}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [["inserted"], ["memberAfterInsert"]], "return_description": ["(true, newMember) if newMember was not contained in self. Otherwise, returns (false, oldMember), where oldMember is the member of the set equal to newMember."], "return_type": ["Bool", "JSONEncoder.OutputFormatting"]}, "method_name": "insert", "method_description": "Adds the given element to the option set if it is not already a member.", "method_declar": "@discardableResult mutating func insert(_ newMember: JSONEncoder.OutputFormatting) -> (inserted: Bool, memberAfterInsert: JSONEncoder.OutputFormatting)"}, {"params": [{"param_name": ["with", "newMember"], "param_type": "JSONEncoder.OutputFormatting", "param_description": ""}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The intersection of [newMember] and the set if the intersection was nonempty; otherwise, nil."], "return_type": ["JSONEncoder.OutputFormattin"]}, "method_name": "update", "method_description": "Inserts the given element into the set.", "method_declar": "@discardableResult mutating func update(with newMember: JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting?"}, {"params": [{"param_name": ["member"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "The element of the set to remove."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The intersection of [member] and the set, if the intersection was nonempty; otherwise, nil."], "return_type": ["JSONEncoder.OutputFormattin"]}, "method_name": "remove", "method_description": "Removes the given element and all elements subsumed by it.", "method_declar": "@discardableResult mutating func remove(_ member: JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting?"}, {"params": [{"param_name": ["other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "An option set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new option set made up of the elements contained in this set, in other, or in both."], "return_type": ["JSONEncoder.OutputFormattin"]}, "method_name": "union", "method_description": "Returns a new option set of the elements contained in this set, in the given set, or in both.", "method_declar": "func union(_ other: JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting"}, {"params": [{"param_name": ["other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "An option set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "formUnion", "method_description": "Inserts the elements of another set into this option set.", "method_declar": "mutating func formUnion(_ other: JSONEncoder.OutputFormatting)"}, {"params": [{"param_name": ["other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "An option set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new option set with only the elements contained in both this set and other."], "return_type": ["JSONEncoder.OutputFormattin"]}, "method_name": "intersection", "method_description": "Returns a new option set with only the elements contained in both this set and the given set.", "method_declar": "func intersection(_ other: JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting"}, {"params": [{"param_name": ["other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "An option set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "formIntersection", "method_description": "Removes all elements of this option set that are not also present in the given set.", "method_declar": "mutating func formIntersection(_ other: JSONEncoder.OutputFormatting)"}, {"params": [{"param_name": ["other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "An option set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new option set with only the elements contained in either this set or other, but not in both."], "return_type": ["JSONEncoder.OutputFormattin"]}, "method_name": "symmetricDifference", "method_description": "Returns a new option set with the elements contained in this set or in the given set, but not in both.", "method_declar": "func symmetricDifference(_ other: JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting"}, {"params": [{"param_name": ["other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "An option set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "formSymmetricDifference", "method_description": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both.", "method_declar": "mutating func formSymmetricDifference(_ other: JSONEncoder.OutputFormatting)"}, {"params": [{"param_name": ["other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "A set of the same type as the current set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A new set."], "return_type": ["JSONEncoder.OutputFormattin"]}, "method_name": "subtracting", "method_description": "Returns a new set containing the elements of this set that do not occur in the given set.", "method_declar": "func subtracting(_ other: JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting"}, {"params": [{"param_name": ["other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "A set of the same type as the current set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "subtract", "method_description": "Removes the elements of the given set from this set.", "method_declar": "mutating func subtract(_ other: JSONEncoder.OutputFormatting)"}, {"params": [{"param_name": ["of", "other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "A set of the same type as the current set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the set is a subset of other; otherwise, false."], "return_type": ["Boo"]}, "method_name": "isSubset", "method_description": "Returns a Boolean value that indicates whether the set is a subset of another set.", "method_declar": "func isSubset(of other: JSONEncoder.OutputFormatting) -> Bool"}, {"params": [{"param_name": ["of", "other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "A set of the same type as the current set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the set is a strict subset of other; otherwise, false."], "return_type": ["Boo"]}, "method_name": "isStrictSubset", "method_description": "Returns a Boolean value that indicates whether this set is a strict subset of the given set.", "method_declar": "func isStrictSubset(of other: JSONEncoder.OutputFormatting) -> Bool"}, {"params": [{"param_name": ["of", "other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "A set of the same type as the current set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the set is a superset of other; otherwise, false."], "return_type": ["Boo"]}, "method_name": "isSuperset", "method_description": "Returns a Boolean value that indicates whether the set is a superset of the given set.", "method_declar": "func isSuperset(of other: JSONEncoder.OutputFormatting) -> Bool"}, {"params": [{"param_name": ["of", "other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "A set of the same type as the current set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the set is a strict superset of other; otherwise, false."], "return_type": ["Boo"]}, "method_name": "isStrictSuperset", "method_description": "Returns a Boolean value that indicates whether this set is a strict superset of the given set.", "method_declar": "func isStrictSuperset(of other: JSONEncoder.OutputFormatting) -> Bool"}, {"params": [{"param_name": ["with", "other"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "A set of the same type as the current set."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": false, "return_value": {"return_name": [""], "return_description": ["true if the set has no elements in common with other; otherwise, false."], "return_type": ["Boo"]}, "method_name": "isDisjoint", "method_description": "Returns a Boolean value that indicates whether the set has no members in common with the given set.", "method_declar": "func isDisjoint(with other: JSONEncoder.OutputFormatting) -> Bool"}, {"params": [{"param_name": ["lhs"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "A value to compare."}, {"param_name": ["rhs"], "param_type": "JSONEncoder.OutputFormatting", "param_description": "Another value to compare."}], "class_name": "JSONEncoder.OutputFormatting", "is_static": true, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "!=", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_declar": "static func != (lhs: JSONEncoder.OutputFormatting, rhs: JSONEncoder.OutputFormatting) -> Bool"}], "class_name": "JSONEncoder.OutputFormatting", "Vars": [{"var_description": "The output formatting option that uses ample white space and indentation to make output easy to read.", "var_type": "JSONEncoder.OutputFormatting", "is_static": false, "var_name": "prettyPrinted"}, {"var_description": "The output formatting option that sorts keys in lexicographic order.", "var_type": "JSONEncoder.OutputFormatting", "is_static": false, "var_name": "sortedKeys"}, {"var_description": "A raw value representing a set of output formatting options.", "var_type": "UInt", "is_static": false, "var_name": "rawValue"}, {"var_description": "A Boolean value that indicates whether the set has no elements.", "var_type": "Bool", "is_static": false, "var_name": "isEmpty"}]}