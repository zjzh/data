{"subclass_list": [], "typealias": [], "class_inherit_list": ["XMLNode"], "Methods": [{"return_value": {"return_name": [], "return_description": ["The initialized NSXMLElement object or nil if initialization did not succeed. "], "return_type": []}, "method_description": "Returns an NSXMLElement object initialized with the specified name.", "is_static": false, "method_name": "init", "class_name": "XMLElement", "method_declar": "convenience init(name: String)", "params": [{"param_type": "String", "param_description": "A string specifying the name of the element.", "param_name": ["name"]}]}, {"return_value": {"return_name": [], "return_description": ["The initialized NSXMLElement object or nil if initialization did not succeed. "], "return_type": []}, "method_description": "Returns an NSXMLElement object initialized with a specified name and a single text-node child containing a specified value.", "is_static": false, "method_name": "init", "class_name": "XMLElement", "method_declar": "convenience init(name: String, stringValue string: String?)", "params": [{"param_type": "String", "param_description": "A string specifying the name of the element.", "param_name": ["name"]}, {"param_type": "String", "param_description": "The string value of the receiver's text node.", "param_name": ["stringValue", "string"]}]}, {"return_value": {"return_name": [], "return_description": ["The initialized NSXMLElement object or nil if initialization did not succeed. "], "return_type": []}, "method_description": "Returns an NSXMLElement object created from a specified string containing XML markup. ", "is_static": false, "method_name": "init", "class_name": "XMLElement", "method_declar": "init(xmlString string: String) throws", "params": [{"param_type": "String", "param_description": "A string containing XML markup for an element.", "param_name": ["xmlString", "string"]}]}, {"return_value": {"return_name": [], "return_description": ["The initialized NSXMLElement object or nil if initialization did not succeed. "], "return_type": []}, "method_description": "Returns an NSXMLElement object initialized with the specified name and URI.", "is_static": false, "method_name": "init", "class_name": "XMLElement", "method_declar": "init(name: String, uri URI: String?)", "params": [{"param_type": "String", "param_description": "A string that specifies the qualified name of the element.", "param_name": ["name"]}, {"param_type": "String", "param_description": "A string that specifies the namespace URI associated with the element.", "param_name": ["uri", "URI"]}]}, {"return_value": {"return_name": [""], "return_description": ["An array of of NSXMLElement objects or an empty array if no matching children can be found."], "return_type": ["[XMLElement"]}, "method_description": "Returns the child element nodes (as NSXMLElement objects) of the receiver that have a specified name.", "is_static": false, "method_name": "elements", "class_name": "XMLElement", "method_declar": "func elements(forName name: String) -> [XMLElement]", "params": [{"param_type": "String", "param_description": "A string specifying the name of the child element nodes to find and return. If name is a qualified name, then this method invokes elements(forLocalName:uri:) with the URI parameter set to the URI associated with the prefix. Otherwise comparison is based on string equality of the qualified or non-qualified name.", "param_name": ["forName", "name"]}]}, {"return_value": {"return_name": [""], "return_description": ["An array of NSXMLElement objects or an empty array if no matching children could be found."], "return_type": ["[XMLElement"]}, "method_description": "Returns the child element nodes (as NSXMLElement objects) of the receiver that are matched with the specified local name and URI. ", "is_static": false, "method_name": "elements", "class_name": "XMLElement", "method_declar": "func elements(forLocalName localName: String, uri URI: String?) -> [XMLElement]", "params": [{"param_type": "String", "param_description": "A string specifying a local name of an element.", "param_name": ["forLocalName", "localName"]}, {"param_type": "String", "param_description": "A string specifying a URI associated with an element.", "param_name": ["uri", "URI"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Adds a child node at the end of the receiver\u2019s current list of children.", "is_static": false, "method_name": "addChild", "class_name": "XMLElement", "method_declar": "func addChild(_ child: XMLNode)", "params": [{"param_type": "XMLNode", "param_description": "An XML node object to add to the receiver's children.", "param_name": ["child"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Inserts a new child node at a specified location in the receiver\u2019s list of child nodes.", "is_static": false, "method_name": "insertChild", "class_name": "XMLElement", "method_declar": "func insertChild(_ child: XMLNode, at index: Int)", "params": [{"param_type": "XMLNode", "param_description": "An XML node object to be inserted as a child of the receiver.", "param_name": ["child"]}, {"param_type": "Int", "param_description": "An integer identifying a position in the receiver's list of children. An exception is raised if index is out of bounds. ", "param_name": ["at", "index"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Inserts an array of child nodes at a specified location in the receiver\u2019s list of children.", "is_static": false, "method_name": "insertChildren", "class_name": "XMLElement", "method_declar": "func insertChildren(_ children: [XMLNode], at index: Int)", "params": [{"param_type": "[XMLNode]", "param_description": "An array of XML node objects to add as children of the receiver.", "param_name": ["children"]}, {"param_type": "Int", "param_description": "An integer identifying a position in the receiver's list of children. An exception is raised if index is out of bounds. ", "param_name": ["at", "index"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes the child node of the receiver identified by a given index.", "is_static": false, "method_name": "removeChild", "class_name": "XMLElement", "method_declar": "func removeChild(at index: Int)", "params": [{"param_type": "Int", "param_description": "", "param_name": ["at", "index"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Replaces a child node at a specified location with another child node.", "is_static": false, "method_name": "replaceChild", "class_name": "XMLElement", "method_declar": "func replaceChild(at index: Int, with node: XMLNode)", "params": [{"param_type": "Int", "param_description": "An integer identifying a position in the receiver's list of children. An exception is raised if index is out of bounds. ", "param_name": ["at", "index"]}, {"param_type": "XMLNode", "param_description": "An XML node object that will replace the current child.", "param_name": ["with", "node"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets all child nodes of the receiver at once, replacing any existing children.", "is_static": false, "method_name": "setChildren", "class_name": "XMLElement", "method_declar": "func setChildren(_ children: [XMLNode]?)", "params": [{"param_type": "[XMLNode]", "param_description": "An array of NSXMLElement objects or XMLNode objects of kinds XMLNode.Kind.element, XMLNode.Kind.processingInstruction, XMLNode.Kind.text, or XMLNode.Kind.comment.", "param_name": ["children"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Coalesces adjacent text nodes of the receiver that you have explicitly added, optionally including CDATA sections.", "is_static": false, "method_name": "normalizeAdjacentTextNodesPreservingCDATA", "class_name": "XMLElement", "method_declar": "func normalizeAdjacentTextNodesPreservingCDATA(_ preserve: Bool)", "params": [{"param_type": "Bool", "param_description": "true if CDATA sections are left alone as text nodes, false otherwise.", "param_name": ["preserve"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Adds an attribute node to the receiver.", "is_static": false, "method_name": "addAttribute", "class_name": "XMLElement", "method_declar": "func addAttribute(_ attribute: XMLNode)", "params": [{"param_type": "XMLNode", "param_description": "", "param_name": ["attribute"]}]}, {"return_value": {"return_name": [""], "return_description": ["An XML node object representing a matching attribute or nil if no such node was found. "], "return_type": ["XMLNod"]}, "method_description": "Returns the attribute node of the receiver with the specified name.", "is_static": false, "method_name": "attribute", "class_name": "XMLElement", "method_declar": "func attribute(forName name: String) -> XMLNode?", "params": [{"param_type": "String", "param_description": "A string specifying the name of an attribute.", "param_name": ["forName", "name"]}]}, {"return_value": {"return_name": [""], "return_description": ["An XML node object representing a matching attribute or nil if no such node was found. "], "return_type": ["XMLNod"]}, "method_description": "Returns the attribute node of the receiver that is identified by a local name and URI.", "is_static": false, "method_name": "attribute", "class_name": "XMLElement", "method_declar": "func attribute(forLocalName localName: String, uri URI: String?) -> XMLNode?", "params": [{"param_type": "String", "param_description": "A string specifying the local name of an attribute.", "param_name": ["forLocalName", "localName"]}, {"param_type": "String", "param_description": "A sting identifying the URI associated with an attribute.", "param_name": ["uri", "URI"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes an attribute node identified by name.", "is_static": false, "method_name": "removeAttribute", "class_name": "XMLElement", "method_declar": "func removeAttribute(forName name: String)", "params": [{"param_type": "String", "param_description": "", "param_name": ["forName", "name"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the attributes of the receiver based on the key-value pairs specified in the passed dictionary.", "is_static": false, "method_name": "setAttributesWith", "class_name": "XMLElement", "method_declar": "func setAttributesWith(_ attributes: [String : String])", "params": [{"param_type": "[String", "param_description": "A dictionary of key-value pairs where the attribute name is the key and the object value of the attribute is the dictionary value. ", "param_name": ["attributes"]}, {"param_type": "String]", "param_description": "", "param_name": ["[String"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Sets the attributes of the receiver based on the key-value pairs specified in the passed-in dictionary.DeprecatedThis method is deprecated because it does not function properly. Instead use setAttributesWith(_:).", "is_static": false, "method_name": "setAttributesAs", "class_name": "XMLElement", "method_declar": "func setAttributesAs(_ attributes: [AnyHashable : Any])", "params": [{"param_type": "[AnyHashable", "param_description": "A dictionary of key-value pairs where the attribute name is the key and the object value of the attribute is the dictionary value. ", "param_name": ["attributes"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[AnyHashable"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Adds a namespace node to the receiver.", "is_static": false, "method_name": "addNamespace", "class_name": "XMLElement", "method_declar": "func addNamespace(_ aNamespace: XMLNode)", "params": [{"param_type": "XMLNode", "param_description": "An XML node object of kind XMLNode.Kind.namespace. If the receiver already has a namespace with the same name, aNamespace is not added. ", "param_name": ["aNamespace"]}]}, {"return_value": {"return_name": [""], "return_description": ["An XMLNode object of kind XMLNode.Kind.namespace or nil if there is no namespace node with that prefix."], "return_type": ["XMLNod"]}, "method_description": "Returns the namespace node with a specified prefix.", "is_static": false, "method_name": "namespace", "class_name": "XMLElement", "method_declar": "func namespace(forPrefix name: String) -> XMLNode?", "params": [{"param_type": "String", "param_description": "A string specifying a namespace prefix.", "param_name": ["forPrefix", "name"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes a namespace node that is identified by a given prefix.", "is_static": false, "method_name": "removeNamespace", "class_name": "XMLElement", "method_declar": "func removeNamespace(forPrefix name: String)", "params": [{"param_type": "String", "param_description": "A string that is the prefix for a namespace.", "param_name": ["forPrefix", "name"]}]}, {"return_value": {"return_name": [""], "return_description": ["An XMLNode object of kind XMLNode.Kind.namespace or nil if there is no matching namespace node."], "return_type": ["XMLNod"]}, "method_description": "Returns the namespace node with the prefix matching the given qualified name.", "is_static": false, "method_name": "resolveNamespace", "class_name": "XMLElement", "method_declar": "func resolveNamespace(forName name: String) -> XMLNode?", "params": [{"param_type": "String", "param_description": "A string that is the qualified name for a namespace (a qualified name is prefix plus local name).", "param_name": ["forName", "name"]}]}, {"return_value": {"return_name": [""], "return_description": ["A string that is the matching prefix or nil if it finds no matching prefix."], "return_type": ["Strin"]}, "method_description": "Returns the prefix associated with the specified URI.", "is_static": false, "method_name": "resolvePrefix", "class_name": "XMLElement", "method_declar": "func resolvePrefix(forNamespaceURI namespaceURI: String) -> String?", "params": [{"param_type": "String", "param_description": "A string identifying the URI associated with the namespace.", "param_name": ["forNamespaceURI", "namespaceURI"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "", "is_static": false, "method_name": "init", "class_name": "XMLElement", "method_declar": "convenience init(kind: XMLNode.Kind, options: XMLNode.Options = [])", "params": [{"param_type": "XMLNode.Kind", "param_description": "", "param_name": ["kind"]}, {"param_type": "XMLNode.Options = []", "param_description": "", "param_name": ["options"]}]}], "class_type": "class", "class_name": "XMLElement", "Vars": [{"var_name": "attributes", "var_type": "[XMLNode]", "var_description": "Sets all attributes of the receiver at once, replacing any existing attribute nodes.", "is_static": false}, {"var_name": "namespaces", "var_type": "[XMLNode]", "var_description": "Sets all of the namespace nodes of the receiver at once, replacing any existing namespace nodes.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "An XMLElement object may have child nodes, specifically comment nodes, processing-instruction nodes, text nodes, and other XMLElement nodes. It may also have attribute nodes and namespace nodes associated with it (however, namespace and attribute nodes are not considered children). Any attempt to add a XMLDocument node, XMLDTD node, namespace node, or attribute node as a child raises an exception. If you add a child node to an XMLElement object and that child already has a parent, XMLElement raises an exception; the child must be detached or copied first.\nYou can subclass NSXMLElement if you want element nodes with more specialized attributes or behavior, for example, paragraph and font attributes that specify how the string value of the element should appear. \nTo subclass NSXMLElement you need to override the primary initializer, init(name:uri:), and the methods listed below. In most cases, you need only invoke the superclass implementation, adding any subclass-specific code before or after the invocation, as necessary. \naddAttribute(_:)\nremoveNamespace(forPrefix:)\nremoveAttribute(forName:)\nnamespaces\nattributes\nnamespaces\nattribute(forLocalName:uri:)\ninsertChild(_:at:)\nattributes\nremoveChild(at:)\naddNamespace(_:)\nsetChildren(_:)\nNSXMLElement implements  isEqual(_:) to perform a deep comparison: two XMLDocument objects are not considered equal unless they have the same name, same child nodes, same attributes, and so on. If you want a different standard of comparison, override isEqual:. \nBecause of the architecture and data model of NSXML, when it parses and processes a source of XML it cannot know about your subclass unless you override the class method replacementClass(for:) to return your custom class in place of an NSXML class. If your custom class has no direct NSXML counterpart\u2014for example, it is a subclass of NSXMLNode that represents CDATA sections\u2014then you can walk the tree after it has been created and insert the new node where appropriate. \nNote that you can safely set the root element of the XML document (using the NSXMLDocument setRootElement(_:)method) to be an instance of your subclass because this method only checks to see if the added node is of an element kind (NSXMLElementKind). These precautions do not apply, of course, if you are creating an XML tree programmatically.\n", "package_name": "foundation"}