{"class_description": "A RunLoop object processes input for sources such as mouse and keyboard events from the window system, Port objects, and NSConnection objects. A RunLoop object also processes Timer events.\nYour application neither creates or explicitly manages RunLoop objects. Each Thread object\u2014including the application\u2019s main thread\u2014has an RunLoop object automatically created for it as needed. If you need to access the current thread\u2019s run loop, you do so with the class method current.\nNote that from the perspective of RunLoop, Timer objects are not \"input\"\u2014they are a special type, and one of the things that means is that they do not cause the run loop to return when they fire.\nWarning\nThe RunLoop class is generally not considered to be thread-safe and its methods should only be called within the context of the current thread. You should never try to call the methods of an RunLoop object running in a different thread, as doing so might cause unexpected results. \n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "RunLoop", "typealias": [], "Vars": [{"var_description": "The mode to deal with input sources other than NSConnection objects.", "var_type": "RunLoop.Mode", "is_static": false, "var_name": "`default`"}, {"var_description": "Objects added to a run loop using this value as the mode are monitored by all run loop modes that have been declared as a member of the set of \u201ccommon\" modes; see the description of CFRunLoopAddCommonMode(_:_:) for details.", "var_type": "RunLoop.Mode", "is_static": false, "var_name": "common"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}