{"subclass_list": [], "typealias": [], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_name": [""], "return_description": ["The date at which the next timer is scheduled to fire, or nil if there are no input sources for this mode."], "return_type": ["Dat"]}, "method_description": "Performs one pass through the run loop in the specified mode and returns the date at which the next timer is scheduled to fire.", "is_static": false, "method_name": "limitDate", "class_name": "RunLoop", "method_declar": "func limitDate(forMode mode: RunLoop.Mode) -> Date?", "params": [{"param_type": "RunLoop.Mode", "param_description": "The run loop mode to search. You may specify custom modes or use one of the modes listed in Run Loop Modes.", "param_name": ["forMode", "mode"]}]}, {"return_value": {"return_name": [""], "return_description": ["The receiver's underlying CFRunLoop object."], "return_type": ["CFRunLoo"]}, "method_description": "Returns the receiver's underlying CFRunLoop object.", "is_static": false, "method_name": "getCFRunLoop", "class_name": "RunLoop", "method_declar": "func getCFRunLoop() -> CFRunLoop", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Registers a given timer with a given input mode.", "is_static": false, "method_name": "add", "class_name": "RunLoop", "method_declar": "func add(_ timer: Timer, forMode mode: RunLoop.Mode)", "params": [{"param_type": "Timer", "param_description": "", "param_name": ["timer"]}, {"param_type": "RunLoop.Mode", "param_description": "The mode in which to add aTimer. You may specify a custom mode or use one of the modes listed in Run Loop Modes.", "param_name": ["forMode", "mode"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Adds a port as an input source to the specified mode of the run loop.", "is_static": false, "method_name": "add", "class_name": "RunLoop", "method_declar": "func add(_ aPort: Port, forMode mode: RunLoop.Mode)", "params": [{"param_type": "Port", "param_description": "The port to add to the receiver.", "param_name": ["aPort"]}, {"param_type": "RunLoop.Mode", "param_description": "The mode in which to add aPort. You may specify a custom mode or use one of the modes listed in Run Loop Modes.", "param_name": ["forMode", "mode"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Removes a port from the specified input mode of the run loop.", "is_static": false, "method_name": "remove", "class_name": "RunLoop", "method_declar": "func remove(_ aPort: Port, forMode mode: RunLoop.Mode)", "params": [{"param_type": "Port", "param_description": "The port to remove from the receiver.", "param_name": ["aPort"]}, {"param_type": "RunLoop.Mode", "param_description": "The mode from which to remove aPort. You may specify a custom mode or use one of the modes listed in Run Loop Modes.", "param_name": ["forMode", "mode"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Puts the receiver into a permanent loop, during which time it processes data from all attached input sources.", "is_static": false, "method_name": "run", "class_name": "RunLoop", "method_declar": "func run()", "params": []}, {"return_value": {"return_name": [""], "return_description": ["true if the run loop ran and processed an input source or if the specified timeout value was reached; otherwise, false if the run loop could not be started."], "return_type": ["Boo"]}, "method_description": "Runs the loop once, blocking for input in the specified mode until a given date.", "is_static": false, "method_name": "run", "class_name": "RunLoop", "method_declar": "func run(mode: RunLoop.Mode, before limitDate: Date) -> Bool", "params": [{"param_type": "RunLoop.Mode", "param_description": "The mode in which to run. You may specify custom modes or use one of the modes listed in Run Loop Modes.", "param_name": ["mode"]}, {"param_type": "Date", "param_description": "The date until which to block.", "param_name": ["before", "limitDate"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Runs the loop until the specified date, during which time it processes data from all attached input sources.", "is_static": false, "method_name": "run", "class_name": "RunLoop", "method_declar": "func run(until limitDate: Date)", "params": [{"param_type": "Date", "param_description": "The date up until which to run.", "param_name": ["until", "limitDate"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Runs the loop once or until the specified date, accepting input only for the specified mode.", "is_static": false, "method_name": "acceptInput", "class_name": "RunLoop", "method_declar": "func acceptInput(forMode mode: RunLoop.Mode, before limitDate: Date)", "params": [{"param_type": "RunLoop.Mode", "param_description": "The mode in which to run. You may specify custom modes or use one of the modes listed in Run Loop Modes.", "param_name": ["forMode", "mode"]}, {"param_type": "Date", "param_description": "The date up until which to run.", "param_name": ["before", "limitDate"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Schedules the sending of a message on the receiver.", "is_static": false, "method_name": "perform", "class_name": "RunLoop", "method_declar": "func perform(_ aSelector: Selector, target: Any, argument arg: Any?, order: Int, modes: [RunLoop.Mode])", "params": [{"param_type": "Selector", "param_description": "A selector that identifies the method to invoke. This method should not have a significant return value and should take a single argument of type id. ", "param_name": ["aSelector"]}, {"param_type": "Any", "param_description": "The object that defines the selector in aSelector. ", "param_name": ["target"]}, {"param_type": "Any", "param_description": "", "param_name": ["argument", "arg"]}, {"param_type": "Int", "param_description": "The priority for the message. If multiple messages are scheduled, the messages with a lower order value are sent before messages with a higher order value.", "param_name": ["order"]}, {"param_type": "[RunLoop.Mode]", "param_description": "An array of input modes for which the message may be sent. You may specify custom modes or use one of the modes listed in Run Loop Modes. ", "param_name": ["modes"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Cancels the sending of a previously scheduled message.", "is_static": false, "method_name": "cancelPerform", "class_name": "RunLoop", "method_declar": "func cancelPerform(_ aSelector: Selector, target: Any, argument arg: Any?)", "params": [{"param_type": "Selector", "param_description": "The previously-specified selector.", "param_name": ["aSelector"]}, {"param_type": "Any", "param_description": "The previously-specified target.", "param_name": ["target"]}, {"param_type": "Any", "param_description": "", "param_name": ["argument", "arg"]}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_description": "Cancels all outstanding ordered performs scheduled with a given target.", "is_static": false, "method_name": "cancelPerformSelectors", "class_name": "RunLoop", "method_declar": "func cancelPerformSelectors(withTarget target: Any)", "params": [{"param_type": "Any", "param_description": "The previously-specified target.", "param_name": ["withTarget", "target"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "", "is_static": false, "method_name": "perform", "class_name": "RunLoop", "method_declar": "func perform(_ block: @escaping () -> Void)", "params": [{"param_type": "@escaping () -> Void", "param_description": "", "param_name": ["block"]}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_description": "", "is_static": false, "method_name": "perform", "class_name": "RunLoop", "method_declar": "func perform(inModes modes: [RunLoop.Mode], block: @escaping () -> Void)", "params": [{"param_type": "[RunLoop.Mode]", "param_description": "", "param_name": ["inModes", "modes"]}, {"param_type": "@escaping () -> Void", "param_description": "", "param_name": ["block"]}]}], "class_type": "class", "class_name": "RunLoop", "Vars": [{"var_name": "current", "var_type": "RunLoop", "var_description": "Returns the run loop for the current thread.", "is_static": false}, {"var_name": "currentMode", "var_type": "RunLoop.Mode", "var_description": "The receiver's current input mode.", "is_static": false}, {"var_name": "main", "var_type": "RunLoop", "var_description": "Returns the run loop of the main thread.", "is_static": false}, {"var_name": "`default`", "var_type": "RunLoop.Mode", "var_description": "The mode to deal with input sources other than NSConnection objects.", "is_static": false}, {"var_name": "common", "var_type": "RunLoop.Mode", "var_description": "Objects added to a run loop using this value as the mode are monitored by all run loop modes that have been declared as a member of the set of \u201ccommon\" modes; see the description of CFRunLoopAddCommonMode(_:_:) for details.", "is_static": false}], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_description": "A RunLoop object processes input for sources such as mouse and keyboard events from the window system, Port objects, and NSConnection objects. A RunLoop object also processes Timer events.\nYour application neither creates or explicitly manages RunLoop objects. Each Thread object\u2014including the application\u2019s main thread\u2014has an RunLoop object automatically created for it as needed. If you need to access the current thread\u2019s run loop, you do so with the class method current.\nNote that from the perspective of RunLoop, Timer objects are not \"input\"\u2014they are a special type, and one of the things that means is that they do not cause the run loop to return when they fire.\nWarning\nThe RunLoop class is generally not considered to be thread-safe and its methods should only be called within the context of the current thread. You should never try to call the methods of an RunLoop object running in a different thread, as doing so might cause unexpected results. \n", "package_name": "foundation"}