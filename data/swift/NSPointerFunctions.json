{"class_description": "The functions specified by an instance of NSPointerFunctions are separated into two clusters\u2014those that define \u201cpersonality\u201d such as \u201cobject\u201d or \"C-string\u201d, and those that describe memory management issues such as a memory deallocation function. There are constants for common personalities and memory manager selections (see Memory and Personality Options).\nNSHashTable, NSMapTable, and NSPointerArray use an NSPointerFunctions object to define the acquisition and retention behavior for the pointers they manage. Note, however, that not all combinations of personality and memory management behavior are valid for these collections. The pointer collection objects copy the NSPointerFunctions object on input and output, so you cannot usefully subclass NSPointerFunctions.\nNSPointerFunctions is not suitable for subclassing.\n", "Methods": [{"method_description": "Returns an NSPointerFunctions object initialized with the given options.", "method_name": "init", "params": [{"param_type": "NSPointerFunctions.Options = []", "param_description": "The options for the new NSPointerFunctions object.", "param_name": ["options"]}], "class_name": "NSPointerFunctions", "method_declar": "init(options: NSPointerFunctions.Options = [])", "return_value": {"return_description": ["The NSPointerFunctions object, initialized with the given options."], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSPointerFunctions", "typealias": [], "Vars": [{"var_description": "The hash function.", "var_type": "((UnsafeRawPointer,", "is_static": false, "var_name": "hashFunction"}, {"var_description": "The function used to compare pointers.", "var_type": "((UnsafeRawPointer,", "is_static": false, "var_name": "isEqualFunction"}, {"var_description": "The function used to determine the size of pointers.", "var_type": "((UnsafeRawPointer)", "is_static": false, "var_name": "sizeFunction"}, {"var_description": "The function used to describe elements.", "var_type": "((UnsafeRawPointer)", "is_static": false, "var_name": "descriptionFunction"}, {"var_description": "The function used to acquire memory.", "var_type": "((UnsafeRawPointer,", "is_static": false, "var_name": "acquireFunction"}, {"var_description": "The function used to relinquish memory.", "var_type": "((UnsafeRawPointer,", "is_static": false, "var_name": "relinquishFunction"}, {"var_description": "Specifies whether, in a garbage collected environment, pointers should be assigned using a strong write barrier.", "var_type": "Bool", "is_static": false, "var_name": "usesStrongWriteBarrier"}, {"var_description": "Specifies whether, in a garbage collected environment, pointers should use weak read and write barriers.", "var_type": "Bool", "is_static": false, "var_name": "usesWeakReadAndWriteBarriers"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying"], "package_name": "foundation", "subclass_list": []}