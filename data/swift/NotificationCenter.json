{"package_name": "foundation", "subclass_list": [], "class_description": "Objects register with a notification center to receive notifications (NSNotification objects) using the addObserver(_:selector:name:object:) or addObserver(forName:object:queue:using:) methods. When an object adds itself as an observer, it specifies which notifications it should receive. An object may therefore call this method several times in order to register itself as an observer for several different notifications.\nEach running app has a default notification center, and you can create new notification centers to organize communications in particular contexts.\nA notification center can deliver notifications only within a single program; if you want to post a notification to other processes or receive notifications from other processes, use DistributedNotificationCenter instead.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["forName", "name"], "param_type": "NSNotification.Name", "param_description": "The name of the notification for which to register the observer; that is, only notifications with this name are used to add the block to the operation queue.If you pass nil, the notification center doesn\u2019t use a notification\u2019s name to decide whether to add the block to the operation queue."}, {"param_name": ["object", "obj"], "param_type": "Any", "param_description": "The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer.If you pass nil, the notification center doesn\u2019t use a notification\u2019s sender to decide whether to deliver it to the observer."}, {"param_name": ["queue"], "param_type": "OperationQueue", "param_description": "The operation queue to which block should be added.If you pass nil, the block is run synchronously on the posting thread."}, {"param_name": ["using", "block"], "param_type": "@escaping (Notification) -> Void", "param_description": "The block to be executed when the notification is received.The block is copied by the notification center and (the copy) held until the observer registration is removed. The block takes one argument:notificationThe notification."}], "class_name": "NotificationCenter", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An opaque object to act as the observer."], "return_type": ["NSObjectProtoco"]}, "method_name": "addObserver", "method_description": "Adds an entry to the notification center's dispatch table that includes a notification queue and a block to add to the queue, and an optional notification name and sender.", "method_declar": "func addObserver(forName name: NSNotification.Name?, object obj: Any?, queue: OperationQueue?, using block: @escaping (Notification) -> Void) -> NSObjectProtocol"}, {"params": [{"param_name": ["observer"], "param_type": "Any", "param_description": "Object registering as an observer."}, {"param_name": ["selector", "aSelector"], "param_type": "Selector", "param_description": "Selector that specifies the message the receiver sends observer to notify it of the notification posting. The method specified by aSelector must have one and only one argument (an instance of NSNotification)."}, {"param_name": ["name", "aName"], "param_type": "NSNotification.Name", "param_description": "The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.If you pass nil, the notification center doesn\u2019t use a notification\u2019s name to decide whether to deliver it to the observer."}, {"param_name": ["object", "anObject"], "param_type": "Any", "param_description": "The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer.If you pass nil, the notification center doesn\u2019t use a notification\u2019s sender to decide whether to deliver it to the observer."}], "class_name": "NotificationCenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "addObserver", "method_description": "Adds an entry to the notification center's dispatch table with an observer and a notification selector, and an optional notification name and sender.", "method_declar": "func addObserver(_ observer: Any, selector aSelector: Selector, name aName: NSNotification.Name?, object anObject: Any?)"}, {"params": [{"param_name": ["observer"], "param_type": "Any", "param_description": "Observer to remove from the dispatch table. Specify an observer to remove only entries for this observer. "}, {"param_name": ["name", "aName"], "param_type": "NSNotification.Name", "param_description": "Name of the notification to remove from dispatch table. Specify a notification name to remove only entries that specify this notification name. When nil, the receiver does not use notification names as criteria for removal."}, {"param_name": ["object", "anObject"], "param_type": "Any", "param_description": "Sender to remove from the dispatch table. Specify a notification sender to remove only entries that specify this sender. When nil, the receiver does not use notification senders as criteria for removal."}], "class_name": "NotificationCenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "removeObserver", "method_description": "Removes matching entries from the notification center's dispatch table.", "method_declar": "func removeObserver(_ observer: Any, name aName: NSNotification.Name?, object anObject: Any?)"}, {"params": [{"param_name": ["observer"], "param_type": "Any", "param_description": "The observer to remove."}], "class_name": "NotificationCenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "removeObserver", "method_description": "Removes all entries specifying a given observer from the notification center's dispatch table.", "method_declar": "func removeObserver(_ observer: Any)"}, {"params": [{"param_name": ["notification"], "param_type": "Notification", "param_description": "The notification to post. "}], "class_name": "NotificationCenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "post", "method_description": "Posts a given notification to the notification center.", "method_declar": "func post(_ notification: Notification)"}, {"params": [{"param_name": ["name", "aName"], "param_type": "NSNotification.Name", "param_description": "The name of the notification."}, {"param_name": ["object", "anObject"], "param_type": "Any", "param_description": "The object posting the notification."}, {"param_name": ["userInfo", "aUserInfo"], "param_type": "[AnyHashable", "param_description": "Optional information about the the notification."}, {"param_name": ["[AnyHashable"], "param_type": "Any] = nil", "param_description": ""}], "class_name": "NotificationCenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "post", "method_description": "Creates a notification with a given name, sender, and information and posts it to the notification center.", "method_declar": "func post(name aName: NSNotification.Name, object anObject: Any?, userInfo aUserInfo: [AnyHashable : Any]? = nil)"}, {"params": [{"param_name": ["name", "aName"], "param_type": "NSNotification.Name", "param_description": "The name of the notification."}, {"param_name": ["object", "anObject"], "param_type": "Any", "param_description": "The object posting the notification."}], "class_name": "NotificationCenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "post", "method_description": "Creates a notification with a given name and sender and posts it to the notification center.", "method_declar": "func post(name aName: NSNotification.Name, object anObject: Any?)"}], "class_name": "NotificationCenter", "Vars": [{"var_description": "The app\u2019s default notification center.", "var_type": "NotificationCenter", "is_static": false, "var_name": "`default`"}]}