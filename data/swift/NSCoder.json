{"package_name": "foundation", "subclass_list": [], "class_description": "The NSCoder abstract class declares the interface used by concrete subclasses to transfer objects and other values between memory and some other format. This capability provides the basis for archiving (where objects and data items are stored on disk) and distribution (where objects and data items are copied between different processes or threads). The concrete subclasses provided by Foundation for these purposes are NSArchiver, NSUnarchiver, NSKeyedArchiver, NSKeyedUnarchiver, and NSPortCoder. Concrete subclasses of NSCoder are referred to in general as coder classes, and instances of these classes as coder objects (or simply coders). A coder object that can only encode values is referred to as an encoder object, and one that can only decode values as a decoder object.\nNSCoder operates on objects, scalars, C arrays, structures, and strings, and on pointers to these types. It does not handle types whose implementation varies across platforms, such as union, void *, function pointers, and long chains of pointers. A coder object stores object type information along with the data, so an object decoded from a stream of bytes is normally of the same class as the object that was originally encoded into the stream. An object can change its class when encoded, however; this is described in Archives and Serializations Programming Guide.\nThe AVFoundation framework adds methods to the NSCoder class to make it easier to create archives including Core Media time structures, and extract Core Media time structure from archives.\nFor details of how to create a subclass of NSCoder, see Subclassing NSCoder in Archives and Serializations Programming Guide.\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "containsValue", "method_description": "Returns a Boolean value that indicates whether an encoded value is available for a string.", "method_declar": "func containsValue(forKey key: String) -> Bool"}, {"params": [{"param_name": ["ofObjCType", "type"], "param_type": "UnsafePointer<Int8>", "param_description": ""}, {"param_name": ["count"], "param_type": "Int", "param_description": ""}, {"param_name": ["at", "array"], "param_type": "UnsafeRawPointer", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeArray", "method_description": "Encodes an array of count items, whose Objective-C type is given by itemType.", "method_declar": "func encodeArray(ofObjCType type: UnsafePointer<Int8>, count: Int, at array: UnsafeRawPointer)"}, {"params": [{"param_name": ["value"], "param_type": "Bool", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes boolv and associates it with the string key.", "method_declar": "func encode(_ value: Bool, forKey key: String)"}, {"params": [{"param_name": ["anObject"], "param_type": "Any", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeBycopyObject", "method_description": "Can be overridden by subclasses to encode object so that a copy, rather than a proxy, is created upon decoding.", "method_declar": "func encodeBycopyObject(_ anObject: Any?)"}, {"params": [{"param_name": ["anObject"], "param_type": "Any", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeByrefObject", "method_description": "Can be overridden by subclasses to encode object so that a proxy, rather than a copy, is created upon decoding.", "method_declar": "func encodeByrefObject(_ anObject: Any?)"}, {"params": [{"param_name": ["byteaddr"], "param_type": "UnsafeRawPointer", "param_description": ""}, {"param_name": ["length"], "param_type": "Int", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeBytes", "method_description": "Encodes a buffer of data whose types are unspecified.", "method_declar": "func encodeBytes(_ byteaddr: UnsafeRawPointer?, length: Int)"}, {"params": [{"param_name": ["bytes"], "param_type": "UnsafePointer<UInt8>", "param_description": ""}, {"param_name": ["length"], "param_type": "Int", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeBytes", "method_description": "Encodes a buffer of data, bytesp, whose length is specified by lenv, and associates it with the string key.", "method_declar": "func encodeBytes(_ bytes: UnsafePointer<UInt8>?, length: Int, forKey key: String)"}, {"params": [{"param_name": ["object"], "param_type": "Any", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeConditionalObject", "method_description": "Can be overridden by subclasses to conditionally encode object, preserving common references to that object.", "method_declar": "func encodeConditionalObject(_ object: Any?)"}, {"params": [{"param_name": ["object"], "param_type": "Any", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeConditionalObject", "method_description": "Conditionally encodes a reference to objv and associates it with the string key only if objv has been unconditionally encoded with encode(_:forKey:).", "method_declar": "func encodeConditionalObject(_ object: Any?, forKey key: String)"}, {"params": [{"param_name": ["data"], "param_type": "Data", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes a given NSData object.", "method_declar": "func encode(_ data: Data)"}, {"params": [{"param_name": ["value"], "param_type": "Double", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes realv and associates it with the string key.", "method_declar": "func encode(_ value: Double, forKey key: String)"}, {"params": [{"param_name": ["value"], "param_type": "Float", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes realv and associates it with the string key.", "method_declar": "func encode(_ value: Float, forKey key: String)"}, {"params": [{"param_name": ["value"], "param_type": "Int32", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeCInt", "method_description": "Encodes intv and associates it with the string key.", "method_declar": "func encodeCInt(_ value: Int32, forKey key: String)"}, {"params": [{"param_name": ["value"], "param_type": "Int", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes a given NSInteger and associates it with a given key.", "method_declar": "func encode(_ value: Int, forKey key: String)"}, {"params": [{"param_name": ["value"], "param_type": "Int32", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes the 32-bit integer intv and associates it with the string key.", "method_declar": "func encode(_ value: Int32, forKey key: String)"}, {"params": [{"param_name": ["value"], "param_type": "Int64", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes the 64-bit integer intv and associates it with the string key.", "method_declar": "func encode(_ value: Int64, forKey key: String)"}, {"params": [{"param_name": ["object"], "param_type": "Any", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes object.", "method_declar": "func encode(_ object: Any?)"}, {"params": [{"param_name": ["object"], "param_type": "Any", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes the object objv and associates it with the string key.", "method_declar": "func encode(_ object: Any?, forKey key: String)"}, {"params": [{"param_name": ["point"], "param_type": "NSPoint", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes point.", "method_declar": "func encode(_ point: NSPoint)"}, {"params": [{"param_name": ["point"], "param_type": "NSPoint", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes point and associates it with the string key.", "method_declar": "func encode(_ point: NSPoint, forKey key: String)"}, {"params": [{"param_name": ["aPropertyList"], "param_type": "Any", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodePropertyList", "method_description": "Encodes the property list aPropertyList.", "method_declar": "func encodePropertyList(_ aPropertyList: Any)"}, {"params": [{"param_name": ["rect"], "param_type": "NSRect", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes rect.", "method_declar": "func encode(_ rect: NSRect)"}, {"params": [{"param_name": ["rect"], "param_type": "NSRect", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes rect and associates it with the string key.", "method_declar": "func encode(_ rect: NSRect, forKey key: String)"}, {"params": [{"param_name": ["rootObject"], "param_type": "Any", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeRootObject", "method_description": "Can be overridden by subclasses to encode an interconnected group of Objective-C objects, starting with rootObject.", "method_declar": "func encodeRootObject(_ rootObject: Any)"}, {"params": [{"param_name": ["size"], "param_type": "NSSize", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes size.", "method_declar": "func encode(_ size: NSSize)"}, {"params": [{"param_name": ["size"], "param_type": "NSSize", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes size and associates it with the string key.", "method_declar": "func encode(_ size: NSSize, forKey key: String)"}, {"params": [{"param_name": ["ofObjCType", "type"], "param_type": "UnsafePointer<Int8>", "param_description": ""}, {"param_name": ["at", "addr"], "param_type": "UnsafeRawPointer", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encodeValue", "method_description": "Must be overridden by subclasses to encode a single value residing at address, whose Objective-C type is given by valueType.", "method_declar": "func encodeValue(ofObjCType type: UnsafePointer<Int8>, at addr: UnsafeRawPointer)"}, {"params": [{"param_name": ["point"], "param_type": "CGPoint", "param_description": "The point to encode."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key identifying the data. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes a point and associates it with the specified key in the receiver\u2019s archive.", "method_declar": "func encode(_ point: CGPoint, forKey key: String)"}, {"params": [{"param_name": ["rect"], "param_type": "CGRect", "param_description": "The rectangle to encode."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key identifying the data. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes a rectangle and associates it with the specified key in the receiver\u2019s archive.", "method_declar": "func encode(_ rect: CGRect, forKey key: String)"}, {"params": [{"param_name": ["size"], "param_type": "CGSize", "param_description": "The size information to encode."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key identifying the data. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes size information and associates it with the specified key in the receiver\u2019s archive.", "method_declar": "func encode(_ size: CGSize, forKey key: String)"}, {"params": [{"param_name": ["transform"], "param_type": "CGAffineTransform", "param_description": "The transform information to encode."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key identifying the data. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes an affine transform and associates it with the specified key in the receiver\u2019s archive.", "method_declar": "func encode(_ transform: CGAffineTransform, forKey key: String)"}, {"params": [{"param_name": ["insets"], "param_type": "UIEdgeInsets", "param_description": "The edge insets data to encode."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key identifying the data. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes edge inset data and associates it with the specified key in the receiver\u2019s archive.", "method_declar": "func encode(_ insets: UIEdgeInsets, forKey key: String)"}, {"params": [{"param_name": ["offset"], "param_type": "UIOffset", "param_description": "The offset data to encode."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key identifying the data. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes offset data and associates it with the specified key in the receiver\u2019s archive.", "method_declar": "func encode(_ offset: UIOffset, forKey key: String)"}, {"params": [{"param_name": ["vector"], "param_type": "CGVector", "param_description": "The vector data to encode."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key identifying the data. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes vector data and associates it with the specified key in the coder\u2019s archive.", "method_declar": "func encode(_ vector: CGVector, forKey key: String)"}, {"params": [{"param_name": ["time"], "param_type": "CMTime", "param_description": "A CMTime structure."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key with which to associate time in the archive."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes a given CMTime structure and associates it with a specified key.", "method_declar": "func encode(_ time: CMTime, forKey key: String)"}, {"params": [{"param_name": ["timeRange"], "param_type": "CMTimeRange", "param_description": "A CMTimeRange structure."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key with which to associate timeRange in the archive."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes a given CMTimeRange structure and associates it with a specified key.", "method_declar": "func encode(_ timeRange: CMTimeRange, forKey key: String)"}, {"params": [{"param_name": ["timeMapping"], "param_type": "CMTimeMapping", "param_description": "A CMTimeMapping structure."}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key with which to associate timeMapping in the archive."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "Encodes a given CMTimeMapping structure and associates it with a specified key.", "method_declar": "func encode(_ timeMapping: CMTimeMapping, forKey key: String)"}, {"params": [{"param_name": ["ofObjCType", "itemType"], "param_type": "UnsafePointer<Int8>", "param_description": ""}, {"param_name": ["count"], "param_type": "Int", "param_description": ""}, {"param_name": ["at", "array"], "param_type": "UnsafeMutableRawPointer", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "decodeArray", "method_description": "Decodes an array of count items, whose Objective-C type is given by itemType.", "method_declar": "func decodeArray(ofObjCType itemType: UnsafePointer<Int8>, count: Int, at array: UnsafeMutableRawPointer)"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Boo"]}, "method_name": "decodeBool", "method_description": "Decodes and returns a boolean value that was previously encoded with encode(_:forKey:) and associated with the string key.", "method_declar": "func decodeBool(forKey key: String) -> Bool"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}, {"param_name": ["returnedLength", "lengthp"], "param_type": "UnsafeMutablePointer<Int>", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["UnsafePointer<UInt8"]}, "method_name": "decodeBytes", "method_description": "Decodes a buffer of data that was previously encoded with encodeBytes(_:length:forKey:) and associated with the string key.", "method_declar": "func decodeBytes(forKey key: String, returnedLength lengthp: UnsafeMutablePointer<Int>?) -> UnsafePointer<UInt8>?"}, {"params": [{"param_name": ["withReturnedLength", "lengthp"], "param_type": "UnsafeMutablePointer<Int>", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["UnsafeMutableRawPointe"]}, "method_name": "decodeBytes", "method_description": "Decodes a buffer of data whose types are unspecified.", "method_declar": "func decodeBytes(withReturnedLength lengthp: UnsafeMutablePointer<Int>) -> UnsafeMutableRawPointer?"}, {"params": [], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Dat"]}, "method_name": "decodeData", "method_description": "Decodes and returns an NSData object that was previously encoded with encode(_:). Subclasses must override this method.", "method_declar": "func decodeData() -> Data?"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Doubl"]}, "method_name": "decodeDouble", "method_description": "Decodes and returns a double value that was previously encoded with either encode(_:forKey:) or encode(_:forKey:) and associated with the string key.", "method_declar": "func decodeDouble(forKey key: String) -> Double"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Floa"]}, "method_name": "decodeFloat", "method_description": "Decodes and returns a float value that was previously encoded with encode(_:forKey:) or encode(_:forKey:) and associated with the string key.", "method_declar": "func decodeFloat(forKey key: String) -> Float"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Int3"]}, "method_name": "decodeCInt", "method_description": "Decodes and returns an int value that was previously encoded with encodeCInt(_:forKey:), encode(_:forKey:), encode(_:forKey:), or encode(_:forKey:) and associated with the string key.", "method_declar": "func decodeCInt(forKey key: String) -> Int32"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["In"]}, "method_name": "decodeInteger", "method_description": "Decodes and returns an NSInteger value that was previously encoded with encodeCInt(_:forKey:), encode(_:forKey:), encode(_:forKey:), or encode(_:forKey:) and associated with the string key.", "method_declar": "func decodeInteger(forKey key: String) -> Int"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Int3"]}, "method_name": "decodeInt32", "method_description": "Decodes and returns a 32-bit integer value that was previously encoded with encodeCInt(_:forKey:), encode(_:forKey:), encode(_:forKey:), or encode(_:forKey:) and associated with the string key.", "method_declar": "func decodeInt32(forKey key: String) -> Int32"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Int6"]}, "method_name": "decodeInt64", "method_description": "Decodes and returns a 64-bit integer value that was previously encoded with encodeCInt(_:forKey:), encode(_:forKey:), encode(_:forKey:), or encode(_:forKey:) and associated with the string key.", "method_declar": "func decodeInt64(forKey key: String) -> Int64"}, {"params": [], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["An"]}, "method_name": "decodeObject", "method_description": "Decodes an Objective-C object that was previously encoded with any of the encode...Object: methods.", "method_declar": "func decodeObject() -> Any?"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["An"]}, "method_name": "decodeObject", "method_description": "Decodes and returns an Objective-C object that was previously encoded with encode(_:forKey:) or encodeConditionalObject(_:forKey:) and associated with the string key.", "method_declar": "func decodeObject(forKey key: String) -> Any?"}, {"params": [], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSPoin"]}, "method_name": "decodePoint", "method_description": "Decodes and returns an NSPoint structure that was previously encoded with encode(_:).", "method_declar": "func decodePoint() -> NSPoint"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSPoin"]}, "method_name": "decodePoint", "method_description": "Decodes and returns an NSPoint structure that was previously encoded with encode(_:forKey:).", "method_declar": "func decodePoint(forKey key: String) -> NSPoint"}, {"params": [], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["An"]}, "method_name": "decodePropertyList", "method_description": "Decodes a property list that was previously encoded with encodePropertyList(_:).", "method_declar": "func decodePropertyList() -> Any?"}, {"params": [], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSRec"]}, "method_name": "decodeRect", "method_description": "Decodes and returns an NSRect structure that was previously encoded with encode(_:).", "method_declar": "func decodeRect() -> NSRect"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSRec"]}, "method_name": "decodeRect", "method_description": "Decodes and returns an NSRect structure that was previously encoded with encode(_:forKey:).", "method_declar": "func decodeRect(forKey key: String) -> NSRect"}, {"params": [], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSSiz"]}, "method_name": "decodeSize", "method_description": "Decodes and returns an NSSize structure that was previously encoded with encode(_:).", "method_declar": "func decodeSize() -> NSSize"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSSiz"]}, "method_name": "decodeSize", "method_description": "Decodes and returns an NSSize structure that was previously encoded with encode(_:forKey:).", "method_declar": "func decodeSize(forKey key: String) -> NSSize"}, {"params": [{"param_name": ["ofObjCType", "type"], "param_type": "UnsafePointer<Int8>", "param_description": ""}, {"param_name": ["at", "data"], "param_type": "UnsafeMutableRawPointer", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "decodeValue", "method_description": "Decodes a single value, whose Objective-C type is given by valueType.", "method_declar": "func decodeValue(ofObjCType type: UnsafePointer<Int8>, at data: UnsafeMutableRawPointer)"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The coder key."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A decoded object containing a property list."], "return_type": ["An"]}, "method_name": "decodePropertyList", "method_description": "Returns a decoded property list for the specified key.", "method_declar": "func decodePropertyList(forKey key: String) -> Any?"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key that identifies the point."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The CGPoint structure."], "return_type": ["CGPoin"]}, "method_name": "decodeCGPoint", "method_description": "Decodes and returns the CGPoint structure associated with the specified key in the receiver\u2019s archive. ", "method_declar": "func decodeCGPoint(forKey key: String) -> CGPoint"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key that identifies the rectangle."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The CGRect structure."], "return_type": ["CGRec"]}, "method_name": "decodeCGRect", "method_description": "Decodes and returns the CGRect structure associated with the specified key in the receiver\u2019s archive. ", "method_declar": "func decodeCGRect(forKey key: String) -> CGRect"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key that identifies the size information."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The CGSize structure."], "return_type": ["CGSiz"]}, "method_name": "decodeCGSize", "method_description": "Decodes and returns the CGSize structure associated with the specified key in the receiver\u2019s archive. ", "method_declar": "func decodeCGSize(forKey key: String) -> CGSize"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key that identifies the affine transform."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The affine transform."], "return_type": ["CGAffineTransfor"]}, "method_name": "decodeCGAffineTransform", "method_description": "Decodes and returns the CGAffineTransform structure associated with the specified key in the receiver\u2019s archive. ", "method_declar": "func decodeCGAffineTransform(forKey key: String) -> CGAffineTransform"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key that identifies the edge insets."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The edge insets data."], "return_type": ["UIEdgeInset"]}, "method_name": "decodeUIEdgeInsets", "method_description": "Decodes and returns the UIEdgeInsets structure associated with the specified key in the receiver\u2019s archive. ", "method_declar": "func decodeUIEdgeInsets(forKey key: String) -> UIEdgeInsets"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key that identifies the offset."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The offset data."], "return_type": ["UIOffse"]}, "method_name": "decodeUIOffset", "method_description": "Decodes and returns the UIOffset structure associated with the specified key in the receiver\u2019s archive. ", "method_declar": "func decodeUIOffset(forKey key: String) -> UIOffset"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key that identifies the vector."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The vector data."], "return_type": ["CGVecto"]}, "method_name": "decodeCGVector", "method_description": "Decodes and returns the CGVector data associated with the specified key in the coder\u2019s archive.", "method_declar": "func decodeCGVector(forKey key: String) -> CGVector"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key for a CMTime structure encoded in the receiver."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The CMTime structure associated with key in the archive. "], "return_type": ["CMTim"]}, "method_name": "decodeTime", "method_description": "Returns the CMTime structure associated with a given key.", "method_declar": "func decodeTime(forKey key: String) -> CMTime"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key for a CMTimeRange structure encoded in the receiver."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The CMTimeRange structure associated with key in the archive. "], "return_type": ["CMTimeRang"]}, "method_name": "decodeTimeRange", "method_description": "Returns the CMTimeRange structure associated with a given key.", "method_declar": "func decodeTimeRange(forKey key: String) -> CMTimeRange"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": "The key for a CMTimeMapping structure encoded in the receiver."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The CMTimeMapping structure associated with key in the archive. "], "return_type": ["CMTimeMappin"]}, "method_name": "decodeTimeMapping", "method_description": "Returns the CMTimeMapping structure associated with a given key.", "method_declar": "func decodeTimeMapping(forKey key: String) -> CMTimeMapping"}, {"params": [{"param_name": ["forClassName", "className"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["The version in effect for the class named className or NSNotFound if no class named className exists."], "return_type": ["In"]}, "method_name": "version", "method_description": "This method is present for historical reasons and is not used with keyed archivers.", "method_declar": "func version(forClassName className: String) -> Int"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["NSDirectionalEdgeInset"]}, "method_name": "decodeDirectionalEdgeInsets", "method_description": "", "method_declar": "func decodeDirectionalEdgeInsets(forKey key: String) -> NSDirectionalEdgeInsets"}, {"params": [{"param_name": ["of", "cls"], "param_type": "NSObject.Type", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["DecodedObjectType"]}, "method_name": "decodeObject", "method_description": "", "method_declar": "func decodeObject<DecodedObjectType>(of cls: DecodedObjectType.Type, forKey key: String) -> DecodedObjectType? where DecodedObjectType : NSObject, DecodedObjectType : NSCoding"}, {"params": [{"param_name": ["of", "classes"], "param_type": "[AnyClass]", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["An"]}, "method_name": "decodeObject", "method_description": "", "method_declar": "@nonobjc func decodeObject(of classes: [AnyClass]?, forKey key: String) -> Any?"}, {"params": [], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["An"]}, "method_name": "decodeTopLevelObject", "method_description": "", "method_declar": "@nonobjc func decodeTopLevelObject() throws -> Any?"}, {"params": [{"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["An"]}, "method_name": "decodeTopLevelObject", "method_description": "", "method_declar": "@nonobjc func decodeTopLevelObject(forKey key: String) throws -> Any?"}, {"params": [{"param_name": ["of", "cls"], "param_type": "NSObject.Type", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["DecodedObjectType"]}, "method_name": "decodeTopLevelObject", "method_description": "", "method_declar": "func decodeTopLevelObject<DecodedObjectType>(of cls: DecodedObjectType.Type, forKey key: String) throws -> DecodedObjectType? where DecodedObjectType : NSObject, DecodedObjectType : NSCoding"}, {"params": [{"param_name": ["of", "classes"], "param_type": "[AnyClass]", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["An"]}, "method_name": "decodeTopLevelObject", "method_description": "", "method_declar": "@nonobjc func decodeTopLevelObject(of classes: [AnyClass]?, forKey key: String) throws -> Any?"}, {"params": [{"param_name": ["ofObjCType", "type"], "param_type": "UnsafePointer<Int8>", "param_description": ""}, {"param_name": ["at", "data"], "param_type": "UnsafeMutableRawPointer", "param_description": ""}, {"param_name": ["size"], "param_type": "Int", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "decodeValue", "method_description": "", "method_declar": "func decodeValue(ofObjCType type: UnsafePointer<Int8>, at data: UnsafeMutableRawPointer, size: Int)"}, {"params": [{"param_name": ["insets"], "param_type": "NSDirectionalEdgeInsets", "param_description": ""}, {"param_name": ["forKey", "key"], "param_type": "String", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "encode", "method_description": "", "method_declar": "func encode(_ insets: NSDirectionalEdgeInsets, forKey key: String)"}, {"params": [{"param_name": ["error"], "param_type": "Error", "param_description": ""}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "failWithError", "method_description": "", "method_declar": "func failWithError(_ error: Error)"}, {"params": [{"param_name": ["for", "string"], "param_type": "String", "param_description": "A string whose contents are of the form \u201c{a, b, c, d, tx, ty}\u201d, where a, b, c, d, tx, and ty are the floating-point component values of the CGAffineTransform data structure. An example of a valid string is @\u201d{1,0,0,1,2.5,3.0}\u201d. The string is not localized, so items are always separated with a comma. For information about the position of each value in the transform array, see CGAffineTransform."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A Core Graphics affine transform structure. If the string is not well-formed, the function returns the identity transform. "], "return_type": ["CGAffineTransfor"]}, "method_name": "cgAffineTransform", "method_description": "Returns a Core Graphics affine transform structure corresponding to the data in a given string.", "method_declar": "class func cgAffineTransform(for string: String) -> CGAffineTransform"}, {"params": [{"param_name": ["for", "string"], "param_type": "String", "param_description": "A string whose contents are of the form \u201c{x,y}\u201d, where x is the x coordinate and y is the y coordinate. The x and y values can represent integer or float values. An example of a valid string is @\u201d{3.0,2.5}\u201d. The string is not localized, so items are always separated with a comma."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A Core Graphics structure that represents a point. If the string is not well-formed, the function returns CGPointZero."], "return_type": ["CGPoin"]}, "method_name": "cgPoint", "method_description": "Returns a Core Graphics point structure corresponding to the data in a given string.", "method_declar": "class func cgPoint(for string: String) -> CGPoint"}, {"params": [{"param_name": ["for", "string"], "param_type": "String", "param_description": "A string whose contents are of the form \u201c{{x,y},{w, h}}\u201d, where x is the x coordinate, y is the y coordinate, w is the width, and h is the height. These components can represent integer or float values. An example of a valid string is @\u201d{{3,2},{4,5}}\u201d. The string is not localized, so items are always separated with a comma."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A Core Graphics structure that represents a rectangle. If the string is not well-formed, the function returns CGRectZero."], "return_type": ["CGRec"]}, "method_name": "cgRect", "method_description": "Returns a Core Graphics rectangle structure corresponding to the data in a given string.", "method_declar": "class func cgRect(for string: String) -> CGRect"}, {"params": [{"param_name": ["for", "string"], "param_type": "String", "param_description": "A string whose contents are of the form \u201c{w, h}\u201d, where w is the width and h is the height. The w and h values can be integer or float values. An example of a valid string is @\u201d{3.0,2.5}\u201d. The string is not localized, so items are always separated with a comma."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A Core Graphics structure that represents a size. If the string is not well-formed, the function returns CGSizeZero."], "return_type": ["CGSiz"]}, "method_name": "cgSize", "method_description": "Returns a Core Graphics size structure corresponding to the data in a given string.", "method_declar": "class func cgSize(for string: String) -> CGSize"}, {"params": [{"param_name": ["for", "string"], "param_type": "String", "param_description": "A string whose contents are of the form \u201c{dx, dy}\u201d, where dx is the x-coordinate of the vector and dy is the y-coordinate. The dx and dy values can be integer or float values. An example of a valid string is @\u201d{3.0,2.5}\u201d. The string is not localized, so items are always separated with a comma."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A Core Graphics structure that represents a two-dimensional vector. If the string is not well-formed, the function returns a vector whose dx and dy values are 0."], "return_type": ["CGVecto"]}, "method_name": "cgVector", "method_description": "Returns a Core Graphics vector corresponding to the data in a given string.", "method_declar": "class func cgVector(for string: String) -> CGVector"}, {"params": [{"param_name": ["for", "string"], "param_type": "String", "param_description": "A string whose contents are of the form \u201c{top, leading, bottom, trailing}\u201d, where top, leading, bottom, trailing are the floating-point component values of the NSDirectionalEdgeInsets structure. An example of a valid string is \u201d{3.0,8.0,3.0,5.0}\u201d. The string is not localized, so items are always separated with a comma. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A directional edge insets data structure. If the string is not well-formed, the function returns zero."], "return_type": ["NSDirectionalEdgeInset"]}, "method_name": "nsDirectionalEdgeInsets", "method_description": "Returns a directional edge insets structure based on the data in the specified string.", "method_declar": "class func nsDirectionalEdgeInsets(for string: String) -> NSDirectionalEdgeInsets"}, {"params": [{"param_name": ["for", "rect"], "param_type": "CGRect", "param_description": "A Core Graphics structure representing a rectangle. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string that corresponds to rect. See cgRect(for:) for a discussion of the string format."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a string formatted to contain the data from a rectangle.", "method_declar": "class func string(for rect: CGRect) -> String"}, {"params": [{"param_name": ["for", "vector"], "param_type": "CGVector", "param_description": "A Core Graphics structure representing a two-dimensional vector. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string that corresponds to vector. See cgVector(for:) for a discussion of the string format."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a string formatted to contain the data from a vector data structure.", "method_declar": "class func string(for vector: CGVector) -> String"}, {"params": [{"param_name": ["for", "offset"], "param_type": "UIOffset", "param_description": "A UIKit offset data structure. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string that corresponds to offset."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a string formatted to contain the data from an offset structure.", "method_declar": "class func string(for offset: UIOffset) -> String"}, {"params": [{"param_name": ["for", "transform"], "param_type": "CGAffineTransform", "param_description": "A Core Graphics affine transform structure. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string that corresponds to transform. See cgAffineTransform(for:) for a discussion of the string format."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a string formatted to contain the data from an affine transform.", "method_declar": "class func string(for transform: CGAffineTransform) -> String"}, {"params": [{"param_name": ["for", "point"], "param_type": "CGPoint", "param_description": "A Core Graphics structure representing a point."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string that corresponds to point. See cgPoint(for:) for a discussion of the string format."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a string formatted to contain the data from a point.", "method_declar": "class func string(for point: CGPoint) -> String"}, {"params": [{"param_name": ["for", "size"], "param_type": "CGSize", "param_description": "A Core Graphics structure representing a size. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string that corresponds to size. See cgSize(for:) for a discussion of the string format."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a string formatted to contain the data from a size data structure.", "method_declar": "class func string(for size: CGSize) -> String"}, {"params": [{"param_name": ["for", "insets"], "param_type": "UIEdgeInsets", "param_description": "A UIKit edge insets data structure. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string that corresponds to insets. See uiEdgeInsets(for:) for a discussion of the string format."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a string formatted to contain the data from an edge insets structure.", "method_declar": "class func string(for insets: UIEdgeInsets) -> String"}, {"params": [{"param_name": ["for", "insets"], "param_type": "NSDirectionalEdgeInsets", "param_description": "A directional edge insets data structure."}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["A string that corresponds to insets. See nsDirectionalEdgeInsets(for:) for a discussion of the string format."], "return_type": ["Strin"]}, "method_name": "string", "method_description": "Returns a string formatted to contain the data from a directional edge insets structure.", "method_declar": "class func string(for insets: NSDirectionalEdgeInsets) -> String"}, {"params": [{"param_name": ["for", "string"], "param_type": "String", "param_description": "A string whose contents are of the form \u201c{top, left, bottom, right}\u201d, where top, left, bottom, right are the floating-point component values of the UIEdgeInsets structure. An example of a valid string is @\u201d{3.0,8.0,3.0,5.0}\u201d. The string is not localized, so items are always separated with a comma. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An edge insets data structure. If the string is not well-formed, the function returns zero.  "], "return_type": ["UIEdgeInset"]}, "method_name": "uiEdgeInsets", "method_description": "Returns a UIKit edge insets structure based on the data in the specified string.", "method_declar": "class func uiEdgeInsets(for string: String) -> UIEdgeInsets"}, {"params": [{"param_name": ["for", "string"], "param_type": "String", "param_description": "A string containing a representation of an offset. "}], "class_name": "NSCoder", "is_static": false, "return_value": {"return_name": [""], "return_description": ["An edge insets data structure. If the string is not well-formed, the function returns zero.  "], "return_type": ["UIOffse"]}, "method_name": "uiOffset", "method_description": "Returns a UIKit offset structure corresponding to the data in a given string.", "method_declar": "class func uiOffset(for string: String) -> UIOffset"}], "class_name": "NSCoder", "Vars": [{"var_description": "A Boolean value that indicates whether the receiver supports keyed coding of objects.", "var_type": "Bool", "is_static": false, "var_name": "allowsKeyedCoding"}, {"var_description": "Boolean value that indicates whether the coder requires secure coding.", "var_type": "Bool", "is_static": false, "var_name": "requiresSecureCoding"}, {"var_description": "The set of coded classes allowed for secure coding.", "var_type": "Set<AnyHashable>", "is_static": false, "var_name": "allowedClasses"}, {"var_description": "The system version in effect for the archive.", "var_type": "UInt32", "is_static": false, "var_name": "systemVersion"}, {"var_description": "The end of the range of error codes reserved for coder errors.", "var_type": "Int", "is_static": false, "var_name": "NSCoderErrorMaximum"}, {"var_description": "The start of the range of error codes reserved for coder errors.", "var_type": "Int", "is_static": false, "var_name": "NSCoderErrorMinimum"}, {"var_description": "Decoding failed due to corrupt data.", "var_type": "Int", "is_static": false, "var_name": "NSCoderReadCorruptError"}, {"var_description": "The requested data wasn\u2019t found.", "var_type": "Int", "is_static": false, "var_name": "NSCoderValueNotFoundError"}, {"var_description": "", "var_type": "NSCoder.DecodingFailurePolicy", "is_static": false, "var_name": "decodingFailurePolicy"}, {"var_description": "", "var_type": "Error", "is_static": false, "var_name": "error"}]}