{"class_description": "The NSCoder abstract class declares the interface used by concrete subclasses to transfer objects and other values between memory and some other format. This capability provides the basis for archiving (where objects and data items are stored on disk) and distribution (where objects and data items are copied between different processes or threads). The concrete subclasses provided by Foundation for these purposes are NSArchiver, NSUnarchiver, NSKeyedArchiver, NSKeyedUnarchiver, and NSPortCoder. Concrete subclasses of NSCoder are referred to in general as coder classes, and instances of these classes as coder objects (or simply coders). A coder object that can only encode values is referred to as an encoder object, and one that can only decode values as a decoder object.\nNSCoder operates on objects, scalars, C arrays, structures, and strings, and on pointers to these types. It does not handle types whose implementation varies across platforms, such as union, void *, function pointers, and long chains of pointers. A coder object stores object type information along with the data, so an object decoded from a stream of bytes is normally of the same class as the object that was originally encoded into the stream. An object can change its class when encoded, however; this is described in Archives and Serializations Programming Guide.\nThe AVFoundation framework adds methods to the NSCoder class to make it easier to create archives including Core Media time structures, and extract Core Media time structure from archives.\nFor details of how to create a subclass of NSCoder, see Subclassing NSCoder in Archives and Serializations Programming Guide.\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "NSCoder", "typealias": [], "Vars": [{"var_description": "The end of the range of error codes reserved for coder errors.", "var_type": "Int", "is_static": false, "var_name": "NSCoderErrorMaximum"}, {"var_description": "The start of the range of error codes reserved for coder errors.", "var_type": "Int", "is_static": false, "var_name": "NSCoderErrorMinimum"}, {"var_description": "Decoding failed due to corrupt data.", "var_type": "Int", "is_static": false, "var_name": "NSCoderReadCorruptError"}, {"var_description": "The requested data wasn\u2019t found.", "var_type": "Int", "is_static": false, "var_name": "NSCoderValueNotFoundError"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable"], "package_name": "foundation", "subclass_list": []}