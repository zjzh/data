{"package_name": "foundation", "subclass_list": [], "class_description": "To communicate, both your app and the File Provider extension must implement their part of the service:\nYour app requests the proxy object, and calls its methods.\nThe File Provider extension declares the supported services and vends a proxy object that implements the protocol for each service.\nThe app and File Provider extension communicate using an XPC service. This service performs actions only on items managed by the File Provider extension. For more information, see Creating XPC Services.\nServices let you define custom actions that are not provided by Apple\u2019s APIs. Both the app and the File Provider extension must agree upon the service\u2019s name and protocol.  Communicate the name and protocol through an outside source (for example, posting a header file that defines both the name and protocol, or publishing an library that includes them both).\nThe service can be defined by either the app or the File Provider extension:\nApps can define a service for features they would like to use. File providers can then choose to support those features by implementing the service.\nFile Provider extensions can provide a service for the features they support. Apps can then choose to use the specified service.\nWhen defining a service\u2019s protocol, the parameters for each method must adhere to the following rules:\nThe parameter\u2019s class must conform to NSSecureCoding.\nThe parameter\u2019s class must be defined in both the app and the File Provider extension (for example, standard system types or classes defined in a library imported by both sides).\nIf a collection parameter contains types other than property list types (see Property List Types and Objects), declare the valid types using the NSXPCInterface class\u2019s classes(for:argumentIndex:ofReply:) method.\n\n", "class_type": "class", "typealias": [], "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"params": [{"param_name": ["completionHandler"], "param_type": "@escaping (NSXPCConnection, Error) -> Void", "param_description": "A block that is called on an anonymous background queue. The system passes this block the following parameters:connectionAn NSXPCConnection object for the service, or nil if an error occurs.errorIf an error occurs, this property contains an object that describes the error; otherwise, it is set to nil."}], "class_name": "NSFileProviderService", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "getFileProviderConnection", "method_description": "Asynchronously returns the service\u2019s connection object.", "method_declar": "func getFileProviderConnection(completionHandler: @escaping (NSXPCConnection?, Error?) -> Void)"}], "class_name": "NSFileProviderService", "Vars": [{"var_description": "The File Provider service\u2019s name.", "var_type": "NSFileProviderServiceName", "is_static": false, "var_name": "name"}]}