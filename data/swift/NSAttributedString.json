{"class_description": "An NSAttributedString object manages character strings and associated sets of attributes (for example, font and kerning) that apply to individual characters or ranges of characters in the string. An association of characters and their attributes is called an attributed string. The cluster\u2019s two public classes, NSAttributedString and NSMutableAttributedString, declare the programmatic interface for read-only attributed strings and modifiable attributed strings, respectively.\nAn attributed string identifies attributes by name, using an NSDictionary object to store a value under the given name.  You can assign any attribute name/value pair you wish to a range of characters\u2014it is up to your application to interpret custom attributes (see Attributed String Programming Guide). If you are using attributed strings with the Core Text framework, you can also use the attribute keys defined by that framework. \nYou use attributed strings with any APIs that accept them, such as Core Text. The AppKit and UIKit frameworks also provide a subclass of NSMutableAttributedString, called NSTextStorage, to provide the storage for the extended text-handling system. In iOS 6 and later you can use attributed strings to display formatted text in text views, text fields, and some other controls. Both AppKit and UIKit also define extensions to the basic attributed string interface that allows you to draw their contents in the current graphic context.  \nThe default font for NSAttributedString objects is Helvetica 12-point, which may differ from the default system font for the platform. Thus, you might want to create new strings with non-default attributes suitable for your application. You can also use the NSParagraphStyle class and its subclass NSMutableParagraphStyle to encapsulate the paragraph or ruler attributes used by the NSAttributedString classes.\nBe aware that comparisons of NSAttributedString objects using the isEqual(_:) method look for exact equality. The comparison includes both a character-by-character string equality check and an equality check of all attributes. Such a comparison is not likely to yield a match if the string has many attributes, such as attachments, lists, and tables, for example.\nThe NSAttributedString class is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFAttributedString. See Toll-Free Bridging for more information.\n", "Methods": [{"method_description": "Returns an NSAttributedString object initialized with the characters of a given string and no attribute information.", "method_name": "init", "params": [{"param_type": "String", "param_description": "", "param_name": ["string", "str"]}], "class_name": "NSAttributedString", "method_declar": "init(string str: String)", "return_value": {"return_description": ["An NSAttributedString object initialized with the characters of aString and no attribute information The returned object might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an NSAttributedString object initialized with a given string and attributes.", "method_name": "init", "params": [{"param_type": "String", "param_description": "", "param_name": ["string", "str"]}, {"param_type": "[NSAttributedString.Key", "param_description": "The attributes for the new attributed string. For a list of attributes that you can include in this dictionary, see Character Attributes.", "param_name": ["attributes", "attrs"]}, {"param_type": "Any] = nil", "param_description": "", "param_name": ["[NSAttributedString.Key"]}], "class_name": "NSAttributedString", "method_declar": "init(string str: String, attributes attrs: [NSAttributedString.Key : Any]? = nil)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns an NSAttributedString object initialized with the characters and attributes of another given attributed string.", "method_name": "init", "params": [{"param_type": "NSAttributedString", "param_description": "An attributed string.", "param_name": ["attributedString", "attrStr"]}], "class_name": "NSAttributedString", "method_declar": "init(attributedString attrStr: NSAttributedString)", "return_value": {"return_description": ["An NSAttributedString object initialized with the characters and attributes of attributedString. The returned object might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes and returns a new attributed string object from the data contained in the given data object.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "The data from which to create the string.", "param_name": ["data"]}, {"param_type": "[NSAttributedString.DocumentReadingOptionKey", "param_description": "Document attributes for interpreting the document contents. documentType, characterEncoding, and defaultAttributes are supported option keys. If you pass an empty dictionary, the method examines the data to attempt to determine the appropriate attributes.", "param_name": ["options"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[NSAttributedString.DocumentReadingOptionKey"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "An in-out dictionary containing document-level attributes described in Document Attributes. May be NULL, in which case no document attributes are returned.", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init(data: Data, options: [NSAttributedString.DocumentReadingOptionKey : Any] = [:], documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?) throws", "return_value": {"return_description": ["Returns an initialized attributed string object, or nil if the data can\u2019t be decoded."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes and returns a new NSAttributedString object from Microsoft Word format data contained in the given NSData object.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "The data from which to create the string.", "param_name": ["docFormat", "data"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init?(docFormat data: Data, documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?)", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes and returns a new NSAttributedString object from HTML contained in the given data object.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "The data in HTML format from which to create the attributed string.", "param_name": ["html", "data"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init?(html data: Data, documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?)", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes and returns a new NSAttributedString object from the HTML contained in the given object and base URL.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "The data in HTML format from which to create the attributed string.", "param_name": ["html", "data"]}, {"param_type": "URL", "param_description": "", "param_name": ["baseURL", "base"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init?(html data: Data, baseURL base: URL, documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?)", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes and returns a new attributed string object from HTML contained in the given data object.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "The data in HTML format from which to create the attributed string.", "param_name": ["html", "data"]}, {"param_type": "[NSAttributedString.DocumentReadingOptionKey", "param_description": "Specifies how the document should be loaded. Contains values described in Option keys for importing documents.", "param_name": ["options"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[NSAttributedString.DocumentReadingOptionKey"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "An in-out dictionary containing document-level attributes described in Document Attributes. May be NULL, in which case no document attributes are returned.", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init?(html data: Data, options: [NSAttributedString.DocumentReadingOptionKey : Any] = [:], documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?)", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new attributed string object by decoding the stream of RTF commands and data contained in the given data object.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "", "param_name": ["rtf", "data"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init?(rtf data: Data, documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?)", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new attributed string object by decoding the stream of RTFD commands and data contained in the given data object.", "method_name": "init", "params": [{"param_type": "Data", "param_description": "", "param_name": ["rtfd", "data"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init?(rtfd data: Data, documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?)", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new attributed string object from the specified file wrapper containing an RTFD document.", "method_name": "init", "params": [{"param_type": "FileWrapper", "param_description": "The FileWrapper containing the RTFD document.", "param_name": ["rtfdFileWrapper", "wrapper"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init?(rtfdFileWrapper wrapper: FileWrapper, documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?)", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new NSAttributedString object from the contents of the given URL.", "method_name": "init", "params": [{"param_type": "URL", "param_description": "An NSURL object specifying the document to load.", "param_name": ["url"]}, {"param_type": "[NSAttributedString.DocumentReadingOptionKey", "param_description": "Specifies how the document should be loaded. Contains values described in Option keys for importing documents.", "param_name": ["options"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[NSAttributedString.DocumentReadingOptionKey"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init(url: URL, options: [NSAttributedString.DocumentReadingOptionKey : Any] = [:], documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?) throws", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Creates an attributed string with an attachment.", "method_name": "init", "params": [{"param_type": "NSTextAttachment", "param_description": "The attachment.", "param_name": ["attachment"]}], "class_name": "NSAttributedString", "method_declar": "init(attachment: NSTextAttachment)", "return_value": {"return_description": ["An attributed string containing the attachment."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the attributes for the character at a given index.", "method_name": "attributes", "params": [{"param_type": "Int", "param_description": "", "param_name": ["at", "location"]}, {"param_type": "NSRangePointer", "param_description": "", "param_name": ["effectiveRange", "range"]}], "class_name": "NSAttributedString", "method_declar": "func attributes(at location: Int, effectiveRange range: NSRangePointer?) -> [NSAttributedString.Key : Any]", "return_value": {"return_description": ["The attributes for the character at index."], "return_name": [["[NSAttributedString.Key"]], "return_type": ["Any"]}, "is_static": false}, {"method_description": "Returns the attributes for the character at a given index, and by reference the range over which the attributes apply.", "method_name": "attributes", "params": [{"param_type": "Int", "param_description": "", "param_name": ["at", "location"]}, {"param_type": "NSRangePointer", "param_description": "", "param_name": ["longestEffectiveRange", "range"]}, {"param_type": "NSRange", "param_description": "The range over which to search for continuous presence of the attributes at index. This value must not exceed the bounds of the receiver.", "param_name": ["in", "rangeLimit"]}], "class_name": "NSAttributedString", "method_declar": "func attributes(at location: Int, longestEffectiveRange range: NSRangePointer?, in rangeLimit: NSRange) -> [NSAttributedString.Key : Any]", "return_value": {"return_description": [], "return_name": [["[NSAttributedString.Key"]], "return_type": ["Any"]}, "is_static": false}, {"method_description": "Returns the value for an attribute with a given name of the character at a given index, and by reference the range over which the attribute applies. ", "method_name": "attribute", "params": [{"param_type": "NSAttributedString.Key", "param_description": "The name of an attribute.", "param_name": ["attrName"]}, {"param_type": "Int", "param_description": "The index for which to return attributes. This value must not exceed the bounds of the receiver.ImportantRaises an rangeException if index lies beyond the end of the receiver\u2019s characters.", "param_name": ["at", "location"]}, {"param_type": "NSRangePointer", "param_description": "If non-NULL:If the named attribute exists at index, upon return aRange contains a range over which the named attribute\u2019s value applies.If the named attribute does not exist at index, upon return aRange contains the range over which the attribute does not exist. The range isn\u2019t necessarily the maximum range covered by attributeName, and its extent is implementation-dependent. If you need the maximum range, use attribute(_:at:longestEffectiveRange:in:). If you don't need this value, pass NULL.", "param_name": ["effectiveRange", "range"]}], "class_name": "NSAttributedString", "method_declar": "func attribute(_ attrName: NSAttributedString.Key, at location: Int, effectiveRange range: NSRangePointer?) -> Any?", "return_value": {"return_description": ["The value for the attribute named attrName of the character at location, or nil if there is no such attribute."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Returns the value for the attribute with a given name of the character at a given index, and by reference the range over which the attribute applies.", "method_name": "attribute", "params": [{"param_type": "NSAttributedString.Key", "param_description": "", "param_name": ["attrName"]}, {"param_type": "Int", "param_description": "", "param_name": ["at", "location"]}, {"param_type": "NSRangePointer", "param_description": "", "param_name": ["longestEffectiveRange", "range"]}, {"param_type": "NSRange", "param_description": "The range over which to search for continuous presence of attributeName. This value must not exceed the bounds of the receiver.", "param_name": ["in", "rangeLimit"]}], "class_name": "NSAttributedString", "method_declar": "func attribute(_ attrName: NSAttributedString.Key, at location: Int, longestEffectiveRange range: NSRangePointer?, in rangeLimit: NSRange) -> Any?", "return_value": {"return_description": ["The value for the attribute named attributeName of the character at index, or nil if there is no such attribute."], "return_name": [""], "return_type": ["An"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates whether the receiver is equal to another given attributed string.", "method_name": "isEqual", "params": [{"param_type": "NSAttributedString", "param_description": "", "param_name": ["to", "other"]}], "class_name": "NSAttributedString", "method_declar": "func isEqual(to other: NSAttributedString) -> Bool", "return_value": {"return_description": ["true if the receiver is equal to otherString, otherwise false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Returns an NSAttributedString object consisting of the characters and attributes within a given range in the receiver.", "method_name": "attributedSubstring", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["from", "range"]}], "class_name": "NSAttributedString", "method_declar": "func attributedSubstring(from range: NSRange) -> NSAttributedString", "return_value": {"return_description": ["An NSAttributedString object consisting of the characters and attributes within aRange in the receiver."], "return_name": [""], "return_type": ["NSAttributedStrin"]}, "is_static": false}, {"method_description": "Executes the specified closure for each range of a particular attribute in the attributed string. ", "method_name": "enumerateAttribute", "params": [{"param_type": "NSAttributedString.Key", "param_description": "The name of the attribute to enumerate.", "param_name": ["attrName"]}, {"param_type": "NSRange", "param_description": "The range over which the attribute values are enumerated.", "param_name": ["in", "enumerationRange"]}, {"param_type": "NSAttributedString.EnumerationOptions", "param_description": "The options used by the enumeration. For possible values, see NSAttributedString.EnumerationOptions.", "param_name": ["options", "opts"]}, {"param_type": "(Any, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "A closure to apply to ranges of the specified attribute in the attributed string. The closure takes three arguments:The value for the specified attribute.The range of the attribute value in the attributed string.A reference to a Boolean value, which you can set to true within the closure to stop further processing of the attributed string.", "param_name": ["using", "block"]}], "class_name": "NSAttributedString", "method_declar": "func enumerateAttribute(_ attrName: NSAttributedString.Key, in enumerationRange: NSRange, options opts: NSAttributedString.EnumerationOptions = [], using block: (Any?, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Executes the specified closure for each range of attributes in the attributed string.", "method_name": "enumerateAttributes", "params": [{"param_type": "NSRange", "param_description": "The range over which the attributes are enumerated.", "param_name": ["in", "enumerationRange"]}, {"param_type": "NSAttributedString.EnumerationOptions", "param_description": "The options used by the enumeration. For possible values, see NSAttributedString.EnumerationOptions.", "param_name": ["options", "opts"]}, {"param_type": "([NSAttributedString.Key", "param_description": "The closure to apply to ranges of attributes in the attributed string. The closure takes three arguments:A dictionary of attribute values keyed by name.The range of the attribute values in the attributed string.A reference to a Boolean value, which you can set to true within the closure to stop further processing of the attributed string.", "param_name": ["using", "block"]}, {"param_type": "Any], NSRange, UnsafeMutablePointer<ObjCBool>) -> Void", "param_description": "", "param_name": ["([NSAttributedString.Key"]}], "class_name": "NSAttributedString", "method_declar": "func enumerateAttributes(in enumerationRange: NSRange, options opts: NSAttributedString.EnumerationOptions = [], using block: ([NSAttributedString.Key : Any], NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "is_static": false}, {"method_description": "Returns the font attributes in effect for the character at the given location.", "method_name": "fontAttributes", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["in", "range"]}], "class_name": "NSAttributedString", "method_declar": "func fontAttributes(in range: NSRange) -> [NSAttributedString.Key : Any]", "return_value": {"return_description": ["A dictionary containing the font attributes for the range."], "return_name": [["[NSAttributedString.Key"]], "return_type": ["Any"]}, "is_static": false}, {"method_description": "Returns the ruler (paragraph) attributes in effect for the characters within the given range.", "method_name": "rulerAttributes", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["in", "range"]}], "class_name": "NSAttributedString", "method_declar": "func rulerAttributes(in range: NSRange) -> [NSAttributedString.Key : Any]", "return_value": {"return_description": ["A dictionary containing the ruler attributes in the range."], "return_name": [["[NSAttributedString.Key"]], "return_type": ["Any"]}, "is_static": false}, {"method_description": "Returns the range of characters that form a word (or other linguistic unit) surrounding the given index, taking language characteristics into account.", "method_name": "doubleClick", "params": [{"param_type": "Int", "param_description": "", "param_name": ["at", "location"]}], "class_name": "NSAttributedString", "method_declar": "func doubleClick(at location: Int) -> NSRange", "return_value": {"return_description": ["Returns the range of characters that form a word (or other linguistic unit) surrounding the given index, taking language characteristics into account."], "return_name": [""], "return_type": ["NSRang"]}, "is_static": false}, {"method_description": "Returns the appropriate line break when the character at the index won\u2019t fit on the same line as the character at the beginning of the range.", "method_name": "lineBreak", "params": [{"param_type": "Int", "param_description": "", "param_name": ["before", "location"]}, {"param_type": "NSRange", "param_description": "The range.", "param_name": ["within", "aRange"]}], "class_name": "NSAttributedString", "method_declar": "func lineBreak(before location: Int, within aRange: NSRange) -> Int", "return_value": {"return_description": ["Returns the index of the closest character before index within aRange, that can be placed on a new line when laying out text. Returns NSNotFound if no line break is possible before index."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the index of the closest character before the given index, and within the given range, that can be placed on a new line by hyphenating.", "method_name": "lineBreakByHyphenating", "params": [{"param_type": "Int", "param_description": "The location in the attributed string.", "param_name": ["before", "location"]}, {"param_type": "NSRange", "param_description": "The range.", "param_name": ["within", "aRange"]}], "class_name": "NSAttributedString", "method_declar": "func lineBreakByHyphenating(before location: Int, within aRange: NSRange) -> Int", "return_value": {"return_description": ["Returns the index of the closest character before  index within aRange, that can be placed on a new line by hyphenating. Returns NSNotFound if no line break by hyphenation is possible before index."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the index of the first character of the word after or before the given index.", "method_name": "nextWord", "params": [{"param_type": "Int", "param_description": "", "param_name": ["from", "location"]}, {"param_type": "Bool", "param_description": "", "param_name": ["forward", "isForward"]}], "class_name": "NSAttributedString", "method_declar": "func nextWord(from location: Int, forward isForward: Bool) -> Int", "return_value": {"return_description": ["true if this is the first character after index that begins a word; if flag is false, it\u2019s the first character before index that begins a word, whether index is located within a word or not."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the index of the item at the given location within the list.", "method_name": "itemNumber", "params": [{"param_type": "NSTextList", "param_description": "The text list.", "param_name": ["in", "list"]}, {"param_type": "Int", "param_description": "The location of the item.", "param_name": ["at", "location"]}], "class_name": "NSAttributedString", "method_declar": "func itemNumber(in list: NSTextList, at location: Int) -> Int", "return_value": {"return_description": ["Returns the index within the list."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Returns the range of the individual text block that contains the given location.", "method_name": "range", "params": [{"param_type": "NSTextBlock", "param_description": "The text block.", "param_name": ["of", "block"]}, {"param_type": "Int", "param_description": "The location in the text block.", "param_name": ["at", "location"]}], "class_name": "NSAttributedString", "method_declar": "func range(of block: NSTextBlock, at location: Int) -> NSRange", "return_value": {"return_description": ["The range of the text block containing the location."], "return_name": [""], "return_type": ["NSRang"]}, "is_static": false}, {"method_description": "Returns the range of the given text list that contains the given location.", "method_name": "range", "params": [{"param_type": "NSTextList", "param_description": "The text list.", "param_name": ["of", "list"]}, {"param_type": "Int", "param_description": "The location in the text list.", "param_name": ["at", "location"]}], "class_name": "NSAttributedString", "method_declar": "func range(of list: NSTextList, at location: Int) -> NSRange", "return_value": {"return_description": ["The range of the given text list containing the location."], "return_name": [""], "return_type": ["NSRang"]}, "is_static": false}, {"method_description": "Returns the range of the given text table that contains the given location", "method_name": "range", "params": [{"param_type": "NSTextTable", "param_description": "The text table.", "param_name": ["of", "table"]}, {"param_type": "Int", "param_description": "The location.", "param_name": ["at", "location"]}], "class_name": "NSAttributedString", "method_declar": "func range(of table: NSTextTable, at location: Int) -> NSRange", "return_value": {"return_description": ["Returns the range of table that contains location."], "return_name": [""], "return_type": ["NSRang"]}, "is_static": false}, {"method_description": "Returns an data object that contains a text stream corresponding to the characters and attributes within the given range.", "method_name": "data", "params": [{"param_type": "NSRange", "param_description": "The range.", "param_name": ["from", "range"]}, {"param_type": "[NSAttributedString.DocumentAttributeKey", "param_description": "A required dictionary specifying the document attributes. The dictionary contains values from Document Types and must at least contain documentType.", "param_name": ["documentAttributes", "dict"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[NSAttributedString.DocumentAttributeKey"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}], "class_name": "NSAttributedString", "method_declar": "func data(from range: NSRange, documentAttributes dict: [NSAttributedString.DocumentAttributeKey : Any] = [:]) throws -> Data", "return_value": {"return_description": ["Returns the data for the attributed string, or nil if failure. When nil, error encapsulates the error information."], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Returns an NSFileWrapper object that contains a text stream corresponding to the characters and attributes within the given range.", "method_name": "fileWrapper", "params": [{"param_type": "NSRange", "param_description": "The range.", "param_name": ["from", "range"]}, {"param_type": "[NSAttributedString.DocumentAttributeKey", "param_description": "A required dictionary specifying the document attributes. The dictionary contains values from Document Types and must at least contain documentType.", "param_name": ["documentAttributes", "dict"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[NSAttributedString.DocumentAttributeKey"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}], "class_name": "NSAttributedString", "method_declar": "func fileWrapper(from range: NSRange, documentAttributes dict: [NSAttributedString.DocumentAttributeKey : Any] = [:]) throws -> FileWrapper", "return_value": {"return_description": ["Returns a file wrapper for the appropriate document type, or nil if failure. When nil, error encapsulates the error information."], "return_name": [""], "return_type": ["FileWrappe"]}, "is_static": false}, {"method_description": "Returns a data object that contains a Microsoft Word\u2013format stream corresponding to the characters and attributes within the specified range.", "method_name": "docFormat", "params": [{"param_type": "NSRange", "param_description": "The range.", "param_name": ["from", "range"]}, {"param_type": "[NSAttributedString.DocumentAttributeKey", "param_description": "", "param_name": ["documentAttributes", "dict"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[NSAttributedString.DocumentAttributeKey"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}], "class_name": "NSAttributedString", "method_declar": "func docFormat(from range: NSRange, documentAttributes dict: [NSAttributedString.DocumentAttributeKey : Any] = [:]) -> Data?", "return_value": {"return_description": ["Returns a data object containing the attributed string as a Microsoft Word doc file."], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Returns an NSData object that contains an RTF stream corresponding to the characters and attributes within the given range, omitting all attachment attributes.", "method_name": "rtf", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["from", "range"]}, {"param_type": "[NSAttributedString.DocumentAttributeKey", "param_description": "", "param_name": ["documentAttributes", "dict"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[NSAttributedString.DocumentAttributeKey"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}], "class_name": "NSAttributedString", "method_declar": "func rtf(from range: NSRange, documentAttributes dict: [NSAttributedString.DocumentAttributeKey : Any] = [:]) -> Data?", "return_value": {"return_description": ["A data object containing an RTF stream for the attributed string."], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Returns a data object that contains an RTFD stream corresponding to the characters and attributes within the range.", "method_name": "rtfd", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["from", "range"]}, {"param_type": "[NSAttributedString.DocumentAttributeKey", "param_description": "", "param_name": ["documentAttributes", "dict"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[NSAttributedString.DocumentAttributeKey"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}], "class_name": "NSAttributedString", "method_declar": "func rtfd(from range: NSRange, documentAttributes dict: [NSAttributedString.DocumentAttributeKey : Any] = [:]) -> Data?", "return_value": {"return_description": ["A data object containing the RTFD stream containing the characters and attributes."], "return_name": [""], "return_type": ["Dat"]}, "is_static": false}, {"method_description": "Returns an NSFileWrapper object that contains an RTFD document corresponding to the characters and attributes within the given range.", "method_name": "rtfdFileWrapper", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["from", "range"]}, {"param_type": "[NSAttributedString.DocumentAttributeKey", "param_description": "", "param_name": ["documentAttributes", "dict"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[NSAttributedString.DocumentAttributeKey"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}], "class_name": "NSAttributedString", "method_declar": "func rtfdFileWrapper(from range: NSRange, documentAttributes dict: [NSAttributedString.DocumentAttributeKey : Any] = [:]) -> FileWrapper?", "return_value": {"return_description": ["A file wrapper containing the RTFD data."], "return_name": [""], "return_type": ["FileWrappe"]}, "is_static": false}, {"method_description": "Draws the attributed string starting at the specified point in the current graphics context.", "method_name": "draw", "params": [{"param_type": "CGPoint", "param_description": "The point in the current graphics context where you want to start drawing the string. The coordinate system of the graphics context is usually defined by the view in which you are drawing.", "param_name": ["at", "point"]}], "class_name": "NSAttributedString", "method_declar": "func draw(at point: CGPoint)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Draws the attributed string inside the specified bounding rectangle in the current graphics context.", "method_name": "draw", "params": [{"param_type": "CGRect", "param_description": "The bounding rectangle in which to draw the string. In AppKit, the origin is normally in the lower-left corner of the drawing area, but the origin is in the upper-left corner if the focused view is flipped.", "param_name": ["in", "rect"]}], "class_name": "NSAttributedString", "method_declar": "func draw(in rect: CGRect)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Draws the attributed string in the specified bounding rectangle using the provided options.", "method_name": "draw", "params": [{"param_type": "CGRect", "param_description": "The bounding rectangle in which to draw the string.", "param_name": ["with", "rect"]}, {"param_type": "NSStringDrawingOptions", "param_description": "Additional drawing options to apply to the string during rendering. For a list of possible values, see NSString.DrawingOptions. ", "param_name": ["options"]}, {"param_type": "NSStringDrawingContext", "param_description": "A context object with information about how to adjust the font tracking and scaling information. On return, the specified object contains information about the actual values used to render the string. This parameter may be nil.  ", "param_name": ["context"]}], "class_name": "NSAttributedString", "method_declar": "func draw(with rect: CGRect, options: NSStringDrawingOptions = [], context: NSStringDrawingContext?)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns the size required to draw the string.", "method_name": "size", "params": [], "class_name": "NSAttributedString", "method_declar": "func size() -> CGSize", "return_value": {"return_description": ["The minimum size required to draw the entire contents of the string. "], "return_name": [""], "return_type": ["CGSiz"]}, "is_static": false}, {"method_description": "Returns the bounding rectangle required to draw the string.", "method_name": "boundingRect", "params": [{"param_type": "CGSize", "param_description": "The width and height constraints to apply when computing the string\u2019s bounding rectangle.", "param_name": ["with", "size"]}, {"param_type": "NSStringDrawingOptions", "param_description": "Additional drawing options to apply to the string during rendering. For a list of possible values, see NSString.DrawingOptions. ", "param_name": ["options"]}, {"param_type": "NSStringDrawingContext", "param_description": "A context object with information about how to adjust the font tracking and scaling information. On return, the specified object contains information about the actual values used to render the string. This parameter may be nil.  ", "param_name": ["context"]}], "class_name": "NSAttributedString", "method_declar": "func boundingRect(with size: CGSize, options: NSStringDrawingOptions = [], context: NSStringDrawingContext?) -> CGRect", "return_value": {"return_description": ["A rectangle whose size component indicates the width and height required to draw the entire contents of the string. "], "return_name": [""], "return_type": ["CGRec"]}, "is_static": false}, {"method_description": "Returns a Boolean value that indicates if the attributed string contains a property configured in the specified range.", "method_name": "containsAttachments", "params": [{"param_type": "NSRange", "param_description": "The range.", "param_name": ["in", "range"]}], "class_name": "NSAttributedString", "method_declar": "func containsAttachments(in range: NSRange) -> Bool", "return_value": {"return_description": ["true if the attributed string contains a property configured as attachment with character in range; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Initializes a new attribute string object from RTF or RTFD data contained in the file at the given path.DeprecatedUse init(url:options:documentAttributes:) instead.", "method_name": "init", "params": [{"param_type": "String", "param_description": "The path to an RTF or RTFD file.", "param_name": ["path"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init?(path: String, documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?)", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new attributed string object from the data at the given URL.DeprecatedUse init(url:options:documentAttributes:) instead.", "method_name": "init", "params": [{"param_type": "URL", "param_description": "", "param_name": ["url"]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init?(url: URL, documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?)", "return_value": {"return_description": ["Returns an initialized object, or nil if the data can\u2019t be decoded. "], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Initializes a new attributed string object from the data at the given URL.DeprecatedUse init(url:options:documentAttributes:) instead.", "method_name": "init", "params": [{"param_type": "URL", "param_description": "An NSURL object specifying the document to load.", "param_name": ["fileURL", "url"]}, {"param_type": "[AnyHashable", "param_description": "Document attributes for interpreting the document contents. documentType, characterEncoding, and defaultAttributes are supported option keys. If not specified, the method examines the data to attempt to determine the appropriate attributes.", "param_name": ["options"]}, {"param_type": "Any]", "param_description": "", "param_name": ["[AnyHashable"]}, {"param_type": "]", "param_description": "", "param_name": ["Any]", "=", "["]}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDictionary>", "param_description": "If non-NULL, returns a dictionary with various document-wide attributes accessible via document attribute keys.", "param_name": ["documentAttributes", "dict"]}], "class_name": "NSAttributedString", "method_declar": "init(fileURL url: URL, options: [AnyHashable : Any] = [:], documentAttributes dict: AutoreleasingUnsafeMutablePointer<NSDictionary?>?) throws", "return_value": {"return_description": ["Returns an initialized attributed string object, or nil if the data can\u2019t be decoded."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a URL, either from a link attribute or from text at the given location that appears to be a URL string, for use in automatic link detection.DeprecatedUse an NSDataDetector object instead.", "method_name": "url", "params": [{"param_type": "Int", "param_description": "The character index in the string at which the method checks for a link.", "param_name": ["at", "location"]}, {"param_type": "NSRangePointer", "param_description": "The actual range covered by the link attribute or URL string, or of non-URL text if no apparent URL is found.", "param_name": ["effectiveRange"]}], "class_name": "NSAttributedString", "method_declar": "func url(at location: Int, effectiveRange: NSRangePointer) -> URL?", "return_value": {"return_description": ["The URL found at location."], "return_name": [""], "return_type": ["UR"]}, "is_static": false}, {"method_description": "Draws the receiver with the specified options, within the given rectangle in the current graphics context.DeprecatedUse draw(with:options:context:) instead.", "method_name": "draw", "params": [{"param_type": "NSRect", "param_description": "The rectangle specifies the rendering origin in the current graphics context.", "param_name": ["with", "rect"]}, {"param_type": "NSString.DrawingOptions = []", "param_description": "The string drawing options. See NSString.DrawingOptions for the available options.", "param_name": ["options"]}], "class_name": "NSAttributedString", "method_declar": "func draw(with rect: NSRect, options: NSString.DrawingOptions = [])", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Calculates and returns bounding rectangle for the receiver drawn using the options specified, within the given rectangle in the current graphics context.DeprecatedUse boundingRect(with:options:context:) instead.", "method_name": "boundingRect", "params": [{"param_type": "NSSize", "param_description": "The size of the rectangle to draw in.", "param_name": ["with", "size"]}, {"param_type": "NSString.DrawingOptions = []", "param_description": "The string drawing options. See NSString.DrawingOptions for the possible values.", "param_name": ["options"]}], "class_name": "NSAttributedString", "method_declar": "func boundingRect(with size: NSSize, options: NSString.DrawingOptions = []) -> NSRect", "return_value": {"return_description": ["The bounding rectangle in the current graphics context."], "return_name": [""], "return_type": ["NSRec"]}, "is_static": false}], "class_inherit_list": ["NSObject"], "class_name": "NSAttributedString", "typealias": [], "Vars": [{"var_description": "The character contents of the receiver as an NSString object.", "var_type": "String", "is_static": false, "var_name": "string"}, {"var_description": "The length of the receiver\u2019s string object.", "var_type": "Int", "is_static": false, "var_name": "length"}, {"var_description": "Returns an array of UTI strings identifying the file types supported by the receiver, either directly or through a user-installed filter service. ", "var_type": "[String]", "is_static": false, "var_name": "textTypes"}, {"var_description": "Returns an array of UTI strings identifying the file types supported directly by the receiver. ", "var_type": "[String]", "is_static": false, "var_name": "textUnfilteredTypes"}, {"var_description": "An NSArray object containing NSString objects, representing HTML elements not to be used in generated HTML.", "var_type": "NSAttributedString.DocumentAttributeKey", "is_static": false, "var_name": "excludedElements"}, {"var_description": "An NSString object containing the name, IANA or otherwise, of a text encoding to be used; mutually exclusive with characterEncoding.", "var_type": "NSAttributedString.DocumentAttributeKey", "is_static": false, "var_name": "textEncodingName"}, {"var_description": "An NSNumber object containing an integer (default 0) representing the number of spaces per level by which to indent certain nested HTML elements.", "var_type": "NSAttributedString.DocumentAttributeKey", "is_static": false, "var_name": "prefixSpaces"}, {"var_description": "Returns whether the attribute string contains any attachment attributes.DeprecatedUse containsAttachments(in:) instead.", "var_type": "Bool", "is_static": false, "var_name": "containsAttachments"}], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSItemProviderReading", "NSItemProviderWriting", "NSMutableCopying", "NSPasteboardReading", "NSPasteboardWriting", "NSSecureCoding"], "package_name": "foundation", "subclass_list": []}