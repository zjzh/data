{"class_description": "", "Methods": [{"method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "params": [{"param_type": "inout Hasher", "param_description": "The hasher to use when combining the components of this instance.", "param_name": ["into", "hasher"]}], "class_name": "Set.Index", "method_declar": "func hash(into hasher: inout Hasher)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "params": [{"param_type": "Set<Element>.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Set<Element>.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Set.Index", "method_declar": "static func != (lhs: Set<Element>.Index, rhs: Set<Element>.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "params": [{"param_type": "Set<Element>.Index", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}], "class_name": "Set.Index", "method_declar": "postfix static func ... (minimum: Set<Element>.Index) -> PartialRangeFrom<Set<Element>.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<Set<Element>.Index"]}, "is_static": true}, {"method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "params": [{"param_type": "Set<Element>.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Set.Index", "method_declar": "prefix static func ... (maximum: Set<Element>.Index) -> PartialRangeThrough<Set<Element>.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<Set<Element>.Index"]}, "is_static": true}, {"method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "params": [{"param_type": "Set<Element>.Index", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "Set<Element>.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Set.Index", "method_declar": "static func ... (minimum: Set<Element>.Index, maximum: Set<Element>.Index) -> ClosedRange<Set<Element>.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Set<Element>.Index"]}, "is_static": true}, {"method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "params": [{"param_type": "Set<Element>.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Set.Index", "method_declar": "prefix static func ..< (maximum: Set<Element>.Index) -> PartialRangeUpTo<Set<Element>.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<Set<Element>.Index"]}, "is_static": true}, {"method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "params": [{"param_type": "Set<Element>.Index", "param_description": "The lower bound for the range.", "param_name": ["minimum"]}, {"param_type": "Set<Element>.Index", "param_description": "The upper bound for the range.", "param_name": ["maximum"]}], "class_name": "Set.Index", "method_declar": "static func ..< (minimum: Set<Element>.Index, maximum: Set<Element>.Index) -> Range<Set<Element>.Index>", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Set<Element>.Index"]}, "is_static": true}, {"method_description": "", "method_name": "func", "params": [{"param_type": "Set<Element>.Index", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Set<Element>.Index", "param_description": "", "param_name": ["rhs"]}], "class_name": "Set.Index", "method_declar": "static func < (lhs: Set<Element>.Index, rhs: Set<Element>.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "func", "params": [{"param_type": "Set<Element>.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Set<Element>.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Set.Index", "method_declar": "static func <= (lhs: Set<Element>.Index, rhs: Set<Element>.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "", "method_name": "==", "params": [{"param_type": "Set<Element>.Index", "param_description": "", "param_name": ["lhs"]}, {"param_type": "Set<Element>.Index", "param_description": "", "param_name": ["rhs"]}], "class_name": "Set.Index", "method_declar": "static func == (lhs: Set<Element>.Index, rhs: Set<Element>.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Set<Element>.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Set<Element>.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Set.Index", "method_declar": "static func > (lhs: Set<Element>.Index, rhs: Set<Element>.Index) -> Bool", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}, {"method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Set<Element>.Index", "param_description": "A value to compare.", "param_name": ["lhs"]}, {"param_type": "Set<Element>.Index", "param_description": "Another value to compare.", "param_name": ["rhs"]}], "class_name": "Set.Index", "method_declar": "static func >= (lhs: Set<Element>.Index, rhs: Set<Element>.Index) -> Bool", "return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": true}], "class_inherit_list": [], "class_name": "Set.Index", "typealias": [], "Vars": [], "class_type": "struct", "interface_list": [], "package_name": "foundation", "subclass_list": []}