{"package_name": "foundation", "subclass_list": [], "class_description": "Objects that allow the user to view or edit the content of files or directories should adopt the NSFilePresenter protocol. You use file presenters in conjunction with an NSFileCoordinator object to coordinate access to a file or directory among the objects of your application and between your application and other processes. When changes to an item occur, the system notifies objects that adopt this protocol and gives them a chance to respond appropriately. \nUse the methods of this protocol to respond to actions about to be taken on the presented file or directory. When another object or process uses a file coordinator to begin reading or writing a file or directory, the file coordinator notifies all presented objects interested in the item first. It notifies the presenter objects by invoking one of the methods defined by this protocol on that object. The actual invocation of that method occurs on the operation queue in the presentedItemOperationQueue property. Your file presenter must provide this queue. If your queue supports the concurrent execution of operations, the methods of your presenter object must be thread-safe and able to run in multiple queues simultaneously.\nYou can use file presenters to coordinate access to a file or directory among your application\u2019s objects. If another process uses a file coordinator for the same file or directory, your presenter objects are similarly notified whenever the other process makes its changes. Your presenter objects are not notified about changes made directly using low-level read and write calls to the file. Only changes that go through a file coordinator result in notifications.\nFor information about how to use file presenters with a file coordinator object, see NSFileCoordinator. \nIf your app enters the background with an active file presenter, any other processes that perform a coordinated read or write on the presented file can deadlock. To prevent this situation, call the coordinator's removeFilePresenter(_:) type method to remove the file presenter in the applicationDidEnterBackground(_:) method or in response to a didEnterBackgroundNotification notification. Call addFilePresenter(_:) to add the file presenter again in the applicationWillEnterForeground(_:) method or in response to a willEnterForegroundNotification notification.\nNote\nThe UIDocument class automatically removes itself when your app goes to the background. It automatically adds itself again when your app returns to the foreground.\n", "class_type": "protocol", "typealias": [], "interface_list": [], "class_inherit_list": ["NSObjectProtocol"], "Methods": [{"params": [{"param_name": ["toReader", "reader"], "param_type": "@escaping ((() -> Void)) -> Void", "param_description": "A Block object that takes another block as a parameter and returns no value. The reacquirer block is one you pass to the reader block so that your object can be notified when the reader is done. If your object does not need to be notified, it can pass nil for the reacquirer block."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "relinquishPresentedItem", "method_description": "Notifies your object that another object or process wants to read the presented file or directory. ", "method_declar": "optional func relinquishPresentedItem(toReader reader: @escaping ((() -> Void)?) -> Void)"}, {"params": [{"param_name": ["toWriter", "writer"], "param_type": "@escaping ((() -> Void)) -> Void", "param_description": "A Block object that takes another block as a parameter and returns no value. The reacquirer block is one you pass to the writer block so that your object can be notified when the writer is done. If your object does not need to be notified, it can pass nil for the reacquirer block."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "relinquishPresentedItem", "method_description": "Notifies your object that another object or process wants to write to the presented file or directory.", "method_declar": "optional func relinquishPresentedItem(toWriter writer: @escaping ((() -> Void)?) -> Void)"}, {"params": [{"param_name": ["completionHandler"], "param_type": "@escaping (Error) -> Void", "param_description": "The Block object to call after you save your changes. If you saved your changes successfully, pass nil for the block\u2019s errorOrNil parameter; otherwise, pass an error object indicating why the changes could not be saved."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "savePresentedItemChanges", "method_description": "Tells your object to save any unsaved changes for the presented item.", "method_declar": "optional func savePresentedItemChanges(completionHandler: @escaping (Error?) -> Void)"}, {"params": [{"param_name": ["completionHandler"], "param_type": "@escaping (Error) -> Void", "param_description": "The Block object to call after updating your data structures. Pass nil to the block\u2019s errorOrNil parameter if you were able to successfully prepare for the deletion of the item. Pass an error object if your object could not prepare itself properly."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "accommodatePresentedItemDeletion", "method_description": "Tells your object that its presented item is about to be deleted.", "method_declar": "optional func accommodatePresentedItemDeletion(completionHandler: @escaping (Error?) -> Void)"}, {"params": [{"param_name": ["to", "newURL"], "param_type": "URL", "param_description": "The URL containing the new path to the presented item."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedItemDidMove", "method_description": "Tells your object that the presented item moved or was renamed.", "method_declar": "optional func presentedItemDidMove(to newURL: URL)"}, {"params": [], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedItemDidChange", "method_description": "Tells your object that the presented item\u2019s contents or attributes changed.", "method_declar": "optional func presentedItemDidChange()"}, {"params": [{"param_name": ["version"], "param_type": "NSFileVersion", "param_description": "The file version object containing information about the new file version."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedItemDidGain", "method_description": "Tells the delegate that a new version of the file or file package was added. ", "method_declar": "optional func presentedItemDidGain(_ version: NSFileVersion)"}, {"params": [{"param_name": ["version"], "param_type": "NSFileVersion", "param_description": "The file version object containing information about the version that was removed."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedItemDidLose", "method_description": "Tells the delegate that a version of the file or file package was removed.", "method_declar": "optional func presentedItemDidLose(_ version: NSFileVersion)"}, {"params": [{"param_name": ["version"], "param_type": "NSFileVersion", "param_description": "The version object containing the conflicting change."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedItemDidResolveConflict", "method_description": "Tells the delegate that some other entity resolved a version conflict for the presenter\u2019s file or file package. ", "method_declar": "optional func presentedItemDidResolveConflict(_ version: NSFileVersion)"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the item inside the presented directory that gained a new version. The item need not be at the top level of the presented directory but may itself be inside a nested subdirectory.  "}, {"param_name": ["didGain", "version"], "param_type": "NSFileVersion", "param_description": "The file version object containing information about the new file version."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedSubitem", "method_description": "Tells the delegate that the item inside the presented directory gained a new version.", "method_declar": "optional func presentedSubitem(at url: URL, didGain version: NSFileVersion)"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the item inside the presented directory that lost a version. The item need not be at the top level of the presented directory but may itself be inside a nested subdirectory.  "}, {"param_name": ["didLose", "version"], "param_type": "NSFileVersion", "param_description": "The file version object containing information about the version that was removed."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedSubitem", "method_description": "Tells the delegate that the item inside the presented directory lost an existing version.", "method_declar": "optional func presentedSubitem(at url: URL, didLose version: NSFileVersion)"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the item inside the presented directory that was in conflict. The item need not be at the top level of the presented directory but may itself be inside a nested subdirectory.  "}, {"param_name": ["didResolve", "version"], "param_type": "NSFileVersion", "param_description": "The version object containing the conflicting change."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedSubitem", "method_description": "Tells the delegate that the item inside the presented directory had a version conflict resolved by an outside entity.", "method_declar": "optional func presentedSubitem(at url: URL, didResolve version: NSFileVersion)"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the item being deleted from the presented directory. The item need not be at the top level of the presented directory but may itself be inside a nested subdirectory.  "}, {"param_name": ["completionHandler"], "param_type": "@escaping (Error) -> Void", "param_description": "The Block object to call after updating your data structures. Pass nil to the block\u2019s errorOrNil parameter if you were able to successfully prepare for the deletion of the item. Pass an error object if your object could not prepare itself properly."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [""], "return_description": [], "return_type": ["Void"]}, "method_name": "accommodatePresentedSubitemDeletion", "method_description": "Tells the delegate that some entity wants to delete an item that is inside of a presented directory. ", "method_declar": "optional func accommodatePresentedSubitemDeletion(at url: URL, completionHandler: @escaping (Error?) -> Void)"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the item being added to the presented directory. The item need not be at the top level of the presented directory but may itself be inside a nested subdirectory."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedSubitemDidAppear", "method_description": "Tells the delegate that an item was added to the presented directory.", "method_declar": "optional func presentedSubitemDidAppear(at url: URL)"}, {"params": [{"param_name": ["at", "oldURL"], "param_type": "URL", "param_description": "The original URL of the item inside the presented directory. The item need not be at the top level of the presented directory but may itself be inside a nested subdirectory."}, {"param_name": ["didMoveTo", "newURL"], "param_type": "URL", "param_description": "The new URL for the item. This URL may or may not be located inside the presented directory."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedSubitem", "method_description": "Tells the delegate that an item in the presented directory moved to a new location.", "method_declar": "optional func presentedSubitem(at oldURL: URL, didMoveTo newURL: URL)"}, {"params": [{"param_name": ["at", "url"], "param_type": "URL", "param_description": "The URL of the item in the presented directory that changed. The item need not be at the top level of the presented directory but may itself be inside a nested subdirectory."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedSubitemDidChange", "method_description": "Tells the delegate that the contents or attributes of the specified item changed.", "method_declar": "optional func presentedSubitemDidChange(at url: URL)"}, {"params": [{"param_name": ["attributes"], "param_type": "Set<URLResourceKey>", "param_description": "The set of ubiquity attributes that have changed. For information about valid ubiquity attributes, see the observedPresentedItemUbiquityAttributes property."}], "class_name": "NSFilePresenter", "is_static": false, "return_value": {"return_name": [], "return_description": [], "return_type": []}, "method_name": "presentedItemDidChangeUbiquityAttributes", "method_description": "Tells your object that the file or file package's ubiquity attributes have changed.", "method_declar": "optional func presentedItemDidChangeUbiquityAttributes(_ attributes: Set<URLResourceKey>)"}], "class_name": "NSFilePresenter", "Vars": [{"var_description": "The URL of the presented file or directory.Required.", "var_type": "URL", "is_static": false, "var_name": "presentedItemURL"}, {"var_description": "The operation queue in which to execute presenter-related messages. Required.", "var_type": "OperationQueue", "is_static": false, "var_name": "presentedItemOperationQueue"}, {"var_description": "The URL of a secondary item\u2019s primary presented file or directory.", "var_type": "URL", "is_static": false, "var_name": "primaryPresentedItemURL"}, {"var_description": "A list of ubiquity attributes used to generate and send notifications whenever an attribute in the list changes.", "var_type": "Set<URLResourceKey>", "is_static": false, "var_name": "observedPresentedItemUbiquityAttributes"}]}