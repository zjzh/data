{"class_description": "You typically use a locale to format and interpret information about and according to the user\u2019s customs and preferences.\nYou can initialize any number of locale instances with init(localeIdentifier:) using one of the locale identifiers found in the availableLocaleIdentifiers array. However, you usually use a locale configured to match the preferences of the current user. \nUse the current property to get the locale matching the current user's preferences. If you need to be alerted when the user does make changes to region settings, register for the currentLocaleDidChangeNotification notification. Alternatively, you can use the autoupdatingCurrent property to get a locale that automatically updates with the user's configuration settings:\nYou can inspect a locale by reading its properties, as listed in Getting Information About a Locale. For properties containing a code or identifier, you can then obtain a string suitable for presentation to the user with the methods listed in Getting Display Information About a Locale. For example, you can report the user's language as a string localized in that language using the autoupdating locale obtained in the previous example:\nYou frequently use a locale in conjunction with a formatter. For example, the DateFormatter class has a locale property that ensures dates are converted to strings that match the user's expectations about date formatting. By default, this property indicates the user's current locale, which is usually the behavior you want, but you can instead set it to another locale instance to obtain a different output. See Data Formatting Guide for more information about working with formatters.\nNSLocale is toll-free bridged with its Core Foundation counterpart, CFLocale. See Toll-Free Bridging for more information on toll-free bridging.\nImportant\nThe Swift overlay to the Foundation framework provides the Locale structure, which bridges to the NSLocale class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "Methods": [], "class_inherit_list": ["NSObject"], "class_name": "NSLocale", "typealias": [], "Vars": [], "class_type": "class", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "package_name": "foundation", "subclass_list": []}