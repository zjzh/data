{"class_description": "The NSMutableString class declares the programmatic interface to an object that manages a mutable string\u2014that is, a string whose contents can be edited\u2014that conceptually represents an array of Unicode characters. To construct and manage an immutable string\u2014or a string that cannot be changed after it has been created\u2014use an object of the NSString class.\nThe NSMutableString class adds one primitive method\u2014replaceCharacters(in:with:)\u2014to the basic string-handling behavior inherited from NSString. All other methods that modify a string work through this method. For example, insert(_:at:) simply replaces the characters in a range of 0 length, while deleteCharacters(in:) replaces the characters in a given range with no characters.\nNSMutableString is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFMutableString. See Toll-Free Bridging for more information.\n", "Methods": [{"method_description": "Returns an NSMutableString object initialized with initial storage for a given number of characters,", "method_name": "init", "params": [{"param_type": "Int", "param_description": "The number of characters the string is expected to initially contain.", "param_name": ["capacity"]}], "class_name": "NSMutableString", "method_declar": "init(capacity: Int)", "return_value": {"return_description": ["An initialized NSMutableString object with initial storage for capacity characters. The returned object might be different than the original receiver."], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Adds to the end of the receiver the characters of a given string.", "method_name": "append", "params": [{"param_type": "String", "param_description": "The string to append to the receiver. aString must not be nil", "param_name": ["aString"]}], "class_name": "NSMutableString", "method_declar": "func append(_ aString: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Transliterates the receiver by applying a specified ICU string transform.", "method_name": "applyTransform", "params": [{"param_type": "StringTransform", "param_description": "The transformation to apply. For a list of possible values, see String Transformations. If the specified transform does not exist, the receiver is not modified, and this method returns false.", "param_name": ["transform"]}, {"param_type": "Bool", "param_description": "Whether an inverse transform should be used. If the specified transform does not have an inverse, the receiver is not modified, and this method returns false.", "param_name": ["reverse"]}, {"param_type": "NSRange", "param_description": "The range of the string to transform. range must not exceed the bounds of the receiver.ImportantRaises an NSRangeException if any part of aRange lies beyond the end of the string. ", "param_name": ["range"]}, {"param_type": "NSRangePointer", "param_description": "If the transform was successfully applied, upon return contains the range of the transformed string.", "param_name": ["updatedRange", "resultingRange"]}], "class_name": "NSMutableString", "method_declar": "func applyTransform(_ transform: StringTransform, reverse: Bool, range: NSRange, updatedRange resultingRange: NSRangePointer?) -> Bool", "return_value": {"return_description": ["true if the transform was successfully applied. Otherwise, false."], "return_name": [""], "return_type": ["Boo"]}, "is_static": false}, {"method_description": "Removes from the receiver the characters in a given range.", "method_name": "deleteCharacters", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["in", "range"]}], "class_name": "NSMutableString", "method_declar": "func deleteCharacters(in range: NSRange)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Inserts into the receiver the characters of a given string at a given location.", "method_name": "insert", "params": [{"param_type": "String", "param_description": "The string to insert into the receiver. aString must not be nil.", "param_name": ["aString"]}, {"param_type": "Int", "param_description": "", "param_name": ["at", "loc"]}], "class_name": "NSMutableString", "method_declar": "func insert(_ aString: String, at loc: Int)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces the characters from aRange with those in aString.", "method_name": "replaceCharacters", "params": [{"param_type": "NSRange", "param_description": "", "param_name": ["in", "range"]}, {"param_type": "String", "param_description": "The string with which to replace the characters in aRange. aString must not be nil.", "param_name": ["with", "aString"]}], "class_name": "NSMutableString", "method_declar": "func replaceCharacters(in range: NSRange, with aString: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "Replaces all occurrences of a given string in a given range with another given string, returning the number of replacements.", "method_name": "replaceOccurrences", "params": [{"param_type": "String", "param_description": "The string to replace.ImportantRaises an NSInvalidArgumentException if target is nil. ", "param_name": ["of", "target"]}, {"param_type": "String", "param_description": "The string with which to replace target.ImportantRaises an NSInvalidArgumentException if replacement is nil. ", "param_name": ["with", "replacement"]}, {"param_type": "NSString.CompareOptions", "param_description": "", "param_name": ["options"]}, {"param_type": "NSRange", "param_description": "The range of characters to replace. aRange must not exceed the bounds of the receiver. Specify searchRange as NSMakeRange(0, [receiver length]) to process the entire string.ImportantRaises an NSRangeException if any part of searchRange lies beyond the end of the receiver. ", "param_name": ["range", "searchRange"]}], "class_name": "NSMutableString", "method_declar": "func replaceOccurrences(of target: String, with replacement: String, options: NSString.CompareOptions = [], range searchRange: NSRange) -> Int", "return_value": {"return_description": ["The number of replacements made."], "return_name": [""], "return_type": ["In"]}, "is_static": false}, {"method_description": "Replaces the characters of the receiver with those in a given string.", "method_name": "setString", "params": [{"param_type": "String", "param_description": "The string with which to replace the receiver's content. aString must not be nil.", "param_name": ["aString"]}], "class_name": "NSMutableString", "method_declar": "func setString(_ aString: String)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}, {"method_description": "", "method_name": "appendFormat", "params": [{"param_type": "NSString", "param_description": "", "param_name": ["format"]}, {"param_type": "CVarArg...", "param_description": "", "param_name": ["args"]}], "class_name": "NSMutableString", "method_declar": "func appendFormat(_ format: NSString, _ args: CVarArg...)", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "is_static": false}], "class_inherit_list": ["NSString"], "class_name": "NSMutableString", "typealias": [], "Vars": [{"var_description": "A constant containing the transliteration of a string from Latin script to Katakana script.", "var_type": "StringTransform", "is_static": false, "var_name": "latinToKatakana"}, {"var_description": "A constant containing the transliteration of a string from Latin script to Hiragana script.", "var_type": "StringTransform", "is_static": false, "var_name": "latinToHiragana"}, {"var_description": "A constant containing the transliteration of a string from Latin script to Hangul script.", "var_type": "StringTransform", "is_static": false, "var_name": "latinToHangul"}, {"var_description": "A constant containing the transliteration of a string from Latin script to Arabic script.", "var_type": "StringTransform", "is_static": false, "var_name": "latinToArabic"}, {"var_description": "A constant containing the transliteration of a string from Latin script to Hebrew script.", "var_type": "StringTransform", "is_static": false, "var_name": "latinToHebrew"}, {"var_description": "A constant containing the transliteration of a string from Latin script to Thai script.", "var_type": "StringTransform", "is_static": false, "var_name": "latinToThai"}, {"var_description": "A constant containing the transliteration of a string from Latin script to Cyrillic script.", "var_type": "StringTransform", "is_static": false, "var_name": "latinToCyrillic"}, {"var_description": "A constant containing the transliteration of a string from any script to Latin script.", "var_type": "StringTransform", "is_static": false, "var_name": "toLatin"}, {"var_description": "A constant containing the transliteration of a string from Han script to Latin.", "var_type": "StringTransform", "is_static": false, "var_name": "mandarinToLatin"}, {"var_description": "A constant containing the transliteration of a string from Hiragana script to Katakana script.", "var_type": "StringTransform", "is_static": false, "var_name": "hiraganaToKatakana"}, {"var_description": "A constant containing the transformation of a string from full-width CJK characters to half-width forms.", "var_type": "StringTransform", "is_static": false, "var_name": "fullwidthToHalfwidth"}, {"var_description": "A constant containing the transformation of a string from characters to XML hexadecimal escape codes.", "var_type": "StringTransform", "is_static": false, "var_name": "toXMLHex"}, {"var_description": "An identifier for a transform that converts characters to Unicode names.", "var_type": "StringTransform", "is_static": false, "var_name": "toUnicodeName"}, {"var_description": "A constant containing the transformation of a string by removing combining marks.", "var_type": "StringTransform", "is_static": false, "var_name": "stripCombiningMarks"}, {"var_description": "A constant containing the transformation of a string by removing diacritics.", "var_type": "StringTransform", "is_static": false, "var_name": "stripDiacritics"}], "class_type": "class", "interface_list": ["CustomPlaygroundQuickLookable", "CVarArg", "Equatable", "ExpressibleByStringLiteral", "Hashable", "NSItemProviderReading", "NSItemProviderWriting"], "package_name": "foundation", "subclass_list": []}